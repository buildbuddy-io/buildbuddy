diff --git a/instrumentation/google.golang.org/grpc/otelgrpc/grpctrace.go b/instrumentation/google.golang.org/grpc/otelgrpc/grpctrace.go
index 3575298..193c30a 100644
--- a/instrumentation/google.golang.org/grpc/otelgrpc/grpctrace.go
+++ b/instrumentation/google.golang.org/grpc/otelgrpc/grpctrace.go
@@ -33,10 +33,13 @@ const (
 	GRPCStatusCodeKey = attribute.Key("rpc.grpc.status_code")
 )
 
+type ContextAttrExtractor func(ctx context.Context) []attribute.KeyValue
+
 // config is a group of options for this instrumentation.
 type config struct {
 	Propagators    propagation.TextMapPropagator
 	TracerProvider trace.TracerProvider
+	contextAttrExtractor ContextAttrExtractor
 }
 
 // Option applies an option value for a config.
@@ -80,6 +83,16 @@ func WithTracerProvider(tp trace.TracerProvider) Option {
 	return tracerProviderOption{tp: tp}
 }
 
+type contextAttrExtractorOption struct{ e ContextAttrExtractor }
+
+func (o contextAttrExtractorOption) Apply(c *config) {
+	c.contextAttrExtractor = o.e
+}
+
+func WithContextAttrExtractor(e ContextAttrExtractor) Option {
+	return contextAttrExtractorOption{e: e}
+}
+
 type metadataSupplier struct {
 	metadata *metadata.MD
 }
diff --git a/instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go b/instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go
index 2117497..ef6ba02 100644
--- a/instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go
+++ b/instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go
@@ -304,6 +304,16 @@ func StreamClientInterceptor(opts ...Option) grpc.StreamClientInterceptor {
 	}
 }
 
+func invokeContextAttributeExtractor(ctx context.Context, config *config, attr []attribute.KeyValue) []attribute.KeyValue {
+	if config.contextAttrExtractor == nil {
+		return attr
+	}
+	for _, a := range config.contextAttrExtractor(ctx) {
+		attr = append(attr, a)
+	}
+	return attr
+}
+
 // UnaryServerInterceptor returns a grpc.UnaryServerInterceptor suitable
 // for use in a grpc.NewServer call.
 func UnaryServerInterceptor(opts ...Option) grpc.UnaryServerInterceptor {
@@ -319,12 +329,14 @@ func UnaryServerInterceptor(opts ...Option) grpc.UnaryServerInterceptor {
 		bags, spanCtx := Extract(ctx, &metadataCopy, opts...)
 		ctx = baggage.ContextWithBaggage(ctx, bags)
 
-		tracer := newConfig(opts).TracerProvider.Tracer(
+		cnf := newConfig(opts)
+		tracer := cnf.TracerProvider.Tracer(
 			instrumentationName,
 			trace.WithInstrumentationVersion(otelcontrib.SemVersion()),
 		)
 
 		name, attr := spanInfo(info.FullMethod, peerFromCtx(ctx))
+		attr = invokeContextAttributeExtractor(ctx, cnf, attr)
 		ctx, span := tracer.Start(
 			trace.ContextWithRemoteSpanContext(ctx, spanCtx),
 			name,
@@ -408,12 +420,14 @@ func StreamServerInterceptor(opts ...Option) grpc.StreamServerInterceptor {
 		bags, spanCtx := Extract(ctx, &metadataCopy, opts...)
 		ctx = baggage.ContextWithBaggage(ctx, bags)
 
-		tracer := newConfig(opts).TracerProvider.Tracer(
+		cnf := newConfig(opts)
+		tracer := cnf.TracerProvider.Tracer(
 			instrumentationName,
 			trace.WithInstrumentationVersion(otelcontrib.SemVersion()),
 		)
 
 		name, attr := spanInfo(info.FullMethod, peerFromCtx(ctx))
+		attr = invokeContextAttributeExtractor(ctx, cnf, attr)
 		ctx, span := tracer.Start(
 			trace.ContextWithRemoteSpanContext(ctx, spanCtx),
 			name,
