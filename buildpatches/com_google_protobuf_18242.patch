diff src/google/protobuf/compiler/java/full/enum.cc src/google/protobuf/compiler/java/full/enum.cc
--- src/google/protobuf/compiler/java/full/enum.cc
+++ src/google/protobuf/compiler/java/full/enum.cc
@@ -29,6 +29,8 @@
 // Must be last.
 #include "google/protobuf/port_def.inc"
 
+using std::size_t;
+
 namespace google {
 namespace protobuf {
 namespace compiler {
@@ -74,15 +76,15 @@ void EnumNonLiteGenerator::Generate(io::Printer* printer) {
 
   bool ordinal_is_index = true;
   std::string index_text = "ordinal()";
-  for (int i = 0; i < canonical_values_.size(); i++) {
-    if (canonical_values_[i]->index() != i) {
+  for (size_t i = 0; i < canonical_values_.size(); i++) {
+    if (static_cast<size_t>(canonical_values_[i]->index()) != i) {
       ordinal_is_index = false;
       index_text = "index";
       break;
     }
   }
 
-  for (int i = 0; i < canonical_values_.size(); i++) {
+  for (size_t i = 0; i < canonical_values_.size(); i++) {
     absl::flat_hash_map<absl::string_view, std::string> vars;
     vars["name"] = canonical_values_[i]->name();
     vars["index"] = absl::StrCat(canonical_values_[i]->index());
@@ -122,7 +124,7 @@ void EnumNonLiteGenerator::Generate(io::Printer* printer) {
   printer->Outdent();
   printer->Print("}\n");
 
-  for (int i = 0; i < aliases_.size(); i++) {
+  for (size_t i = 0; i < aliases_.size(); i++) {
     absl::flat_hash_map<absl::string_view, std::string> vars;
     vars["classname"] = descriptor_->name();
     vars["name"] = aliases_[i].value->name();
@@ -206,7 +208,7 @@ void EnumNonLiteGenerator::Generate(io::Printer* printer) {
   printer->Indent();
   printer->Indent();
 
-  for (int i = 0; i < canonical_values_.size(); i++) {
+  for (size_t i = 0; i < canonical_values_.size(); i++) {
     printer->Print("case $number$: return $name$;\n", "name",
                    canonical_values_[i]->name(), "number",
                    absl::StrCat(canonical_values_[i]->number()));
@@ -387,7 +389,7 @@ void EnumNonLiteGenerator::Generate(io::Printer* printer) {

 
 bool EnumNonLiteGenerator::CanUseEnumValues() {
-  if (canonical_values_.size() != descriptor_->value_count()) {
+  if (canonical_values_.size() != static_cast<size_t>(descriptor_->value_count())) {
     return false;
   }
   for (int i = 0; i < descriptor_->value_count(); i++) {
diff src/google/protobuf/compiler/java/full/message.cc src/google/protobuf/compiler/java/full/message.cc
--- src/google/protobuf/compiler/java/full/message.cc
+++ src/google/protobuf/compiler/java/full/message.cc
@@ -43,6 +43,8 @@
 // Must be last.
 #include "google/protobuf/port_def.inc"
 
+using std::size_t;
+
 namespace google {
 namespace protobuf {
 namespace compiler {
@@ -804,7 +806,7 @@ void ImmutableMessageGenerator::GenerateDescriptorMethods(
         "  switch (number) {\n");
     printer->Indent();
     printer->Indent();
-    for (int i = 0; i < map_fields.size(); ++i) {
+    for (size_t i = 0; i < map_fields.size(); ++i) {
       const FieldDescriptor* field = map_fields[i];
       const FieldGeneratorInfo* info = context_->GetFieldGeneratorInfo(field);
       printer->Print(
diff src/google/protobuf/compiler/java/full/message_builder.cc src/google/protobuf/compiler/java/full/message_builder.cc
--- src/google/protobuf/compiler/java/full/message_builder.cc
+++ src/google/protobuf/compiler/java/full/message_builder.cc
@@ -39,6 +39,8 @@
 // Must be last.
 #include "google/protobuf/port_def.inc"
 
+using std::size_t;
+
 namespace google {
 namespace protobuf {
 namespace compiler {
@@ -211,7 +213,7 @@ void MessageBuilderGenerator::GenerateDescriptorMethods(io::Printer* printer) {
         "  switch (number) {\n");
     printer->Indent();
     printer->Indent();
-    for (int i = 0; i < map_fields.size(); ++i) {
+    for (size_t i = 0; i < map_fields.size(); ++i) {
       const FieldDescriptor* field = map_fields[i];
       const FieldGeneratorInfo* info = context_->GetFieldGeneratorInfo(field);
       printer->Print(
@@ -237,7 +239,7 @@ void MessageBuilderGenerator::GenerateDescriptorMethods(io::Printer* printer) {
         "  switch (number) {\n");
     printer->Indent();
     printer->Indent();
-    for (int i = 0; i < map_fields.size(); ++i) {
+    for (size_t i = 0; i < map_fields.size(); ++i) {
       const FieldDescriptor* field = map_fields[i];
       const FieldGeneratorInfo* info = context_->GetFieldGeneratorInfo(field);
       printer->Print(
diff src/google/protobuf/compiler/java/lite/enum.cc src/google/protobuf/compiler/java/lite/enum.cc
--- src/google/protobuf/compiler/java/lite/enum.cc
+++ src/google/protobuf/compiler/java/lite/enum.cc
@@ -25,6 +25,8 @@
 #include "google/protobuf/descriptor.pb.h"
 #include "google/protobuf/io/printer.h"
 
+using std::size_t;
+
 namespace google {
 namespace protobuf {
 namespace compiler {
@@ -67,7 +69,7 @@ void EnumLiteGenerator::Generate(io::Printer* printer) {
   printer->Annotate("classname", descriptor_);
   printer->Indent();
 
-  for (int i = 0; i < canonical_values_.size(); i++) {
+  for (size_t i = 0; i < canonical_values_.size(); i++) {
     absl::flat_hash_map<absl::string_view, std::string> vars;
     vars["name"] = canonical_values_[i]->name();
     vars["number"] = absl::StrCat(canonical_values_[i]->number());
@@ -91,7 +93,7 @@ void EnumLiteGenerator::Generate(io::Printer* printer) {
 
   // -----------------------------------------------------------------
 
-  for (int i = 0; i < aliases_.size(); i++) {
+  for (size_t i = 0; i < aliases_.size(); i++) {
     absl::flat_hash_map<absl::string_view, std::string> vars;
     vars["classname"] = descriptor_->name();
     vars["name"] = aliases_[i].value->name();
@@ -162,7 +164,7 @@ void EnumLiteGenerator::Generate(io::Printer* printer) {
   printer->Indent();
   printer->Indent();
 
-  for (int i = 0; i < canonical_values_.size(); i++) {
+  for (size_t i = 0; i < canonical_values_.size(); i++) {
     printer->Print("case $number$: return $name$;\n", "name",
                    canonical_values_[i]->name(), "number",
                    absl::StrCat(canonical_values_[i]->number()));
diff src/google/protobuf/compiler/rust/relative_path.cc src/google/protobuf/compiler/rust/relative_path.cc
--- src/google/protobuf/compiler/rust/relative_path.cc
+++ src/google/protobuf/compiler/rust/relative_path.cc
@@ -16,6 +16,8 @@
 #include "absl/strings/str_split.h"
 #include "absl/strings/string_view.h"
 
+using std::size_t;
+
 namespace google {
 namespace protobuf {
 namespace compiler {
@@ -62,7 +64,7 @@ std::string RelativePath::Relative(const RelativePath& dest) const {
     result.push_back(segment);
   }
   // Push `..` from the common ancestor to the current path.
-  for (int i = 0; i < current_segments.size(); ++i) {
+  for (size_t i = 0; i < current_segments.size(); ++i) {
     result.push_back("..");
   }
   absl::c_reverse(result);
diff src/google/protobuf/descriptor.h src/google/protobuf/descriptor.h
--- src/google/protobuf/descriptor.h
+++ src/google/protobuf/descriptor.h
@@ -32,6 +32,7 @@
 #define GOOGLE_PROTOBUF_DESCRIPTOR_H__
 
 #include <atomic>
+#include <cstddef>
 #include <cstdint>
 #include <iterator>
 #include <memory>
@@ -65,6 +66,7 @@
 #define PROTOBUF_IGNORE_DEPRECATION_STOP
 #endif
 
+using std::size_t;
 
 namespace google {
 namespace protobuf {
diff src/google/protobuf/io/printer.h src/google/protobuf/io/printer.h
--- src/google/protobuf/io/printer.h
+++ src/google/protobuf/io/printer.h
@@ -39,6 +39,8 @@
 // Must be included last.
 #include "google/protobuf/port_def.inc"
 
+using std::size_t;
+
 namespace google {
 namespace protobuf {
 namespace io {
@@ -124,7 +126,7 @@ class AnnotationProtoCollector : public AnnotationCollector {
                      const std::string& file_path, const std::vector<int>& path,
                      absl::optional<Semantic> semantic) override {
     auto* annotation = annotation_proto_->add_annotation();
-    for (int i = 0; i < path.size(); ++i) {
+    for (size_t i = 0; i < path.size(); ++i) {
       annotation->add_path(path[i]);
     }
     annotation->set_source_file(file_path);
diff upb/io/string.h upb/io/string.h
--- upb/io/string.h
+++ upb/io/string.h
@@ -102,7 +102,7 @@ UPB_INLINE bool upb_String_AppendFmtV(upb_String* s, const char* fmt,
   char* buf = (char*)malloc(capacity);
   bool out = false;
   for (;;) {
-    const int n = _upb_vsnprintf(buf, capacity, fmt, args);
+    const size_t n = _upb_vsnprintf(buf, capacity, fmt, args);
     if (n < 0) break;
     if (n < capacity) {
       out = upb_String_Append(s, buf, n);
diff upb_generator/file_layout.cc upb_generator/file_layout.cc
--- upb_generator/file_layout.cc
+++ upb_generator/file_layout.cc
@@ -14,6 +14,8 @@
 #include "upb/reflection/def.hpp"
 #include "upb_generator/common.h"
 
+using std::size_t;
+
 namespace upb {
 namespace generator {
 
@@ -58,7 +60,7 @@ std::vector<upb::EnumDefPtr> SortedEnums(upb::FileDefPtr file,
 std::vector<uint32_t> SortedUniqueEnumNumbers(upb::EnumDefPtr e) {
   std::vector<uint32_t> values;
   values.reserve(e.value_count());
-  for (int i = 0; i < e.value_count(); i++) {
+  for (size_t i = 0; i < e.value_count(); i++) {
     values.push_back(static_cast<uint32_t>(e.value(i).number()));
   }
   std::sort(values.begin(), values.end());
