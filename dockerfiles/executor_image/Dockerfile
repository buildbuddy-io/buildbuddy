# NOTE: this is a multi-platform image, so each step needs to work on both amd64 and arm64.
# See README for details.

# debian 12
FROM debian@sha256:fac2c0fd33e88dfd3bc88a872cfb78dcb167e74af6162d31724df69e482f886c

RUN apt-get update && \
    apt-get install -y \
		# Install skopeo and umoci which we use to unpack OCI images when we're not using docker.
		# Install iproute2 ("ip" command) to configure networking on host.
    coreutils curl ca-certificates apt-transport-https \
    fuse skopeo umoci iproute2 amazon-ecr-credential-helper && \
    apt-get upgrade -y && \
    rm -rf /var/lib/apt/lists/* && apt-get clean

RUN ARCH=$(dpkg --print-architecture) && \
    SHASUM=$(case $ARCH in \
        amd64) echo '93dcc18adc78c65a028a84799ecf8ad40c936fdfc5f2a57b1acda5a8117fa82c' ;; \
        arm64) echo '07952557df20bfd2a95f9bef198b445e006171969499a1d361bd9e6f8e5e0e81' ;; \
    esac) && \
    curl -o /tini -fsSL "https://github.com/krallin/tini/releases/download/v0.19.0/tini-${ARCH}" && \
    echo "$SHASUM /tini" | sha256sum -c && \
    chmod +x /tini

RUN DOCKER_VERSION="5:26.1.4-1~debian.12~bookworm" && \
    CONTAINERD_DEB_VERSION="1.7.19-1" && \
    DOCKER_BUILDX_VERSION="0.15.1-1~debian.12~bookworm" && \
    install -m 0755 -d /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc && \
    chmod a+r /etc/apt/keyrings/docker.asc && \
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && apt-get install -y \
    docker-ce=${DOCKER_VERSION} \
    docker-ce-cli=${DOCKER_VERSION} \
    containerd.io=${CONTAINERD_DEB_VERSION} \
    docker-buildx-plugin=${DOCKER_BUILDX_VERSION} && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/* && apt-get clean && \
    rm \
    # keep these in sync with the binaries we are manually adding
    # rootlesskit
    /usr/bin/rootlesskit \
    /usr/bin/rootlesskit-docker-proxy \
    # runc
    /usr/bin/runc \
    # containerd
    /usr/bin/containerd \
    /usr/bin/containerd-shim \
    /usr/bin/containerd-shim-runc-v1 \
    /usr/bin/containerd-shim-runc-v2 \
    /usr/bin/ctr

# Configure docker credentials so we can pull marketplace.gcr.io images generated by rbe_autoconfig
RUN ARCH=$(dpkg --print-architecture) && \
    SHASUM=$(case $ARCH in \
        amd64) echo '443e897dc383d69e55e6dbcb13802f4ec88444848612e83f0381df2ddd721694' ;; \
        arm64) echo 'b607dfb7516dc1ca6a2a05322d938cea58cc5975e2063efc3695ee6ddb2dccc7' ;; \
    esac) && \
    curl -o "docker-credential-gcr.tar.gz" -fsSL "https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v2.1.22/docker-credential-gcr_linux_${ARCH}-2.1.22.tar.gz" && \
    echo "$SHASUM docker-credential-gcr.tar.gz" | sha256sum -c && \
    tar -xz -f docker-credential-gcr.tar.gz --to-stdout docker-credential-gcr > /usr/local/bin/docker-credential-gcr && \
    chmod +x /usr/local/bin/docker-credential-gcr && \
    rm docker-credential-gcr.tar.gz && \
    docker-credential-gcr configure-docker

RUN ARCH=$(case $(dpkg --print-architecture) in \
        amd64) echo 'x86_64' ;; \
        arm64) echo 'aarch64' ;; \
    esac) && \
    ROOTLESSKIT_VERSION="v2.1.0" && \
    SHASUM=$(case $ARCH in \
        x86_64) echo '1e4609a3d0ca67c4fc99fe9121870cf5ca46a438f43b151e9b54456d166f4b10' ;; \
        aarch64) echo 'b3a9b14b66f54351a2b9f8c0917062bfeab2dc89e9e7cb15f4cf0684a4a7281f' ;; \
    esac) && \
    curl -o "rootlesskit.tar.gz" -fsSL "https://github.com/rootless-containers/rootlesskit/releases/download/${ROOTLESSKIT_VERSION}/rootlesskit-${ARCH}.tar.gz" && \
    echo "$SHASUM rootlesskit.tar.gz" | sha256sum -c && \
    tar -xz -f rootlesskit.tar.gz --to-stdout rootlesskit > /usr/bin/rootlesskit && \
    tar -xz -f rootlesskit.tar.gz --to-stdout rootlesskit-docker-proxy > /usr/bin/rootlesskit-docker-proxy && \
    rm rootlesskit.tar.gz

RUN ARCH=$(dpkg --print-architecture) && \
    RUNC_VERSION="v1.2.0-rc.2" && \
    SHASUM=$(case $ARCH in \
        amd64) echo '7bf38e9bc6c7a3feb5ec92e5e333015ccd0f360cdd1810a5a13f5ab81731cd62' ;; \
        arm64) echo '3741f07946c54a23ee443de84506c6e397d0d350f1f16f81ae4dd2c7d39d2651' ;; \
    esac) && \
    curl -o "runc" -fsSL "https://github.com/opencontainers/runc/releases/download/${RUNC_VERSION}/runc.${ARCH}" && \
    echo "$SHASUM runc" | sha256sum -c && \
    mv runc /usr/bin/runc && \
    chmod +x /usr/bin/runc

RUN ARCH=$(dpkg --print-architecture) && \
    CONTAINERD_BIN_VERSION="1.7.19" && \
    SHASUM=$(case $ARCH in \
        amd64) echo '97f75e60f0ad19d335b1d23385835df721cad4492740d50576997f2717dc3f94' ;; \
        arm64) echo '1839e6f7cd7c62d9df3ef3deac3f404cdd5cd47bbdf8acfeb0b0f3776eb20002' ;; \
    esac) && \
    curl -o "containerd.tar.gz" -fsSL "https://github.com/containerd/containerd/releases/download/v${CONTAINERD_BIN_VERSION}/containerd-${CONTAINERD_BIN_VERSION}-linux-${ARCH}.tar.gz" && \
    echo "$SHASUM containerd.tar.gz" | sha256sum -c && \
    tar -xz -f containerd.tar.gz --to-stdout bin/containerd > /usr/bin/containerd && \
    tar -xz -f containerd.tar.gz --to-stdout bin/containerd-shim > /usr/bin/containerd-shim && \
    tar -xz -f containerd.tar.gz --to-stdout bin/containerd-shim-runc-v1 > /usr/bin/containerd-shim-runc-v1 && \
    tar -xz -f containerd.tar.gz --to-stdout bin/containerd-shim-runc-v2 > /usr/bin/containerd-shim-runc-v2 && \
    tar -xz -f containerd.tar.gz --to-stdout bin/ctr > /usr/bin/ctr && \
    chmod +x /usr/bin/containerd /usr/bin/containerd-shim /usr/bin/containerd-shim-runc-v1 /usr/bin/containerd-shim-runc-v2 /usr/bin/ctr && \
    rm containerd.tar.gz

RUN apt-get remove -y \
    coreutils curl ca-cerificates  apt-transport-https && \
    apt-get autoremove -y & \
    apt-get clean
