###################################
# BUILDBUDDY SHARED BAZEL CONFIGS #
###################################
#
# Prefer adding flags to the shared file over the current file
# so that we can have a consistent set of flags across all repos.
#
# Only add to this file if the flags are intended for our public
# repo _exclusively_.
#
import %workspace%/shared.bazelrc


###################################
# PLATFORM-SPECIFIC CONFIGURATION #
###################################

common:macos --action_env=DEVELOPER_DIR
common:macos --host_action_env=DEVELOPER_DIR

# Ensure that we don't use the apple_support cc_toolchain
common:macos --repo_env=BAZEL_NO_APPLE_CPP_TOOLCHAIN=1

# Ensure that our executors can run on macOS 11.0+
common:macos --macos_minimum_os=12.0
common:macos --host_macos_minimum_os=12.0


#################################
# PUBLIC REPO EXCLUSIVE CONFIGS #
#################################

# By default, build logs get sent to the production server
#
# Note: Use remote.buildbuddy.io and NOT buildbuddy.buildbuddy.io
# so OSS / anonymous users can still send events to our server.
common --bes_results_url=https://app.buildbuddy.io/invocation/
common --bes_backend=grpcs://remote.buildbuddy.io

# Don't run Docker and Firecracker tests by default, because they cannot be run on all environments
# Firecracker tests can only be run on Linux machines with bare execution, and we want to avoid a hard dependency
# on Docker for development
test --test_tag_filters=-docker,-bare
build --build_tag_filters=-secrets

# Build with --config=local to send build logs to your local server
common:local --extra_execution_platforms=@buildbuddy_toolchain//:platform

# Build with --config=dev to send build logs to the dev server
common:dev --bes_results_url=https://buildbuddy.buildbuddy.dev/invocation/
common:dev --bes_backend=grpcs://buildbuddy.buildbuddy.dev

# Common flags to be used with remote cache
common:cache-shared --remote_cache_compression
common:cache-shared --experimental_remote_cache_compression_threshold=100
common:cache-shared --remote_timeout=600

# Build with --config=cache-dev to send build logs to the dev server with cache
common:cache-dev --config=cache-shared
common:cache-dev --config=dev
common:cache-dev --remote_cache=grpcs://buildbuddy.buildbuddy.dev

# Build with --config=cache to send build logs to the production server with cache
common:cache --config=cache-shared
common:cache --remote_cache=grpcs://buildbuddy.buildbuddy.io

# Flags shared across remote configs
common:remote-shared --jobs=100
common:remote-shared --verbose_failures

# Flags shared for prod RBE and cache
common:remote-prod-shared --config=remote-shared
common:remote-prod-shared --config=cache-shared
common:remote-prod-shared --remote_executor=grpcs://buildbuddy.buildbuddy.io

# Build with --config=remote to use BuildBuddy RBE, generally as a human from
# the command line. Other configs shoudn't embed this.
common:remote --config=remote-prod-shared
common:remote --config=target-linux-x86
common:remote --remote_download_toplevel

# Build with --config=remote-minimal to use BuildBuddy RBE in automated
# processes, (probers, workflows, ci, etc.) where the outputs shouldn't be
# downloaded.
common:remote-minimal --config=remote-prod-shared
common:remote-minimal --config=target-linux-x86
common:remote-minimal --config=download-minimal

# Specify arch to do cross-platform builds on remote until the go toolchain can
# accomodate multiple execution platforms
common:remote-linux-arm64 --config=remote-prod-shared
common:remote-linux-arm64 --config=target-linux-arm64
common:remote-linux-arm64 --remote_download_toplevel

# Flags shared for dev RBE and cache
common:remote-dev-shared --config=dev
common:remote-dev-shared --config=remote-shared
common:remote-dev-shared --config=cache-shared
common:remote-dev-shared --remote_executor=grpcs://buildbuddy.buildbuddy.dev

# Build with --config=remote-dev to use BuildBuddy RBE.
common:remote-dev --config=remote-dev-shared
common:remote-dev --config=target-linux-x86
common:remote-dev --remote_download_toplevel

# Specify arch to do cross-platform builds on remote-dev
common:remote-dev-linux-arm64 --config=remote-dev-shared
common:remote-dev-linux-arm64 --config=target-linux-arm64
common:remote-dev-linux-arm64 --remote_download_toplevel

# Configuration used for GitHub actions-based CI
common:ci --config=remote-minimal
common:ci --build_metadata=ROLE=CI
common:ci --build_metadata=VISIBILITY=PUBLIC
common:ci --remote_instance_name=buildbuddy-io/buildbuddy/ci
common:ci --repository_cache=~/repo-cache/
common:ci --flaky_test_attempts=2
common:ci --color=yes
# common:ci --@io_bazel_rules_go//go/config:race

# Configuration used for all BuildBuddy workflows
common:workflows --config=cache-shared
common:workflows --config=download-minimal
common:workflows --build_metadata=ROLE=CI
common:workflows --build_metadata=VISIBILITY=PUBLIC
common:workflows --remote_instance_name=buildbuddy-io/buildbuddy/workflows
common:workflows --color=yes
common:workflows --flaky_test_attempts=2
# Use BuildBuddy endpoints from the ci_runner-generated bazelrc.
# These will point to local, dev, or prod, depending on which app created the workflow action.
common:workflows --config=buildbuddy_bes_backend
common:workflows --config=buildbuddy_bes_results_url
common:workflows --config=buildbuddy_remote_cache
common:workflows --config=buildbuddy_experimental_remote_downloader


########################
# USER DEFINED CONFIGS #
########################

# Try importing a user specific .bazelrc
# You can create your own by copying and editing the template-user.bazelrc template:
# cp template-user.bazelrc user.bazelrc
try-import %workspace%/user.bazelrc
