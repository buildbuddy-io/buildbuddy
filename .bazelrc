build --enable_platform_specific_config=true
query --enable_platform_specific_config=true

# Skymeld merges the analysis phase and execution phase.
# This allows build and test executions to start before the analysis phase finishes,
# thus speeding up the build overall .
build:skymeld --experimental_skymeld_ui
build:skymeld --experimental_merged_skyframe_analysis_execution

# Build with --config=local to send build logs to your local server
build:local --bes_results_url=http://localhost:8080/invocation/
build:local --bes_backend=grpc://localhost:1985
build:local --remote_cache=grpc://localhost:1985
build:local --remote_upload_local_results

# Build with --config=dev to send build logs to the dev server
build:dev --bes_results_url=https://buildbuddy.buildbuddy.dev/invocation/
build:dev --bes_backend=grpcs://buildbuddy.buildbuddy.dev

# Build with --config=cache-dev to send build logs to the dev server with cache
build:cache-dev --bes_results_url=https://buildbuddy.buildbuddy.dev/invocation/
build:cache-dev --bes_backend=grpcs://buildbuddy.buildbuddy.dev
build:cache-dev --remote_cache=grpcs://buildbuddy.buildbuddy.dev
build:cache-dev --remote_upload_local_results
build:cache-dev --experimental_remote_cache_compression

# Build with --config=cache to send build logs to the production server with cache
build:cache --bes_results_url=https://buildbuddy.buildbuddy.io/invocation/
build:cache --bes_backend=grpcs://buildbuddy.buildbuddy.io
build:cache --remote_cache=grpcs://buildbuddy.buildbuddy.io
build:cache --remote_upload_local_results
build:cache --experimental_remote_cache_compression

# Flags shared across remote configs
build:remote-shared --remote_upload_local_results
build:remote-shared --remote_timeout=600
build:remote-shared --remote_download_minimal
build:remote-shared --jobs=100
build:remote-shared --verbose_failures
# TODO(sluongng): split these into separate configs for each target platform
build:remote-shared --platforms=//platforms:linux_x86_64
build:remote-shared --extra_execution_platforms=//platforms:linux_x86_64

build --incompatible_enable_cc_toolchain_resolution

# Build with --config=remote to use BuildBuddy RBE.
build:remote --config=remote-shared
build:remote --config=cache
build:remote --remote_executor=grpcs://buildbuddy.buildbuddy.io

# Build with --config=remote-dev to use BuildBuddy RBE.
build:remote-dev --config=remote-shared
build:remote-dev --config=cache-dev
build:remote-dev --remote_executor=grpcs://buildbuddy.buildbuddy.dev

# Write build outputs in a platform-specific directory,
# avoid outputs being wiped and rewritten when switching between platforms.
build --experimental_platform_in_output_dir

# Configuration used for GitHub actions-based CI
build:ci --config=remote
build:ci --build_metadata=ROLE=CI
build:ci --build_metadata=VISIBILITY=PUBLIC
build:ci --remote_instance_name=buildbuddy-io/buildbuddy/ci
build:ci --repository_cache=/home/runner/repo-cache/
build:ci --flaky_test_attempts=2
build:ci --color=yes
build:ci --disk_cache=
# build:ci --@io_bazel_rules_go//go/config:race

# Configuration used for untrusted GitHub actions-based CI
build:untrusted-ci --config=remote
build:untrusted-ci --remote_instance_name=buildbuddy-io/buildbuddy/untrusted-ci
build:untrusted-ci --repository_cache=/home/runner/repo-cache/untrusted/
build:untrusted-ci --disk_cache=
build:untrusted-ci --flaky_test_attempts=2
build:untrusted-ci --remote_executor=grpcs://remote.buildbuddy.io
build:untrusted-ci --bes_results_url=https://app.buildbuddy.io/invocation/
build:untrusted-ci --bes_backend=grpcs://remote.buildbuddy.io
build:untrusted-ci --remote_cache=grpcs://remote.buildbuddy.io

# Configuration used for all BuildBuddy workflows
build:workflows --experimental_remote_cache_compression
build:workflows --build_metadata=ROLE=CI
build:workflows --build_metadata=VISIBILITY=PUBLIC
build:workflows --remote_instance_name=buildbuddy-io/buildbuddy/workflows
build:workflows --color=yes
build:workflows --disk_cache=
build:workflows --flaky_test_attempts=2
# Use BuildBuddy endpoints from the ci_runner-generated bazelrc.
# These will point to local, dev, or prod, depending on which app created the workflow action.
build:workflows --config=buildbuddy_bes_backend
build:workflows --config=buildbuddy_bes_results_url
build:workflows --config=buildbuddy_remote_cache
# Temporarily disabled while testing blake3.
#build:workflows --config=buildbuddy_experimental_remote_downloader
build:workflows --@io_bazel_rules_go//go/config:race

# Configuration used for Linux workflows
build:linux-workflows --config=remote-shared
build:linux-workflows --config=workflows
build:linux-workflows --config=buildbuddy_remote_executor

# Configuration used for Mac workflows
# TODO(bduffany): Enable RBE for Mac workflows, and reconcile this with other configs
build:mac-workflows --config=cache
build:mac-workflows --config=workflows

# Configuration used for all builds of artifacts released to GitHub
build:release-shared -c opt
build:release-shared --stamp
build:release-shared --define release=true
build:release-shared --strip=always

# Configuration used for Linux releases
build:release --config=release-shared
build:release --config=remote
build:release --remote_instance_name=buildbuddy-io/buildbuddy/release
build:release --remote_download_toplevel

# Configuration used for release-mac workflow
build:release-mac --config=release-shared

# Configuration used for release-m1 workflow
build:release-m1 --config=release-shared

# Configuration used for Buildbuddy auto-release
build:auto-release --config=remote
build:auto-release --remote_instance_name=buildbuddy-io/buildbuddy/auto-release
build:auto-release -c opt

# By default, build logs get sent to the production server
build --bes_results_url=https://app.buildbuddy.io/invocation/
build --bes_backend=grpcs://remote.buildbuddy.io

# Recommended if connecting to a remote (upload speed constrained) BuildBuddy instance
build --noremote_upload_local_results # Uploads logs & artifacts without writing to cache

# Populate workspace info like commit sha and repo name to your invocation.
build:linux --workspace_status_command=$(pwd)/workspace_status.sh
build:macos --workspace_status_command=$(pwd)/workspace_status.sh
build:windows --workspace_status_command="bash workspace_status.sh"

# Misc remote cache/BES optimizations
build --experimental_remote_cache_async
build --experimental_remote_build_event_upload=minimal
build --nolegacy_important_outputs

# Use a static PATH variable to prevent unnecessary rebuilds of dependencies like protobuf.
build --incompatible_strict_action_env

# rules_nodejs needs runfiles to be explicitly enabled.
build:linux --enable_runfiles
build:macos --enable_runfiles

# Use syscall to create symlink in-process.
# Need to work around M1 Mac browser test issue https://github.com/bazelbuild/rules_webtesting/issues/438
build --experimental_inprocess_symlink_creation

# Don't run Docker and Firecracker tests by default, because they cannot be run on all environments
# Firecracker tests can only be run on Linux machines with bare execution, and we want to avoid a hard dependency
# on Docker for development
test --test_tag_filters=-docker,-bare

# Use C++17 standard for all C++ compilation
build:linux --host_cxxopt=-std=c++17
build:linux --cxxopt=-std=c++17
build:macos --host_cxxopt=-std=c++17
build:macos --cxxopt=-std=c++17
build:windows --host_cxxopt=/std:c++17
build:windows --cxxopt=/std:c++17

# Run Webdriver tests with --config=webdriver-debug to debug webdriver tests locally.
# See server/testutil/webtester/webtester.go for more details.
test:webdriver-debug --test_arg=-webdriver_debug
# Forward X server display for local webdriver tests.
test:webdriver-debug --test_env=DISPLAY
# When debugging, only run one webdriver test at a time (it's overwhelming
# otherwise), and display verbose webdriver output in the terminal.
test:webdriver-debug --test_output=streamed

# Currently only works for go tests
# Coverage outputs could be viewed with `genhtml`:
#   $ genhtml -o cover bazel-out/_coverage/_coverage_report.dat
#   $ open cover/index.html
coverage --combined_report=lcov

# Use BLAKE3 digest function.
startup --digest_function=BLAKE3

# Try importing a user specific .bazelrc
# You can create your own by copying and editing the template-user.bazelrc template:
# cp template-user.bazelrc user.bazelrc
try-import %workspace%/user.bazelrc
