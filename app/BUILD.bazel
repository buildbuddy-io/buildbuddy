load("@npm//@bazel/typescript:index.bzl", "ts_devserver", "ts_library")
load("@npm//@bazel/rollup:index.bzl", "rollup_bundle")
load("@npm//@bazel/terser:index.bzl", "terser_minified")
load("@build_bazel_rules_nodejs//internal/npm_install:npm_umd_bundle.bzl", "npm_umd_bundle")

package(default_visibility = ["//visibility:public"])

ts_devserver(
    name = "devserver",
    entry_module = "buildbuddy/app/app",
    port = 8082,
    serving_path = "/app/app_bundle.js",
    deps = [
        ":app",
        ":generated_umd_deps",
    ],
)

config_setting(
    name = "use_devserver",
    values = {"define": "use_devserver=true"},
)

rollup_bundle(
    name = "app_bundle",
    config_file = "rollup.config.js",
    entry_point = "app.tsx",
    deps = [
        ":app",
        "@npm//events",
        "@npm//rollup-plugin-commonjs",
        "@npm//rollup-plugin-node-resolve",
        "@npm//rollup-plugin-replace",
    ],
)

terser_minified(
    name = "app_bundle.min",
    src = ":app_bundle",
)

ts_library(
    name = "app",
    srcs = glob(["*.tsx"]),
    deps = [
        "//app/root",
        "@npm//@types/react",
        "@npm//@types/react-dom",
        "@npm//react",
        "@npm//react-dom",
    ],
)

genrule(
    name = "style",
    srcs = [
        "//app/root:root.css",
        "//app/errors:errors.css",
        "//app/compare:compare.css",
        "//app/invocation:invocation.css",
        "//app/components/button:button.css",
        "//app/components/dialog:dialog.css",
        "//app/components/input:input.css",
        "//app/components/menu:menu.css",
        "//app/components/modal:modal.css",
        "//app/components/popup:popup.css",
        "//app/components/select:select.css",
    ],
    outs = ["style.css"],
    cmd_bash = """
        touch out;
        for f in $(SRCS); do
            if [[ ! -d $$f ]]; then
            (cat $$f; echo) >> out;
            fi;
        done;
        cat out > $@;
    """,
)

# UMD deps are needed because ts_devserver doesn't work with commonjs module format.
#
# The `@npm//*__umd` targets are auto-generated by rules_nodejs and are good enough for
# most cases. But in some cases the auto-generated ones don't work (e.g. they are
# generated with the wrong module name), so we have custom `npm_umd_bundle` rules
# below to get more control over the generated module.

filegroup(
    name = "generated_umd_deps",
    srcs = [
        ":protobufjs_minimal_umd",
        "@npm//diff-match-patch:diff-match-patch__umd",
        "@npm//moment:moment__umd",
        "@npm//pako:pako__umd",
        "@npm//react:react__umd",
        "@npm//react-dom:react-dom__umd",
        "@npm//react-lazylog:react-lazylog__umd",
        "@npm//react-modal:react-modal__umd",
        "@npm//recharts:recharts__umd",
        "@npm//rxjs:rxjs__umd",
        "@npm//tslib:tslib__umd",
        "@npm//uuid:uuid__umd",
    ],
)

npm_umd_bundle(
    name = "protobufjs_minimal_umd",
    package_name = "protobufjs/minimal",
    entry_point = "@npm//:node_modules/protobufjs/minimal.js",
    package = "@npm//protobufjs",
)
