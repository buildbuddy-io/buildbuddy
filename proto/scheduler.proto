syntax = "proto3";

import "proto/context.proto";

package scheduler;

message NodeAddress {
  // The node's hostname. Must be reachable from the scheduler.
  string host = 1;

  // The node's port.
  int32 port = 2;
}

// TODO: Switch over the the ExecutionNodes proto
message RegisterNodeRequest {
  NodeAddress node_address = 1;

  // The node's assignable memory.
  int64 assignable_memory_bytes = 2;

  // The node's assignable CPU.
  int64 assignable_milli_cpu = 3;

  // Matching constraints.
  repeated string constraints = 4;

  // The node's operating system.
  string os = 5;

  // The node's cpu architecture.
  string arch = 6;

  // The node pool in which to register the node.
  string pool = 7;
}

message RegisterNodeResponse {
  // Intentionally left blank.
}

message LeaseTaskRequest {
  // The task for which to request a lease. If successful, a LeaseTaskResponse
  // will be returned containing the serialized task and duration of the lease.
  string task_id = 1;

  // A bit that indicates this is the last LeaseTaskRequest and this
  // lease can now be closed.
  bool finalize = 2;
}

message LeaseTaskResponse {
  // The serialized task will be set in the *first* LeaseTaskResponse returned.
  // from the server. Subsequent responses will *only* include a lease duration.
  bytes serialized_task = 1;

  // The remaining duration of this lease. To continue to hold the lease, the
  // client *must* send another LeaseTaskRequest before time.Now() +
  // lease_duration_seconds.
  int64 lease_duration_seconds = 2;

  // Whether or not the lease was closed cleanly.
  bool closed_cleanly = 3;
}

message TaskSize {
  // The node's assignable memory.
  int64 estimated_memory_bytes = 1;

  // The node's assignable CPU.
  int64 estimated_milli_cpu = 2;
}

message SchedulingMetadata {
  TaskSize task_size = 1;
  string os = 2;
  string arch = 3;
  string pool = 4;
  string group_id = 5;
}

message ScheduleTaskRequest {
  string task_id = 1;
  SchedulingMetadata metadata = 2;
  bytes serialized_task = 3;
}

message ScheduleTaskResponse {
  // Intentionally left blank.
}

message ReEnqueueTaskRequest { string task_id = 1; }

message ReEnqueueTaskResponse {
  // Intentionally left blank.
}

message EnqueueTaskReservationRequest {
  string task_id = 1;
  TaskSize task_size = 2;
  SchedulingMetadata scheduling_metadata = 3;
}

message EnqueueTaskReservationResponse { string task_id = 1; }

message RegisterExecutorRequest { ExecutionNode node = 1; }

message RegisterAndStreamWorkRequest {
  // Only one of the fields should be sent. oneofs not used due to awkward Go
  // APIs.

  // Request to register the executor with the scheduler.
  // This message should be sent immediately after establishing stream and be
  // resent periodically as long as the executor should continue to receive task
  // reservations.
  RegisterExecutorRequest register_executor_request = 1;

  // Response to a previous EnqueueTaskReservationRequest.
  EnqueueTaskReservationResponse enqueue_task_reservation_response = 2;
}

message RegisterAndStreamWorkResponse {
  // Request to enqueue a task reservation. A EnqueueTaskReservationResponse
  // message will be sent to ack the task reservation.
  EnqueueTaskReservationRequest enqueue_task_reservation_request = 3;
}

service Scheduler {
  // Deprecated. Being replaced by RegisterAndStreamWork which allows task
  // reservations to be sent via the stream.
  rpc RegisterNode(stream RegisterNodeRequest) returns (RegisterNodeResponse) {}

  rpc RegisterAndStreamWork(stream RegisterAndStreamWorkRequest)
      returns (stream RegisterAndStreamWorkResponse) {}

  rpc LeaseTask(stream LeaseTaskRequest) returns (stream LeaseTaskResponse) {}

  rpc ScheduleTask(ScheduleTaskRequest) returns (ScheduleTaskResponse) {}

  rpc ReEnqueueTask(ReEnqueueTaskRequest) returns (ReEnqueueTaskResponse) {}

  // Request to enqueue a task reservation for an existing task to a locally
  // chosen executor.
  rpc EnqueueTaskReservation(EnqueueTaskReservationRequest)
      returns (EnqueueTaskReservationResponse) {}
}

service QueueExecutor {
  rpc EnqueueTaskReservation(EnqueueTaskReservationRequest)
      returns (EnqueueTaskReservationResponse) {}
}

message ExecutionNode {
  // Remote execution node host.
  // Ex. "10.52.6.5"
  string host = 1;

  // Remote execution node port.
  // Ex. 1987
  int32 port = 2;

  // Assignable memory bytes in remote execution node.
  // Ex. 26843545600
  int64 assignable_memory_bytes = 3;

  // Assignable cpu in remote execution node.
  // Ex. 7000
  int64 assignable_milli_cpu = 4;

  // Remote execution node operating system.
  // Ex. "linux".
  string os = 5;

  // Architecture of the remote execution node.
  // Ex. "amd64"
  string arch = 6;

  // Remote execution pool that this node is assigned to.
  // Ex. "buildbuddy-executors-us-west1-b"
  string pool = 7;

  // Version of the executor binary.
  string version = 8;
}

message GetExecutionNodesRequest {
  context.RequestContext request_context = 1;
}

message GetExecutionNodesResponse {
  context.ResponseContext response_context = 1;

  repeated ExecutionNode execution_node = 2;
}