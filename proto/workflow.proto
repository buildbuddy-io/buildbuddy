syntax = "proto3";

import "google/protobuf/duration.proto";
import "google/rpc/status.proto";
import "proto/context.proto";
import "proto/invocation_status.proto";
import "proto/firecracker.proto";

package workflow;

message CreateWorkflowRequest {
  // The request context.
  context.RequestContext request_context = 1;

  // The name of this workflow.
  // Ex. "Let It Flow"
  //
  // DEPRECATED: Workflow names aren't used anywhere and we don't
  // require them anymore.
  string name = 2 [deprecated = true];

  message GitRepo {
    // The HTTPS URL of the Git repository that will be checked
    // out and built as part of this project.
    // Ex. "https://github.com/buildbuddy-io/buildbuddy-internal"
    string repo_url = 1;

    // The access token to use when cloning this repository.
    //
    // For Github, and Gitlab, this is known as a Personal Access Token.
    //
    // For Bitbucket, this is known as an App Password, which requires
    // an associated username. The app password requires the following
    // permissions: [webhooks: r+w, pull requests: r+w; repo: r+w]
    //
    // If omitted, this defaults to the access token for the linked
    // GitHub account, if the repo URL is a GitHub URL. Otherwise,
    // an error is returned.
    //
    // Ex. "ABASDBASDBASBD"
    string access_token = 2;

    // The username to use when cloning this repository.
    // This is required for Bitbucket, whose "app passwords" require an
    // associated username.
    string username = 3;
  }

  // The git repository to associate with this project. For now, only a single
  // git repository is supported.
  GitRepo git_repo = 3;
}

message CreateWorkflowResponse {
  // The response context.
  context.ResponseContext response_context = 1;

  // ID of the created workflow.
  // Ex. "WF4576963743584254779"
  string id = 2;

  // The unique webhook URL for this project. Sending a POST request to this
  // URL will trigger a build of this project.
  // Ex. "https://app.buildbuddy.io/webhooks/workflows/abcd123letitflow"
  string webhook_url = 3;

  // Whether the server registered the webhook to a supported Git provider.
  // This will be false for providers that do not yet have auto-registration
  // implemented, in which case the user should be asked to manually register
  // the webhook.
  bool webhook_registered = 4;
}

message DeleteWorkflowRequest {
  // The request context.
  context.RequestContext request_context = 1;

  // One of id or repo_url must be specified.

  // ID of the workflow to delete.
  // Ex. "WF4576963743584254779"
  string id = 2;

  // Repo URL of the workflow to delete.
  // Ex. "https://github.com/foo/bar"
  string repo_url = 3;
}

message DeleteWorkflowResponse {
  // The response context.
  context.ResponseContext response_context = 1;
}

message GetWorkflowsRequest {
  // The request context.
  context.RequestContext request_context = 1;
}

message GetWorkflowsResponse {
  // The response context.
  context.ResponseContext response_context = 1;

  message Workflow {
    // ID of the workflow to delete.
    // Ex. "WF4576963743584254779"
    string id = 1;

    // The name of this workflow.
    // Ex. "Let It Flow"
    string name = 2;

    // The HTTPS URL of the Git repository that will be checked
    // out and built as part of this project.
    // Ex. "https://github.com/buildbuddy-io/buildbuddy-internal"
    string repo_url = 3;

    // The unique webhook URL for this project. Sending a POST request to this
    // URL will trigger a build of this project.
    // Ex. "https://app.buildbuddy.io/webhooks/workflows/abcd123letitflow"
    string webhook_url = 4;
  }

  repeated Workflow workflow = 2;
}

message ActionHistory {
  // The name of the action spawned by the workflow--this is stored in the
  // 'pattern' field of the invocation.
  string action_name = 1;

  // Information about a single run of this action.
  message Entry {
    string commit_sha = 1;

    string invocation_id = 2;

    string branch_name = 3;

    invocation_status.InvocationStatus status = 4;

    bool success = 5;

    int64 created_at_usec = 6;

    int64 updated_at_usec = 7;

    google.protobuf.Duration duration = 8;
  }
  // Recent runs of this branch on the main/master branch (or both, if they both
  // have runs for some reason).  Entries will be sorted by created_at_usec
  // because that should roughly match the order in which a commit was
  // considered HEAD.  This isn't always right, but we make no attempt to match
  // against the repo's "real" HEAD commit.
  // In the future, we could try to fetch the revision history from git (or
  // wherever) and filter / match this list to that.
  repeated Entry entries = 2;

  // Details about all runs of this action in the last 7 days (on all branches,
  // not just the main one).
  message Summary {
    int64 total_runs = 1;

    int64 successful_runs = 2;

    google.protobuf.Duration average_duration = 3;
  }
  Summary summary = 3;
}

message GetWorkflowHistoryRequest {
  // The request context.
  context.RequestContext request_context = 1;
}

message GetWorkflowHistoryResponse {
  // The response context.
  context.ResponseContext response_context = 1;

  message WorkflowHistory {
    string repo_url = 1;

    repeated ActionHistory action_history = 2;
  }
  repeated WorkflowHistory workflow_history = 2;
}

message ExecuteWorkflowRequest {
  // The request context.
  context.RequestContext request_context = 1;

  // ID of the workflow to be executed.
  // Ex. "WF4576963743584254779"
  string workflow_id = 2;

  // DEPRECATED: Use action_names field
  string action_name = 3 [deprecated = true];

  // SHA of the commit to be checked out in order to execute the workflow.
  // Ex. "e782592faf56da05cc0a243220689135e807958f"
  string commit_sha = 4;

  reserved 5;

  // URL of the repo the commit was pushed to.
  // Ex. "https://github.com/some-user/acme"
  string pushed_repo_url = 6;

  // Branch corresponding to the SHA to be checked out.
  // Ex. "cool-feature"
  string pushed_branch = 7;

  // URL of the repo the commit will be merged into.
  // Ex. "https://github.com/acme-inc/acme"
  string target_repo_url = 8;

  // For pull requests, the branch into which the pushed branch is being merged.
  // For push events this should be set equal to the pushed branch.
  // Ex. "main"
  string target_branch = 9;

  // Whether to run the workflow in a clean container. This prevents all
  // existing workflow containers from being reused, so using this flag is not
  // encouraged.
  bool clean = 10;

  // VISIBILITY build metadata used for the workflow invocation.
  string visibility = 11;

  // Optional: Names of the workflow actions to execute. Correspond to actions
  // in buildbuddy.yaml, or actions in the default workflow config if
  // buildbuddy.yaml is missing from the repo.
  //
  // If this is not set, will execute all actions in the workflow config.
  //
  // Ex. ["Browser Tests", "Docker tests"]
  repeated string action_names = 12;

  // Optional: PR number associated with the workflow run.
  int64 pull_request_number = 13;

  // If true, start the workflow but do not wait for the status to be returned.
  bool async = 14;

  // These env vars will be applied to each action that is run. If there is a
  // conflict between an env var set here and in buildbuddy.yaml, these
  // overrides will take precedence. Otherwise all env vars set in
  // buildbuddy.yaml will still apply.
  map<string, string> env = 15;
}

message ExecuteWorkflowResponse {
  // The response context.
  context.ResponseContext response_context = 1;

  // DEPRECATED: Use the action_statuses field.
  string invocation_id = 2 [deprecated = true];

  message ActionStatus {
    // Corresponds to an action in buildbuddy.yaml, or an action name in the
    // default workflow config if buildbuddy.yaml is missing from the repo. Ex.
    // "Test all targets"
    string action_name = 1;

    // The BuildBuddy invocation ID from executing the action.
    string invocation_id = 2;

    // The gRPC status from executing the action, or from starting the action if
    // async is true.
    google.rpc.Status status = 3;
  }

  // A list of the actions executed by the API, or actions started if async is
  // true.
  repeated ActionStatus action_statuses = 3;
}

enum GitProvider {
  UNKNOWN_GIT_PROVIDER = 0;
  GITHUB = 1;
}

message Repo {
  // Repo URL.
  // ex: https://github.com/acme-inc/acme
  string url = 1;
}

message GetReposRequest {
  context.RequestContext request_context = 1;

  // The provider to fetch repos for (required).
  GitProvider git_provider = 2;
}

message GetReposResponse {
  context.ResponseContext response_context = 1;

  // Repos fetched from the provider.
  repeated Repo repo = 2;
}

message InvalidateSnapshotRequest {
  context.RequestContext request_context = 1;

  firecracker.SnapshotKey snapshot_key = 2;
}

message InvalidateSnapshotResponse {
  context.ResponseContext response_context = 1;
}
