syntax = "proto3";

import "proto/resource.proto";
import "proto/remote_execution.proto";
import "google/rpc/status.proto";

package raft;

////////////////////////////////////////////////////////////////////////////////
//
// Raft storage and wire protos, used to represent data written to the raft log.
//
////////////////////////////////////////////////////////////////////////////////

// KV is a basic proto type that represents data written to pebble.
message KV {
  bytes key = 1;
  bytes value = 2;
}

// Isolation represents the cache isolation type of a particular item.
message Isolation {
  resource.CacheType cache_type = 1;
  string remote_instance_name = 2;
  string partition_id = 3;
  string group_id = 4;
}

message Encryption {
  string key_id = 1;
}

message FileRecord {
  Isolation isolation = 1;
  build.bazel.remote.execution.v2.Digest digest = 2;
  build.bazel.remote.execution.v2.Compressor.Value compressor = 3;
  Encryption encryption = 4;
  build.bazel.remote.execution.v2.DigestFunction.Value digest_function = 5;
}

message StorageMetadata {
  message FileMetadata {
    string filename = 1;
  }
  FileMetadata file_metadata = 1;

  message PebbleMetadata {
    // The root key for all stored chunks.
    bytes key = 1;

    // The number of chunks stored in pebble
    // for this file. Chunks are 1-indexed.
    // Ex. If chunks == 2, a reader would expect to
    // read: [chunk-1, chunk-2].
    int64 chunks = 2;
  }
  PebbleMetadata pebble_metadata = 2;

  message InlineMetadata {
    bytes data = 1;
    int64 created_at_nsec = 2;
  }
  InlineMetadata inline_metadata = 3;

  message ChunkedMetadata {
    repeated resource.ResourceName resource = 1;
  }
  ChunkedMetadata chunked_metadata = 4;

  // Insert other storage types (gcs, etc) here.
  // Upon read, the server will first read this record and then serve the
  // contents of the the specified location.
}

message FileMetadata {
  FileRecord file_record = 1;
  StorageMetadata storage_metadata = 2;
  EncryptionMetadata encryption_metadata = 6;

  // If data is compressed, this will be the compressed size
  int64 stored_size_bytes = 3;

  // Last access time of the record.
  int64 last_access_usec = 4;

  // Last modify time of the record
  int64 last_modify_usec = 5;

  enum FileType {
    UNKNOWN_FILE_TYPE = 0;
    // This is a complete file.
    COMPLETE_FILE_TYPE = 1;
    // This is a chunk coming from a larger file.
    CHUNK_FILE_TYPE = 2;
  }

  FileType file_type = 7;
}

message EncryptionMetadata {
  string encryption_key_id = 1;
  int64 version = 2;
}

message PartitionMetadata {
  int64 size_bytes = 1;
  // CAS count and AC count are not populated by Raft cache.
  int64 cas_count = 2;
  int64 ac_count = 3;
  int64 total_count = 4;
  string partition_id = 5;
}

message PartitionMetadatas {
  repeated PartitionMetadata metadata = 1;
}

// Next tag: 4
message VersionMetadata {
  // The int64 representation of a PebbleKeyVersion.
  // This is the minimum version of data stored in the DB.
  int64 min_version = 1;

  // The int64 representation of a PebbleKeyVersion.
  // This is the maximum version of data stored in the DB.
  int64 max_version = 3;

  // The time when the version was last changed.
  int64 last_modify_usec = 2;
}

message FileDeleteRequest {
  FileRecord file_record = 1;
}

message DeleteRangeRequest {
  bytes start = 1;
  bytes end = 2;
}
message DeleteRangeResponse {}

message FileDeleteResponse {}

message FileUpdateMetadataRequest {
  FileRecord file_record = 1;
  int64 last_access_usec = 2;
}

message FileUpdateMetadataResponse {}

message DirectWriteRequest {
  KV kv = 1;
}

message DirectWriteResponse {}

message DirectReadRequest {
  bytes key = 1;
}

message DirectReadResponse {
  KV kv = 1;
}

message IncrementRequest {
  bytes key = 1;
  uint64 delta = 2;  // how much to increment by.
}

message IncrementResponse {
  bytes key = 1;
  uint64 value = 2;
}

message ScanRequest {
  bytes start = 1;
  bytes end = 2;

  enum ScanType {
    UNDEFINED_SCAN_TYPE = 0;
    SEEKLT_SCAN_TYPE = 1;
    SEEKGE_SCAN_TYPE = 2;
    SEEKGT_SCAN_TYPE = 3;
  }
  ScanType scan_type = 3;
}

message ScanResponse {
  repeated KV kvs = 1;
}

// Compare And Set Request
// not the other CAS...
message CASRequest {
  KV kv = 1;

  // The expected value for the key. Before updating value to the data in KV,
  // the existing value is matched against this field; if it matches, the update
  // update proceeds normally, if not, an error is returned.
  bytes expected_value = 2;
}

message CASResponse {
  KV kv = 1;
}

message SimpleSplitRequest {
  uint64 source_range_id = 1;
  uint64 new_shard_id = 2;
  uint64 new_range_id = 3;
}

message SimpleSplitResponse {
  RangeDescriptor new_start = 1;
  RangeDescriptor new_end = 2;
}

// Raft CMD API, used to encode raft commands that are replicated via raft and
// written to a log. Everything written via SyncPropose must be a RequestUnion
// wrapped in a BatchCmdRequest..
message RequestUnion {
  reserved 1, 7, 8, 11, 12, 13;
  oneof value {
    DirectWriteRequest direct_write = 2;
    DirectReadRequest direct_read = 3;
    IncrementRequest increment = 4;
    ScanRequest scan = 5;
    CASRequest cas = 6;
    FileDeleteRequest file_delete = 9;
    FileUpdateMetadataRequest file_update_metadata = 10;
    DeleteRangeRequest delete_range = 14;
    SimpleSplitRequest simple_split = 15;
    FindMissingRequest find_missing = 16;
    GetMultiRequest get_multi = 17;
    SetMultiRequest set_multi = 18;
    MetadataRequest metadata = 19;
  }
}

// Raft CMD API, used to encode raft commands that are replicated via raft and
// written to a log. Everything passed to SyncRead must be a RequestUnion
// wrapped in a BatchCmdRequest and everything returned will be a
// BatchCmdResponse.
message ResponseUnion {
  reserved 2, 8, 9, 12, 13, 14;
  google.rpc.Status status = 1;

  oneof value {
    DirectWriteResponse direct_write = 3;
    DirectReadResponse direct_read = 4;
    IncrementResponse increment = 5;
    ScanResponse scan = 6;
    CASResponse cas = 7;
    FileDeleteResponse file_delete = 10;
    FileUpdateMetadataResponse file_update_metadata = 11;
    DeleteRangeResponse delete_range = 15;
    SimpleSplitResponse simple_split = 16;
    FindMissingResponse find_missing = 17;
    GetMultiResponse get_multi = 18;
    SetMultiResponse set_multi = 19;
    MetadataResponse metadata = 20;
  }
}

message BatchCmdRequest {
  repeated RequestUnion union = 1;

  // Header will be validated by the state machine if set.
  Header header = 2;

  // Normally unset. During a region split, if the split_tag is set to a value
  // matching the current split lease tag, requests will be processed by the
  // statemachine. Otherwise they will return an OutOfRange (splitting) error.
  string split_tag = 3;
}

message BatchCmdResponse {
  repeated ResponseUnion union = 1;

  // Normally unused (errors should be returned per-request in the
  // ResponseUnion). This may be set when a request cannot be processed because
  // a region is splitting.
  google.rpc.Status status = 2;
}

////////////////////////////////////////////////////////////////////////////////
//
// Gossip API, data that is broadcast / consumed via the gossip network.
//
////////////////////////////////////////////////////////////////////////////////
// A RegistryQuery can be sent via gossip to resolve a node. And other node
// which has knowledge of the queried node may respond with a
// RegistryQueryResponse.
message RegistryQueryRequest {
  uint64 shard_id = 1;
  uint64 replica_id = 2;
}

message RegistryQueryResponse {
  // Required.
  string nhid = 1;

  // Optional.
  string grpc_address = 2;
  string raft_address = 3;
}

message RegistryPushRequest {
  // Required.
  string nhid = 1;

  // Optional.
  string grpc_address = 2;
  string raft_address = 3;

  repeated ReplicaDescriptor replicas = 4;
}

// The auto-bringup protocol is very simple: if no previous data is found on
// startup, the first node in the sorted "join" set will query other nodes
// until it finds all other members of the join set. If they have previous data
// then they do not respond to the bringup query. If all nodes respond, then
// the first node sends them a StartShard request and provisions the initial
// cluster.
message BringupResponse {
  string nhid = 1;
  string grpc_address = 2;
}

message Constraint {
  // TODO(tylerw): support placement constraints
}

message PlacementQuery {
  uint64 target_shard_id = 1;

  repeated Constraint constraints = 2;
}

////////////////////////////////////////////////////////////////////////////////
//
// Raft meta-API, used by placement driver to manage data locations etc.
//
////////////////////////////////////////////////////////////////////////////////

message NodeLivenessRecord {
  int64 epoch = 1;
  int64 expiration = 2;
}

message RangeLeaseRecord {
  message NodeLiveness {
    int64 epoch = 1;
    bytes nhid = 2;
  }

  message ReplicaExpiration {
    int64 expiration = 1;
    bytes nhid = 2;
  }

  // A RangeLease can either be time based or based off of a node liveness
  // record.
  oneof value {
    NodeLiveness node_liveness = 1;
    ReplicaExpiration replica_expiration = 2;
  }
}

message ReplicaUsage {
  reserved 3;

  // The replica this usage data was sampled from.
  ReplicaDescriptor replica = 1;
  uint64 range_id = 2;

  int64 estimated_disk_bytes_used = 4;
  int64 read_qps = 5;
  int64 raft_propose_qps = 6;

  repeated PartitionMetadata partitions = 7;
}

message StoreUsage {
  NodeDescriptor node = 1;
  int64 replica_count = 2;
  int64 lease_count = 3;
  int64 read_qps = 4;
  int64 raft_propose_qps = 5;
  int64 total_bytes_used = 6;
  int64 total_bytes_free = 7;
}

message NodePartitionUsage {
  NodeDescriptor node = 1;

  repeated PartitionMetadata partition_usage = 2;
}

message NodeDescriptor {
  string nhid = 1;
  string raft_address = 2;
  string grpc_address = 3;
}

message ReplicaDescriptor {
  uint64 shard_id = 1;
  uint64 replica_id = 2;
}

message Header {
  ReplicaDescriptor replica = 1;
  uint64 range_id = 2;
  uint64 generation = 3;
}

message RangeSet {
  repeated RangeDescriptor ranges = 1;
}

message RangeDescriptor {
  bytes start = 1;
  bytes end = 2;

  uint64 range_id = 3;
  repeated ReplicaDescriptor replicas = 4;

  uint64 generation = 5;
}

// SyncPropose, in proto form.
message SyncProposeRequest {
  Header header = 1;

  BatchCmdRequest batch = 2;
}

message SyncProposeResponse {
  BatchCmdResponse batch = 1;
}

// SyncRead, in proto form.
message SyncReadRequest {
  Header header = 1;
  BatchCmdRequest batch = 2;
}
message SyncReadResponse {
  BatchCmdResponse batch = 1;
}

message StartShardRequest {
  uint64 shard_id = 1;
  uint64 replica_id = 2;
  map<uint64, string> initial_member = 3;

  // The following commands will be SyncProposed on the local
  // nodehost after the cluster has been created.
  BatchCmdRequest batch = 4;

  bool join = 5;

  // Don't mark self as ready until this index has been applied.
  uint64 last_applied_index = 6;
}

message StartShardResponse {
  BatchCmdResponse batch = 1;
}

message RemoveDataRequest {
  uint64 shard_id = 1;
  uint64 replica_id = 2;
}

message RemoveDataResponse {}

message AddReplicaRequest {
  RangeDescriptor range = 1;
  NodeDescriptor node = 2;
}
message AddReplicaResponse {
  // The range with the new node added.
  RangeDescriptor range = 1;
}

message RemoveReplicaRequest {
  RangeDescriptor range = 1;
  uint64 replica_id = 2;
}
message RemoveReplicaResponse {
  // The range with the specified node removed.
  RangeDescriptor range = 1;
}

message SplitRangeRequest {
  Header header = 1;
  RangeDescriptor range = 2;
}

message SplitRangeResponse {
  RangeDescriptor start = 1;
  RangeDescriptor end = 2;
}

message ListReplicasRequest {}

message ListReplicasResponse {
  NodeDescriptor node = 1;
  repeated ReplicaDescriptor replicas = 2;
}

message CreateSnapshotRequest {
  Header header = 1;
  bytes start = 2;
  bytes end = 3;
}

message CreateSnapshotResponse {
  string snap_id = 1;
}

message LoadSnapshotRequest {
  Header header = 1;
  string snap_id = 2;
}

message LoadSnapshotResponse {}

////////////////////////////////////////////////////////////////////////////////
//
// Data API, used for shipping the actual bytes around, outside raft.
//
////////////////////////////////////////////////////////////////////////////////

message MetadataRequest {
  Header header = 1;
  FileRecord file_record = 2;
}

message MetadataResponse {
  FileMetadata file_metadata = 1;
}

message FindMissingRequest {
  Header header = 1;
  repeated FileRecord file_records = 2;
}

message FindMissingResponse {
  repeated FileRecord missing = 1;
}

message GetMultiRequest {
  Header header = 1;
  repeated FileRecord file_records = 2;
}

message GetMultiResponse {
  message Response {
    // The FileRecord that was requested.
    FileRecord file_record = 1;

    // The FileMetadata that matches
    FileMetadata file_metadata = 2;

    // The result of attempting to upload that blob.
    google.rpc.Status status = 3;
  }

  // The responses to the requests.
  repeated Response responses = 1;
}

message SetMultiRequest {
  Header header = 1;
  repeated FileMetadata file_metadatas = 2;
}

message SetMultiResponse {
  message Response {
    // The blob digest to which this response corresponds.
    FileRecord file_record = 1;

    // The result of attempting to upload that blob.
    google.rpc.Status status = 2;
  }

  // The responses to the requests.
  repeated Response responses = 1;
}

message TransferLeadershipRequest {
  uint64 shard_id = 1;
  uint64 target_replica_id = 2;
}

message TransferLeadershipResponse {}
