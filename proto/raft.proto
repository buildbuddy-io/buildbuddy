syntax = "proto3";

import "proto/resource.proto";
import "proto/remote_execution.proto";
import "google/rpc/status.proto";
import "github.com/planetscale/vtprotobuf/vtproto/ext.proto";

package raft;

////////////////////////////////////////////////////////////////////////////////
//
// Raft storage and wire protos, used to represent data written to the raft log.
//
////////////////////////////////////////////////////////////////////////////////

// KV is a basic proto type that represents data written to pebble.
message KV {
  bytes key = 1;
  bytes value = 2;
}

// Isolation represents the cache isolation type of a particular item.
message Isolation {
  resource.CacheType cache_type = 1;
  string remote_instance_name = 2;
  string partition_id = 3;
  string group_id = 4;
}

message Encryption {
  string key_id = 1;
}

message FileRecord {
  Isolation isolation = 1;
  build.bazel.remote.execution.v2.Digest digest = 2;
  build.bazel.remote.execution.v2.Compressor.Value compressor = 3;
  Encryption encryption = 4;
  build.bazel.remote.execution.v2.DigestFunction.Value digest_function = 5;
}

message StorageMetadata {
  message FileMetadata {
    string filename = 1;
  }
  FileMetadata file_metadata = 1;

  message PebbleMetadata {
    // The root key for all stored chunks.
    bytes key = 1;

    // The number of chunks stored in pebble
    // for this file. Chunks are 1-indexed.
    // Ex. If chunks == 2, a reader would expect to
    // read: [chunk-1, chunk-2].
    int64 chunks = 2;
  }
  PebbleMetadata pebble_metadata = 2;

  message InlineMetadata {
    bytes data = 1;
    int64 created_at_nsec = 2;
  }
  InlineMetadata inline_metadata = 3;

  message ChunkedMetadata {
    repeated resource.ResourceName resource = 1;
  }
  ChunkedMetadata chunked_metadata = 4;

  // Insert other storage types (gcs, etc) here.
  // Upon read, the server will first read this record and then serve the
  // contents of the the specified location.
}

message FileMetadata {
  option (vtproto.mempool) = true;
  FileRecord file_record = 1;
  StorageMetadata storage_metadata = 2;
  EncryptionMetadata encryption_metadata = 6;

  // If data is compressed, this will be the compressed size
  int64 stored_size_bytes = 3;

  // Last access time of the record.
  int64 last_access_usec = 4;

  // Last modify time of the record
  int64 last_modify_usec = 5;

  enum FileType {
    UNKNOWN_FILE_TYPE = 0;
    // This is a complete file.
    COMPLETE_FILE_TYPE = 1;
    // This is a chunk coming from a larger file.
    CHUNK_FILE_TYPE = 2;
  }

  FileType file_type = 7;
}

message EncryptionMetadata {
  string encryption_key_id = 1;
  int64 version = 2;
}

message PartitionMetadata {
  int64 size_bytes = 1;
  // CAS count and AC count are not populated by Raft cache.
  int64 cas_count = 2;
  int64 ac_count = 3;
  int64 total_count = 4;
  string partition_id = 5;
}

message PartitionMetadatas {
  repeated PartitionMetadata metadata = 1;
}

// Next tag: 4
message VersionMetadata {
  // The int64 representation of a PebbleKeyVersion.
  // This is the minimum version of data stored in the DB.
  int64 min_version = 1;

  // The int64 representation of a PebbleKeyVersion.
  // This is the maximum version of data stored in the DB.
  int64 max_version = 3;

  // The time when the version was last changed.
  int64 last_modify_usec = 2;
}

message DirectWriteRequest {
  KV kv = 1;
}

message DirectWriteResponse {}

message DirectDeleteRequest {
  bytes key = 1;
}

message DirectDeleteResponse {}

message DirectReadRequest {
  bytes key = 1;
}

message DirectReadResponse {
  KV kv = 1;
}

message IncrementRequest {
  bytes key = 1;
  uint64 delta = 2;  // how much to increment by.
}

message IncrementResponse {
  bytes key = 1;
  uint64 value = 2;
}

message ScanRequest {
  bytes start = 1;
  bytes end = 2;

  enum ScanType {
    UNDEFINED_SCAN_TYPE = 0;
    SEEKLT_SCAN_TYPE = 1;
    SEEKGE_SCAN_TYPE = 2;
    SEEKGT_SCAN_TYPE = 3;
  }
  ScanType scan_type = 3;
  // The maximum number of results to return. If 0, returns everything.
  int64 limit = 4;
}

message ScanResponse {
  repeated KV kvs = 1;
}

// Compare And Set Request
// not the other CAS...
message CASRequest {
  KV kv = 1;

  // The expected value for the key. Before updating value to the data in KV,
  // the existing value is matched against this field; if it matches, the update
  // update proceeds normally, if not, an error is returned.
  bytes expected_value = 2;
}

message CASResponse {
  KV kv = 1;
}

message FindSplitPointRequest {}
message FindSplitPointResponse {
  bytes split_key = 1;
}

message DeleteSessionsRequest {
  // Delete all client sessions created before created_at_usec;
  int64 created_at_usec = 1;
}

message DeleteSessionsResponse {}

// Raft CMD API, used to encode raft commands that are replicated via raft and
// written to a log. Everything written via SyncPropose must be a RequestUnion
// wrapped in a BatchCmdRequest..
message RequestUnion {
  oneof value {
    DirectWriteRequest direct_write = 1;
    DirectReadRequest direct_read = 2;
    DirectDeleteRequest direct_delete = 15;
    IncrementRequest increment = 3;
    ScanRequest scan = 4;
    CASRequest cas = 5;
    FindSplitPointRequest find_split_point = 14;
    DeleteSessionsRequest delete_sessions = 16;

    // The following operations are for getting and setting FileMetadata blobs.
    GetRequest get = 7;
    SetRequest set = 8;
    DeleteRequest delete = 9;
    FindRequest find = 10;

    // The following operations are for reading and updating the atime of file
    // metadata blobs.
    UpdateAtimeRequest update_atime = 11;
  }
}

// Raft CMD API, used to encode raft commands that are replicated via raft and
// written to a log. Everything passed to SyncRead must be a RequestUnion
// wrapped in a BatchCmdRequest and everything returned will be a
// BatchCmdResponse.
message ResponseUnion {
  google.rpc.Status status = 1;

  oneof value {
    DirectWriteResponse direct_write = 2;
    DirectReadResponse direct_read = 3;
    DirectDeleteResponse direct_delete = 16;
    IncrementResponse increment = 4;
    ScanResponse scan = 5;
    CASResponse cas = 6;
    FindSplitPointResponse find_split_point = 15;
    DeleteSessionsResponse delete_sessions = 17;

    // The following operations are for getting and setting FileMetadata blobs.
    GetResponse get = 8;
    SetResponse set = 9;
    DeleteResponse delete = 10;
    FindResponse find = 11;

    // The following operations are for reading and updating the atime of file
    // metadata blobs.
    UpdateAtimeResponse update_atime = 12;
  }
}

message SnapshotClusterHook {}

message PostCommitHook {
  SnapshotClusterHook snapshot_cluster = 1;
}

message TxnRequest {
  optional bytes transaction_id = 1;
  message Statement {
    reserved 1;
    BatchCmdRequest raw_batch = 2;
    RangeDescriptor range = 3;
  }
  repeated Statement statements = 2;
}

message TxnResponse {
  repeated BatchCmdResponse responses = 1;
}

message TxnRecord {
  TxnRequest txnRequest = 1;
  enum TxnState {
    UNKNOWN_STATE = 0;
    // We are preparing the transactions.
    PENDING = 1;
    // All statements in the transactions are prepared.
    PREPARED = 2;
    // All statements in the transactions are either committed or rolled back.
    COMPLETED = 3;
  }
  TxnState txn_state = 2;
  // When is this record first created
  int64 created_at_usec = 3;
  reserved 4;
  reserved 6;
  FinalizeOperation op = 5;
}

enum FinalizeOperation {
  UNKNOWN_OPERATION = 0;
  ROLLBACK = 1;
  COMMIT = 2;
}

// A client session that is used to support idempotency on the raft state
// machine.
message Session {
  // An unique identifier of the client session.
  // Example: 018fcb2f-cfab-718b-974e-64907df56881
  bytes id = 1;
  // Each BatchCmdRequest has its unique <id, index>. The index is
  // monotonically increasing.
  // Example: 1717100891000000000
  uint64 index = 2;
  // The timestamp when the session is created.
  int64 created_at_usec = 5;

  // Optional. The response associated with the command associated with the
  // index.
  optional bytes rsp_data = 4;

  // The index of the raft entry that's associated with the session.
  optional uint64 entry_index = 6;
}

message BatchCmdRequest {
  // Header will be validated by the state machine if set.
  Header header = 1;

  // RequestUnion contains the union of reads/writes to process in this request.
  repeated RequestUnion union = 2;

  // If a transaction_id is set and finalize_operation is unset, then the ops
  // in union will be PREPARED and locks will be acquired on any written rows.
  optional bytes transaction_id = 3;

  // If finalize_operation is set, a previously created transaction can be
  // COMMITTED or ROLLED BACK. When this field is set, union must be unset.
  optional FinalizeOperation finalize_operation = 4;

  // Any post-commit hooks that should be run after a batch is *committed*.
  repeated PostCommitHook post_commit_hooks = 5;

  // Session is used to guarantee idempotency for writes on the state machine.
  optional Session session = 6;
}

message BatchCmdResponse {
  repeated ResponseUnion union = 1;

  // Normally unused (errors should be returned per-request in the
  // ResponseUnion). This may be set when a request cannot be processed because
  // a region is splitting.
  google.rpc.Status status = 2;
}

////////////////////////////////////////////////////////////////////////////////
//
// Gossip API, data that is broadcast / consumed via the gossip network.
//
////////////////////////////////////////////////////////////////////////////////

// A RegistryQuery can be sent via gossip to resolve a node. And other node
// which has knowledge of the queried node may respond with a
// RegistryQueryResponse.
message RegistryQueryRequest {
  uint64 range_id = 1;
  uint64 replica_id = 2;
}

message RegistryQueryResponse {
  // Required.
  string nhid = 1;

  // Optional.
  string grpc_address = 2;
  string raft_address = 3;
}

message RegistryPushRequest {
  // Required.
  string nhid = 1;

  // Optional.
  string grpc_address = 2;
  string raft_address = 3;

  repeated ReplicaDescriptor replicas = 4;
}

// The auto-bringup protocol is very simple: if no previous data is found on
// startup, the first node in the sorted "join" set will query other nodes
// until it finds all other members of the join set. If they have previous data
// then they do not respond to the bringup query. If all nodes respond, then
// the first node sends them a StartShard request and provisions the initial
// cluster.
message BringupResponse {
  string nhid = 1;
  string grpc_address = 2;
}

message Constraint {
  // TODO(tylerw): support placement constraints
}

message PlacementQuery {
  uint64 target_range_id = 1;

  repeated Constraint constraints = 2;
}

////////////////////////////////////////////////////////////////////////////////
//
// Raft meta-API, used by placement driver to manage data locations etc.
//
////////////////////////////////////////////////////////////////////////////////

message NodeLivenessRecord {
  int64 epoch = 1;
  int64 expiration = 2;
}

message RangeLeaseRecord {
  message NodeLiveness {
    int64 epoch = 1;
    bytes nhid = 2;
  }

  message ReplicaExpiration {
    int64 expiration = 1;
    bytes nhid = 2;
  }

  // A RangeLease can either be time based or based off of a node liveness
  // record.
  oneof value {
    NodeLiveness node_liveness = 1;
    ReplicaExpiration replica_expiration = 2;
  }
}

message ReplicaUsage {
  reserved 3;

  // The replica this usage data was sampled from.
  ReplicaDescriptor replica = 1;
  uint64 range_id = 2;

  int64 estimated_disk_bytes_used = 4;
  int64 read_qps = 5;
  int64 raft_propose_qps = 6;

  repeated PartitionMetadata partitions = 7;
}

message StoreUsage {
  NodeDescriptor node = 1;
  int64 replica_count = 2;
  int64 lease_count = 3;
  int64 read_qps = 4;
  int64 raft_propose_qps = 5;
  int64 total_bytes_used = 6;
  int64 total_bytes_free = 7;
}

message NodePartitionUsage {
  NodeDescriptor node = 1;

  repeated PartitionMetadata partition_usage = 2;
}

message NodeDescriptor {
  string nhid = 1;
  string raft_address = 2;
  string grpc_address = 3;
}

message ReplicaDescriptor {
  uint64 range_id = 1;
  uint64 replica_id = 2;

  // The identifier of the node the replica resided.
  optional string nhid = 3;
}

message Header {
  ReplicaDescriptor replica = 1;
  uint64 range_id = 2;
  uint64 generation = 3;

  enum ConsistencyMode {
    LINEARIZABLE = 0;
    STALE = 1;
    RANGELEASE = 2;
  }

  // The consistency mode that should be used for this operation.
  //  Writes are always written to all nodes (there are no STALE writes).
  //  Reads will use LINEARIZABLE by default but STALE can be set if the client
  //  can tolerate stale data.
  ConsistencyMode consistency_mode = 4;

  // Session is used to guarantee idempotency for writes on the state machine.
  optional Session session = 5;
}

message RangeSet {
  repeated RangeDescriptor ranges = 1;
}

message RangeDescriptor {
  bytes start = 1;
  bytes end = 2;

  uint64 range_id = 3;
  repeated ReplicaDescriptor replicas = 4;

  uint64 generation = 5;

  optional uint64 last_added_replica_id = 6;
  optional int64 last_replica_added_at_usec = 7;
}

// SyncPropose, in proto form.
message SyncProposeRequest {
  Header header = 1;

  BatchCmdRequest batch = 2;
}

message SyncProposeResponse {
  BatchCmdResponse batch = 1;
}

// SyncRead, in proto form.
message SyncReadRequest {
  Header header = 1;
  BatchCmdRequest batch = 2;
}
message SyncReadResponse {
  BatchCmdResponse batch = 1;
}

message StartShardRequest {
  uint64 range_id = 1;
  uint64 replica_id = 2;
  map<uint64, string> initial_member = 3;

  // The following commands will be SyncProposed on the local
  // nodehost after the cluster has been created.
  BatchCmdRequest batch = 4;

  bool join = 5;

  // Don't mark self as ready until this index has been applied.
  uint64 last_applied_index = 6;

  // If true, we will start this shard as a non-voter; otherwise, we will start
  // it as a voter.
  bool is_non_voting = 7;
}

message StartShardResponse {
  BatchCmdResponse batch = 1;
}

message RemoveDataRequest {
  uint64 range_id = 1;
  uint64 replica_id = 2;
  bytes start = 3;
  bytes end = 4;
}

message RemoveDataResponse {}

message AddReplicaRequest {
  RangeDescriptor range = 1;
  NodeDescriptor node = 2;
}
message AddReplicaResponse {
  // The range with the new node added.
  RangeDescriptor range = 1;
}

// RemoveReplicaRequest specifies a request to remove the replica from raft
// memberhsip, and remove the replica from the range descriptor. It does *not*
// remove the data from the machine.
message RemoveReplicaRequest {
  // Either specify range or range_id:
  //  -- When a range is provided, it is expected that the range is up-to-date.
  //  The
  // call removes the replica from the range descriptor and also from the raft
  // membership.
  //  -- When a range_id is provided, it is expected that the replica_id is
  // already removed from the range descriptor. For example, when we detected a
  // zombie.
  RangeDescriptor range = 1;
  uint64 range_id = 3;

  uint64 replica_id = 2;
}

message RemoveReplicaResponse {
  // The range with the specified node removed.
  RangeDescriptor range = 1;
}

message SplitRangeRequest {
  Header header = 1;
  RangeDescriptor range = 2;
}

message SplitRangeResponse {
  RangeDescriptor left = 1;
  RangeDescriptor right = 2;
}

message ListReplicasRequest {}

message ListReplicasResponse {
  NodeDescriptor node = 1;
  repeated ReplicaDescriptor replicas = 2;
}

message CreateSnapshotRequest {
  Header header = 1;
  bytes start = 2;
  bytes end = 3;
}

message CreateSnapshotResponse {
  string snap_id = 1;
}

message LoadSnapshotRequest {
  Header header = 1;
  string snap_id = 2;
}

message LoadSnapshotResponse {}

message TransferLeadershipRequest {
  uint64 range_id = 1;
  uint64 target_replica_id = 2;
}

message TransferLeadershipResponse {}

////////////////////////////////////////////////////////////////////////////////
//
// FileMetadata CRUD API, used to get/set/update/delete FileMetadata records and
// their atimes.
//
////////////////////////////////////////////////////////////////////////////////

message FindRequest {
  bytes key = 1;
}
message FindResponse {
  bool present = 1;
  // The last time this file record was accessed.
  int64 last_access_usec = 2;
}

message GetRequest {
  bytes key = 1;
}
message GetResponse {
  FileMetadata file_metadata = 1;
}

message SetRequest {
  bytes key = 1;
  FileMetadata file_metadata = 2;
}
message SetResponse {}

message DeleteRequest {
  bytes key = 1;

  // If set, match_atime must equal FileMetadata.LastAccessUsec for the delete
  // to succeed. If it does not a FailedPrecondition will be returned.
  int64 match_atime = 2;
}
message DeleteResponse {}

message UpdateAtimeRequest {
  bytes key = 1;
  int64 access_time_usec = 2;
}
message UpdateAtimeResponse {}

message RaftMembership {
  repeated ReplicaDescriptor voters = 1;
  repeated ReplicaDescriptor non_voters = 2;
  repeated ReplicaDescriptor witnesses = 3;
  repeated uint64 removed = 4;
}

message RaftLeaderInfo {
  uint64 leader_id = 1;
  uint64 term = 2;
  bool valid = 3;
}

message GetRangeDebugInfoRequest {
  uint64 range_id = 1;
}

message GetRangeDebugInfoResponse {
  string nhid = 1;
  RangeDescriptor range_descriptor = 2;
  RaftLeaderInfo leader = 3;
  bool has_lease = 4;
  RaftMembership membership = 5;
}
