syntax = "proto3";

import "proto/context.proto";

package api_key;

// An API key used to access BuildBuddy.
message ApiKey {
  // The unique ID of this API key.
  // ex: "AK123456789"
  string id = 1;

  // The string value of this API key which is passed in API requests.
  string value = 2;

  // Optional. The user-specified label of this API key that helps them
  // remember what it's for.
  string label = 3;

  // A capability associated with an API key.
  //
  // Values are powers of 2 so that bitmask operations can be used
  // to check capabilities.
  enum Capability {
    UNKNOWN_CAPABILITY = 0;
    // Allows writing to the content-addressable store and action cache.
    CACHE_WRITE_CAPABILITY = 1;  // 2^0
    // Allows registering an executor with the scheduler.
    REGISTER_EXECUTOR_CAPABILITY = 2;  // 2^1
    // Allows writing to the content-addressable store only.
    CAS_WRITE_CAPABILITY = 4;  // 2^2
    // Allows changing org-level settings and managing org users, such as via
    // the settings UI or via the SCIM API.
    ORG_ADMIN_CAPABILITY = 8;  // 2^3
  }

  // Capabilities associated with this API key.
  repeated Capability capability = 4;

  // True if this API key is visible to developers.
  bool visible_to_developers = 5;

  // True if this is a user owned key.
  bool user_owned = 6;

  // Optional time after which this API key is no longer valid.
  int64 expiry_usec = 7;

  // Optional certificate corresponding to this API key, if
  // requested.
  Certificate certificate = 8;
}

message Certificate {
  // String representation of certificate file.
  string cert = 1;

  // String representation of key file.
  string key = 2;
}

message CreateApiKeyRequest {
  context.RequestContext request_context = 1;

  reserved 2;  // group_id

  // The ID of the user to create the API key for.
  // Requires ORG_ADMIN capability if different than the authenticated
  // user.
  string user_id = 6;

  // Optional. The user-specified label of this API key that helps them
  // remember what it's for.
  string label = 3;

  // Optional. Capabilities granted to this API key.
  repeated ApiKey.Capability capability = 4;

  // True if this API key should be visible to developers.
  bool visible_to_developers = 5;
}

message CreateApiKeyResponse {
  context.ResponseContext response_context = 1;

  // The API key that was created.
  ApiKey api_key = 2;
}

message GetApiKeysRequest {
  context.RequestContext request_context = 1;

  // The ID of the user to get API keys for.
  // ex: "US123456789"
  string user_id = 3;

  // The ID of the group to get API keys for.
  // ex: "GR123456789"
  string group_id = 2;
}

message GetApiKeysResponse {
  context.ResponseContext response_context = 1;

  // The API keys owned by the requested group.
  repeated ApiKey api_key = 2;
}

message GetApiKeyRequest {
  context.RequestContext request_context = 1;

  // The ID of the API key to retrieve.
  // ex: "AK123456789"
  string api_key_id = 2;

  // Whether to populate the certificate for the returned API key.
  bool include_certificate = 3;
}

message GetApiKeyResponse {
  context.ResponseContext response_context = 1;

  ApiKey api_key = 2;
}

message UpdateApiKeyRequest {
  context.RequestContext request_context = 1;

  // The unique ID of the API key to be updated.
  // ex: "AK123456789"
  string id = 2;

  // Optional. The user-specified label of this API key that helps them
  // remember what it's for.
  //
  // NOTE: If this is empty, the label will be deleted.
  string label = 3;

  // Optional. The capabilities associated with this API key.
  //
  // NOTE: If this is empty, all capabilities will be removed as part of
  // this update.
  repeated ApiKey.Capability capability = 4;

  // True if this API key should be visible to developers.
  bool visible_to_developers = 5;
}

message UpdateApiKeyResponse {
  context.ResponseContext response_context = 1;
}

message DeleteApiKeyRequest {
  context.RequestContext request_context = 1;

  // The unique ID of the API key to be updated.
  // ex: "AK123456789"
  string id = 2;
}

message DeleteApiKeyResponse {
  context.ResponseContext response_context = 1;
}

message CreateImpersonationApiKeyRequest {
  context.RequestContext request_context = 1;
}

message CreateImpersonationApiKeyResponse {
  context.ResponseContext response_context = 1;

  // The API key that was created.
  ApiKey api_key = 2;
}
