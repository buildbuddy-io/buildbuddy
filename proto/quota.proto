syntax = "proto3";

import "google/protobuf/duration.proto";
import "proto/context.proto";

package quota;

message Rate {
  int64 num_requests = 1;
  google.protobuf.Duration period = 2;
}

message Bucket {
  // The name of the bucket
  string name = 1;

  // The maximum number of requests can be used in a time period.
  Rate max_rate = 2;

  // The number of requests that will be allowed to exceed the rate in a single
  // burst.
  int64 max_burst = 3;
}

// QuotaKey is used to count quota for a single "user".
message QuotaKey {
  string group_id = 1;

  // IP address is used for anonymous clients.
  string ip_address = 2;
}

message QuotaGroup {
	string quota_key = 1;
	string bucket_name = 2;
}

// Namespace indicates a single resource to be protected by quota manager, like
// "/rpc/GetTargets".
message Namespace {
  // The name of the namespace
  string name = 1;

  // All the buckets in the namespace
  repeated Bucket buckets = 2;

  // Each group indicates that quota_key will be rate limited by the max_rate and
  // max_burst defined in the bucket identified by the bucket_name. 
  repeated QuotaGroup groups = 3;
}

message AddNamespace {
  // The name of the namespace
  string name = 1;

  // The default bucket to be used when there is no explicit quota groups defined
  // for a user.
  Bucket default_bucket = 2;

  repeated Bucket buckets = 3;
}

message CreateNamespaceRequest {
  context.RequestContext request_context = 1;
  AddNamespace mod = 2;
}

message CreateNamespaceResponse {
  context.ResponseContext response_context = 1;
}

message RemoveNamespaceRequest {
  context.RequestContext request_context = 1;
  string namespace = 2;
}

message RemoveNamespaceResponse {
  context.ResponseContext response_context = 1;
}

message ModifyBucketRequest {
  context.RequestContext request_context = 1;
  string namespace = 2;

  // Pre-requisite: the name of the bucket doesn't exist.
  Bucket add_bucket = 3;

  // Pre-requisite: the name of the bucket exists.
  Bucket update_bucket = 4;

  // the name of the bucket to remove
  string remove_bucket = 5;
}

message ModifyBucketResponse {
  context.ResponseContext response_context = 1;
}

message ApplyBucketRequest {
  context.RequestContext request_context = 1;

  QuotaKey key = 2;
  string namespace = 3;

  // When new_bucket_name is empty, will apply default bucket for the specified
  // key.
  string new_bucket_name = 4;
}

message ApplyBucketResponse {
  context.ResponseContext response_context = 1;
}

message GetNamespaceRequest {
  context.RequestContext request_context = 1;
  // When namespace is not set, return all namespaces.
  string namespace = 2;
}

message GetNamespaceResponse {
  context.ResponseContext request_context = 1;
  repeated Namespace namespaces = 2;
}
