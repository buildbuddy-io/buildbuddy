syntax = "proto3";

package encryption;

import "proto/context.proto";

message LocalInsecureKMSConfig {
  string key_id = 1;
}

message GCPKMSConfig {
  string project = 1;
  string location = 2;
  string key_ring = 3;
  string key = 4;
}

message AWSKMSConfig {
  // Amazon Resource Name for the key resource.
  string key_arn = 1;
}

message KMSConfig {
  LocalInsecureKMSConfig local_insecure_kms_config = 1;
  GCPKMSConfig gcp_kms_config = 2;
  AWSKMSConfig aws_kms_config = 3;
}

message SetEncryptionConfigRequest {
  context.RequestContext request_context = 1;

  bool enabled = 2;

  // This field is required when enabling encryption.
  KMSConfig kms_config = 3;
}

message SetEncryptionConfigResponse {
  context.ResponseContext response_context = 1;
}

message GetEncryptionConfigRequest {
  context.RequestContext request_context = 1;
}

enum KMS {
  UNKNOWN_KMS = 0;

  LOCAL_INSECURE = 1;
  GCP = 2;
  AWS = 3;
}

message GetEncryptionConfigResponse {
  context.ResponseContext response_context = 1;

  bool enabled = 2;

  repeated KMS supported_kms = 3;
}

// Auth info (client, group) is passed via headers.
message GetEncryptionKeyRequest {
  // Metadata about the encryption key to retrieve. If absent, the most recent
  // encryption key for the desired group is returned.
  EncryptionKeyMetadata metadata = 1;
}

message EncryptionKeyMetadata {
  // A unique identifier for this encryption key. Supplied by the server. This
  // will be something like "EK123456789012345678".
  string id = 1;

  // Encryption keys are versioned to support key rotation. Cache contents are
  // encrypted using the latest available version of a key and the key version
  // used is stored in the record's metadata so the correct version can be used
  // for decryption.
  //
  // More about customer-managed encryption can be found in
  // http://go/customer-managed-encryption
  int64 version = 2;
}

message EncryptionKey {
  EncryptionKeyMetadata metadata = 1;

  // The encryption key.
  bytes key = 3;
}

message GetEncryptionKeyResponse {
  EncryptionKey key = 1;
}

service EncryptionService {
  rpc GetEncryptionKey(GetEncryptionKeyRequest)
      returns (GetEncryptionKeyResponse);
}
