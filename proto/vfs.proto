// A Virtual File System API based on the FUSE API.
// There doesn't appear to be an official reference for the FUSE protocol, but
// the libfuse docs serve as a good reference:
// http://libfuse.github.io/doxygen/structfuse__operations.html

syntax = "proto3";

package vfs;

message ExtendedAttr {
  string name = 1;
  bytes value = 2;
}

message Attrs {
  int64 size = 1;
  uint32 perm = 2;
  bool immutable = 3;
  uint32 nlink = 4;
  uint64 mtime_nanos = 5;
  uint64 atime_nanos = 6;
  // Number of 512-byte blocks used by the node.
  int64 blocks = 7;
  int64 block_size = 8;
  repeated ExtendedAttr extended = 9;
}

message SymlinkEntry {
  string name = 1;
  Attrs attrs = 2;
  string target = 3;
}

message FileEntry {
  string name = 1;
  Attrs attrs = 2;
}

message DirectoryEntry {
  string name = 1;
  Attrs attrs = 2;
  repeated DirectoryEntry directories = 3;
  repeated FileEntry files = 4;
  repeated SymlinkEntry symlinks = 5;
}

message GetLayoutRequest {}

message GetLayoutResponse {
  DirectoryEntry root = 1;
}

message SyscallError {
  uint32 errno = 1;
}

message LookupRequest {
  uint64 parent_id = 1;
  string name = 2;
}

message LookupResponse {
  uint32 mode = 1;
  Attrs attrs = 2;
  uint64 id = 3;
  string symlinkTarget = 4;
}

message GetDirectoryContentsRequest {
  uint64 id = 1;
}

message Node {
  uint64 id = 1;
  uint32 mode = 2;
  string name = 3;
  Attrs attrs = 4;
}

message GetDirectoryContentsResponse {
  repeated Node nodes = 1;
}

message MknodRequest {
  uint64 parent_id = 1;
  string name = 2;
  uint32 mode = 3;
  uint32 dev = 4;
}

message MknodResponse {
  uint64 id = 1;
  Attrs attrs = 2;
}

message CreateRequest {
  uint64 parent_id = 1;
  string name = 2;
  uint32 flags = 3;
  uint32 mode = 4;
}

message CreateResponse {
  uint64 id = 1;
  uint64 handle_id = 2;
}

message OpenRequest {
  uint64 id = 1;
  uint32 flags = 2;
}

message OpenResponse {
  uint64 handle_id = 1;
  // If the file is small (as determine by the server) and is open for only
  // reading (O_RDONLY flag), the server may return the contents inline to avoid
  // the overhead of additional read requests.
  bytes data = 2;
}

message ReadRequest {
  uint64 handle_id = 1;
  int64 offset = 2;
  int32 num_bytes = 3;
}

message ReadResponse {
  bytes data = 1;
}

message AllocateRequest {
  uint64 handle_id = 1;
  uint32 mode = 2;
  int64 offset = 3;
  int64 num_bytes = 4;
}

message AllocateResponse {}

message WriteRequest {
  uint64 handle_id = 1;
  int64 offset = 2;
  bytes data = 3;
}

message WriteResponse {
  uint32 num_bytes = 1;
}

message FsyncRequest {
  uint64 handle_id = 1;
}

message FsyncResponse {}

message FlushRequest {
  uint64 handle_id = 1;
}

message FlushResponse {}

message ReleaseRequest {
  uint64 handle_id = 1;
}

message ReleaseResponse {}

message CopyFileRangeRequest {
  uint64 read_handle_id = 1;
  int64 read_handle_offset = 2;
  uint64 write_handle_id = 3;
  int64 write_handle_offset = 4;
  uint32 num_bytes = 5;
  uint32 flags = 6;
}

message CopyFileRangeResponse {
  uint32 num_bytes_copied = 1;
}

message LseekRequest {
  uint64 handle_id = 1;
  uint64 offset = 2;
  uint32 whence = 3;
}

message LseekResponse {
  uint64 offset = 1;
}

message GetAttrRequest {
  uint64 id = 1;
}

message GetAttrResponse {
  Attrs attrs = 1;
}

message SetAttrRequest {
  uint64 id = 1;
  message SetSize {
    int64 size = 1;
  }
  SetSize set_size = 2;
  message SetPerms {
    uint32 perms = 1;
  }
  SetPerms set_perms = 3;

  message SetMTime {
    uint64 mtime_nanos = 1;
  }
  SetMTime set_mtime = 4;

  message SetATime {
    uint64 atime_nanos = 1;
  }
  SetATime set_atime = 5;

  message SetExtendedAttr {
    string name = 1;
    bytes value = 2;
    uint32 flags = 3;
  }
  SetExtendedAttr set_extended = 6;

  message RemoveExtendedAttr {
    string name = 1;
  }
  RemoveExtendedAttr remove_extended = 7;
}

message SetAttrResponse {
  Attrs attrs = 1;
}

message RenameRequest {
  uint64 old_parent_id = 1;
  string old_name = 2;
  uint64 new_parent_id = 3;
  string new_name = 4;
  uint32 flags = 5;
}

message RenameResponse {}

message MkdirRequest {
  uint64 parent_id = 1;
  string name = 2;
  uint32 perms = 3;
}

message MkdirResponse {
  uint64 id = 1;
  Attrs attrs = 2;
}

message RmdirRequest {
  uint64 parent_id = 1;
  string name = 2;
}

message RmdirResponse {}

message SymlinkRequest {
  uint64 parent_id = 1;
  string name = 2;
  string target = 3;
}

message SymlinkResponse {
  uint64 id = 1;
}

message LinkRequest {
  uint64 parent_id = 1;
  string name = 2;
  uint64 target_id = 3;
}

message LinkResponse {
  Attrs attrs = 1;
}

message UnlinkRequest {
  uint64 parent_id = 1;
  string name = 2;
}

message UnlinkResponse {}

message FileLock {
  uint64 start = 1;
  uint64 end = 2;
  uint32 typ = 3;
  uint32 pid = 4;
}

message GetLkRequest {
  uint64 handle_id = 1;
  uint64 owner = 2;
  FileLock file_lock = 3;
  uint32 flags = 4;
}

message GetLkResponse {
  FileLock file_lock = 1;
}

message SetLkRequest {
  uint64 handle_id = 1;
  uint64 owner = 2;
  FileLock file_lock = 3;
  uint32 flags = 4;
}

message SetLkResponse {}

message StatfsRequest {}

message StatfsResponse {
  int64 BlockSize = 1;
  uint64 TotalBlocks = 2;
  uint64 BlocksFree = 3;
  uint64 BlocksAvailable = 4;
}

// FileSystem is Virtual File System API that follows the FUSE API.
// Refer to the FUSE API documentation for details of specific operations.
service FileSystem {
  rpc Lookup(LookupRequest) returns (LookupResponse);
  rpc GetDirectoryContents(GetDirectoryContentsRequest)
      returns (GetDirectoryContentsResponse);

  // Mknod creates a file system node of a specific type.
  rpc Mknod(MknodRequest) returns (MknodResponse);

  // Create creates a file and returns a file handle.
  rpc Create(CreateRequest) returns (CreateResponse);

  // API for operating on a single file.
  // Open will return an ID that can be used for the remaining file APIs.
  rpc Open(OpenRequest) returns (OpenResponse);

  // Allocates/dellocates byte ranges on a file referred by file handle.
  // See `man 2 fallocate`.
  rpc Allocate(AllocateRequest) returns (AllocateResponse);

  // Reads data from a file handle.
  rpc Read(ReadRequest) returns (ReadResponse);

  // Writes data to a file handle.
  rpc Write(WriteRequest) returns (WriteResponse);

  // Flushes any buffered modifications to backing storage device.
  // See `man 2 fsync`.
  rpc Fsync(FsyncRequest) returns (FsyncResponse);

  // Flush is called on a file handle whenever a file descriptor is closed in
  // the client FS. This may be called more than once if the file descriptor was
  // duplicated. Errors from this op are returned to the file system user.
  rpc Flush(FlushRequest) returns (FlushResponse);

  // Release is called on a file handle when there are no more file descriptor
  // references left. Any errors returned here are not visible to the file
  // system user.
  rpc Release(ReleaseRequest) returns (ReleaseResponse);

  // CopyFileRange copies data between two open file handles on the server which
  // avoids the need to copy data to/from client.
  rpc CopyFileRange(CopyFileRangeRequest) returns (CopyFileRangeResponse);

  rpc Lseek(LseekRequest) returns (LseekResponse);

  rpc Statfs(StatfsRequest) returns (StatfsResponse);

  rpc GetAttr(GetAttrRequest) returns (GetAttrResponse);
  rpc SetAttr(SetAttrRequest) returns (SetAttrResponse);
  rpc Rename(RenameRequest) returns (RenameResponse);
  rpc Mkdir(MkdirRequest) returns (MkdirResponse);
  rpc Rmdir(RmdirRequest) returns (RmdirResponse);
  rpc Link(LinkRequest) returns (LinkResponse);
  rpc Symlink(SymlinkRequest) returns (SymlinkResponse);
  rpc Unlink(UnlinkRequest) returns (UnlinkResponse);

  rpc GetLk(GetLkRequest) returns (GetLkResponse);
  rpc SetLk(SetLkRequest) returns (SetLkResponse);
  rpc SetLkw(SetLkRequest) returns (SetLkResponse);
}
