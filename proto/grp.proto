syntax = "proto3";

import "proto/api_key.proto";
import "proto/context.proto";
import "proto/user_id.proto";

package grp;

// Group represents a group that a user is a member of.
message Group {
  reserved 8;

  // The unique ID of this group.
  // Ex. "GR4576963743584254779"
  string id = 1;

  // The name of this group (may be displayed to users).
  // Ex. "Tyler Williams Group"
  string name = 2;

  // Optional. The domains owned by this group.
  // Ex. "iterationinc.com"
  string owned_domain = 3;

  // True if this group has linked a Github token.
  bool github_linked = 4;

  // The unique URL segment for this group which is used
  // to construct nice-looking URLs for this group, such as
  // https://app.buildbuddy.com/join/:url-identifier
  //
  // May consist of only lowercase ASCII letters (a-z) and hyphens.
  //
  // Ex: "iteration-inc"
  string url_identifier = 5;

  // Whether sharing features are allowed by this group.
  bool sharing_enabled = 6;

  // Whether builds for this group will use custom executors provided by the
  // group.
  bool use_group_owned_executors = 7;

  // Role represent's the authenticated user's role within this group, which
  // determines which actions the user is authorized to perform.
  Role role = 9;

  enum Role {
    UNKNOWN_ROLE = 0;

    // Developers cannot perform certain privileged actions such as creating API
    // keys and viewing usage data, but can perform most other common actions
    // such as viewing invocation history. Developers get cache read/write
    // access and AC readonly access.
    DEVELOPER_ROLE = 1;  // 1 << 0

    // Admins have unrestricted access to any data owned by this group.
    ADMIN_ROLE = 2;  // 1 << 1

    // Writer role grants the same capabilities as Developer role, except it
    // allows CAS read+write and AC read+write.
    WRITER_ROLE = 4;  // 1 << 2

    // Reader role grants the same capabilities as Developer role, except it
    // allows only CAS reads and AC reads (no cache writes are allowed).
    READER_ROLE = 8;  // 1 << 3

    // Next role should be field number 16 (1 << 4)
  }

  // Controls who can see invocation suggestions.
  SuggestionPreference suggestion_preference = 10;

  // Controls whether user-owned API keys are enabled.
  bool user_owned_keys_enabled = 11;

  // Whether to show "Ask Buddy" for the organization.
  bool bot_suggestions_enabled = 15;

  // Whether developers in this organization are allowed to create
  // organizations.
  bool developer_org_creation_enabled = 16;

  // Default URL from the group. If custom subdomains are enabled this will
  // reference the group subdomain, otherwise it will point to the default
  // BuildBuddy URL.
  string url = 12;

  // Whether the "run workflow from clean workspace" button should be
  // admin-only.
  bool restrict_clean_workflow_runs_to_admins = 13;

  // Whether IP rules are being enforced for this organization.
  bool enforce_ip_rules = 14;

  // Whether users are being managed by an external system using the SCIM API.
  // Disables in-app user management.
  bool external_user_management = 17;

  // Maximum set of allowed capabilities that the user can assign to a user API
  // key created within this group. Note that these are specific to the
  // currently authenticated user, not to
  // the group as a whole.
  repeated api_key.ApiKey.Capability allowed_user_api_key_capabilities = 18;
}

message JoinGroupRequest {
  context.RequestContext request_context = 2;

  // The unique ID of this group.
  // Ex. "GR4576963743584254779"
  string id = 1;
}

message JoinGroupResponse {
  context.ResponseContext response_context = 1;
}

message GetGroupRequest {
  context.RequestContext request_context = 2;

  // The unique URL segment for this group which is used
  // to construct nice-looking URLs for this group, such as
  // https://app.buildbuddy.com/join/:url-identifier
  //
  // May consist of only lowercase ASCII letters (a-z) and hyphens.
  //
  // Ex: "iteration-inc"
  string url_identifier = 1;

  // Look up group by its unique ID.
  string group_id = 3;
}

// Publicly visible group info.
// DO NOT add new fields exposing sensitive data.
message GetGroupResponse {
  context.ResponseContext response_context = 4;

  // The unique ID of the group.
  // Ex. "GR4576963743584254779"
  string id = 1;

  // The name of this group (may be displayed to users).
  // Ex. "Tyler Williams Group"
  string name = 2;

  // Optional. The domains owned by this group.
  // Ex. "iterationinc.com"
  string owned_domain = 3;

  // True if the group has SSO enabled.
  bool sso_enabled = 5;

  // Default URL from the group. If custom subdomains are enabled this will
  // reference the group subdomain, otherwise it will point to the default
  // BuildBuddy URL.
  string url = 6;

  // True if the group users are being managed by an external system.
  bool external_user_management = 7;
}

message GetGroupUsersRequest {
  context.RequestContext request_context = 1;

  // The ID of the group to get the users from.
  string group_id = 2;

  // Statuses of members to retrieve (required).
  repeated GroupMembershipStatus group_membership_status = 3;
}

message GetGroupUsersResponse {
  context.ResponseContext response_context = 1;

  message GroupUser {
    user_id.DisplayUser user = 1;
    GroupMembershipStatus group_membership_status = 2;
    Group.Role role = 3;
  }

  // Users related to the group that match the request criteria.
  repeated GroupUser user = 2;
}

message UpdateGroupUsersRequest {
  context.RequestContext request_context = 1;

  // The ID of the group to update.
  string group_id = 2;

  // Update applied to a user in the group.
  message Update {
    enum MembershipAction {
      UNKNOWN_MEMBERSHIP_ACTION = 0;
      // Add the user to the group.
      ADD = 1;
      // Remove the user from the group as well as any pending membership
      // requests.
      REMOVE = 2;
    }

    user_id.UserId user_id = 1;

    // New membership status. If unset, membership status is unaffected.
    MembershipAction membership_action = 2;

    // New role to apply to the user within this group. If unset, role is
    // unaffected.
    Group.Role role = 3;
  }

  // Updates to apply to group users.
  repeated Update update = 3;
}

message UpdateGroupUsersResponse {
  context.ResponseContext response_context = 1;
}

message CreateGroupRequest {
  context.RequestContext request_context = 4;

  // The name of this group (may be displayed to users).
  // Ex. "Tyler Williams Group"
  string name = 1;

  // Whether new users who sign up with an email that matches the
  // authenticated user's email will be automatically added to the
  // group.
  bool auto_populate_from_owned_domain = 2;

  // The unique URL segment for this group which is used
  // to construct nice-looking URLs for this group, such as
  // https://app.buildbuddy.com/join/:url-identifier
  //
  // May consist of only lowercase ASCII letters (a-z) and hyphens.
  //
  // Ex: "iteration-inc"
  string url_identifier = 3;

  // Whether sharing features are allowed by this group.
  bool sharing_enabled = 5;

  // Whether builds for this group will use custom executors provided by the
  // group.
  bool use_group_owned_executors = 6;

  // Whether to enable user-owned API keys.
  bool user_owned_keys_enabled = 7;

  // Whether to show "Ask Buddy" for the organization.
  bool bot_suggestions_enabled = 8;

  // Whether developers in this organization are allowed to create
  // organizations.
  bool developer_org_creation_enabled = 9;
}

message CreateGroupResponse {
  context.ResponseContext response_context = 2;

  // ID of the created group.
  // Ex. "GR4576963743584254779"
  string id = 1;

  // Default URL from the group. If custom subdomains are enabled this will
  // reference the group subdomain, otherwise it will point to the default
  // BuildBuddy URL.
  string url = 3;
}

message UpdateGroupRequest {
  context.RequestContext request_context = 5;

  // The ID of the group to be updated.
  string id = 1;

  // The name of this group (may be displayed to users).
  // Ex. "Tyler Williams Group"
  string name = 2;

  // Whether new users who sign up with an email that matches the
  // authenticated user's email will be automatically added to the
  // group.
  bool auto_populate_from_owned_domain = 3;

  // The unique URL segment for this group which is used
  // to construct nice-looking URLs for this group, such as
  // https://app.buildbuddy.com/join/:url-identifier
  //
  // May consist of only lowercase ASCII letters (a-z) and hyphens.
  //
  // Ex: "iteration-inc"
  string url_identifier = 4;

  // Whether sharing features are allowed by this group.
  bool sharing_enabled = 6;

  // Whether builds for this group will use custom executors provided by the
  // group.
  bool use_group_owned_executors = 7;

  // Controls who can see invocation suggestions.
  SuggestionPreference suggestion_preference = 8;

  // Whether to enable user-owned keys.
  bool user_owned_keys_enabled = 9;

  // Whether the "run workflow from clean workspace" button should be
  // admin-only.
  bool restrict_clean_workflow_runs_to_admins = 10;

  // Whether to show "Ask Buddy" for the organization.
  bool bot_suggestions_enabled = 11;

  // Whether developers in this organization are allowed to create
  // organizations.
  bool developer_org_creation_enabled = 12;
}

message UpdateGroupResponse {
  context.ResponseContext response_context = 1;
}

enum GroupMembershipStatus {
  UNKNOWN_MEMBERSHIP_STATUS = 0;
  // The user is a member of the group.
  MEMBER = 1;
  // The user has requested to join the group but is not yet a member.
  REQUESTED = 2;
}

// A group's preference for showing suggestions on invocation pages.
enum SuggestionPreference {
  UNKNOWN_SUGGESTION_PREFERENCE = 0;
  // Show invocation suggestions to anyone.
  ENABLED = 1;
  // Show invocation suggestions only to group admins.
  ADMINS_ONLY = 2;
  // Don't show invocation suggestions.
  DISABLED = 3;
}
