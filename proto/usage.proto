syntax = "proto3";

package usage;

import "proto/context.proto";

message GetUsageRequest {
  // Request context.
  context.RequestContext request_context = 1;

  // The usage period to be fetched, as a UTC month in "YYYY-MM" format.
  // If empty, the current usage period will be returned.
  string usage_period = 2;
}

message GetUsageResponse {
  // Response context.
  context.ResponseContext response_context = 1;

  // Usage numbers for the requested UTC month.
  Usage usage = 2;

  // Daily usage numbers for the requested UTC month.
  repeated Usage daily_usage = 4;

  // The available usage periods that may be specified in a subsequent
  // GetUsageRequest.
  repeated string available_usage_periods = 3;
}

// Usage represents a count of BuildBuddy resources used for a particular time
// period.
message Usage {
  // Usage period in UTC, in "YYYY-MM" or "YYYY-MM-DD" format.
  string period = 1;

  // The number of invocations.
  int64 invocations = 2;

  // The number of action cache hits.
  int64 action_cache_hits = 3;

  // The number of content addressable store hits.
  int64 cas_cache_hits = 4;

  // The number of bytes downloaded.
  int64 total_download_size_bytes = 5;

  // The total execution duration for Linux executors, in microseconds.
  int64 linux_execution_duration_usec = 6;

  // The number of bytes uploaded.
  int64 total_upload_size_bytes = 7;

  // The sum of approximate time savings of builds based on
  // the sum of execution time of cached objects.
  int64 total_cached_action_exec_usec = 8;
}

message GetUsageAlertingRulesRequest {
  // Request context.
  context.RequestContext request_context = 1;
}

message GetUsageAlertingRulesResponse {
  // Response context.
  context.ResponseContext response_context = 1;

  // Alerting rules.
  repeated AlertingRule alerting_rules = 2;

  // Max number of alerting rules permitted by the server for subsequent update
  // operations.
  int64 rule_limit = 3;
}

message UpdateUsageAlertingRulesRequest {
  context.RequestContext request_context = 1;

  // New alerting rules which should replace the old set.
  // Any rules where the ID is set are updated;
  // any rules where the ID is unset will be newly created.
  // The server may limit the size of this list.
  repeated AlertingRuleUpdate updates = 2;
}

message UpdateUsageAlertingRulesResponse {
  context.ResponseContext response_context = 1;
}

// Update to the list of alerting rules.
// At most one field may be set.
message AlertingRuleUpdate {
  // Alerting rule to delete.
  string delete_alerting_rule_id = 1;

  // New alerting rule values.
  // If the ID is blank, a new rule is created, otherwise
  // the rule with the given ID is updated.
  AlertingRule alerting_rule = 2;
}

message AlertingRule {
  // Alerting rule ID.
  string alerting_rule_id = 1;

  // Period during which the rule is evaluated (e.g. daily).
  AlertingPeriod alerting_period = 2;

  // Usage count to be alerted on.
  UsageMetric usage_metric = 3;

  // Threshold over which the alert is triggered.
  int64 threshold = 4;
}

enum AlertingPeriod {
  UNKNOWN_USAGE_EVAL_PERIOD = 0;

  // Alerting threshold applies to daily usage.
  DAILY = 1;

  // Alerting threshold applies to usage in each business week.
  // A business week starts on Monday at 00:00.
  WEEKLY = 2;

  // Alerting threshold applies to usage in each calendar month.
  MONTHLY = 3;
}

// Usage counter values that can be used for alerting.
enum UsageMetric {
  UNKNOWN_USAGE_COUNT = 0;

  INVOCATIONS = 1;
  ACTION_CACHE_HITS = 2;
  CAS_CACHE_HITS = 4;
  TOTAL_DOWNLOAD_SIZE_BYTES = 5;
  LINUX_EXECUTION_DURATION_USEC = 6;
  TOTAL_UPLOAD_SIZE_BYTES = 7;
  TOTAL_CACHED_ACTION_EXEC_USEC = 8;
}
