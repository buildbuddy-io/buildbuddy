syntax = "proto3";

package firecracker;

import "proto/remote_execution.proto";

// VM properties which cannot be changed across snapshot/resume cycles.
//
// Things like the container used to create the image, the numCPUs / RAM, etc.
// Importantly, the files attached in the actionWorkingDir, which are attached
// to the VM, can change. This string will be hashed into the snapshot ID, so
// changing this structure will invalidate all existing cached snapshots. Be
// careful!
message VMConfiguration {
  int64 num_cpus = 1;
  int64 mem_size_mb = 2;
  int64 scratch_disk_size_mb = 3;
  bool enable_networking = 4;
  bool init_dockerd = 5;
  bool debug_mode = 6;
  bool enable_dockerd_tcp = 7;
  string kernel_version = 8;
  string firecracker_version = 9;
  string guest_api_version = 10;

  // TODO: add container_image here?
}

message SnapshotKeySet {
  // Snapshot key to be read from when resuming the snapshot and written to when
  // the task is complete.
  //
  // For workflows, this is associated with the git branch checked out in the
  // snapshotted git repo directory.
  SnapshotKey branch_key = 1;

  // Fallback keys to try reading if the main key is not found. These are
  // read-only; only the main key will be updated when writing the snapshot back
  // to cache.
  repeated SnapshotKey fallback_keys = 2;
}

message SnapshotKey {
  // Remote instance name associated with the snapshot.
  string instance_name = 1;

  // SHA256 hash of the Platform proto (exec properties) associated with the VM
  // snapshot.
  string platform_hash = 2;

  // SHA256 Hash of the VMConfiguration of the paused snapshot.
  string configuration_hash = 3;

  // The unique ID of the runner that is allowed to access this snapshot.
  // TODO: Remove this once "forkable" snapshots are implemented.
  string runner_id = 4;

  // Git ref associated with the snapshot. For workflows, this represents the
  // branch that was checked out when running the workflow.
  string ref = 5;

  // If set, this key corresponds to a specific snapshot run.
  // If not set, this key should fetch the newest snapshot matching the other
  // parameters.
  string snapshot_id = 6;
}

// Manifest represents a snapshot's VM configuration along with
// file pointers to the snapshot artifacts.
message SnapshotManifest {
  // The VM configuration that should be used when restoring the snapshot.
  VMConfiguration vm_configuration = 1;

  // Cached files in the snapshot. The files follow a standard naming
  // convention. For example, the vm state snapshot is expected to be named
  // "vmstate.snap".
  //
  // NOTE: currently, the digests of these files are not proper content digests,
  // and are just used as generic keys for the filecache.
  repeated build.bazel.remote.execution.v2.FileNode files = 2;

  // Cached chunked files in the snapshot. These follow the same convention
  // mentioned in `files`.
  repeated ChunkedFile chunked_files = 3;

  // Metadata associated with the snapshot. The VM ID stored in the metadata
  // stays constant across each resume/pause cycle of a particular snapshot, but
  // the snapshot creator is expected to change each time the snapshot is
  // updated.
  build.bazel.remote.execution.v2.VMMetadata vm_metadata = 4;
}

// Represents a chunked file for use with copy-on-write snapshotting.
message ChunkedFile {
  // Name of the file, which also identifies what it's for.
  // Ex: "scratchfs.ext4"
  string name = 1;

  // Total length of the file in bytes.
  int64 size = 2;

  // Chunk size in bytes. Note that the last chunk is allowed to be smaller than
  // this size.
  int64 chunk_size = 3;

  // The chunks in the file. If a particular chunk is missing at a given offset,
  // it should be assumed that a hole is present at that offset (a chunk
  // containing all zeroes).
  repeated Chunk chunks = 4;
}

message Chunk {
  // Byte offset of the chunk within the chunked file.
  int64 offset = 1;

  // Deprecated, use digest instead.
  string digest_hash = 2 [deprecated = true];

  // Digest of the chunk
  build.bazel.remote.execution.v2.Digest digest = 3;
}
