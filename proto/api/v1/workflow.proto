syntax = "proto3";

package api.v1;

import "google/rpc/status.proto";

message ExecuteWorkflowRequest {
  // URL of the repo the workflow is running for
  // Ex. "https://github.com/some-user/acme"
  string repo_url = 1;
  // Reference for where the workflow should be run (currently only branch names
  // are supported) Ex. "cool-feature"
  string ref = 2;

  // OPTIONAL FIELDS

  // Names of the workflow actions to execute. Correspond to actions
  // in buildbuddy.yaml, or actions in the default workflow config if
  // buildbuddy.yaml is missing from the repo.
  //
  // If this is not set, will execute all actions in the workflow config.
  //
  // Ex. ["Browser Tests", "Docker tests"]
  repeated string action_names = 3;
  // Whether to run the workflow in a clean container. This prevents all
  // existing workflow containers from being reused, so using this flag is not
  // encouraged.
  bool clean = 4;
  // VISIBILITY build metadata used for the workflow invocation.
  // Workflow invocations are private by default, but this can be
  // set to "PUBLIC" to make the workflow invocation public.
  string visibility = 5;
  // If true, start the workflow but do not wait for the status to be returned.
  bool async = 6;
  // These env vars will be applied to each action that is run. If there is a
  // conflict between an env var set here and in buildbuddy.yaml, these
  // overrides will take precedence. Otherwise all env vars set in
  // buildbuddy.yaml will still apply.
  map<string, string> env = 7;
}

message ExecuteWorkflowResponse {
  message ActionStatus {
    // Corresponds to an action in buildbuddy.yaml, or an action name in the
    // default workflow config if buildbuddy.yaml is missing from the repo. Ex.
    // "Test all targets"
    string action_name = 1;

    // The BuildBuddy invocation ID from executing the action.
    string invocation_id = 2;

    // The gRPC status from executing the action, or from starting the action if
    // async is true.
    google.rpc.Status status = 3;
  }

  // A list of the actions executed by the API, or actions started if async is
  // true.
  repeated ActionStatus action_statuses = 1;
}
