syntax = "proto3";

import "proto/raft.proto";

package raft.service;

option go_package = "raft_service";

service Api {
  // Raft Meta-API.
  rpc StartCluster(raft.StartClusterRequest)
      returns (raft.StartClusterResponse);
  rpc RemoveData(raft.RemoveDataRequest) returns (raft.RemoveDataResponse);
  rpc AddClusterNode(raft.AddClusterNodeRequest)
      returns (raft.AddClusterNodeResponse);
  rpc RemoveClusterNode(raft.RemoveClusterNodeRequest)
      returns (raft.RemoveClusterNodeResponse);
  rpc ListCluster(raft.ListClusterRequest) returns (raft.ListClusterResponse);
  rpc SplitCluster(raft.SplitClusterRequest)
      returns (raft.SplitClusterResponse);
  rpc SyncPropose(SyncProposeRequest) returns (SyncProposeResponse);
  rpc SyncRead(SyncReadRequest) returns (SyncReadResponse);

  // Data API.
  rpc Read(ReadRequest) returns (stream ReadResponse);
  rpc FindMissing(FindMissingRequest) returns (FindMissingResponse);
  rpc GetMulti(GetMultiRequest) returns (GetMultiResponse);

  // Write semantics:
  //
  // After creating the stream, the client will send an initial WriteRequest
  // containing the metadata and the first (and possibly only) chunk of data to
  // be written.
  //
  // If the server is able to accept the write, it will send an
  // empty WriteResponse, otherwise it will close the stream with an error.
  //
  // After the initial WriteResponse, the server will not send another
  // WriteResponse until the client sends a WriteRequest with finish_write set
  // to true at which point it will indicate how many bytes were written on the
  // server.
  rpc Write(stream WriteRequest) returns (stream WriteResponse);
}
