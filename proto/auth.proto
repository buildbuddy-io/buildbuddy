
syntax = "proto3";

package auth;

// Authentication information is passed via headers.
message AuthenticateRequest {}

message AuthenticateResponse {
  // JWT that may be cached short-term for local authentication.
  optional string jwt = 1;
}

message GetPublicKeysRequest {}

message GetPublicKeysResponse {
  repeated PublicKey public_keys = 1;
}

message PublicKey {
  // The RSA-256 public key. For example:
  // -----BEGIN PUBLIC KEY-----
  // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu1SU1LfVLPHCozMxH2Mo
  // 4lgOEePzNm0tRgeLezV6ffAt0gunVTLw7onLRnrq0/IzW7yWR7QkrmBL7jTKEn5u
  // +qKhbwKfBstIs+bMY2Zkp18gnTxKLxoS2tFczGkPLPgizskuemMghRniWaoLcyeh
  // kd3qqGElvW/VDL5AaWTg0nLVkjRo9z+40RQzuVaE8AkAFmxZzow3x+VJYKdjykkJ
  // 0iT9wCS0DRTXu269V264Vf/3jvredZiKRkgwlL9xNAwxXFg0x/XFw005UWVRIkdg
  // cKWTjpBP2dPwVZ4WWC+9aGVd+Gyn1o0CLelf4rEjGoXbAAEgAqeGUxrcIlbjXfbc
  // mwIDAQAB
  // -----END PUBLIC KEY-----
  //
  // More info JWTs, signing, and keys at http://jwt.io
  optional string key = 1;
}

service AuthService {
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse);
  rpc GetPublicKeys(GetPublicKeysRequest) returns (GetPublicKeysResponse);
}
