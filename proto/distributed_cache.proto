syntax = "proto3";

import "proto/resource.proto";

package distributed_cache;

message Isolation {
  resource.CacheType cache_type = 1;
  string remote_instance_name = 2;
}

message Key {
  string key = 1;
  int64 size_bytes = 2;
}

message ReadRequest {
  reserved 1;
  int64 offset = 3;
  int64 limit = 5;
  resource.ResourceName resource = 6;

  // Deprecated fields - use resource field instead
  Isolation isolation = 4;
  Key key = 2;
}

message ReadResponse {
  bytes data = 1;
}

message WriteRequest {
  reserved 1;
  bool finish_write = 3;
  bytes data = 4;
  resource.ResourceName resource = 7;

  // A node that this data should eventually be handed off to.
  // Clients should attempt to replicate this data when possible.
  string handoff_peer = 5;

  // Deprecated fields - use resource field instead
  Isolation isolation = 6;
  Key key = 2;
}

message WriteResponse {
  int64 committed_size = 1;
}

message DeleteRequest {
  resource.ResourceName resource = 3;

  // Deprecated fields - use resource field instead
  Isolation isolation = 1;
  Key key = 2;
}

message DeleteResponse {}

message FindMissingRequest {
  repeated resource.ResourceName resources = 3;

  // Deprecated fields - use resource field instead
  Isolation isolation = 1;
  repeated Key key = 2;
}

message FindMissingResponse {
  repeated Key missing = 1;
}

message MetadataRequest {
  resource.ResourceName resource = 3;

  // Deprecated fields - use resource field instead
  Isolation isolation = 1;
  Key key = 2;
}

message MetadataResponse {
  int64 size_bytes = 1;
  int64 last_access_usec = 2;
  int64 last_modify_usec = 3;
}

message KV {
  Key key = 1;
  bytes value = 2;
}

message GetMultiRequest {
  reserved 1;
  repeated resource.ResourceName resources = 4;

  // Deprecated fields - use resource field instead
  Isolation isolation = 3;
  repeated Key key = 2;
}

message GetMultiResponse {
  repeated KV key_value = 1;
}

message HeartbeatRequest {
  string source = 1;
}

message HeartbeatResponse {}

service DistributedCache {
  rpc Metadata(MetadataRequest) returns (MetadataResponse);
  rpc Read(ReadRequest) returns (stream ReadResponse);
  rpc Write(stream WriteRequest) returns (WriteResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc FindMissing(FindMissingRequest) returns (FindMissingResponse);
  rpc GetMulti(GetMultiRequest) returns (GetMultiResponse);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}
