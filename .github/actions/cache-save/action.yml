name: "Save download caches conditionally"
description: "Conditionally saves external dependencies caches based on cache-hit status, using provided paths."
inputs:
  repo-cache-dir:
    description: 'The Bazel Repo cache directory path (determined by cache-restore)'
    required: true
  go-mod-cache-dir:
    description: 'The Go Mod cache directory path (determined by cache-restore)'
    required: true
  yarn-cache-dir:
    description: 'The Yarn cache directory path (determined by cache-restore)'
    required: true
runs:
  using: "composite"
  steps:
    # Github Actions does not allow overwriting an existing cache key.
    # So we write a new cache key for each run attempt, while restoring the cache with a prefix match.
    # Reference: https://github.com/actions/cache/pull/1452

    - name: Save Bazel Repo Cache
      uses: actions/cache/save@v4
      # Use always() to ensure this step runs, then check the input hit status
      if: always()
      with:
        # Use the input path
        path: ${{ inputs.repo-cache-dir }}
        key: repo-cache-${{ runner.os }}-${{ hashFiles('MODULE.bazel', 'WORKSPACE.bzlmod', 'WORKSPACE', 'deps.bzl') }}-${{ github.run_id }}-${{ github.run_attempt }}

    - name: Save Go Mod Cache
      uses: actions/cache/save@v4
      if: always()
      with:
        # Use the input path
        path: ${{ inputs.go-mod-cache-dir }}
        key: go-mod-cache-${{ runner.os }}-${{ hashFiles('MODULE.bazel', 'WORKSPACE.bzlmod', 'WORKSPACE', 'go.mod', 'go.sum', 'deps.bzl') }}-${{ github.run_id }}-${{ github.run_attempt }}

    - name: Save Yarn Cache
      uses: actions/cache/save@v4
      if: always()
      with:
        # Use the input path
        path: ${{ inputs.yarn-cache-dir }}
        # Ensure hashFiles matches the restore key hashFiles for consistency
        key: yarn-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock', '**/package.json') }}-${{ github.run_id }}-${{ github.run_attempt }}
