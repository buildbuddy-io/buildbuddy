name: "Build Mac-M1 Github Release Artifacts"

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Git branch to checkout."
        required: true
        default: "master"
        type: string
      version_tag:
        description: "Version to tag release artifacts."
        required: true
        type: string
  workflow_call:
    inputs:
      release_branch:
        description: "Git branch to checkout."
        required: true
        type: string
      version_tag:
        description: "Version to tag release artifacts."
        required: true
        type: string

jobs:
  build:
    runs-on: macos-13-xlarge
    defaults:
      run:
        shell: "/usr/bin/arch -arch arm64e /bin/bash --noprofile --norc -eo pipefail {0}"
    steps:
      - name: Clean workspace
        run: |
          set -x
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.release_branch }}
          # We need to fetch git tags to obtain the latest version tag to report
          # the version of the running binary.
          fetch-depth: 0

      - name: Restore caches
        id: cache-restore
        uses: ./.github/actions/cache-restore

      - name: Build and Upload Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEVELOPER_DIR: /Library/Developer/CommandLineTools
          GO_REPOSITORY_USE_HOST_CACHE: 1
          GOMODCACHE: /Users/runner/go-mod-cache
        run: |
          bazelisk build --config=release-m1 --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_ORG_API_KEY }} //enterprise/server/cmd/executor:executor
          cp bazel-bin/enterprise/server/cmd/**/**/executor executor-enterprise-darwin-arm64
          gh release upload ${{ inputs.version_tag }} executor-enterprise-darwin-arm64 --clobber

      - name: Save caches
        uses: ./.github/actions/cache-save
        if: always()
        with:
          repo-cache-dir: ${{ steps.cache-restore.outputs.repo-cache-dir }}
          go-mod-cache-dir: ${{ steps.cache-restore.outputs.go-mod-cache-dir }}
          yarn-cache-dir: ${{ steps.cache-restore.outputs.yarn-cache-dir }}
