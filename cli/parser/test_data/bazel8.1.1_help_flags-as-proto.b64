Cs8CCiVleHBlcmltZW50YWxfcmVwb3NpdG9yeV9yZXNvbHZlZF9maWxlEAAad0lmIG5vbi1lbXB0eSwgd3JpdGUgYSBTdGFybGFyayB2YWx1ZSB3aXRoIHRoZSByZXNvbHZlZCBpbmZvcm1hdGlvbiBvZiBhbGwgU3RhcmxhcmsgcmVwb3NpdG9yeSBydWxlcyB0aGF0IHdlcmUgZXhlY3V0ZWQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAEK+QQKJGluY29tcGF0aWJsZV9ub19pbXBsaWNpdF93YXRjaF9sYWJlbBABGr4CSWYgdHJ1ZSwgdGhlbiBtZXRob2RzIG9uIDxjb2RlPnJlcG9zaXRvcnlfY3R4PC9jb2RlPiB0aGF0IGFyZSBwYXNzZWQgYSBMYWJlbCB3aWxsIG5vIGxvbmdlciBhdXRvbWF0aWNhbGx5IHdhdGNoIHRoZSBmaWxlIHVuZGVyIHRoYXQgbGFiZWwgZm9yIGNoYW5nZXMgZXZlbiBpZiA8Y29kZT53YXRjaCA9ICJubyI8L2NvZGU+LCBhbmQgPGNvZGU+cmVwb3NpdG9yeV9jdHgucGF0aDwvY29kZT4gbm8gbG9uZ2VyIGNhdXNlcyB0aGUgcmV0dXJuZWQgcGF0aCB0byBiZSB3YXRjaGVkLiBVc2UgPGNvZGU+cmVwb3NpdG9yeV9jdHgud2F0Y2g8L2NvZGU+IGluc3RlYWQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoSU1RBUkxBUktfU0VNQU5USUNTUAAKtAIKK2ludGVybmFsX3BlcnNpc3RlbnRfbXVsdGlwbGV4X2J1c3lib3hfdG9vbHMQARo/VHJhY2tpbmcgZmxhZyBmb3Igd2hlbiBtdWx0aXBsZXhlZCBidXN5Ym94IHdvcmtlcnMgYXJlIGVuYWJsZWQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OUzoJRVhFQ1VUSU9OSgxVTkRPQ1VNRU5URURQAAr2AQoaYXV0b2RldGVjdF9zZXJ2ZXJfamF2YWJhc2UQARqIAVdoZW4gLS1ub2F1dG9kZXRlY3Rfc2VydmVyX2phdmFiYXNlIGlzIHBhc3NlZCwgQmF6ZWwgZG9lcyBub3QgZmFsbCBiYWNrIHRvIHRoZSBsb2NhbCBKREsgZm9yIHJ1bm5pbmcgdGhlIGJhemVsIHNlcnZlciBhbmQgaW5zdGVhZCBleGl0cy4iB3N0YXJ0dXAwADoPQUZGRUNUU19PVVRQVVRTOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUoUQkFaRUxfQ0xJRU5UX09QVElPTlNQAArGAgoNaG9zdF9jb25seW9wdBAAGnNBZGRpdGlvbmFsIG9wdGlvbiB0byBwYXNzIHRvIHRoZSBDIGNvbXBpbGVyIHdoZW4gY29tcGlsaW5nIEMgKGJ1dCBub3QgQysrKSBzb3VyY2UgZmlsZXMgaW4gdGhlIGV4ZWMgY29uZmlndXJhdGlvbnMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOhRBQ1RJT05fQ09NTUFORF9MSU5FUzoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1ABCsMDChZpbnN0cnVtZW50YXRpb25fZmlsdGVyEAAa/AFXaGVuIGNvdmVyYWdlIGlzIGVuYWJsZWQsIG9ubHkgcnVsZXMgd2l0aCBuYW1lcyBpbmNsdWRlZCBieSB0aGUgc3BlY2lmaWVkIHJlZ2V4LWJhc2VkIGZpbHRlciB3aWxsIGJlIGluc3RydW1lbnRlZC4gUnVsZXMgcHJlZml4ZWQgd2l0aCAnLScgYXJlIGV4Y2x1ZGVkIGluc3RlYWQuIE5vdGUgdGhhdCBvbmx5IG5vbi10ZXN0IHJ1bGVzIGFyZSBpbnN0cnVtZW50ZWQgdW5sZXNzIC0taW5zdHJ1bWVudF90ZXN0X3RhcmdldHMgaXMgZW5hYmxlZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQrIAQoiYWN0aW9uX2NhY2hlX3N0b3JlX291dHB1dF9tZXRhZGF0YRABGgVuby1vcCIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BKDFVORE9DVU1FTlRFRFAACosFChlyZW1vdGVfYnVpbGRfZXZlbnRfdXBsb2FkEAAaiQNJZiBzZXQgdG8gJ2FsbCcsIGFsbCBsb2NhbCBvdXRwdXRzIHJlZmVyZW5jZWQgYnkgQkVQIGFyZSB1cGxvYWRlZCB0byByZW1vdGUgY2FjaGUuCklmIHNldCB0byAnbWluaW1hbCcsIGxvY2FsIG91dHB1dHMgcmVmZXJlbmNlZCBieSBCRVAgYXJlIG5vdCB1cGxvYWRlZCB0byB0aGUgcmVtb3RlIGNhY2hlLCBleGNlcHQgZm9yIGZpbGVzIHRoYXQgYXJlIGltcG9ydGFudCB0byB0aGUgY29uc3VtZXJzIG9mIEJFUCAoZS5nLiB0ZXN0IGxvZ3MgYW5kIHRpbWluZyBwcm9maWxlKS4gYnl0ZXN0cmVhbTovLyBzY2hlbWUgaXMgYWx3YXlzIHVzZWQgZm9yIHRoZSB1cmkgb2YgZmlsZXMgZXZlbiBpZiB0aGV5IGFyZSBtaXNzaW5nIGZyb20gcmVtb3RlIGNhY2hlLgpEZWZhdWx0IHRvICdtaW5pbWFsJy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KBlJFTU9URVABCpcDCi5leHBlcmltZW50YWxfaW5jcmVtZW50YWxfZGV4aW5nX2FmdGVyX3Byb2d1YXJkEAAanwFXaGV0aGVyIHRvIHVzZSBpbmNyZW1lbnRhbCBkZXhpbmcgdG9vbHMgd2hlbiBidWlsZGluZyBwcm9ndWFyZGVkIEFuZHJvaWQgYmluYXJpZXMuICBWYWx1ZXMgPiAwIHR1cm4gdGhlIGZlYXR1cmUgb24sIHZhbHVlcyA+IDEgcnVuIHRoYXQgbWFueSBkZXhidWlsZGVyIHNoYXJkcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUoMVU5ET0NVTUVOVEVEUAEKoQMKK2V4cGVyaW1lbnRhbF9lbmFibGVfY3JpdGljYWxfcGF0aF9wcm9maWxpbmcQARrSAUlmIHNldCAodGhlIGRlZmF1bHQpLCBjcml0aWNhbCBwYXRoIHByb2ZpbGluZyBpcyBlbmFibGVkIGZvciB0aGUgZXhlY3V0aW9uIHBoYXNlLiBUaGlzIGhhcyBhIHNsaWdodCBvdmVyaGVhZCBpbiBSQU0gYW5kIENQVSwgYW5kIG1heSBwcmV2ZW50IEJhemVsIGZyb20gbWFraW5nIGNlcnRhaW4gYWdncmVzc2l2ZSBSQU0gb3B0aW1pemF0aW9ucyBpbiBzb21lIGNhc2VzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoMVU5ET0NVTUVOVEVEUAAKrwIKG2FsbG93ZWRfbG9jYWxfYWN0aW9uc19yZWdleBAAGnFBIHJlZ2V4IHdoaXRlbGlzdCBmb3IgYWN0aW9uIHR5cGVzIHdoaWNoIG1heSBiZSBydW4gbG9jYWxseS4gSWYgdW5zZXQsIGFsbCBhY3Rpb25zIGFyZSBhbGxvd2VkIHRvIGV4ZWN1dGUgbG9jYWxseSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoMVU5ET0NVTUVOVEVEUAEKoAIKGWRldmljZV9kZWJ1Z19lbnRpdGxlbWVudHMQARpiSWYgc2V0LCBhbmQgY29tcGlsYXRpb24gbW9kZSBpcyBub3QgJ29wdCcsIG9iamMgYXBwcyB3aWxsIGluY2x1ZGUgZGVidWcgZW50aXRsZW1lbnRzIHdoZW4gc2lnbmluZy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6DkNIQU5HRVNfSU5QVVRTSgdTSUdOSU5HUAAKlgYKC2FzcGVjdF9kZXBzEAAazAVIb3cgdG8gcmVzb2x2ZSBhc3BlY3QgZGVwZW5kZW5jaWVzIHdoZW4gdGhlIG91dHB1dCBmb3JtYXQgaXMgb25lIG9mIHt4bWwscHJvdG8scmVjb3JkfS4gJ29mZicgbWVhbnMgbm8gYXNwZWN0IGRlcGVuZGVuY2llcyBhcmUgcmVzb2x2ZWQsICdjb25zZXJ2YXRpdmUnICh0aGUgZGVmYXVsdCkgbWVhbnMgYWxsIGRlY2xhcmVkIGFzcGVjdCBkZXBlbmRlbmNpZXMgYXJlIGFkZGVkIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGV5IGFyZSBnaXZlbiB0aGUgcnVsZSBjbGFzcyBvZiBkaXJlY3QgZGVwZW5kZW5jaWVzLCAncHJlY2lzZScgbWVhbnMgdGhhdCBvbmx5IHRob3NlIGFzcGVjdHMgYXJlIGFkZGVkIHRoYXQgYXJlIHBvc3NpYmx5IGFjdGl2ZSBnaXZlbiB0aGUgcnVsZSBjbGFzcyBvZiB0aGUgZGlyZWN0IGRlcGVuZGVuY2llcy4gTm90ZSB0aGF0IHByZWNpc2UgbW9kZSByZXF1aXJlcyBsb2FkaW5nIG90aGVyIHBhY2thZ2VzIHRvIGV2YWx1YXRlIGEgc2luZ2xlIHRhcmdldCB0aHVzIG1ha2luZyBpdCBzbG93ZXIgdGhhbiB0aGUgb3RoZXIgbW9kZXMuIEFsc28gbm90ZSB0aGF0IGV2ZW4gcHJlY2lzZSBtb2RlIGlzIG5vdCBjb21wbGV0ZWx5IHByZWNpc2U6IHRoZSBkZWNpc2lvbiB3aGV0aGVyIHRvIGNvbXB1dGUgYW4gYXNwZWN0IGlzIGRlY2lkZWQgaW4gdGhlIGFuYWx5c2lzIHBoYXNlLCB3aGljaCBpcyBub3QgcnVuIGR1cmluZyAnYmF6ZWwgcXVlcnknLiIGYXF1ZXJ5IgZjcXVlcnkiBXF1ZXJ5MAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTSgVRVUVSWVABCtkDCi1leHBlcmltZW50YWxfd29ya2VyX3NhbmRib3hfaW5tZW1vcnlfdHJhY2tpbmcQABqAAkEgd29ya2VyIGtleSBtbmVtb25pYyBmb3Igd2hpY2ggdGhlIGNvbnRlbnRzIG9mIHRoZSBzYW5kYm94IGRpcmVjdG9yeSBhcmUgdHJhY2tlZCBpbiBtZW1vcnkuIFRoaXMgbWF5IGltcHJvdmUgYnVpbGQgcGVyZm9ybWFuY2UgYXQgdGhlIGNvc3Qgb2YgYWRkaXRpb25hbCBtZW1vcnkgdXNhZ2UuIE9ubHkgYWZmZWN0cyBzYW5kYm94ZWQgd29ya2Vycy4gTWF5IGJlIHNwZWNpZmllZCBtdWx0aXBsZSB0aW1lcyBmb3IgZGlmZmVyZW50IG1uZW1vbmljcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6CUVYRUNVVElPTkoSRVhFQ1VUSU9OX1NUUkFURUdZUAEKtAMKMGluY29tcGF0aWJsZV9kZXBzZXRfZm9yX2xpYnJhcmllc190b19saW5rX2dldHRlchABGm5XaGVuIHRydWUsIEJhemVsIG5vIGxvbmdlciByZXR1cm5zIGEgbGlzdCBmcm9tIGxpbmtpbmdfY29udGV4dC5saWJyYXJpZXNfdG9fbGluayBidXQgcmV0dXJucyBhIGRlcHNldCBpbnN0ZWFkLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKElNUQVJMQVJLX1NFTUFOVElDU1AACpQCCiJleHBlcmltZW50YWxfYW5ub3VuY2VfcHJvZmlsZV9wYXRoEAEaBk5vLW9wLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoFTk9fT1BKDFVORE9DVU1FTlRFRFAACq0DCihleHBlcmltZW50YWxfd29ya2VyX3VzZV9jZ3JvdXBzX29uX2xpbnV4EAEa3wFPbiBsaW51eCwgcnVuIGFsbCB3b3JrZXJzIGluIGl0cyBvd24gY2dyb3VwICh3aXRob3V0IGFueSBsaW1pdHMgc2V0KSBhbmQgdXNlIHRoZSBjZ3JvdXAncyBvd24gcmVzb3VyY2UgYWNjb3VudGluZyBmb3IgbWVtb3J5IG1lYXN1cmVtZW50cy4gVGhpcyBpcyBvdmVycmlkZGVuIGJ5IC0tZXhwZXJpbWVudGFsX3dvcmtlcl9zYW5kYm94X2hhcmRlbmluZyBmb3Igc2FuZGJveGVkIHdvcmtlcnMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KDFVORE9DVU1FTlRFRFAACp4CChB3b3JrZXJfbXVsdGlwbGV4EAEaPklmIGVuYWJsZWQsIHdvcmtlcnMgd2lsbCB1c2UgbXVsdGlwbGV4aW5nIGlmIHRoZXkgc3VwcG9ydCBpdC4gIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT046I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TShJFWEVDVVRJT05fU1RSQVRFR1lQAArBBAoXZHluYW1pY19yZW1vdGVfc3RyYXRlZ3kQABrZAlRoZSByZW1vdGUgc3RyYXRlZ2llcywgaW4gb3JkZXIsIHRvIHVzZSBmb3IgdGhlIGdpdmVuIG1uZW1vbmljIC0gdGhlIGZpcnN0IGFwcGxpY2FibGUgc3RyYXRlZ3kgaXMgdXNlZC4gSWYgbm8gbW5lbW9uaWMgaXMgZ2l2ZW4sIHRoZSBsaXN0IG9mIHN0cmF0ZWdpZXMgaXMgdXNlZCBhcyB0aGUgZmFsbGJhY2sgZm9yIGFsbCBtbmVtb25pY3MuIFRoZSBkZWZhdWx0IGZhbGxiYWNrIGxpc3QgaXMgYHJlbW90ZWAsIHNvIHRoaXMgZmxhZyB1c3VhbGx5IGRvZXMgbm90IG5lZWQgdG8gYmUgc2V0IGV4cGxpY2l0bHkuIFRha2VzIFttbmVtb25pYz1dcmVtb3RlX3N0cmF0ZWd5WyxyZW1vdGVfc3RyYXRlZ3ksLi4uXSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToJRVhFQ1VUSU9OOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OU0oSRVhFQ1VUSU9OX1NUUkFURUdZUAEKigEKC2Jhc2VfbW9kdWxlEAAaUlNwZWNpZnkgYSBtb2R1bGUgcmVsYXRpdmUgdG8gd2hpY2ggdGhlIHNwZWNpZmllZCB0YXJnZXQgcmVwb3Mgd2lsbCBiZSBpbnRlcnByZXRlZC4iA21vZDAAOg9URVJNSU5BTF9PVVRQVVRKC01PRF9DT01NQU5EUAEK4wEKEmhvc3RfY3Jvc3N0b29sX3RvcBAAGjBOby1vcCBmbGFnLiBXaWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QSgxVTkRPQ1VNRU5URURQAQpXCghwYWNrYWdlcxABGhtEdW1wIHBhY2thZ2UgY2FjaGUgY29udGVudC4iBGR1bXAwADoQQkFaRUxfTU9OSVRPUklOR0oQT1VUUFVUX1NFTEVDVElPTlAACo0DCiB2ZXJzaW9uX3dpbmRvd19mb3JfZGlydHlfbm9kZV9nYxAAGskBTm9kZXMgdGhhdCBoYXZlIGJlZW4gZGlydHkgZm9yIG1vcmUgdGhhbiB0aGlzIG1hbnkgdmVyc2lvbnMgd2lsbCBiZSBkZWxldGVkIGZyb20gdGhlIGdyYXBoIHVwb24gdGhlIG5leHQgdXBkYXRlLiBWYWx1ZXMgbXVzdCBiZSBub24tbmVnYXRpdmUgbG9uZyBpbnRlZ2Vycywgb3IgLTEgaW5kaWNhdGluZyB0aGUgbWF4aW11bSBwb3NzaWJsZSB3aW5kb3cuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSgxVTkRPQ1VNRU5URURQAQrkAQoOZmF0X2Fwa19od2FzYW4QARowTm8tb3AgZmxhZy4gV2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgVOT19PUEoRT1VUUFVUX1BBUkFNRVRFUlNQAAqMAgotZXhwZXJpbWVudGFsX21hdGVyaWFsaXplX3BhcmFtX2ZpbGVzX2RpcmVjdGx5EAEaP0lmIG1hdGVyaWFsaXppbmcgcGFyYW0gZmlsZXMsIGRvIHNvIHdpdGggZGlyZWN0IHdyaXRlcyB0byBkaXNrLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OSgdMT0dHSU5HUAAK1gQKCXJ1bl91bmRlchAAGpcDUHJlZml4IHRvIGluc2VydCBiZWZvcmUgdGhlIGV4ZWN1dGFibGVzIGZvciB0aGUgJ3Rlc3QnIGFuZCAncnVuJyBjb21tYW5kcy4gSWYgdGhlIHZhbHVlIGlzICdmb28gLWJhcicsIGFuZCB0aGUgZXhlY3V0aW9uIGNvbW1hbmQgbGluZSBpcyAndGVzdF9iaW5hcnkgLWJheicsIHRoZW4gdGhlIGZpbmFsIGNvbW1hbmQgbGluZSBpcyAnZm9vIC1iYXIgdGVzdF9iaW5hcnkgLWJheicuVGhpcyBjYW4gYWxzbyBiZSBhIGxhYmVsIHRvIGFuIGV4ZWN1dGFibGUgdGFyZ2V0LiBTb21lIGV4YW1wbGVzIGFyZTogJ3ZhbGdyaW5kJywgJ3N0cmFjZScsICdzdHJhY2UgLWMnLCAndmFsZ3JpbmQgLS1xdWlldCAtLW51bS1jYWxsZXJzPTIwJywgJy8vcGFja2FnZTp0YXJnZXQnLCAgJy8vcGFja2FnZTp0YXJnZXQgLS1vcHRpb25zJy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FEFDVElPTl9DT01NQU5EX0xJTkVTShFPVVRQVVRfUEFSQU1FVEVSU1ABCnUKDXNob3dfbWFrZV9lbnYQARotSW5jbHVkZSB0aGUgIk1ha2UiIGVudmlyb25tZW50IGluIHRoZSBvdXRwdXQuIgRpbmZvMAA6D0FGRkVDVFNfT1VUUFVUUzoPVEVSTUlOQUxfT1VUUFVUSgdMT0dHSU5HUAAKygQKGWV4cGVyaW1lbnRhbF9kb2NrZXJfaW1hZ2UQABqFA1NwZWNpZnkgYSBEb2NrZXIgaW1hZ2UgbmFtZSAoZS5nLiAidWJ1bnR1OmxhdGVzdCIpIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gZXhlY3V0ZSBhIHNhbmRib3hlZCBhY3Rpb24gd2hlbiB1c2luZyB0aGUgZG9ja2VyIHN0cmF0ZWd5IGFuZCB0aGUgYWN0aW9uIGl0c2VsZiBkb2Vzbid0IGFscmVhZHkgaGF2ZSBhIGNvbnRhaW5lci1pbWFnZSBhdHRyaWJ1dGUgaW4gaXRzIHJlbW90ZV9leGVjdXRpb25fcHJvcGVydGllcyBpbiB0aGUgcGxhdGZvcm0gZGVzY3JpcHRpb24uIFRoZSB2YWx1ZSBvZiB0aGlzIGZsYWcgaXMgcGFzc2VkIHZlcmJhdGltIHRvICdkb2NrZXIgcnVuJywgc28gaXQgc3VwcG9ydHMgdGhlIHNhbWUgc3ludGF4IGFuZCBtZWNoYW5pc21zIGFzIERvY2tlciBpdHNlbGYuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVABCp0EChRhbmRyb2lkX2R5bmFtaWNfbW9kZRAAGsICRGV0ZXJtaW5lcyB3aGV0aGVyIEMrKyBkZXBzIG9mIEFuZHJvaWQgcnVsZXMgd2lsbCBiZSBsaW5rZWQgZHluYW1pY2FsbHkgd2hlbiBhIGNjX2JpbmFyeSBkb2VzIG5vdCBleHBsaWNpdGx5IGNyZWF0ZSBhIHNoYXJlZCBsaWJyYXJ5LiAnZGVmYXVsdCcgbWVhbnMgYmF6ZWwgd2lsbCBjaG9vc2Ugd2hldGhlciB0byBsaW5rIGR5bmFtaWNhbGx5LiAgJ2Z1bGx5JyBtZWFucyBhbGwgbGlicmFyaWVzIHdpbGwgYmUgbGlua2VkIGR5bmFtaWNhbGx5LiAnb2ZmJyBtZWFucyB0aGF0IGFsbCBsaWJyYXJpZXMgd2lsbCBiZSBsaW5rZWQgaW4gbW9zdGx5IHN0YXRpYyBtb2RlLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQqxAQoLYW5kcm9pZF9jcHUQABoFTm8tb3AiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QSgxVTkRPQ1VNRU5URURQAQqaBQoNbG9ja2ZpbGVfbW9kZRAAGpcDU3BlY2lmaWVzIGhvdyBhbmQgd2hldGhlciBvciBub3QgdG8gdXNlIHRoZSBsb2NrZmlsZS4gVmFsaWQgdmFsdWVzIGFyZSBgdXBkYXRlYCB0byB1c2UgdGhlIGxvY2tmaWxlIGFuZCB1cGRhdGUgaXQgaWYgdGhlcmUgYXJlIGNoYW5nZXMsIGByZWZyZXNoYCB0byBhZGRpdGlvbmFsbHkgcmVmcmVzaCBtdXRhYmxlIGluZm9ybWF0aW9uICh5YW5rZWQgdmVyc2lvbnMgYW5kIHByZXZpb3VzbHkgbWlzc2luZyBtb2R1bGVzKSBmcm9tIHJlbW90ZSByZWdpc3RyaWVzIGZyb20gdGltZSB0byB0aW1lLCBgZXJyb3JgIHRvIHVzZSB0aGUgbG9ja2ZpbGUgYnV0IHRocm93IGFuIGVycm9yIGlmIGl0J3Mgbm90IHVwLXRvLWRhdGUsIG9yIGBvZmZgIHRvIG5laXRoZXIgcmVhZCBmcm9tIG9yIHdyaXRlIHRvIHRoZSBsb2NrZmlsZS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTSgZCWkxNT0RQAQrqAwotZXhwZXJpbWVudGFsX2d1YXJkX2FnYWluc3RfY29uY3VycmVudF9jaGFuZ2VzEAEa1AFUdXJuIHRoaXMgb2ZmIHRvIGRpc2FibGUgY2hlY2tpbmcgdGhlIGN0aW1lIG9mIGlucHV0IGZpbGVzIG9mIGFuIGFjdGlvbiBiZWZvcmUgdXBsb2FkaW5nIGl0IHRvIGEgcmVtb3RlIGNhY2hlLiBUaGVyZSBtYXkgYmUgY2FzZXMgd2hlcmUgdGhlIExpbnV4IGtlcm5lbCBkZWxheXMgd3JpdGluZyBvZiBmaWxlcywgd2hpY2ggY291bGQgY2F1c2UgZmFsc2UgcG9zaXRpdmVzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoGUkVNT1RFUAAKkAIKG2V4cGVyaW1lbnRhbF9kb2NrZXJfdmVyYm9zZRABGlVJZiBlbmFibGVkLCBCYXplbCB3aWxsIHByaW50IG1vcmUgdmVyYm9zZSBtZXNzYWdlcyBhYm91dCB0aGUgRG9ja2VyIHNhbmRib3ggc3RyYXRlZ3kuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KB0xPR0dJTkdQAAqZAwoQZW5hYmxlX3dvcmtzcGFjZRABGocBSWYgdHJ1ZSwgZW5hYmxlcyB0aGUgbGVnYWN5IFdPUktTUEFDRSBzeXN0ZW0gZm9yIGV4dGVybmFsIGRlcGVuZGVuY2llcy4gU2VlIGh0dHBzOi8vYmF6ZWwuYnVpbGQvZXh0ZXJuYWwvb3ZlcnZpZXcgZm9yIG1vcmUgaW5mb3JtYXRpb24uIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0oSU1RBUkxBUktfU0VNQU5USUNTUAAK5QEKFmxlZ2FjeV9iYXplbF9qYXZhX3Rlc3QQARosTm8tb3AsIGtlcHQgb25seSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDFVORE9DVU1FTlRFRFAACpwCCg9zaG93X3RpbWVzdGFtcHMQARoeSW5jbHVkZSB0aW1lc3RhbXBzIGluIG1lc3NhZ2VzIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAAKhwMKKWV4cGVyaW1lbnRhbF93b3JrZXJfbWV0cmljc19wb2xsX2ludGVydmFsEAAajQFUaGUgaW50ZXJ2YWwgYmV0d2VlbiBjb2xsZWN0aW5nIHdvcmtlciBtZXRyaWNzIGFuZCBwb3NzaWJseSBhdHRlbXB0aW5nIGV2aWN0aW9ucy4gQ2Fubm90IGVmZmVjdGl2ZWx5IGJlIGxlc3MgdGhhbiAxcyBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTjojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlNKEkVYRUNVVElPTl9TVFJBVEVHWVABCtgBCgVxdWlldBABGoYBSWYgdHJ1ZSwgbm8gaW5mb3JtYXRpb25hbCBtZXNzYWdlcyBhcmUgZW1pdHRlZCBvbiB0aGUgY29uc29sZSwgb25seSBlcnJvcnMuIENoYW5naW5nIHRoaXMgb3B0aW9uIHdpbGwgbm90IGNhdXNlIHRoZSBzZXJ2ZXIgdG8gcmVzdGFydC4iB3N0YXJ0dXAwADoPQUZGRUNUU19PVVRQVVRTOhBCQVpFTF9NT05JVE9SSU5HShRCQVpFTF9DTElFTlRfT1BUSU9OU1AACrwCChFzaGFyZV9uYXRpdmVfZGVwcxABGmVJZiB0cnVlLCBuYXRpdmUgbGlicmFyaWVzIHRoYXQgY29udGFpbiBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSB3aWxsIGJlIHNoYXJlZCBhbW9uZyBkaWZmZXJlbnQgdGFyZ2V0cyIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAAqwAgosZXhwZXJpbWVudGFsX2ZpbHRlcl9yX2phcnNfZnJvbV9hbmRyb2lkX3Rlc3QQARpMSWYgZW5hYmxlZCwgUiBKYXJzIHdpbGwgYmUgZmlsdGVyZWQgZnJvbSB0aGUgdGVzdCBhcGsgYnVpbHQgYnkgYW5kcm9pZF90ZXN0LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoOQ0hBTkdFU19JTlBVVFNCDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAKvgUKE2djX3RocmFzaGluZ19saW1pdHMQABqVA0xpbWl0cyB3aGljaCwgaWYgcmVhY2hlZCwgY2F1c2UgR2NUaHJhc2hpbmdEZXRlY3RvciB0byBjcmFzaCBCYXplbCB3aXRoIGFuIE9PTS4gRWFjaCBsaW1pdCBpcyBzcGVjaWZpZWQgYXMgPHBlcmlvZD46PGNvdW50PiB3aGVyZSBwZXJpb2QgaXMgYSBkdXJhdGlvbiBhbmQgY291bnQgaXMgYSBwb3NpdGl2ZSBpbnRlZ2VyLiBJZiBtb3JlIHRoYW4gLS1nY190aHJhc2hpbmdfdGhyZXNob2xkIHBlcmNlbnQgb2YgdGVudXJlZCBzcGFjZSAob2xkIGdlbiBoZWFwKSByZW1haW5zIG9jY3VwaWVkIGFmdGVyIDxjb3VudD4gY29uc2VjdXRpdmUgZnVsbCBHQ3Mgd2l0aGluIDxwZXJpb2Q+LCBhbiBPT00gaXMgdHJpZ2dlcmVkLiBNdWx0aXBsZSBsaW1pdHMgY2FuIGJlIHNwZWNpZmllZCBzZXBhcmF0ZWQgYnkgY29tbWFzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlNKF0JVSUxEX1RJTUVfT1BUSU1JWkFUSU9OUAEK7QIKDmlvc19tdWx0aV9jcHVzEAAakAFDb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBhcmNoaXRlY3R1cmVzIHRvIGJ1aWxkIGFuIGlvc19hcHBsaWNhdGlvbiB3aXRoLiBUaGUgcmVzdWx0IGlzIGEgdW5pdmVyc2FsIGJpbmFyeSBjb250YWluaW5nIGFsbCBzcGVjaWZpZWQgYXJjaGl0ZWN0dXJlcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFOhRMT0FESU5HX0FORF9BTkFMWVNJU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQqABAoIdGVzdF9lbnYQABrVAlNwZWNpZmllcyBhZGRpdGlvbmFsIGVudmlyb25tZW50IHZhcmlhYmxlcyB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSB0ZXN0IHJ1bm5lciBlbnZpcm9ubWVudC4gVmFyaWFibGVzIGNhbiBiZSBlaXRoZXIgc3BlY2lmaWVkIGJ5IG5hbWUsIGluIHdoaWNoIGNhc2UgaXRzIHZhbHVlIHdpbGwgYmUgcmVhZCBmcm9tIHRoZSBCYXplbCBjbGllbnQgZW52aXJvbm1lbnQsIG9yIGJ5IHRoZSBuYW1lPXZhbHVlIHBhaXIuIFRoaXMgb3B0aW9uIGNhbiBiZSB1c2VkIG11bHRpcGxlIHRpbWVzIHRvIHNwZWNpZnkgc2V2ZXJhbCB2YXJpYWJsZXMuIFVzZWQgb25seSBieSB0aGUgJ2JhemVsIHRlc3QnIGNvbW1hbmQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOgtURVNUX1JVTk5FUkoHVEVTVElOR1ABCrYCCh9kZXhvcHRzX3N1cHBvcnRlZF9pbl9kZXhzaGFyZGVyEAAaUWR4IGZsYWdzIHN1cHBvcnRlZCBpbiB0b29sIHRoYXQgZ3JvdXBzIGNsYXNzZXMgZm9yIGluY2x1c2lvbiBpbiBmaW5hbCAuZGV4IGZpbGVzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQUNUSU9OX0NPTU1BTkRfTElORVM6FExPQURJTkdfQU5EX0FOQUxZU0lTSgxVTkRPQ1VNRU5URURQAQr6BAoiaW5jb21wYXRpYmxlX2VuZm9yY2Vfc3RhcmxhcmtfdXRmOBABGsMCSWYgZW5hYmxlZCAob3Igc2V0IHRvICdlcnJvcicpLCBmYWlsIGlmIFN0YXJsYXJrIGZpbGVzIGFyZSBub3QgVVRGLTggZW5jb2RlZC4gSWYgc2V0IHRvICd3YXJuaW5nJywgZW1pdCBhIHdhcm5pbmcgaW5zdGVhZC4gSWYgc2V0IHRvICdvZmYnLCBCYXplbCBhc3N1bWVzIHRoYXQgU3RhcmxhcmsgZmlsZXMgYXJlIFVURi04IGVuY29kZWQgYnV0IGRvZXMgbm90IHZlcmlmeSB0aGlzIGFzc3VtcHRpb24uIE5vdGUgdGhhdCBTdGFybGFyayBmaWxlcyB3aGljaCBhcmUgbm90IFVURi04IGVuY29kZWQgY2FuIGNhdXNlIEJhemVsIHRvIGJlaGF2ZSBpbmNvbnNpc3RlbnRseS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShBJTlBVVF9TVFJJQ1RORVNTUAAK8QMKDXNhbmRib3hfZGVidWcQARq9AkVuYWJsZXMgZGVidWdnaW5nIGZlYXR1cmVzIGZvciB0aGUgc2FuZGJveGluZyBmZWF0dXJlLiBUaGlzIGluY2x1ZGVzIHR3byB0aGluZ3M6IGZpcnN0LCB0aGUgc2FuZGJveCByb290IGNvbnRlbnRzIGFyZSBsZWZ0IHVudG91Y2hlZCBhZnRlciBhIGJ1aWxkOyBhbmQgc2Vjb25kLCBwcmludHMgZXh0cmEgZGVidWdnaW5nIGluZm9ybWF0aW9uIG9uIGV4ZWN1dGlvbi4gVGhpcyBjYW4gaGVscCBkZXZlbG9wZXJzIG9mIEJhemVsIG9yIFN0YXJsYXJrIHJ1bGVzIHdpdGggZGVidWdnaW5nIGZhaWx1cmVzIGR1ZSB0byBtaXNzaW5nIGlucHV0IGZpbGVzLCBldGMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9URVJNSU5BTF9PVVRQVVRKB0xPR0dJTkdQAAr/AwonZXhwZXJpbWVudGFsX3VzZV9oZXJtZXRpY19saW51eF9zYW5kYm94EAEarAJJZiBzZXQgdG8gdHJ1ZSwgZG8gbm90IG1vdW50IHJvb3QsIG9ubHkgbW91bnQgd2hhdHMgcHJvdmlkZWQgd2l0aCBzYW5kYm94X2FkZF9tb3VudF9wYWlyLiBJbnB1dCBmaWxlcyB3aWxsIGJlIGhhcmRsaW5rZWQgdG8gdGhlIHNhbmRib3ggaW5zdGVhZCBvZiBzeW1saW5rZWQgdG8gZnJvbSB0aGUgc2FuZGJveC4gSWYgYWN0aW9uIGlucHV0IGZpbGVzIGFyZSBsb2NhdGVkIG9uIGEgZmlsZXN5c3RlbSBkaWZmZXJlbnQgZnJvbSB0aGUgc2FuZGJveCwgdGhlbiB0aGUgaW5wdXQgZmlsZXMgd2lsbCBiZSBjb3BpZWQgaW5zdGVhZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkoSRVhFQ1VUSU9OX1NUUkFURUdZUAAK6gIKEGJ1aWxkX3Rlc3RzX29ubHkQARq1AUlmIHNwZWNpZmllZCwgb25seSAqX3Rlc3QgYW5kIHRlc3Rfc3VpdGUgcnVsZXMgd2lsbCBiZSBidWlsdCBhbmQgb3RoZXIgdGFyZ2V0cyBzcGVjaWZpZWQgb24gdGhlIGNvbW1hbmQgbGluZSB3aWxsIGJlIGlnbm9yZWQuIEJ5IGRlZmF1bHQgZXZlcnl0aGluZyB0aGF0IHdhcyByZXF1ZXN0ZWQgd2lsbCBiZSBidWlsdC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAArUAgoUY2hlY2tfYnpsX3Zpc2liaWxpdHkQARpBSWYgZGlzYWJsZWQsIC5iemwgbG9hZCB2aXNpYmlsaXR5IGVycm9ycyBhcmUgZGVtb3RlZCB0byB3YXJuaW5ncy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTShBJTlBVVF9TVFJJQ1RORVNTUAAKiQMKIGluY29tcGF0aWJsZV9kaXNhbGxvd19lbXB0eV9nbG9iEAEaU0lmIHNldCB0byB0cnVlLCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgYGFsbG93X2VtcHR5YCBhcmd1bWVudCBvZiBnbG9iKCkgaXMgRmFsc2UuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRCVUlMRF9GSUxFX1NFTUFOVElDU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoSU1RBUkxBUktfU0VNQU5USUNTUAAKpAIKGHByb3RvX3Rvb2xjaGFpbl9mb3JfamF2YRAAGkpMYWJlbCBvZiBwcm90b19sYW5nX3Rvb2xjaGFpbigpIHdoaWNoIGRlc2NyaWJlcyBob3cgdG8gY29tcGlsZSBKYXZhIHByb3RvcyIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0oNVU5DQVRFR09SSVpFRFABCtMCChVyZW1vdGVfbG9jYWxfZmFsbGJhY2sQARpWV2hldGhlciB0byBmYWxsIGJhY2sgdG8gc3RhbmRhbG9uZSBsb2NhbCBleGVjdXRpb24gc3RyYXRlZ3kgaWYgcmVtb3RlIGV4ZWN1dGlvbiBmYWlscy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KBlJFTU9URVAACt4BCg1jcm9zc3Rvb2xfdG9wEAAaME5vLW9wIGZsYWcuIFdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BKDFVORE9DVU1FTlRFRFABCpUDCitpbmNvbXBhdGlibGVfbW9kaWZ5X2V4ZWN1dGlvbl9pbmZvX2FkZGl0aXZlEAEaggFXaGVuIGVuYWJsZWQsIHBhc3NpbmcgbXVsdGlwbGUgLS1tb2RpZnlfZXhlY3V0aW9uX2luZm8gZmxhZ3MgaXMgYWRkaXRpdmUuIFdoZW4gZGlzYWJsZWQsIG9ubHkgdGhlIGxhc3QgZmxhZyBpcyB0YWtlbiBpbnRvIGFjY291bnQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT046D0FGRkVDVFNfT1VUUFVUUzoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKEkVYRUNVVElPTl9TVFJBVEVHWVAACtoDCg1yZW1vdGVfaGVhZGVyEAAa5AFTcGVjaWZ5IGEgaGVhZGVyIHRoYXQgd2lsbCBiZSBpbmNsdWRlZCBpbiByZXF1ZXN0czogLS1yZW1vdGVfaGVhZGVyPU5hbWU9VmFsdWUuIE11bHRpcGxlIGhlYWRlcnMgY2FuIGJlIHBhc3NlZCBieSBzcGVjaWZ5aW5nIHRoZSBmbGFnIG11bHRpcGxlIHRpbWVzLiBNdWx0aXBsZSB2YWx1ZXMgZm9yIHRoZSBzYW1lIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBjb21tYS1zZXBhcmF0ZWQgbGlzdC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAE6B1VOS05PV05KBlJFTU9URVABCr0CChZzdHJpY3Rfc3lzdGVtX2luY2x1ZGVzEAEaYElmIHRydWUsIGhlYWRlcnMgZm91bmQgdGhyb3VnaCBzeXN0ZW0gaW5jbHVkZSBwYXRocyAoLWlzeXN0ZW0pIGFyZSBhbHNvIHJlcXVpcmVkIHRvIGJlIGRlY2xhcmVkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6EUVBR0VSTkVTU19UT19FWElUShBJTlBVVF9TVFJJQ1RORVNTUAAK8AUKFnJlbW90ZV9tYXhfY29ubmVjdGlvbnMQABrVA0xpbWl0IHRoZSBtYXggbnVtYmVyIG9mIGNvbmN1cnJlbnQgY29ubmVjdGlvbnMgdG8gcmVtb3RlIGNhY2hlL2V4ZWN1dG9yLiBCeSBkZWZhdWx0IHRoZSB2YWx1ZSBpcyAxMDAuIFNldHRpbmcgdGhpcyB0byAwIG1lYW5zIG5vIGxpbWl0YXRpb24uCkZvciBIVFRQIHJlbW90ZSBjYWNoZSwgb25lIFRDUCBjb25uZWN0aW9uIGNvdWxkIGhhbmRsZSBvbmUgcmVxdWVzdCBhdCBvbmUgdGltZSwgc28gQmF6ZWwgY291bGQgbWFrZSB1cCB0byAtLXJlbW90ZV9tYXhfY29ubmVjdGlvbnMgY29uY3VycmVudCByZXF1ZXN0cy4KRm9yIGdSUEMgcmVtb3RlIGNhY2hlL2V4ZWN1dG9yLCBvbmUgZ1JQQyBjaGFubmVsIGNvdWxkIHVzdWFsbHkgaGFuZGxlIDEwMCsgY29uY3VycmVudCByZXF1ZXN0cywgc28gQmF6ZWwgY291bGQgbWFrZSBhcm91bmQgYC0tcmVtb3RlX21heF9jb25uZWN0aW9ucyAqIDEwMGAgY29uY3VycmVudCByZXF1ZXN0cy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TSgZSRU1PVEVQAQqTAgodaWdub3JlX3Vuc3VwcG9ydGVkX3NhbmRib3hpbmcQARpQRG8gbm90IHByaW50IGEgd2FybmluZyB3aGVuIHNhbmRib3hlZCBleGVjdXRpb24gaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIHN5c3RlbS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D1RFUk1JTkFMX09VVFBVVEoHTE9HR0lOR1AACv0CChdhbmRyb2lkX21hbmlmZXN0X21lcmdlchAAGo4BU2VsZWN0cyB0aGUgbWFuaWZlc3QgbWVyZ2VyIHRvIHVzZSBmb3IgYW5kcm9pZF9iaW5hcnkgcnVsZXMuIEZsYWcgdG8gaGVscCB0aGV0cmFuc2l0aW9uIHRvIHRoZSBBbmRyb2lkIG1hbmlmZXN0IG1lcmdlciBmcm9tIHRoZSBsZWdhY3kgbWVyZ2VyLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJUzoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEVKCVRPT0xDSEFJTlABCowEChByZXBvc2l0b3J5X2NhY2hlEAAa8AFTcGVjaWZpZXMgdGhlIGNhY2hlIGxvY2F0aW9uIG9mIHRoZSBkb3dubG9hZGVkIHZhbHVlcyBvYnRhaW5lZCBkdXJpbmcgdGhlIGZldGNoaW5nIG9mIGV4dGVybmFsIHJlcG9zaXRvcmllcy4gQW4gZW1wdHkgc3RyaW5nIGFzIGFyZ3VtZW50IHJlcXVlc3RzIHRoZSBjYWNoZSB0byBiZSBkaXNhYmxlZCwgb3RoZXJ3aXNlIHRoZSBkZWZhdWx0IG9mICc8b3V0cHV0X3VzZXJfcm9vdD4vY2FjaGUvcmVwb3MvdjEnIGlzIHVzZWQiD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05KFEJBWkVMX0NMSUVOVF9PUFRJT05TUAEK/QIKEXVubGltaXRfY29yZWR1bXBzEAEapAJSYWlzZXMgdGhlIHNvZnQgY29yZWR1bXAgbGltaXQgdG8gdGhlIGhhcmQgbGltaXQgdG8gbWFrZSBjb3JlZHVtcHMgb2YgdGhlIHNlcnZlciAoaW5jbHVkaW5nIHRoZSBKVk0pIGFuZCB0aGUgY2xpZW50IHBvc3NpYmxlIHVuZGVyIGNvbW1vbiBjb25kaXRpb25zLiBTdGljayB0aGlzIGZsYWcgaW4geW91ciBiYXplbHJjIG9uY2UgYW5kIGZvcmdldCBhYm91dCBpdCBzbyB0aGF0IHlvdSBnZXQgY29yZWR1bXBzIHdoZW4geW91IGFjdHVhbGx5IGVuY291bnRlciBhIGNvbmRpdGlvbiB0aGF0IHRyaWdnZXJzIHRoZW0uIgdzdGFydHVwMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05KFEJBWkVMX0NMSUVOVF9PUFRJT05TUAAKqwIKHXVzZV90YXJnZXRfcGxhdGZvcm1fZm9yX3Rlc3RzEAEaY0lmIHRydWUsIHRoZW4gQmF6ZWwgd2lsbCB1c2UgdGhlIHRhcmdldCBwbGF0Zm9ybSBmb3IgcnVubmluZyB0ZXN0cyByYXRoZXIgdGhhbiB0aGUgdGVzdCBleGVjIGdyb3VwLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OShJFWEVDVVRJT05fU1RSQVRFR1lQAAq9BAoTbG9jYWxfY3B1X3Jlc291cmNlcxAAGt8CRXhwbGljaXRseSBzZXQgdGhlIHRvdGFsIG51bWJlciBvZiBsb2NhbCBDUFUgY29yZXMgYXZhaWxhYmxlIHRvIEJhemVsIHRvIHNwZW5kIG9uIGJ1aWxkIGFjdGlvbnMgZXhlY3V0ZWQgbG9jYWxseS4gVGFrZXMgYW4gaW50ZWdlciwgb3IgIkhPU1RfQ1BVUyIsIG9wdGlvbmFsbHkgZm9sbG93ZWQgYnkgWy18Kl08ZmxvYXQ+IChlZy4gSE9TVF9DUFVTKi41IHRvIHVzZSBoYWxmIHRoZSBhdmFpbGFibGUgQ1BVIGNvcmVzKS4gQnkgZGVmYXVsdCwgKCJIT1NUX0NQVVMiKSwgQmF6ZWwgd2lsbCBxdWVyeSBzeXN0ZW0gY29uZmlndXJhdGlvbiB0byBlc3RpbWF0ZSB0aGUgbnVtYmVyIG9mIENQVSBjb3JlcyBhdmFpbGFibGUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OU0oXQlVJTERfVElNRV9PUFRJTUlaQVRJT05QAQqAAwoMcmVtb3RlX3Byb3h5EAAaiwFDb25uZWN0IHRvIHRoZSByZW1vdGUgY2FjaGUgdGhyb3VnaCBhIHByb3h5LiBDdXJyZW50bHkgdGhpcyBmbGFnIGNhbiBvbmx5IGJlIHVzZWQgdG8gY29uZmlndXJlIGEgVW5peCBkb21haW4gc29ja2V0ICh1bml4Oi9wYXRoL3RvL3NvY2tldCkuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgZSRU1PVEVQAQpnCg9zZXJ2ZXJfamF2YWJhc2UQABotUGF0aCB0byB0aGUgSlZNIHVzZWQgdG8gZXhlY3V0ZSBCYXplbCBpdHNlbGYuIgdzdGFydHVwMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQrTAQoPbWVtcHJvZl9wcm9maWxlEAAaFFVzZSBtZW1wcm9mIHByb2ZpbGUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAEK/AEKGXRvb2xfamF2YV9ydW50aW1lX3ZlcnNpb24QABo/VGhlIEphdmEgcnVudGltZSB2ZXJzaW9uIHVzZWQgdG8gZXhlY3V0ZSB0b29scyBkdXJpbmcgdGhlIGJ1aWxkIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEKmwQKEmV4cGFuZF90ZXN0X3N1aXRlcxABGtcCRXhwYW5kIHRlc3Rfc3VpdGUgdGFyZ2V0cyBpbnRvIHRoZWlyIGNvbnN0aXR1ZW50IHRlc3RzIGJlZm9yZSBhbmFseXNpcy4gV2hlbiB0aGlzIGZsYWcgaXMgdHVybmVkIG9uICh0aGUgZGVmYXVsdCksIG5lZ2F0aXZlIHRhcmdldCBwYXR0ZXJucyB3aWxsIGFwcGx5IHRvIHRoZSB0ZXN0cyBiZWxvbmdpbmcgdG8gdGhlIHRlc3Qgc3VpdGUsIG90aGVyd2lzZSB0aGV5IHdpbGwgbm90LiBUdXJuaW5nIG9mZiB0aGlzIGZsYWcgaXMgdXNlZnVsIHdoZW4gdG9wLWxldmVsIGFzcGVjdHMgYXJlIGFwcGxpZWQgYXQgY29tbWFuZCBsaW5lOiB0aGVuIHRoZXkgY2FuIGFuYWx5emUgdGVzdF9zdWl0ZSB0YXJnZXRzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVNKDVVOQ0FURUdPUklaRURQAAqbAgoDYWRiEAAa4gFhZGIgYmluYXJ5IHRvIHVzZSBmb3IgdGhlICdtb2JpbGUtaW5zdGFsbCcgY29tbWFuZC4gSWYgdW5zcGVjaWZpZWQsIHRoZSBvbmUgaW4gdGhlIEFuZHJvaWQgU0RLIHNwZWNpZmllZCBieSB0aGUgLS1hbmRyb2lkX3Nka19jaGFubmVsIGNvbW1hbmQgbGluZSBvcHRpb24gKG9yICB0aGUgZGVmYXVsdCBTREsgaWYgLS1hbmRyb2lkX3Nka19jaGFubmVsIGlzIG5vdCBzcGVjaWZpZWQpIGlzIHVzZWQuIg5tb2JpbGUtaW5zdGFsbDAAOg5DSEFOR0VTX0lOUFVUU0oJVE9PTENIQUlOUAEKuQIKLmV4cGVyaW1lbnRhbF9za3lmcmFtZV90YXJnZXRfcGF0dGVybl9ldmFsdWF0b3IQARpoVXNlIHRoZSBTa3lmcmFtZS1iYXNlZCB0YXJnZXQgcGF0dGVybiBldmFsdWF0b3I7IGltcGxpZXMgLS1leHBlcmltZW50YWxfaW50ZXJsZWF2ZV9sb2FkaW5nX2FuZF9hbmFseXNpcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDFVORE9DVU1FTlRFRFAACrgCCh9idWlsZF9ldmVudF9wdWJsaXNoX2FsbF9hY3Rpb25zEAEaKFdoZXRoZXIgYWxsIGFjdGlvbnMgc2hvdWxkIGJlIHB1Ymxpc2hlZC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6D0FGRkVDVFNfT1VUUFVUU0oHTE9HR0lOR1AACqgCCh9leHBlcmltZW50YWxfZ2VuZXJhdGVfbGx2bV9sY292EAEaOUlmIHRydWUsIGNvdmVyYWdlIGZvciBjbGFuZyB3aWxsIGdlbmVyYXRlIGFuIExDT1YgcmVwb3J0LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0IMRVhQRVJJTUVOVEFMSg1VTkNBVEVHT1JJWkVEUAAKwAIKJ2V4cGVyaW1lbnRhbF9hbmRyb2lkX3Jlc291cmNlX3Nocmlua2luZxABGkVFbmFibGVzIHJlc291cmNlIHNocmlua2luZyBmb3IgYW5kcm9pZF9iaW5hcnkgQVBLcyB0aGF0IHVzZSBQcm9HdWFyZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUUzoUTE9BRElOR19BTkRfQU5BTFlTSVNCDEVYUEVSSU1FTlRBTEoRT1VUUFVUX1BBUkFNRVRFUlNQAAreAgogZXhwZXJpbWVudGFsX3VzZV9uZXdfd29ya2VyX3Bvb2wQARqYAVVzZXMgYSBuZXcgd29ya2VyIHBvb2wgaW1wbGVtZW50YXRpb24gKG5vIGNoYW5nZSBpbiBiZWhhdmlvciwgcmVpbXBsZW1lbnRhdGlvbiBvZiAgdGhlIHdvcmtlciBwb29sIGluIG9yZGVyIHRvIGRlcHJlY2F0ZSB0aGUgdXNlIG9mIGEgdGhpcmQgcGFydHkgdG9vbCkuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KDFVORE9DVU1FTlRFRFAACs0CCgl1c2VfaWphcnMQARqfAUlmIGVuYWJsZWQsIHRoaXMgb3B0aW9uIGNhdXNlcyBKYXZhIGNvbXBpbGF0aW9uIHRvIHVzZSBpbnRlcmZhY2UgamFycy4gVGhpcyB3aWxsIHJlc3VsdCBpbiBmYXN0ZXIgaW5jcmVtZW50YWwgY29tcGlsYXRpb24sIGJ1dCBlcnJvciBtZXNzYWdlcyBjYW4gYmUgZGlmZmVyZW50LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFAACp8CCihleHBlcmltZW50YWxfZXh0cmFfYWN0aW9uX3RvcF9sZXZlbF9vbmx5EAEaU0RlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgYXNwZWN0cy4gT25seSBzY2hlZHVsZXMgZXh0cmFfYWN0aW9ucyBmb3IgdG9wIGxldmVsIHRhcmdldHMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAAKhgMKFGlvc19zaW11bGF0b3JfZGV2aWNlEAAazwFUaGUgZGV2aWNlIHRvIHNpbXVsYXRlIHdoZW4gcnVubmluZyBhbiBpT1MgYXBwbGljYXRpb24gaW4gdGhlIHNpbXVsYXRvciwgZS5nLiAnaVBob25lIDYnLiBZb3UgY2FuIGdldCBhIGxpc3Qgb2YgZGV2aWNlcyBieSBydW5uaW5nICd4Y3J1biBzaW1jdGwgbGlzdCBkZXZpY2V0eXBlcycgb24gdGhlIG1hY2hpbmUgdGhlIHNpbXVsYXRvciB3aWxsIGJlIHJ1biBvbi4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6C1RFU1RfUlVOTkVSSgdURVNUSU5HUAEKlAIKJ2V4cGVyaW1lbnRhbF9za3lmb2N1c19oYW5kbGluZ19zdHJhdGVneRAAGkVTdHJhdGVnaWVzIGZvciBTa3lmb2N1cyB0byBoYW5kbGUgY2hhbmdlcyBvdXRzaWRlIG9mIHRoZSB3b3JraW5nIHNldC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6EUVBR0VSTkVTU19UT19FWElUSgdMT0dHSU5HUAEK5QEKMGluY29tcGF0aWJsZV9wYWNrYWdlX2dyb3VwX2luY2x1ZGVzX2RvdWJsZV9zbGFzaBABGmdJZiBlbmFibGVkLCB3aGVuIG91dHB1dHRpbmcgcGFja2FnZV9ncm91cCdzIGBwYWNrYWdlc2AgYXR0cmlidXRlLCB0aGUgbGVhZGluZyBgLy9gIHdpbGwgbm90IGJlIG9taXR0ZWQuIgZhcXVlcnkiBmNxdWVyeSIFcXVlcnkwADoPVEVSTUlOQUxfT1VUUFVUQhNJTkNPTVBBVElCTEVfQ0hBTkdFSgVRVUVSWVAACpkCCjFpbmNvbXBhdGlibGVfdmFsaWRhdGVfdG9wX2xldmVsX2hlYWRlcl9pbmNsdXNpb25zEAEaLlRoaXMgZmxhZyBpcyBhIG5vb3AgYW5kIHNjaGVkdWxlZCBmb3IgcmVtb3ZhbC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QQhNJTkNPTVBBVElCTEVfQ0hBTkdFShBJTlBVVF9TVFJJQ1RORVNTUAAKrQQKEGhlYXBfZHVtcF9vbl9vb20QARqqAldoZXRoZXIgdG8gbWFudWFsbHkgb3V0cHV0IGEgaGVhcCBkdW1wIGlmIGFuIE9PTSBpcyB0aHJvd24gKGluY2x1ZGluZyBtYW51YWwgT09NcyBkdWUgdG8gcmVhY2hpbmcgLS1nY190aHJhc2hpbmdfbGltaXRzKS4gVGhlIGR1bXAgd2lsbCBiZSB3cml0dGVuIHRvIDxvdXRwdXRfYmFzZT4vPGludm9jYXRpb25faWQ+LmhlYXBkdW1wLmhwcm9mLiBUaGlzIG9wdGlvbiBlZmZlY3RpdmVseSByZXBsYWNlcyAtWFg6K0hlYXBEdW1wT25PdXRPZk1lbW9yeUVycm9yLCB3aGljaCBoYXMgbm8gZWZmZWN0IGZvciBtYW51YWwgT09Ncy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6EEJBWkVMX01PTklUT1JJTkdKB0xPR0dJTkdQAArTBgoRaW5qZWN0X3JlcG9zaXRvcnkQABrSBEFkZHMgYSBuZXcgcmVwb3NpdG9yeSB3aXRoIGEgbG9jYWwgcGF0aCBpbiB0aGUgZm9ybSBvZiA8cmVwb3NpdG9yeSBuYW1lPj08cGF0aD4uIFRoaXMgb25seSB0YWtlcyBlZmZlY3Qgd2l0aCAtLWVuYWJsZV9iemxtb2QgYW5kIGlzIGVxdWl2YWxlbnQgdG8gYWRkaW5nIGEgY29ycmVzcG9uZGluZyBgbG9jYWxfcmVwb3NpdG9yeWAgdG8gdGhlIHJvb3QgbW9kdWxlJ3MgTU9EVUxFLmJhemVsIGZpbGUgdmlhIGB1c2VfcmVwb19ydWxlYC4gSWYgdGhlIGdpdmVuIHBhdGggaXMgYW4gYWJzb2x1dGUgcGF0aCwgaXQgd2lsbCBiZSB1c2VkIGFzIGl0IGlzLiBJZiB0aGUgZ2l2ZW4gcGF0aCBpcyBhIHJlbGF0aXZlIHBhdGgsIGl0IGlzIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5LiBJZiB0aGUgZ2l2ZW4gcGF0aCBzdGFydHMgd2l0aCAnJXdvcmtzcGFjZSUnLCBpdCBpcyByZWxhdGl2ZSB0byB0aGUgd29ya3NwYWNlIHJvb3QsIHdoaWNoIGlzIHRoZSBvdXRwdXQgb2YgYGJhemVsIGluZm8gd29ya3NwYWNlYC4gSWYgdGhlIGdpdmVuIHBhdGggaXMgZW1wdHksIHRoZW4gcmVtb3ZlIGFueSBwcmV2aW91cyBpbmplY3Rpb25zLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wAToHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCpkCCjRpbmNvbXBhdGlibGVfdXNlX3Rvb2xjaGFpbl9yZXNvbHV0aW9uX2Zvcl9qYXZhX3J1bGVzEAEaLU5vLW9wLiBLZXB0IGhlcmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkITSU5DT01QQVRJQkxFX0NIQU5HRUoMVU5ET0NVTUVOVEVEUAAK2gUKInNreWZyYW1lX2hpZ2hfd2F0ZXJfbWFya190aHJlc2hvbGQQABqiA0ZsYWcgZm9yIGFkdmFuY2VkIGNvbmZpZ3VyYXRpb24gb2YgQmF6ZWwncyBpbnRlcm5hbCBTa3lmcmFtZSBlbmdpbmUuIElmIEJhemVsIGRldGVjdHMgaXRzIHJldGFpbmVkIGhlYXAgcGVyY2VudGFnZSB1c2FnZSBpcyBhdCBsZWFzdCB0aGlzIHRocmVzaG9sZCwgaXQgd2lsbCBkcm9wIHVubmVjZXNzYXJ5IHRlbXBvcmFyeSBTa3lmcmFtZSBzdGF0ZS4gVHdlYWtpbmcgdGhpcyBtYXkgbGV0IHlvdSBtaXRpZ2F0ZSB3YWxsIHRpbWUgaW1wYWN0IG9mIEdDIHRocmFzaGluZywgd2hlbiB0aGUgR0MgdGhyYXNoaW5nIGlzIChpKSBjYXVzZWQgYnkgdGhlIG1lbW9yeSB1c2FnZSBvZiB0aGlzIHRlbXBvcmFyeSBzdGF0ZSBhbmQgKGlpKSBtb3JlIGNvc3RseSB0aGFuIHJlY29uc3RpdHV0aW5nIHRoZSBzdGF0ZSB3aGVuIGl0IGlzIG5lZWRlZC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TShdCVUlMRF9USU1FX09QVElNSVpBVElPTlABCvMBChJyZXdpbmRfbG9zdF9pbnB1dHMQARo8V2hldGhlciB0byB1c2UgYWN0aW9uIHJld2luZGluZyB0byByZWNvdmVyIGZyb20gbG9zdCBpbnB1dHMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KDFVORE9DVU1FTlRFRFAACtUECipqdm1faGVhcF9oaXN0b2dyYW1faW50ZXJuYWxfb2JqZWN0X3BhdHRlcm4QABrBAlJlZ2V4IGZvciBvdmVycmlkaW5nIHRoZSBtYXRjaGluZyBsb2dpYyBmb3IgSkRLMjErIEpWTSBoZWFwIG1lbW9yeSBjb2xsZWN0aW9uLiBXZSBhcmUgcmVseWluZyBvbiB2b2xhdGlsZSBpbnRlcm5hbCBHMSBHQyBpbXBsZW1lbmF0aW9uIGRldGFpbHMgdG8gZ2V0IGEgY2xlYW4gbWVtb3J5IG1ldHJpYywgdGhpcyBvcHRpb24gYWxsb3dzIHVzIHRvIGFkYXB0IHRvIGNoYW5nZXMgaW4gdGhhdCBpbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiB3aXRob3V0IGhhdmluZyB0byB3YWl0IGZvciBhIGJpbmFyeSByZWxlYXNlLiAgUGFzc2VkIHRvIEpESyBNYXRjaGVyLmZpbmQoKSIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoHTE9HR0lOR1ABCt4BChdqYXZhX2hlYWRlcl9jb21waWxhdGlvbhABGiNDb21waWxlIGlqYXJzIGRpcmVjdGx5IGZyb20gc291cmNlLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFAACtwCCh9leHBlcmltZW50YWxfZW5hYmxlX3NjbF9kaWFsZWN0EAEaPElmIHNldCB0byB0cnVlLCAuc2NsIGZpbGVzIG1heSBiZSB1c2VkIGluIGxvYWQoKSBzdGF0ZW1lbnRzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUQlVJTERfRklMRV9TRU1BTlRJQ1NKElNUQVJMQVJLX1NFTUFOVElDU1AACrADChRvdXRwdXRfdHJlZV90cmFja2luZxABGuMBSWYgc2V0LCB0ZWxsIHRoZSBvdXRwdXQgc2VydmljZSAoaWYgYW55KSB0byB0cmFjayB3aGVuIGZpbGVzIGluIHRoZSBvdXRwdXQgdHJlZSBoYXZlIGJlZW4gbW9kaWZpZWQgZXh0ZXJuYWxseSAobm90IGJ5IHRoZSBidWlsZCBzeXN0ZW0pLiBUaGlzIHNob3VsZCBpbXByb3ZlIGluY3JlbWVudGFsIGJ1aWxkIHNwZWVkIHdoZW4gYW4gYXBwcm9wcmlhdGUgb3V0cHV0IHNlcnZpY2UgaXMgZW5hYmxlZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05KDFVORE9DVU1FTlRFRFAACuwDChNyZW1vdGVfY2FjaGVfaGVhZGVyEAAa8AFTcGVjaWZ5IGEgaGVhZGVyIHRoYXQgd2lsbCBiZSBpbmNsdWRlZCBpbiBjYWNoZSByZXF1ZXN0czogLS1yZW1vdGVfY2FjaGVfaGVhZGVyPU5hbWU9VmFsdWUuIE11bHRpcGxlIGhlYWRlcnMgY2FuIGJlIHBhc3NlZCBieSBzcGVjaWZ5aW5nIHRoZSBmbGFnIG11bHRpcGxlIHRpbWVzLiBNdWx0aXBsZSB2YWx1ZXMgZm9yIHRoZSBzYW1lIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBjb21tYS1zZXBhcmF0ZWQgbGlzdC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAE6B1VOS05PV05KBlJFTU9URVABCtgDChlleHBlcmltZW50YWxfZG9ybWFudF9kZXBzEAEarwEgSWYgc2V0IHRvIHRydWUsIGF0dHIubGFiZWwobWF0ZXJpYWxpemVyPSksIGF0dHIoZm9yX2RlcGVuZGVuY3lfcmVzb2x1dGlvbj0pLCBhdHRyLmRvcm1hbnRfbGFiZWwoKSwgYXR0ci5kb3JtYW50X2xhYmVsX2xpc3QoKSBhbmQgcnVsZShmb3JfZGVwZW5kZW5jeV9yZXNvbHV0aW9uPSkgYXJlIGFsbG93ZWQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRCVUlMRF9GSUxFX1NFTUFOVElDU0IMRVhQRVJJTUVOVEFMShJTVEFSTEFSS19TRU1BTlRJQ1NQAArxAQoIY29tcGlsZXIQABoxVGhlIEMrKyBjb21waWxlciB0byB1c2UgZm9yIGNvbXBpbGluZyB0aGUgdGFyZ2V0LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6CUVYRUNVVElPTkoJVE9PTENIQUlOUAEK3AIKCmphdmFfZGVidWcQABqtAUNhdXNlcyB0aGUgSmF2YSB2aXJ0dWFsIG1hY2hpbmUgb2YgYSBqYXZhIHRlc3QgdG8gd2FpdCBmb3IgYSBjb25uZWN0aW9uIGZyb20gYSBKRFdQLWNvbXBsaWFudCBkZWJ1Z2dlciAoc3VjaCBhcyBqZGIpIGJlZm9yZSBzdGFydGluZyB0aGUgdGVzdC4gSW1wbGllcyAtdGVzdF9vdXRwdXQ9c3RyZWFtZWQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAAK0wIKDnJlbW90ZV9yZXRyaWVzEAAaXVRoZSBtYXhpbXVtIG51bWJlciBvZiBhdHRlbXB0cyB0byByZXRyeSBhIHRyYW5zaWVudCBlcnJvci4gSWYgc2V0IHRvIDAsIHJldHJpZXMgYXJlIGRpc2FibGVkLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoGUkVNT1RFUAEK4AMKKmV4cGVyaW1lbnRhbF9ydW5fYmVwX2V2ZW50X2luY2x1ZGVfcmVzaWR1ZRABGsQBV2hldGhlciB0byBpbmNsdWRlIHRoZSBjb21tYW5kLWxpbmUgcmVzaWR1ZSBpbiBydW4gYnVpbGQgZXZlbnRzIHdoaWNoIGNvdWxkIGNvbnRhaW4gdGhlIHJlc2lkdWUuIEJ5IGRlZmF1bHQsIHRoZSByZXNpZHVlIGlzIG5vdCBpbmNsdWRlZCBpbiBydW4gY29tbWFuZCBidWlsZCBldmVudHMgdGhhdCBjb3VsZCBjb250YWluIHRoZSByZXNpZHVlLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAAKmgIKLmV4cGVyaW1lbnRhbF9yZW1vdGVfYW5hbHlzaXNfY2FjaGVfY29uY3VycmVuY3kQABo0VGFyZ2V0IGNvbmN1cnJlbmN5IGZvciByZW1vdGUgYW5hbHlzaXMgY2FjaGluZyBSUENzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADocQkFaRUxfSU5URVJOQUxfQ09ORklHVVJBVElPTkoMVU5ET0NVTUVOVEVEUAEKnAQKKGV4cGVyaW1lbnRhbF93b3JrZXJfbXVsdGlwbGV4X3NhbmRib3hpbmcQARrIAklmIGVuYWJsZWQsIG11bHRpcGxleCB3b3JrZXJzIHdpdGggYSAnc3VwcG9ydHMtbXVsdGlwbGV4LXNhbmRib3hpbmcnIGV4ZWN1dGlvbiByZXF1aXJlbWVudCB3aWxsIHJ1biBpbiBhIHNhbmRib3hlZCBlbnZpcm9ubWVudCwgdXNpbmcgYSBzZXBhcmF0ZSBzYW5kYm94IGRpcmVjdG9yeSBwZXIgd29yayByZXF1ZXN0LiBNdWx0aXBsZXggd29ya2VycyB3aXRoIHRoZSBleGVjdXRpb24gcmVxdWlyZW1lbnQgYXJlIGFsd2F5cyBzYW5kYm94ZWQgd2hlbiBydW5uaW5nIHVuZGVyIHRoZSBkeW5hbWljIGV4ZWN1dGlvbiBzdHJhdGVneSwgaXJyZXNwZWN0aXZlIG9mIHRoaXMgZmxhZy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkoSRVhFQ1VUSU9OX1NUUkFURUdZUAAKswIKJ2RleG9wdHNfc3VwcG9ydGVkX2luX2luY3JlbWVudGFsX2RleGluZxAAGkZkeCBmbGFncyBzdXBwb3J0ZWQgd2hlbiBjb252ZXJ0aW5nIEphcnMgdG8gZGV4IGFyY2hpdmVzIGluY3JlbWVudGFsbHkuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRBQ1RJT05fQ09NTUFORF9MSU5FUzoUTE9BRElOR19BTkRfQU5BTFlTSVNKDFVORE9DVU1FTlRFRFABCrICCg90dm9zX21pbmltdW1fb3MQABprTWluaW11bSBjb21wYXRpYmxlIHR2T1MgdmVyc2lvbiBmb3IgdGFyZ2V0IHNpbXVsYXRvcnMgYW5kIGRldmljZXMuIElmIHVuc3BlY2lmaWVkLCB1c2VzICd0dm9zX3Nka192ZXJzaW9uJy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFShFPVVRQVVRfUEFSQU1FVEVSU1ABCogCCgxwcm9ndWFyZF90b3AQABpYU3BlY2lmaWVzIHdoaWNoIHZlcnNpb24gb2YgUHJvR3VhcmQgdG8gdXNlIGZvciBjb2RlIHJlbW92YWwgd2hlbiBidWlsZGluZyBhIEphdmEgYmluYXJ5LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCt0DChFjb25zaXN0ZW50X2xhYmVscxABGpIDSWYgZW5hYmxlZCwgZXZlcnkgcXVlcnkgY29tbWFuZCBlbWl0cyBsYWJlbHMgYXMgaWYgYnkgdGhlIFN0YXJsYXJrIDxjb2RlPnN0cjwvY29kZT4gZnVuY3Rpb24gYXBwbGllZCB0byBhIDxjb2RlPkxhYmVsPC9jb2RlPiBpbnN0YW5jZS4gVGhpcyBpcyB1c2VmdWwgZm9yIHRvb2xzIHRoYXQgbmVlZCB0byBtYXRjaCB0aGUgb3V0cHV0IG9mIGRpZmZlcmVudCBxdWVyeSBjb21tYW5kcyBhbmQvb3IgbGFiZWxzIGVtaXR0ZWQgYnkgcnVsZXMuIElmIG5vdCBlbmFibGVkLCBvdXRwdXQgZm9ybWF0dGVycyBhcmUgZnJlZSB0byBlbWl0IGFwcGFyZW50IHJlcG9zaXRvcnkgbmFtZXMgKHJlbGF0aXZlIHRvIHRoZSBtYWluIHJlcG9zaXRvcnkpIGluc3RlYWQgdG8gbWFrZSB0aGUgb3V0cHV0IG1vcmUgcmVhZGFibGUuIgZhcXVlcnkiBmNxdWVyeSIFcXVlcnkwADoPVEVSTUlOQUxfT1VUUFVUSgVRVUVSWVAACv0BChBncmFwaDpub2RlX2xpbWl0EAAaswFUaGUgbWF4aW11bSBsZW5ndGggb2YgdGhlIGxhYmVsIHN0cmluZyBmb3IgYSBncmFwaCBub2RlIGluIHRoZSBvdXRwdXQuICBMb25nZXIgbGFiZWxzIHdpbGwgYmUgdHJ1bmNhdGVkOyAtMSBtZWFucyBubyB0cnVuY2F0aW9uLiAgVGhpcyBvcHRpb24gaXMgb25seSBhcHBsaWNhYmxlIHRvIC0tb3V0cHV0PWdyYXBoLiIGYXF1ZXJ5IgZjcXVlcnkiBXF1ZXJ5MAA6D1RFUk1JTkFMX09VVFBVVEoFUVVFUllQAQqUAgopaW5jb21wYXRpYmxlX2Rpc2FsbG93X2phdmFfaW1wb3J0X2V4cG9ydHMQARozV2hlbiBlbmFibGVkLCBqYXZhX2ltcG9ydC5leHBvcnRzIGlzIG5vdCBzdXBwb3J0ZWQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOQhNJTkNPTVBBVElCTEVfQ0hBTkdFSgxVTkRPQ1VNRU5URURQAAqgAgoraW5jb21wYXRpYmxlX2VuYWJsZV9jY190b29sY2hhaW5fcmVzb2x1dGlvbhABGjBOby1vcCBmbGFnLiBXaWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQhNJTkNPTVBBVElCTEVfQ0hBTkdFSgxVTkRPQ1VNRU5URURQAAqpAgodc2FuZGJveF9kZWZhdWx0X2FsbG93X25ldHdvcmsQARpjQWxsb3cgbmV0d29yayBhY2Nlc3MgYnkgZGVmYXVsdCBmb3IgYWN0aW9uczsgdGhpcyBtYXkgbm90IHdvcmsgd2l0aCBhbGwgc2FuZGJveGluZyBpbXBsZW1lbnRhdGlvbnMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KEElOUFVUX1NUUklDVE5FU1NQAArdAgo6ZXhwZXJpbWVudGFsX2dldF9hbmRyb2lkX2phdmFfcmVzb3VyY2VzX2Zyb21fb3B0aW1pemVkX2phchABGmtHZXQgSmF2YSByZXNvdXJjZXMgZnJvbSBfcHJvZ3VhcmQuamFyIGluc3RlYWQgb2YgX2RlcGxveS5qYXIgaW4gYW5kcm9pZF9iaW5hcnkgd2hlbiBidW5kbGluZyB0aGUgZmluYWwgQVBLLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoOQ0hBTkdFU19JTlBVVFNCDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAKlgUKFXVuY29uZGl0aW9uYWxfd2FybmluZxAAGooDQSB3YXJuaW5nIHRoYXQgd2lsbCB1bmNvbmRpdGlvbmFsbHkgZ2V0IHByaW50ZWQgd2l0aCBidWlsZCB3YXJuaW5ncyBhbmQgZXJyb3JzLiBUaGlzIGlzIHVzZWZ1bCB0byBkZXByZWNhdGUgYmF6ZWxyYyBmaWxlcyBvciAtLWNvbmZpZyBkZWZpbml0aW9ucy4gSWYgdGhlIGludGVudCBpcyB0byBlZmZlY3RpdmVseSBkZXByZWNhdGUgc29tZSBmbGFnIG9yIGNvbWJpbmF0aW9uIG9mIGZsYWdzLCB0aGlzIGlzIE5PVCBzdWZmaWNpZW50LiBUaGUgZmxhZyBvciBmbGFncyBzaG91bGQgdXNlIHRoZSBkZXByZWNhdGlvbldhcm5pbmcgZmllbGQgaW4gdGhlIG9wdGlvbiBkZWZpbml0aW9uLCBvciB0aGUgYmFkIGNvbWJpbmF0aW9uIHNob3VsZCBiZSBjaGVja2VkIGZvciBwcm9ncmFtbWF0aWNhbGx5LiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wAToPVEVSTUlOQUxfT1VUUFVUSgxVTkRPQ1VNRU5URURQAQqAAwoZcmVtb3RlX2V4ZWN1dGlvbl9wcmlvcml0eRAAGn9UaGUgcmVsYXRpdmUgcHJpb3JpdHkgb2YgYWN0aW9ucyB0byBiZSBleGVjdXRlZCByZW1vdGVseS4gVGhlIHNlbWFudGljcyBvZiB0aGUgcGFydGljdWxhciBwcmlvcml0eSB2YWx1ZXMgYXJlIHNlcnZlci1kZXBlbmRlbnQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgZSRU1PVEVQAQrCBAotZXhwZXJpbWVudGFsX2V4ZWNfY29uZmlndXJhdGlvbl9kaXN0aW5ndWlzaGVyEAAa2wJQbGVhc2Ugb25seSB1c2UgdGhpcyBmbGFnIGFzIHBhcnQgb2YgYSBzdWdnZXN0ZWQgbWlncmF0aW9uIG9yIHRlc3Rpbmcgc3RyYXRlZ3kgZHVlIHRvIHBvdGVudGlhbCBmb3IgYWN0aW9uIGNvbmZsaWN0cy4gQ29udHJvbHMgaG93IHRoZSBleGVjdXRpb24gdHJhbnNpdGlvbiBjaGFuZ2VzIHRoZSBwbGF0Zm9ybV9zdWZmaXggZmxhZy4gSW4gbGVnYWN5IG1vZGUsIHNldHMgaXQgdG8gYSBoYXNoIG9mIHRoZSBleGVjdXRpb24gcGxhdGZvcm0uIEluIGZ1bGxoYXNoIG1vZGUsIHNldHMgaXQgdG8gYSBoYXNoIG9mIHRoZSBlbnRpcmUgY29uZmlndXJhdGlvbi4gSW4gb2ZmIG1vZGUsIGRvZXMgbm90IHRvdWNoIGl0LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFABCt0CCi1leHBlcmltZW50YWxfcmVtb3RlX2Rvd25sb2FkZXJfbG9jYWxfZmFsbGJhY2sQARpIV2hldGhlciB0byBmYWxsIGJhY2sgdG8gdGhlIGxvY2FsIGRvd25sb2FkZXIgaWYgcmVtb3RlIGRvd25sb2FkZXIgZmFpbHMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgZSRU1PVEVQAAqCAgoNcHJvdG9fcHJvZmlsZRABGjNXaGV0aGVyIHRvIHBhc3MgcHJvZmlsZV9wYXRoIHRvIHRoZSBwcm90byBjb21waWxlci4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUUzoUTE9BRElOR19BTkRfQU5BTFlTSVNKDVVOQ0FURUdPUklaRURQAAq+BQoXZXhlY3V0aW9uX2xvZ19qc29uX2ZpbGUQABqCBExvZyB0aGUgZXhlY3V0ZWQgc3Bhd25zIGludG8gdGhpcyBmaWxlIGFzIG5ld2xpbmUtZGVsaW1pdGVkIEpTT04gcmVwcmVzZW50YXRpb25zIG9mIFNwYXduRXhlYyBwcm90b3MsIGFjY29yZGluZyB0byBzcmMvbWFpbi9wcm90b2J1Zi9zcGF3bi5wcm90by4gUHJlZmVyIC0tZXhlY3V0aW9uX2xvZ19jb21wYWN0X2ZpbGUsIHdoaWNoIGlzIHNpZ25pZmljYW50bHkgc21hbGxlciBhbmQgY2hlYXBlciB0byBwcm9kdWNlLiBSZWxhdGVkIGZsYWdzOiAtLWV4ZWN1dGlvbl9sb2dfY29tcGFjdF9maWxlIChjb21wYWN0IGZvcm1hdDsgbXV0dWFsbHkgZXhjbHVzaXZlKSwgLS1leGVjdXRpb25fbG9nX2JpbmFyeV9maWxlIChiaW5hcnkgcHJvdG9idWYgZm9ybWF0OyBtdXR1YWxseSBleGNsdXNpdmUpLCAtLWV4ZWN1dGlvbl9sb2dfc29ydCAod2hldGhlciB0byBzb3J0IHRoZSBleGVjdXRpb24gbG9nKSwgLS1zdWJjb21tYW5kcyAoZm9yIGRpc3BsYXlpbmcgc3ViY29tbWFuZHMgaW4gdGVybWluYWwgb3V0cHV0KS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQrMAgoSYnVpbGRfbWFudWFsX3Rlc3RzEAEalQFGb3JjZXMgdGVzdCB0YXJnZXRzIHRhZ2dlZCAnbWFudWFsJyB0byBiZSBidWlsdC4gJ21hbnVhbCcgdGVzdHMgYXJlIGV4Y2x1ZGVkIGZyb20gcHJvY2Vzc2luZy4gVGhpcyBvcHRpb24gZm9yY2VzIHRoZW0gdG8gYmUgYnVpbHQgKGJ1dCBub3QgZXhlY3V0ZWQpLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFAACuMCCiNleHBlcmltZW50YWxfc2tpcF90dHZzX2Zvcl9nZW5xdWVyeRABGnpJZiB0cnVlLCBnZW5xdWVyeSBsb2FkcyBpdHMgc2NvcGUncyB0cmFuc2l0aXZlIGNsb3N1cmUgZGlyZWN0bHkgaW5zdGVhZCBvZiBieSB1c2luZyAnVHJhbnNpdGl2ZVRhcmdldFZhbHVlJyBTa3lmcmFtZSB3b3JrLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADocQkFaRUxfSU5URVJOQUxfQ09ORklHVVJBVElPTkIMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAAqIAQoRd3JpdGVfY29tbWFuZF9sb2cQARosV2hldGhlciBvciBub3QgdG8gd3JpdGUgdGhlIGNvbW1hbmQubG9nIGZpbGUiB3N0YXJ0dXAwADoPQUZGRUNUU19PVVRQVVRTOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUoMVU5ET0NVTUVOVEVEUAAKmwIKDnNreWZyYW1lX3N0YXRlEAEa4gFXaXRob3V0IHBlcmZvcm1pbmcgZXh0cmEgYW5hbHlzaXMsIGR1bXAgdGhlIGN1cnJlbnQgQWN0aW9uIEdyYXBoIGZyb20gU2t5ZnJhbWUuIE5vdGU6IFNwZWNpZnlpbmcgYSB0YXJnZXQgd2l0aCAtLXNreWZyYW1lX3N0YXRlIGlzIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkLiBUaGlzIGZsYWcgaXMgb25seSBhdmFpbGFibGUgd2l0aCAtLW91dHB1dD1wcm90byBvciAtLW91dHB1dD10ZXh0cHJvdG8uIgZhcXVlcnkwADoPVEVSTUlOQUxfT1VUUFVUSgVRVUVSWVAACq0CCgpmbGFnX2FsaWFzEAAad1NldHMgYSBzaG9ydGhhbmQgbmFtZSBmb3IgYSBTdGFybGFyayBmbGFnLiBJdCB0YWtlcyBhIHNpbmdsZSBrZXktdmFsdWUgcGFpciBpbiB0aGUgZm9ybSAiPGtleT49PHZhbHVlPiIgYXMgYW4gYXJndW1lbnQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOg5DSEFOR0VTX0lOUFVUU0oOR0VORVJJQ19JTlBVVFNQAQqaAgoXd29ya2VyX3F1aXRfYWZ0ZXJfYnVpbGQQARozSWYgZW5hYmxlZCwgYWxsIHdvcmtlcnMgcXVpdCBhZnRlciBhIGJ1aWxkIGlzIGRvbmUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT046I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TShJFWEVDVVRJT05fU1RSQVRFR1lQAAr4BgoNcnVuc19wZXJfdGVzdBAAGswFU3BlY2lmaWVzIG51bWJlciBvZiB0aW1lcyB0byBydW4gZWFjaCB0ZXN0LiBJZiBhbnkgb2YgdGhvc2UgYXR0ZW1wdHMgZmFpbCBmb3IgYW55IHJlYXNvbiwgdGhlIHdob2xlIHRlc3QgaXMgY29uc2lkZXJlZCBmYWlsZWQuIE5vcm1hbGx5IHRoZSB2YWx1ZSBzcGVjaWZpZWQgaXMganVzdCBhbiBpbnRlZ2VyLiBFeGFtcGxlOiAtLXJ1bnNfcGVyX3Rlc3Q9MyB3aWxsIHJ1biBhbGwgdGVzdHMgMyB0aW1lcy4gQWx0ZXJuYXRlIHN5bnRheDogcmVnZXhfZmlsdGVyQHJ1bnNfcGVyX3Rlc3QuIFdoZXJlIHJ1bnNfcGVyX3Rlc3Qgc3RhbmRzIGZvciBhbiBpbnRlZ2VyIHZhbHVlIGFuZCByZWdleF9maWx0ZXIgc3RhbmRzIGZvciBhIGxpc3Qgb2YgaW5jbHVkZSBhbmQgZXhjbHVkZSByZWd1bGFyIGV4cHJlc3Npb24gcGF0dGVybnMgKEFsc28gc2VlIC0taW5zdHJ1bWVudGF0aW9uX2ZpbHRlcikuIEV4YW1wbGU6IC0tcnVuc19wZXJfdGVzdD0vL2Zvby8uKiwtLy9mb28vYmFyLy4qQDMgcnVucyBhbGwgdGVzdHMgaW4gLy9mb28vIGV4Y2VwdCB0aG9zZSB1bmRlciBmb28vYmFyIHRocmVlIHRpbWVzLiBUaGlzIG9wdGlvbiBjYW4gYmUgcGFzc2VkIG11bHRpcGxlIHRpbWVzLiBUaGUgbW9zdCByZWNlbnRseSBwYXNzZWQgYXJndW1lbnQgdGhhdCBtYXRjaGVzIHRha2VzIHByZWNlZGVuY2UuIElmIG5vdGhpbmcgbWF0Y2hlcywgdGhlIHRlc3QgaXMgb25seSBydW4gb25jZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6B1VOS05PV05KB1RFU1RJTkdQAQrVAgouZXhwZXJpbWVudGFsX2NvbGxlY3RfcHJlc3N1cmVfc3RhbGxfaW5kaWNhdG9ycxABGjVJZiBlbmFibGVkLCB0aGUgcHJvZmlsZXIgY29sbGVjdHMgdGhlIExpbnV4IFBTSSBkYXRhLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoQQkFaRUxfTU9OSVRPUklOR0oHTE9HR0lOR1AACu4BCidpbmNvbXBhdGlibGVfbG9hZF9weXRob25fcnVsZXNfZnJvbV9iemwQARoRRGVwcmVjYXRlZCBuby1vcC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QQhNJTkNPTVBBVElCTEVfQ0hBTkdFSgxVTkRPQ1VNRU5URURQAAq3AwojaW5jb21wYXRpYmxlX2phdmFfY29tbW9uX3BhcmFtZXRlcnMQARp+SWYgc2V0IHRvIHRydWUsIHRoZSBvdXRwdXRfamFyLCBhbmQgaG9zdF9qYXZhYmFzZSBwYXJhbWV0ZXJzIGluIHBhY2tfc291cmNlcyBhbmQgaG9zdF9qYXZhYmFzZSBpbiBjb21waWxlIHdpbGwgYWxsIGJlIHJlbW92ZWQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRCVUlMRF9GSUxFX1NFTUFOVElDU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoSU1RBUkxBUktfU0VNQU5USUNTUAAKmQMKKWluY29tcGF0aWJsZV9lbmFibGVfZGVwcmVjYXRlZF9sYWJlbF9hcGlzEAEab0lmIGVuYWJsZWQsIGNlcnRhaW4gZGVwcmVjYXRlZCBBUElzIChuYXRpdmUucmVwb3NpdG9yeV9uYW1lLCBMYWJlbC53b3Jrc3BhY2VfbmFtZSwgTGFiZWwucmVsYXRpdmUpIGNhbiBiZSB1c2VkLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUTE9BRElOR19BTkRfQU5BTFlTSVNKElNUQVJMQVJLX1NFTUFOVElDU1AACtMCCiFhbmRyb2lkX2RhdGFiaW5kaW5nX3VzZV92M180X2FyZ3MQARpFVXNlIGFuZHJvaWQgZGF0YWJpbmRpbmcgdjIgd2l0aCAzLjQuMCBhcmd1bWVudC4gVGhpcyBmbGFnIGlzIGEgbm8tb3AuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFM6FExPQURJTkdfQU5EX0FOQUxZU0lTOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUIMRVhQRVJJTUVOVEFMShFPVVRQVVRfUEFSQU1FVEVSU1AACpsCCgthbm5vdW5jZV9yYxABGh9XaGV0aGVyIHRvIGFubm91bmNlIHJjIG9wdGlvbnMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg9BRkZFQ1RTX09VVFBVVFNKB0xPR0dJTkdQAAqKAQoUbGluZV90ZXJtaW5hdG9yX251bGwQARo9V2hldGhlciBlYWNoIGZvcm1hdCBpcyB0ZXJtaW5hdGVkIHdpdGggXDAgaW5zdGVhZCBvZiBuZXdsaW5lLiIGYXF1ZXJ5IgZjcXVlcnkiBXF1ZXJ5MAA6D1RFUk1JTkFMX09VVFBVVEoFUVVFUllQAAq9AgoIdG9vbF90YWcQABoyQSB0b29sIG5hbWUgdG8gYXR0cmlidXRlIHRoaXMgQmF6ZWwgaW52b2NhdGlvbiB0by4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6D0FGRkVDVFNfT1VUUFVUUzoQQkFaRUxfTU9OSVRPUklOR0oHTE9HR0lOR1ABCvkBChdzaHV0ZG93bl9vbl9sb3dfc3lzX21lbRABGowBSWYgbWF4X2lkbGVfc2VjcyBpcyBzZXQgYW5kIHRoZSBidWlsZCBzZXJ2ZXIgaGFzIGJlZW4gaWRsZSBmb3IgYSB3aGlsZSwgc2h1dCBkb3duIHRoZSBzZXJ2ZXIgd2hlbiB0aGUgc3lzdGVtIGlzIGxvdyBvbiBmcmVlIFJBTS4gTGludXggb25seS4iB3N0YXJ0dXAwADoRRUFHRVJORVNTX1RPX0VYSVQ6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFShRCQVpFTF9DTElFTlRfT1BUSU9OU1AACrEDCjNpbmNvbXBhdGlibGVfYXZvaWRfaGFyZGNvZGVkX29iamNfY29tcGlsYXRpb25fZmxhZ3MQARp/UHJldmVudHMgQmF6ZWwgZnJvbSBhZGRpbmcgY29tcGlsZXIgb3B0aW9ucyB0byBPYmplY3RpdmUtQyBjb21waWxhdGlvbiBhY3Rpb25zLiBPcHRpb25zIHNldCBpbiB0aGUgY3Jvc3N0b29sIGFyZSBzdGlsbCBhcHBsaWVkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OOglFWEVDVVRJT046FEFDVElPTl9DT01NQU5EX0xJTkVTQhNJTkNPTVBBVElCTEVfQ0hBTkdFSgxVTkRPQ1VNRU5URURQAAr6AgobYW5hbHlzaXNfdGVzdGluZ19kZXBzX2xpbWl0EAAaswFTZXRzIHRoZSBtYXhpbXVtIG51bWJlciBvZiB0cmFuc2l0aXZlIGRlcGVuZGVuY2llcyB0aHJvdWdoIGEgcnVsZSBhdHRyaWJ1dGUgd2l0aCBhIGZvcl9hbmFseXNpc190ZXN0aW5nIGNvbmZpZ3VyYXRpb24gdHJhbnNpdGlvbi4gRXhjZWVkaW5nIHRoaXMgbGltaXQgd2lsbCByZXN1bHQgaW4gYSBydWxlIGVycm9yLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVNKB1RFU1RJTkdQAQq6AgoLdGVzdF9maWx0ZXIQABqKAVNwZWNpZmllcyBhIGZpbHRlciB0byBmb3J3YXJkIHRvIHRoZSB0ZXN0IGZyYW1ld29yay4gIFVzZWQgdG8gbGltaXQgdGhlIHRlc3RzIHJ1bi4gTm90ZSB0aGF0IHRoaXMgZG9lcyBub3QgYWZmZWN0IHdoaWNoIHRhcmdldHMgYXJlIGJ1aWx0LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCqcCCgtob3N0X2N4eG9wdBAAGlZBZGRpdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byBDKysgY29tcGlsZXIgZm9yIHRvb2xzIGJ1aWx0IGluIHRoZSBleGVjIGNvbmZpZ3VyYXRpb25zLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToUQUNUSU9OX0NPTU1BTkRfTElORVM6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQqJBQouaW5jb21wYXRpYmxlX21lcmdlX2ZpeGVkX2FuZF9kZWZhdWx0X3NoZWxsX2VudhABGsQCSWYgZW5hYmxlZCwgYWN0aW9ucyByZWdpc3RlcmVkIHdpdGggY3R4LmFjdGlvbnMucnVuIGFuZCBjdHguYWN0aW9ucy5ydW5fc2hlbGwgd2l0aCBib3RoICdlbnYnIGFuZCAndXNlX2RlZmF1bHRfc2hlbGxfZW52ID0gVHJ1ZScgc3BlY2lmaWVkIHdpbGwgdXNlIGFuIGVudmlyb25tZW50IG9idGFpbmVkIGZyb20gdGhlIGRlZmF1bHQgc2hlbGwgZW52aXJvbm1lbnQgYnkgb3ZlcnJpZGluZyB3aXRoIHRoZSB2YWx1ZXMgcGFzc2VkIGluIHRvICdlbnYnLiBJZiBkaXNhYmxlZCwgdGhlIHZhbHVlIG9mICdlbnYnIGlzIGNvbXBsZXRlbHkgaWdub3JlZCBpbiB0aGlzIGNhc2UuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoSU1RBUkxBUktfU0VNQU5USUNTUAAK6QEKCXByb3RvY29wdBAAGjRBZGRpdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgcHJvdG9idWYgY29tcGlsZXIuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOg9BRkZFQ1RTX09VVFBVVFNKDVVOQ0FURUdPUklaRURQAQrbAgoOYnVpbGRfdGVzdF9kd3AQARqHAUlmIGVuYWJsZWQsIHdoZW4gYnVpbGRpbmcgQysrIHRlc3RzIHN0YXRpY2FsbHkgYW5kIHdpdGggZmlzc2lvbiB0aGUgLmR3cCBmaWxlICBmb3IgdGhlIHRlc3QgYmluYXJ5IHdpbGwgYmUgYXV0b21hdGljYWxseSBidWlsdCBhcyB3ZWxsLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6D0FGRkVDVFNfT1VUUFVUU0oQT1VUUFVUX1NFTEVDVElPTlAACqUCCg1zaG93X3Byb2dyZXNzEAEaKURpc3BsYXkgcHJvZ3Jlc3MgbWVzc2FnZXMgZHVyaW5nIGEgYnVpbGQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAAKqwQKGWNoZWNrX2RpcmVjdF9kZXBlbmRlbmNpZXMQABqcAkNoZWNrIGlmIHRoZSBkaXJlY3QgYGJhemVsX2RlcGAgZGVwZW5kZW5jaWVzIGRlY2xhcmVkIGluIHRoZSByb290IG1vZHVsZSBhcmUgdGhlIHNhbWUgdmVyc2lvbnMgeW91IGdldCBpbiB0aGUgcmVzb2x2ZWQgZGVwZW5kZW5jeSBncmFwaC4gVmFsaWQgdmFsdWVzIGFyZSBgb2ZmYCB0byBkaXNhYmxlIHRoZSBjaGVjaywgYHdhcm5pbmdgIHRvIHByaW50IGEgd2FybmluZyB3aGVuIG1pc21hdGNoIGRldGVjdGVkIG9yIGBlcnJvcmAgdG8gZXNjYWxhdGUgaXQgdG8gYSByZXNvbHV0aW9uIGZhaWx1cmUuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0oGQlpMTU9EUAEK5AMKI2luY29tcGF0aWJsZV9jaGVja19zaGFyZGluZ19zdXBwb3J0EAEahwJJZiB0cnVlLCBCYXplbCB3aWxsIGZhaWwgYSBzaGFyZGVkIHRlc3QgaWYgdGhlIHRlc3QgcnVubmVyIGRvZXMgbm90IGluZGljYXRlIHRoYXQgaXQgc3VwcG9ydHMgc2hhcmRpbmcgYnkgdG91Y2hpbmcgdGhlIGZpbGUgYXQgdGhlIHBhdGggaW4gVEVTVF9TSEFSRF9TVEFUVVNfRklMRS4gSWYgZmFsc2UsIGEgdGVzdCBydW5uZXIgdGhhdCBkb2VzIG5vdCBzdXBwb3J0IHNoYXJkaW5nIHdpbGwgbGVhZCB0byBhbGwgdGVzdHMgcnVubmluZyBpbiBlYWNoIHNoYXJkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkITSU5DT01QQVRJQkxFX0NIQU5HRUoNVU5DQVRFR09SSVpFRFAACv8BChVzYW5kYm94X2Zha2VfaG9zdG5hbWUQARpBQ2hhbmdlIHRoZSBjdXJyZW50IGhvc3RuYW1lIHRvICdsb2NhbGhvc3QnIGZvciBzYW5kYm94ZWQgYWN0aW9ucy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkoQSU5QVVRfU1RSSUNUTkVTU1AACqECCg1sdG9iYWNrZW5kb3B0EAAaTkFkZGl0aW9uYWwgb3B0aW9uIHRvIHBhc3MgdG8gdGhlIExUTyBiYWNrZW5kIHN0ZXAgKHVuZGVyIC0tZmVhdHVyZXM9dGhpbl9sdG8pLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToUQUNUSU9OX0NPTU1BTkRfTElORVM6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQr0Agoqa2VlcF9iYWNrZW5kX2J1aWxkX2V2ZW50X2Nvbm5lY3Rpb25zX2FsaXZlEAEaVElmIGVuYWJsZWQsIGtlZXAgY29ubmVjdGlvbnMgdG8gYnVpbGQgZXZlbnQgYmFja2VuZCBjb25uZWN0aW9ucyBhbGl2ZSBhY3Jvc3MgYnVpbGRzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkIGSElEREVOSgxVTkRPQ1VNRU5URURQAAruAgoiaW5jb21wYXRpYmxlX3NraXBfZ2VuZmlsZXNfc3ltbGluaxABGoMBSWYgc2V0IHRvIHRydWUsIHRoZSBnZW5maWxlcyBzeW1saW5rIHdpbGwgbm90IGJlIGNyZWF0ZWQuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2JhemVsYnVpbGQvYmF6ZWwvaXNzdWVzLzg2NTEiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFQhNJTkNPTVBBVElCTEVfQ0hBTkdFSgxVTkRPQ1VNRU5URURQAArlAgoRY29tbWFuZF93YWl0X3RpbWUQABpEVGhlIHRpbWUgaW4gbXMgYSBjb21tYW5kIGhhZCB0byB3YWl0IG9uIGEgYnVzeSBCYXplbCBzZXJ2ZXIgcHJvY2Vzcy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6D0FGRkVDVFNfT1VUUFVUUzoQQkFaRUxfTU9OSVRPUklOR0IGSElEREVOSgxVTkRPQ1VNRU5URURQAQq2BAojYnVpbGRfZXZlbnRfYmluYXJ5X2ZpbGVfdXBsb2FkX21vZGUQABqfAlNwZWNpZmllcyB3aGV0aGVyIHRoZSBCdWlsZCBFdmVudCBTZXJ2aWNlIHVwbG9hZCBmb3IgLS1idWlsZF9ldmVudF9iaW5hcnlfZmlsZSBzaG91bGQgYmxvY2sgdGhlIGJ1aWxkIGNvbXBsZXRpb24gb3Igc2hvdWxkIGVuZCB0aGUgaW52b2NhdGlvbiBpbW1lZGlhdGVseSBhbmQgZmluaXNoIHRoZSB1cGxvYWQgaW4gdGhlIGJhY2tncm91bmQuIEVpdGhlciAnd2FpdF9mb3JfdXBsb2FkX2NvbXBsZXRlJyAoZGVmYXVsdCksICdub3dhaXRfZm9yX3VwbG9hZF9jb21wbGV0ZScsIG9yICdmdWxseV9hc3luYycuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhFFQUdFUk5FU1NfVE9fRVhJVEoHTE9HR0lOR1ABCsoBChB4bWw6bGluZV9udW1iZXJzEAEakAFJZiB0cnVlLCBYTUwgb3V0cHV0IGNvbnRhaW5zIGxpbmUgbnVtYmVycy4gRGlzYWJsaW5nIHRoaXMgb3B0aW9uIG1heSBtYWtlIGRpZmZzIGVhc2llciB0byByZWFkLiAgVGhpcyBvcHRpb24gaXMgb25seSBhcHBsaWNhYmxlIHRvIC0tb3V0cHV0PXhtbC4iBXF1ZXJ5MAA6D1RFUk1JTkFMX09VVFBVVEoFUVVFUllQAArzAgogZXhwZXJpbWVudGFsX2VuYWJsZV9zdGFybGFya19zZXQQARpESWYgdHJ1ZSwgZW5hYmxlIHRoZSBzZXQgZGF0YSB0eXBlIGFuZCBzZXQoKSBjb25zdHJ1Y3RvciBpbiBTdGFybGFyay4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTQgxFWFBFUklNRU5UQUxKElNUQVJMQVJLX1NFTUFOVElDU1AACqoECgtiZXNfdGltZW91dBAAGq0CU3BlY2lmaWVzIGhvdyBsb25nIGJhemVsIHNob3VsZCB3YWl0IGZvciB0aGUgQkVTL0JFUCB1cGxvYWQgdG8gY29tcGxldGUgYWZ0ZXIgdGhlIGJ1aWxkIGFuZCB0ZXN0cyBoYXZlIGZpbmlzaGVkLiBBIHZhbGlkIHRpbWVvdXQgaXMgYSBuYXR1cmFsIG51bWJlciBmb2xsb3dlZCBieSBhIHVuaXQ6IERheXMgKGQpLCBob3VycyAoaCksIG1pbnV0ZXMgKG0pLCBzZWNvbmRzIChzKSwgYW5kIG1pbGxpc2Vjb25kcyAobXMpLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAnMCcgd2hpY2ggbWVhbnMgdGhhdCB0aGVyZSBpcyBubyB0aW1lb3V0LiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAEKkQIKHGV4cGVyaW1lbnRhbF9ncmFwaGxlc3NfcXVlcnkQARqzAUlmIHRydWUsIHVzZXMgYSBRdWVyeSBpbXBsZW1lbnRhdGlvbiB0aGF0IGRvZXMgbm90IG1ha2UgYSBjb3B5IG9mIHRoZSBncmFwaC4gVGhlIG5ldyBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIC0tb3JkZXJfb3V0cHV0PW5vLCBhcyB3ZWxsIGFzIG9ubHkgYSBzdWJzZXQgb2Ygb3V0cHV0IGZvcm1hdHRlcnMuIgVxdWVyeTAAOhRCVUlMRF9GSUxFX1NFTUFOVElDUzoRRUFHRVJORVNTX1RPX0VYSVRKBVFVRVJZUAAK7gMKEnJlbW90ZV9leGVjX2hlYWRlchAAGvMBU3BlY2lmeSBhIGhlYWRlciB0aGF0IHdpbGwgYmUgaW5jbHVkZWQgaW4gZXhlY3V0aW9uIHJlcXVlc3RzOiAtLXJlbW90ZV9leGVjX2hlYWRlcj1OYW1lPVZhbHVlLiBNdWx0aXBsZSBoZWFkZXJzIGNhbiBiZSBwYXNzZWQgYnkgc3BlY2lmeWluZyB0aGUgZmxhZyBtdWx0aXBsZSB0aW1lcy4gTXVsdGlwbGUgdmFsdWVzIGZvciB0aGUgc2FtZSBuYW1lIHdpbGwgYmUgY29udmVydGVkIHRvIGEgY29tbWEtc2VwYXJhdGVkIGxpc3QuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjABOgdVTktOT1dOSgZSRU1PVEVQAQrbAwoHYW5hbHl6ZRABGpICRXhlY3V0ZSB0aGUgbG9hZGluZy9hbmFseXNpcyBwaGFzZTsgdGhpcyBpcyB0aGUgdXN1YWwgYmVoYXZpb3VyLiBTcGVjaWZ5aW5nIC0tbm9hbmFseXplY2F1c2VzIHRoZSBidWlsZCB0byBzdG9wIGJlZm9yZSBzdGFydGluZyB0aGUgbG9hZGluZy9hbmFseXNpcyBwaGFzZSwganVzdCBkb2luZyB0YXJnZXQgcGF0dGVybiBwYXJzaW5nIGFuZCByZXR1cm5pbmcgemVybyBpZmYgdGhhdCBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5OyB0aGlzIG1vZGUgaXMgdXNlZnVsIGZvciB0ZXN0aW5nLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6D0FGRkVDVFNfT1VUUFVUU0oMVU5ET0NVTUVOVEVEUAAK9AIKH3JlY29yZF9tZXRyaWNzX2Zvcl9hbGxfcGFja2FnZXMQARpeQ29uZmlndXJlcyBQYWNrYWdlTWV0cmljcyB0byByZWNvcmQgYWxsIG1ldHJpY3MgZm9yIGFsbCBwYWNrYWdlcy4gRGlzYWJsZXMgVG9wLW4gSU5GTyBsb2dnaW5nLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoQQkFaRUxfTU9OSVRPUklOR0oMVU5ET0NVTUVOVEVEUAAK1gMKHWJlc19vb21fZmluaXNoX3VwbG9hZF90aW1lb3V0EAAaxgFTcGVjaWZpZXMgaG93IGxvbmcgYmF6ZWwgc2hvdWxkIHdhaXQgZm9yIHRoZSBCRVMvQkVQIHVwbG9hZCB0byBjb21wbGV0ZSB3aGlsZSBPT01pbmcuIFRoaXMgZmxhZyBlbnN1cmVzIHRlcm1pbmF0aW9uIHdoZW4gdGhlIEpWTSBpcyBzZXZlcmVseSBHQyB0aHJhc2hpbmcgYW5kIGNhbm5vdCBtYWtlIHByb2dyZXNzIG9uIGFueSB1c2VyIHRocmVhZC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6EEJBWkVMX01PTklUT1JJTkdKB0xPR0dJTkdQAQqAAgoLZmRvX3Byb2ZpbGUQABpFVGhlIGZkb19wcm9maWxlIHJlcHJlc2VudGluZyB0aGUgcHJvZmlsZSB0byBiZSB1c2VkIGZvciBvcHRpbWl6YXRpb24uIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAEKugEKDnNreWxhcmtfbWVtb3J5EAAaeER1bXBzIGEgcHByb2YtY29tcGF0aWJsZSBtZW1vcnkgcHJvZmlsZSB0byB0aGUgc3BlY2lmaWVkIHBhdGguIFRvIGxlYXJuIG1vcmUgcGxlYXNlIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3Bwcm9mLiIEZHVtcDAAOhBCQVpFTF9NT05JVE9SSU5HShBPVVRQVVRfU0VMRUNUSU9OUAEK4gIKGmV4cGVyaW1lbnRhbF9za3lsYXJrX2RlYnVnEAEalAFJZiB0cnVlLCBCbGF6ZSB3aWxsIG9wZW4gdGhlIFN0YXJsYXJrIGRlYnVnIHNlcnZlciBhdCB0aGUgc3RhcnQgb2YgdGhlIGJ1aWxkIGludm9jYXRpb24sIGFuZCB3YWl0IGZvciBhIGRlYnVnZ2VyIHRvIGF0dGFjaCBiZWZvcmUgcnVubmluZyB0aGUgYnVpbGQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05CDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAKogIKImV4cGVyaW1lbnRhbF9lbmFibGVfZG9ja2VyX3NhbmRib3gQARpVRW5hYmxlIERvY2tlci1iYXNlZCBzYW5kYm94aW5nLiBUaGlzIG9wdGlvbiBoYXMgbm8gZWZmZWN0IGlmIERvY2tlciBpcyBub3QgaW5zdGFsbGVkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OShJFWEVDVVRJT05fU1RSQVRFR1lQAAr8AgoRd29ya2VyX2V4dHJhX2ZsYWcQABqaAUV4dHJhIGNvbW1hbmQtZmxhZ3MgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB3b3JrZXIgcHJvY2Vzc2VzIGluIGFkZGl0aW9uIHRvIC0tcGVyc2lzdGVudF93b3JrZXIsIGtleWVkIGJ5IG1uZW1vbmljIChlLmcuIC0td29ya2VyX2V4dHJhX2ZsYWc9SmF2YWM9LS1kZWJ1Zy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6CUVYRUNVVElPTjojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlNKEkVYRUNVVElPTl9TVFJBVEVHWVABCr0BChhmb3JjZV9pZ25vcmVfZGFzaF9zdGF0aWMQARoEbm9vcCIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BKDFVORE9DVU1FTlRFRFAACtICChNhcHBsZV9wbGF0Zm9ybV90eXBlEAAahgFEb24ndCBzZXQgdGhpcyB2YWx1ZSBmcm9tIHRoZSBjb21tYW5kIGxpbmUgLSBpdCBpcyBkZXJpdmVkIGZyb20gb3RoZXIgZmxhZ3MgYW5kIGNvbmZpZ3VyYXRpb24gdHJhbnNpdGlvbnMgZGVyaXZlZCBmcm9tIHJ1bGUgYXR0cmlidXRlcyIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADocQkFaRUxfSU5URVJOQUxfQ09ORklHVVJBVElPTkoMVU5ET0NVTUVOVEVEUAEK6wIKJ2V4cGVyaW1lbnRhbF9saW5rX3N0YXRpY19saWJyYXJpZXNfb25jZRABGnFJZiBlbmFibGVkLCBjY19zaGFyZWRfbGlicmFyeSB3aWxsIGxpbmsgYWxsIGxpYnJhcmllcyBzdGF0aWNhbGx5IGxpbmtlZCBpbnRvIGl0LCB0aGF0IHNob3VsZCBvbmx5IGJlIGxpbmtlZCBvbmNlLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VCDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAK9AQKDGZkb19vcHRpbWl6ZRAAGrcDVXNlIEZETyBwcm9maWxlIGluZm9ybWF0aW9uIHRvIG9wdGltaXplIGNvbXBpbGF0aW9uLiBTcGVjaWZ5IHRoZSBuYW1lIG9mIGEgemlwIGZpbGUgY29udGFpbmluZyBhIC5nY2RhIGZpbGUgdHJlZSwgYW4gYWZkbyBmaWxlIGNvbnRhaW5pbmcgYW4gYXV0byBwcm9maWxlLCBvciBhbiBMTFZNIHByb2ZpbGUgZmlsZS4gVGhpcyBmbGFnIGFsc28gYWNjZXB0cyBmaWxlcyBzcGVjaWZpZWQgYXMgbGFiZWxzIChlLmcuIGAvL2Zvby9iYXI6ZmlsZS5hZmRvYCAtIHlvdSBtYXkgbmVlZCB0byBhZGQgYW4gYGV4cG9ydHNfZmlsZXNgIGRpcmVjdGl2ZSB0byB0aGUgY29ycmVzcG9uZGluZyBwYWNrYWdlKSBhbmQgbGFiZWxzIHBvaW50aW5nIHRvIGBmZG9fcHJvZmlsZWAgdGFyZ2V0cy4gVGhpcyBmbGFnIHdpbGwgYmUgc3VwZXJzZWRlZCBieSB0aGUgYGZkb19wcm9maWxlYCBydWxlLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1ABCvIDCgdydW5fZW52EAAatANTcGVjaWZpZXMgdGhlIHNldCBvZiBlbnZpcm9ubWVudCB2YXJpYWJsZXMgYXZhaWxhYmxlIHRvIGFjdGlvbnMgd2l0aCB0YXJnZXQgY29uZmlndXJhdGlvbi4gVmFyaWFibGVzIGNhbiBiZSBlaXRoZXIgc3BlY2lmaWVkIGJ5IG5hbWUsIGluIHdoaWNoIGNhc2UgdGhlIHZhbHVlIHdpbGwgYmUgdGFrZW4gZnJvbSB0aGUgaW52b2NhdGlvbiBlbnZpcm9ubWVudCwgb3IgYnkgdGhlIG5hbWU9dmFsdWUgcGFpciB3aGljaCBzZXRzIHRoZSB2YWx1ZSBpbmRlcGVuZGVudCBvZiB0aGUgaW52b2NhdGlvbiBlbnZpcm9ubWVudC4gVGhpcyBvcHRpb24gY2FuIGJlIHVzZWQgbXVsdGlwbGUgdGltZXM7IGZvciBvcHRpb25zIGdpdmVuIGZvciB0aGUgc2FtZSB2YXJpYWJsZSwgdGhlIGxhdGVzdCB3aW5zLCBvcHRpb25zIGZvciBkaWZmZXJlbnQgdmFyaWFibGVzIGFjY3VtdWxhdGUuIgNydW4wAToPQUZGRUNUU19PVVRQVVRTShRCQVpFTF9DTElFTlRfT1BUSU9OU1ABCrMCCiVwZXJzaXN0ZW50X2FuZHJvaWRfcmVzb3VyY2VfcHJvY2Vzc29yEAAaPkVuYWJsZSBwZXJzaXN0ZW50IEFuZHJvaWQgcmVzb3VyY2UgcHJvY2Vzc29yIGJ5IHVzaW5nIHdvcmtlcnMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OUzoJRVhFQ1VUSU9OShJFWEVDVVRJT05fU1RSQVRFR1lQAAqAAgoPYmVzX2Jlc3RfZWZmb3J0EAEaBU5vLW9wIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgVOT19PUEoMVU5ET0NVTUVOVEVEUAAKfAoIZHVtcF9hbGwQARo+SWYgc2V0LCBkdW1wIGFsbCBrbm93biBjb25maWd1cmF0aW9ucyBpbnN0ZWFkIG9mIGp1c3QgdGhlIGlkcy4iBmNvbmZpZzAAOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAAK0wYKD3N0cmF0ZWd5X3JlZ2V4cBAAGpgFT3ZlcnJpZGUgd2hpY2ggc3Bhd24gc3RyYXRlZ3kgc2hvdWxkIGJlIHVzZWQgdG8gZXhlY3V0ZSBzcGF3biBhY3Rpb25zIHRoYXQgaGF2ZSBkZXNjcmlwdGlvbnMgbWF0Y2hpbmcgYSBjZXJ0YWluIHJlZ2V4X2ZpbHRlci4gU2VlIC0tcGVyX2ZpbGVfY29wdCBmb3IgZGV0YWlscyBvbnJlZ2V4X2ZpbHRlciBtYXRjaGluZy4gVGhlIGxhc3QgcmVnZXhfZmlsdGVyIHRoYXQgbWF0Y2hlcyB0aGUgZGVzY3JpcHRpb24gaXMgdXNlZC4gVGhpcyBvcHRpb24gb3ZlcnJpZGVzIG90aGVyIGZsYWdzIGZvciBzcGVjaWZ5aW5nIHN0cmF0ZWd5LiBFeGFtcGxlOiAtLXN0cmF0ZWd5X3JlZ2V4cD0vL2Zvby4qXC5jYywtLy9mb28vYmFyPWxvY2FsIG1lYW5zIHRvIHJ1biBhY3Rpb25zIHVzaW5nIGxvY2FsIHN0cmF0ZWd5IGlmIHRoZWlyIGRlc2NyaXB0aW9ucyBtYXRjaCAvL2Zvby4qLmNjIGJ1dCBub3QgLy9mb28vYmFyLiBFeGFtcGxlOiAtLXN0cmF0ZWd5X3JlZ2V4cD0nQ29tcGlsaW5nLiovYmFyPWxvY2FsICAtLXN0cmF0ZWd5X3JlZ2V4cD1Db21waWxpbmc9c2FuZGJveGVkIHdpbGwgcnVuICdDb21waWxpbmcgLy9mb28vYmFyL2Jheicgd2l0aCB0aGUgJ2xvY2FsJyBzdHJhdGVneSwgYnV0IHJldmVyc2luZyB0aGUgb3JkZXIgd291bGQgcnVuIGl0IHdpdGggJ3NhbmRib3hlZCcuICIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToJRVhFQ1VUSU9OShJFWEVDVVRJT05fU1RSQVRFR1lQAQq0AwoOcHl0aG9uX3ZlcnNpb24QABriAVRoZSBQeXRob24gbWFqb3IgdmVyc2lvbiBtb2RlLCBlaXRoZXIgYFBZMmAgb3IgYFBZM2AuIE5vdGUgdGhhdCB0aGlzIGlzIG92ZXJyaWRkZW4gYnkgYHB5X2JpbmFyeWAgYW5kIGBweV90ZXN0YCB0YXJnZXRzIChldmVuIGlmIHRoZXkgZG9uJ3QgZXhwbGljaXRseSBzcGVjaWZ5IGEgdmVyc2lvbikgc28gdGhlcmUgaXMgdXN1YWxseSBub3QgbXVjaCByZWFzb24gdG8gc3VwcGx5IHRoaXMgZmxhZy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTOg9BRkZFQ1RTX09VVFBVVFNKDkdFTkVSSUNfSU5QVVRTUAEKmAIKMmluY29tcGF0aWJsZV9kb250X2NvbGxlY3RfbmF0aXZlX2xpYnJhcmllc19pbl9kYXRhEAEaLlRoaXMgZmxhZyBpcyBhIG5vb3AgYW5kIHNjaGVkdWxlZCBmb3IgcmVtb3ZhbC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05CE0lOQ09NUEFUSUJMRV9DSEFOR0VKDFVORE9DVU1FTlRFRFAACpkCCiBleHBlcmltZW50YWxfZXh0cmFfYWN0aW9uX2ZpbHRlchAAGlVEZXByZWNhdGVkIGluIGZhdm9yIG9mIGFzcGVjdHMuIEZpbHRlcnMgc2V0IG9mIHRhcmdldHMgdG8gc2NoZWR1bGUgZXh0cmFfYWN0aW9ucyBmb3IuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEKhgIKKmV4cGVyaW1lbnRhbF9za3lsYXJrX2RlYnVnX3ZlcmJvc2VfbG9nZ2luZxABGiNTaG93IHZlcmJvc2UgbG9ncyBmb3IgdGhlIGRlYnVnZ2VyLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPVEVSTUlOQUxfT1VUUFVUQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFAACtkDChlhbGxvd191bnJlc29sdmVkX3N5bWxpbmtzEAEa9gFJZiBlbmFibGVkLCBCYXplbCBhbGxvd3MgdGhlIHVzZSBvZiBjdHguYWN0aW9uLmRlY2xhcmVfc3ltbGluaygpIGFuZCB0aGUgdXNlIG9mIGN0eC5hY3Rpb25zLnN5bWxpbmsoKSB3aXRob3V0IGEgdGFyZ2V0IGZpbGUsIHRodXMgYWxsb3dpbmcgdGhlIGNyZWF0aW9uIG9mIHVucmVzb2x2ZWQgc3ltbGlua3MuIFVucmVzb2x2ZWQgc3ltbGlua3MgaW5zaWRlIHRyZWUgYXJ0aWZhY3RzIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFOhRMT0FESU5HX0FORF9BTkFMWVNJU0oMVU5ET0NVTUVOVEVEUAAK1gEKHHByb3RvOmluY2x1ZGVfY29uZmlndXJhdGlvbnMQARqPAWlmIGVuYWJsZWQsIHByb3RvIG91dHB1dCB3aWxsIGluY2x1ZGUgaW5mb3JtYXRpb24gYWJvdXQgY29uZmlndXJhdGlvbnMuIFdoZW4gZGlzYWJsZWQsY3F1ZXJ5IHByb3RvIG91dHB1dCBmb3JtYXQgcmVzZW1ibGVzIHF1ZXJ5IG91dHB1dCBmb3JtYXQuIgZjcXVlcnkwADoPQUZGRUNUU19PVVRQVVRTSgVRVUVSWVAACp4CCg9hcHBsZV9wbGF0Zm9ybXMQABpGQ29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgcGxhdGZvcm1zIHRvIHVzZSB3aGVuIGJ1aWxkaW5nIEFwcGxlIGJpbmFyaWVzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEU6FExPQURJTkdfQU5EX0FOQUxZU0lTSgxVTkRPQ1VNRU5URURQAQrLAgoVaW9zX3NpbXVsYXRvcl92ZXJzaW9uEAAakwFUaGUgdmVyc2lvbiBvZiBpT1MgdG8gcnVuIG9uIHRoZSBzaW11bGF0b3Igd2hlbiBydW5uaW5nIG9yIHRlc3RpbmcuIFRoaXMgaXMgaWdub3JlZCBmb3IgaW9zX3Rlc3QgcnVsZXMgaWYgYSB0YXJnZXQgZGV2aWNlIGlzIHNwZWNpZmllZCBpbiB0aGUgcnVsZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6C1RFU1RfUlVOTkVSSgdURVNUSU5HUAEKhwQKG2V4cGVyaW1lbnRhbF9zY2FsZV90aW1lb3V0cxAAGtIBU2NhbGUgYWxsIHRpbWVvdXRzIGluIFN0YXJsYXJrIHJlcG9zaXRvcnkgcnVsZXMgYnkgdGhpcyBmYWN0b3IuIEluIHRoaXMgd2F5LCBleHRlcm5hbCByZXBvc2l0b3JpZXMgY2FuIGJlIG1hZGUgd29ya2luZyBvbiBtYWNoaW5lcyB0aGF0IGFyZSBzbG93ZXIgdGhhbiB0aGUgcnVsZSBhdXRob3IgZXhwZWN0ZWQsIHdpdGhvdXQgY2hhbmdpbmcgdGhlIHNvdXJjZSBjb2RlIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OQgxFWFBFUklNRU5UQUxKFEJBWkVMX0NMSUVOVF9PUFRJT05TUAEKlAIKKmV4cGVyaW1lbnRhbF90dXJiaW5lX2Fubm90YXRpb25fcHJvY2Vzc2luZxABGjlJZiBlbmFibGVkLCB0dXJiaW5lIGlzIHVzZWQgZm9yIGFsbCBhbm5vdGF0aW9uIHByb2Nlc3NpbmciBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05CDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAK7QIKJGV4cGVyaW1lbnRhbF9zdHJlYW1fbG9nX2ZpbGVfdXBsb2FkcxABGlhTdHJlYW0gbG9nIGZpbGUgdXBsb2FkcyBkaXJlY3RseSB0byB0aGUgcmVtb3RlIHN0b3JhZ2UgcmF0aGVyIHRoYW4gd3JpdGluZyB0aGVtIHRvIGRpc2suIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg9BRkZFQ1RTX09VVFBVVFNKB0xPR0dJTkdQAAqzBQoNb3V0cHV0X2dyb3VwcxAAGusDQSBsaXN0IG9mIGNvbW1hLXNlcGFyYXRlZCBvdXRwdXQgZ3JvdXAgbmFtZXMsIGVhY2ggb2Ygd2hpY2ggb3B0aW9uYWxseSBwcmVmaXhlZCBieSBhICsgb3IgYSAtLiBBIGdyb3VwIHByZWZpeGVkIGJ5ICsgaXMgYWRkZWQgdG8gdGhlIGRlZmF1bHQgc2V0IG9mIG91dHB1dCBncm91cHMsIHdoaWxlIGEgZ3JvdXAgcHJlZml4ZWQgYnkgLSBpcyByZW1vdmVkIGZyb20gdGhlIGRlZmF1bHQgc2V0LiBJZiBhdCBsZWFzdCBvbmUgZ3JvdXAgaXMgbm90IHByZWZpeGVkLCB0aGUgZGVmYXVsdCBzZXQgb2Ygb3V0cHV0IGdyb3VwcyBpcyBvbWl0dGVkLiBGb3IgZXhhbXBsZSwgLS1vdXRwdXRfZ3JvdXBzPStmb28sK2JhciBidWlsZHMgdGhlIHVuaW9uIG9mIHRoZSBkZWZhdWx0IHNldCwgZm9vLCBhbmQgYmFyLCB3aGlsZSAtLW91dHB1dF9ncm91cHM9Zm9vLGJhciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgc2V0IHN1Y2ggdGhhdCBvbmx5IGZvbyBhbmQgYmFyIGFyZSBidWlsdC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6CUVYRUNVVElPTjoPQUZGRUNUU19PVVRQVVRTShBPVVRQVVRfU0VMRUNUSU9OUAEK1AQKFGxlZ2FjeV93aG9sZV9hcmNoaXZlEAEa7QJEZXByZWNhdGVkLCBzdXBlcnNlZGVkIGJ5IC0taW5jb21wYXRpYmxlX3JlbW92ZV9sZWdhY3lfd2hvbGVfYXJjaGl2ZSAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iYXplbGJ1aWxkL2JhemVsL2lzc3Vlcy83MzYyIGZvciBkZXRhaWxzKS4gV2hlbiBvbiwgdXNlIC0td2hvbGUtYXJjaGl2ZSBmb3IgY2NfYmluYXJ5IHJ1bGVzIHRoYXQgaGF2ZSBsaW5rc2hhcmVkPVRydWUgYW5kIGVpdGhlciBsaW5rc3RhdGljPVRydWUgb3IgJy1zdGF0aWMnIGluIGxpbmtvcHRzLiBUaGlzIGlzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBvbmx5LiBBIGJldHRlciBhbHRlcm5hdGl2ZSBpcyB0byB1c2UgYWx3YXlzbGluaz0xIHdoZXJlIHJlcXVpcmVkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQUNUSU9OX0NPTU1BTkRfTElORVM6D0FGRkVDVFNfT1VUUFVUU0IKREVQUkVDQVRFREoRT1VUUFVUX1BBUkFNRVRFUlNQAArAAgoYaW50ZXJuYWxfc3Bhd25fc2NoZWR1bGVyEAEaWFBsYWNlaG9sZGVyIG9wdGlvbiBzbyB0aGF0IHdlIGNhbiB0ZWxsIGluIEJsYXplIHdoZXRoZXIgdGhlIHNwYXduIHNjaGVkdWxlciB3YXMgZW5hYmxlZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTjojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlNKEkVYRUNVVElPTl9TVFJBVEVHWVAACo0CChBkZWZhdWx0X292ZXJyaWRlEAAaACIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wAToOQ0hBTkdFU19JTlBVVFNCBkhJRERFTkoMVU5ET0NVTUVOVEVEUAEKvgIKDmJ1aWxkX21ldGFkYXRhEAAaOUN1c3RvbSBrZXktdmFsdWUgc3RyaW5nIHBhaXJzIHRvIHN1cHBseSBpbiBhIGJ1aWxkIGV2ZW50LiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wAToPVEVSTUlOQUxfT1VUUFVUSg1VTkNBVEVHT1JJWkVEUAEKjAcKHndvcmtlcl9tYXhfbXVsdGlwbGV4X2luc3RhbmNlcxAAGp0FSG93IG1hbnkgV29ya1JlcXVlc3RzIGEgbXVsdGlwbGV4IHdvcmtlciBwcm9jZXNzIG1heSByZWNlaXZlIGluIHBhcmFsbGVsIGlmIHlvdSB1c2UgdGhlICd3b3JrZXInIHN0cmF0ZWd5IHdpdGggLS13b3JrZXJfbXVsdGlwbGV4LiBNYXkgYmUgc3BlY2lmaWVkIGFzIFtuYW1lPXZhbHVlXSB0byBnaXZlIGEgZGlmZmVyZW50IHZhbHVlIHBlciBtbmVtb25pYy4gVGhlIGxpbWl0IGlzIGJhc2VkIG9uIHdvcmtlciBrZXlzLCB3aGljaCBhcmUgZGlmZmVyZW50aWF0ZWQgYmFzZWQgb24gbW5lbW9uaWMsIGJ1dCBhbHNvIG9uIHN0YXJ0dXAgZmxhZ3MgYW5kIGVudmlyb25tZW50LCBzbyB0aGVyZSBjYW4gaW4gc29tZSBjYXNlcyBiZSBtb3JlIHdvcmtlcnMgcGVyIG1uZW1vbmljIHRoYW4gdGhpcyBmbGFnIHNwZWNpZmllcy4gVGFrZXMgYW4gaW50ZWdlciwgb3IgYSBrZXl3b3JkICgiYXV0byIsICJIT1NUX0NQVVMiLCAiSE9TVF9SQU0iKSwgb3B0aW9uYWxseSBmb2xsb3dlZCBieSBhbiBvcGVyYXRpb24gKFstfCpdPGZsb2F0PikgZWcuICJhdXRvIiwgIkhPU1RfQ1BVUyouNSIuICdhdXRvJyBjYWxjdWxhdGVzIGEgcmVhc29uYWJsZSBkZWZhdWx0IGJhc2VkIG9uIG1hY2hpbmUgY2FwYWNpdHkuICI9dmFsdWUiIHNldHMgYSBkZWZhdWx0IGZvciB1bnNwZWNpZmllZCBtbmVtb25pY3MuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOglFWEVDVVRJT046I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TShJFWEVDVVRJT05fU1RSQVRFR1lQAQreAQoiaW5jb21wYXRpYmxlX3JlbW92ZV9iaW5hcnlfcHJvZmlsZRABGgZOby1vcC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QQhNJTkNPTVBBVElCTEVfQ0hBTkdFSgxVTkRPQ1VNRU5URURQAAq1AwohZXhwZXJpbWVudGFsX3NwbGl0X3htbF9nZW5lcmF0aW9uEAEa6AFJZiB0aGlzIGZsYWcgaXMgc2V0LCBhbmQgYSB0ZXN0IGFjdGlvbiBkb2VzIG5vdCBnZW5lcmF0ZSBhIHRlc3QueG1sIGZpbGUsIHRoZW4gQmF6ZWwgdXNlcyBhIHNlcGFyYXRlIGFjdGlvbiB0byBnZW5lcmF0ZSBhIGR1bW15IHRlc3QueG1sIGZpbGUgY29udGFpbmluZyB0aGUgdGVzdCBsb2cuIE90aGVyd2lzZSwgQmF6ZWwgZ2VuZXJhdGVzIGEgdGVzdC54bWwgYXMgcGFydCBvZiB0aGUgdGVzdCBhY3Rpb24uIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVAACtECChtodHRwX21heF9wYXJhbGxlbF9kb3dubG9hZHMQABorVGhlIG1heGltdW0gbnVtYmVyIHBhcmFsbGVsIGh0dHAgZG93bmxvYWRzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADocQkFaRUxfSU5URVJOQUxfQ09ORklHVVJBVElPTkoUQkFaRUxfQ0xJRU5UX09QVElPTlNQAQrdBAowZXhwZXJpbWVudGFsX2NvbGxlY3Rfc2t5ZnJhbWVfY291bnRzX2luX3Byb2ZpbGVyEAEaugJJZiBlbmFibGVkLCB0aGUgcHJvZmlsZXIgY29sbGVjdHMgU2t5RnVuY3Rpb24gY291bnRzIGluIHRoZSBTa3lmcmFtZSBncmFwaCBvdmVyIHRpbWUgZm9yIGtleSBmdW5jdGlvbiB0eXBlcywgbGlrZSBjb25maWd1cmVkIHRhcmdldHMgYW5kIGFjdGlvbiBleGVjdXRpb25zLiBNYXkgaGF2ZSBhIHBlcmZvcm1hbmNlIGhpdCBhcyB0aGlzIHZpc2l0cyB0aGUgRU5USVJFIFNreWZyYW1lIGdyYXBoIGF0IGV2ZXJ5IHByb2ZpbGluZyB0aW1lIHVuaXQuIERvIG5vdCB1c2UgdGhpcyBmbGFnIHdpdGggcGVyZm9ybWFuY2UtY3JpdGljYWwgbWVhc3VyZW1lbnRzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoQQkFaRUxfTU9OSVRPUklOR0oHTE9HR0lOR1AACrMDCk5leHBlcmltZW50YWxfb25lX3ZlcnNpb25fZW5mb3JjZW1lbnRfdXNlX3RyYW5zaXRpdmVfamFyc19mb3JfYmluYXJ5X3VuZGVyX3Rlc3QQARqIAUlmIGVuYWJsZWQsIG9uZSB2ZXJzaW9uIGVuZm9yY2VtZW50IGZvciBhbmRyb2lkX3Rlc3QgdXNlcyB0aGUgYmluYXJ5X3VuZGVyX3Rlc3QncyB0cmFuc2l0aXZlIGNsYXNzcGF0aCwgb3RoZXJ3aXNlIGl0IHVzZXMgdGhlIGRlcGxveSBqYXIiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT046FEFDVElPTl9DT01NQU5EX0xJTkVTQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFAACoADCi5pbmNvbXBhdGlibGVfZW5hYmxlX3Byb3RvX3Rvb2xjaGFpbl9yZXNvbHV0aW9uEAEaRUlmIHRydWUsIHByb3RvIGxhbmcgcnVsZXMgZGVmaW5lIHRvb2xjaGFpbnMgZnJvbSBwcm90b2J1ZiByZXBvc2l0b3J5LiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKCVRPT0xDSEFJTlAACrACCglwbGF0Zm9ybXMQABpZVGhlIGxhYmVscyBvZiB0aGUgcGxhdGZvcm0gcnVsZXMgZGVzY3JpYmluZyB0aGUgdGFyZ2V0IHBsYXRmb3JtcyBmb3IgdGhlIGN1cnJlbnQgY29tbWFuZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUUzoOQ0hBTkdFU19JTlBVVFM6FExPQURJTkdfQU5EX0FOQUxZU0lTSglUT09MQ0hBSU5QAQqoAQoEbW9kZRAAGkBEZXByZWNhdGVkIG5vLWVmZmVjdCBmbGFnLiBPbmx5IHNreWxhcmsgbW9kZSBpcyBzdGlsbCBzdXBwb3J0ZWQuIg5tb2JpbGUtaW5zdGFsbDAAOhRMT0FESU5HX0FORF9BTkFMWVNJUzoJRVhFQ1VUSU9OQhNJTkNPTVBBVElCTEVfQ0hBTkdFShJFWEVDVVRJT05fU1RSQVRFR1lQAQrCBAoSYXNwZWN0c19wYXJhbWV0ZXJzEAAa/QJTcGVjaWZpZXMgdGhlIHZhbHVlcyBvZiB0aGUgY29tbWFuZC1saW5lIGFzcGVjdHMgcGFyYW1ldGVycy4gRWFjaCBwYXJhbWV0ZXIgdmFsdWUgaXMgc3BlY2lmaWVkIHZpYSA8cGFyYW1fbmFtZT49PHBhcmFtX3ZhbHVlPiwgZm9yIGV4YW1wbGUgJ215X3BhcmFtPW15X3ZhbCcgd2hlcmUgJ215X3BhcmFtJyBpcyBhIHBhcmFtZXRlciBvZiBzb21lIGFzcGVjdCBpbiAtLWFzcGVjdHMgbGlzdCBvciByZXF1aXJlZCBieSBhbiBhc3BlY3QgaW4gdGhlIGxpc3QuIFRoaXMgb3B0aW9uIGNhbiBiZSB1c2VkIG11bHRpcGxlIHRpbWVzLiBIb3dldmVyLCBpdCBpcyBub3QgYWxsb3dlZCB0byBhc3NpZ24gdmFsdWVzIHRvIHRoZSBzYW1lIHBhcmFtZXRlciBtb3JlIHRoYW4gb25jZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6FExPQURJTkdfQU5EX0FOQUxZU0lTSg5HRU5FUklDX0lOUFVUU1ABCpUCCidleHBlcmltZW50YWxfcmVtb3RlX2FuYWx5c2lzX2NhY2hlX21vZGUQABo2VGhlIHRyYW5zcG9ydCBkaXJlY3Rpb24gZm9yIHRoZSByZW1vdGUgYW5hbHlzaXMgY2FjaGUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OSgxVTkRPQ1VNRU5URURQAQr9AQobemlwX3VuZGVjbGFyZWRfdGVzdF9vdXRwdXRzEAEaQElmIHRydWUsIHVuZGVjbGFyZWQgdGVzdCBvdXRwdXRzIHdpbGwgYmUgYXJjaGl2ZWQgaW4gYSB6aXAgZmlsZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6C1RFU1RfUlVOTkVSSgdURVNUSU5HUAAKpAMKGWNvdmVyYWdlX291dHB1dF9nZW5lcmF0b3IQABq8AUxvY2F0aW9uIG9mIHRoZSBiaW5hcnkgdGhhdCBpcyB1c2VkIHRvIHBvc3Rwcm9jZXNzIHJhdyBjb3ZlcmFnZSByZXBvcnRzLiBUaGlzIG11c3QgY3VycmVudGx5IGJlIGEgZmlsZWdyb3VwIHRoYXQgY29udGFpbnMgYSBzaW5nbGUgZmlsZSwgdGhlIGJpbmFyeS4gRGVmYXVsdHMgdG8gJy8vdG9vbHMvdGVzdDpsY292X21lcmdlcicuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg5DSEFOR0VTX0lOUFVUUzoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0oJVE9PTENIQUlOUAEK9gIKFnRsc19jbGllbnRfY2VydGlmaWNhdGUQABpxU3BlY2lmeSB0aGUgVExTIGNsaWVudCBjZXJ0aWZpY2F0ZSB0byB1c2U7IHlvdSBhbHNvIG5lZWQgdG8gcHJvdmlkZSBhIGNsaWVudCBrZXkgdG8gZW5hYmxlIGNsaWVudCBhdXRoZW50aWNhdGlvbi4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQroBQoLb3V0cHV0X2Jhc2UQABqJBUlmIHNldCwgc3BlY2lmaWVzIHRoZSBvdXRwdXQgbG9jYXRpb24gdG8gd2hpY2ggYWxsIGJ1aWxkIG91dHB1dCB3aWxsIGJlIHdyaXR0ZW4uIE90aGVyd2lzZSwgdGhlIGxvY2F0aW9uIHdpbGwgYmUgJHtPVVRQVVRfUk9PVH0vX2JsYXplXyR7VVNFUn0vJHtNRDVfT0ZfV09SS1NQQUNFX1JPT1R9LiBOb3RlOiBJZiB5b3Ugc3BlY2lmeSBhIGRpZmZlcmVudCBvcHRpb24gZnJvbSBvbmUgdG8gdGhlIG5leHQgQmF6ZWwgaW52b2NhdGlvbiBmb3IgdGhpcyB2YWx1ZSwgeW91J2xsIGxpa2VseSBzdGFydCB1cCBhIG5ldywgYWRkaXRpb25hbCBCYXplbCBzZXJ2ZXIuIEJhemVsIHN0YXJ0cyBleGFjdGx5IG9uZSBzZXJ2ZXIgcGVyIHNwZWNpZmllZCBvdXRwdXQgYmFzZS4gVHlwaWNhbGx5IHRoZXJlIGlzIG9uZSBvdXRwdXQgYmFzZSBwZXIgd29ya3NwYWNlIC0gaG93ZXZlciwgd2l0aCB0aGlzIG9wdGlvbiB5b3UgbWF5IGhhdmUgbXVsdGlwbGUgb3V0cHV0IGJhc2VzIHBlciB3b3Jrc3BhY2UgYW5kIHRoZXJlYnkgcnVuIG11bHRpcGxlIGJ1aWxkcyBmb3IgdGhlIHNhbWUgY2xpZW50IG9uIHRoZSBzYW1lIG1hY2hpbmUgY29uY3VycmVudGx5LiBTZWUgJ2JhemVsIGhlbHAgc2h1dGRvd24nIG9uIGhvdyB0byBzaHV0ZG93biBhIEJhemVsIHNlcnZlci4iB3N0YXJ0dXAwADoPQUZGRUNUU19PVVRQVVRTOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUoUQkFaRUxfQ0xJRU5UX09QVElPTlNQAQqVAwodcHJpbnRfcmVsYXRpdmVfdGVzdF9sb2dfcGF0aHMQARqsAklmIHRydWUsIHdoZW4gcHJpbnRpbmcgdGhlIHBhdGggdG8gYSB0ZXN0IGxvZywgdXNlIHJlbGF0aXZlIHBhdGggdGhhdCBtYWtlcyB1c2Ugb2YgdGhlICd0ZXN0bG9ncycgY29udmVuaWVuY2Ugc3ltbGluay4gTi5CLiAtIEEgc3Vic2VxdWVudCAnYnVpbGQnLyd0ZXN0Jy9ldGMgaW52b2NhdGlvbiB3aXRoIGEgZGlmZmVyZW50IGNvbmZpZ3VyYXRpb24gY2FuIGNhdXNlIHRoZSB0YXJnZXQgb2YgdGhpcyBzeW1saW5rIHRvIGNoYW5nZSwgbWFraW5nIHRoZSBwYXRoIHByaW50ZWQgcHJldmlvdXNseSBubyBsb25nZXIgdXNlZnVsLiIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKB0xPR0dJTkdQAAqLAwoiaW5jb21wYXRpYmxlX25vX3J1bGVfb3V0cHV0c19wYXJhbRABGlNJZiBzZXQgdG8gdHJ1ZSwgZGlzYWJsZXMgdGhlIGBvdXRwdXRzYCBwYXJhbWV0ZXIgb2YgdGhlIGBydWxlKClgIFN0YXJsYXJrIGZ1bmN0aW9uLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUQlVJTERfRklMRV9TRU1BTlRJQ1NCE0lOQ09NUEFUSUJMRV9DSEFOR0VKElNUQVJMQVJLX1NFTUFOVElDU1AACvQBCgNhbGwQARq7AUZldGNoZXMgYWxsIGV4dGVybmFsIHJlcG9zaXRvcmllcyBuZWNlc3NhcnkgZm9yIGJ1aWxkaW5nIGFueSB0YXJnZXQgb3IgcmVwb3NpdG9yeS4gVGhpcyBpcyB0aGUgZGVmYXVsdCBpZiBubyBvdGhlciBmbGFncyBhbmQgYXJndW1lbnRzIGFyZSBwcm92aWRlZC4gT25seSB3b3JrcyB3aGVuIC0tZW5hYmxlX2J6bG1vZCBpcyBvbi4iBWZldGNoMAA6DkNIQU5HRVNfSU5QVVRTShJFWEVDVVRJT05fU1RSQVRFR1lQAAq8BQoaZXhwZXJpbWVudGFsX2Nncm91cF9wYXJlbnQQABrbBFRoZSBjZ3JvdXAgd2hlcmUgdG8gc3RhcnQgdGhlIGJhemVsIHNlcnZlciBhcyBhbiBhYnNvbHV0ZSBwYXRoLiBUaGUgc2VydmVyIHByb2Nlc3Mgd2lsbCBiZSBzdGFydGVkIGluIHRoZSBzcGVjaWZpZWQgY2dyb3VwIGZvciBlYWNoIHN1cHBvcnRlZCBjb250cm9sbGVyLiBGb3IgZXhhbXBsZSwgaWYgdGhlIHZhbHVlIG9mIHRoaXMgZmxhZyBpcyAvYnVpbGQvYmF6ZWwgYW5kIHRoZSBjcHUgYW5kIG1lbW9yeSBjb250cm9sbGVycyBhcmUgbW91bnRlZCByZXNwZWN0aXZlbHkgb24gL3N5cy9mcy9jZ3JvdXAvY3B1IGFuZCAvc3lzL2ZzL2Nncm91cC9tZW1vcnksIHRoZSBzZXJ2ZXIgd2lsbCBiZSBzdGFydGVkIGluIHRoZSBjZ3JvdXBzIC9zeXMvZnMvY2dyb3VwL2NwdS9idWlsZC9iYXplbCBhbmQgL3N5cy9mcy9jZ3JvdXAvbWVtb3J5L2J1aWxkL2JhemVsLkl0IGlzIG5vdCBhbiBlcnJvciBpZiB0aGUgc3BlY2lmaWVkIGNncm91cCBpcyBub3Qgd3JpdGFibGUgZm9yIG9uZSBvciBtb3JlIG9mIHRoZSBjb250cm9sbGVycy4gVGhpcyBvcHRpb25zIGRvZXMgbm90IGhhdmUgYW55IGVmZmVjdCBvbiBwbGF0Zm9ybXMgdGhhdCBkbyBub3Qgc3VwcG9ydCBjZ3JvdXBzLiIHc3RhcnR1cDAAOhBCQVpFTF9NT05JVE9SSU5HOglFWEVDVVRJT05KFEJBWkVMX0NMSUVOVF9PUFRJT05TUAEKiwIKKWluY29tcGF0aWJsZV9hdXRvX2NvbmZpZ3VyZV9ob3N0X3BsYXRmb3JtEAEaLFRoaXMgb3B0aW9uIGlzIGRlcHJlY2F0ZWQgYW5kIGhhcyBubyBlZmZlY3QuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgVOT19PUEITSU5DT01QQVRJQkxFX0NIQU5HRUoMVU5ET0NVTUVOVEVEUAAK0gEKA2NwdRAAGg9UaGUgdGFyZ2V0IENQVS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6DkNIQU5HRVNfSU5QVVRTOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAEK6AEKKGV4cGVyaW1lbnRhbF9lbmFibGVfc3RhcmxhcmtfZG9jX2V4dHJhY3QQARoRRGVwcmVjYXRlZCBuby1vcC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFAACpgCCg5jc19mZG9fcHJvZmlsZRAAGlpUaGUgY3NfZmRvX3Byb2ZpbGUgcmVwcmVzZW50aW5nIHRoZSBjb250ZXh0IHNlbnNpdGl2ZSBwcm9maWxlIHRvIGJlIHVzZWQgZm9yIG9wdGltaXphdGlvbi4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQr8AwogZXhwZXJpbWVudGFsX2NwdV9sb2FkX3NjaGVkdWxpbmcQARqrAkVuYWJsZXMgdGhlIGV4cGVyaW1lbnRhbCBsb2NhbCBleGVjdXRpb24gc2NoZWR1bGluZyBiYXNlZCBvbiBDUFUgbG9hZCwgbm90IGVzdGltYXRpb24gb2YgYWN0aW9ucyBvbmUgYnkgb25lLiAgRXhwZXJpbWVudGFsIHNjaGVkdWxpbmcgaGF2ZSBzaG93ZWQgdGhlIGxhcmdlIGJlbmVmaXQgb24gYSBsYXJnZSBsb2NhbCBidWlsZHMgb24gYSBwb3dlcmZ1bCBtYWNoaW5lcyB3aXRoIHRoZSBsYXJnZSBudW1iZXIgb2YgY29yZXMuIFJlY2NvbW1lbmRlZCB0byB1c2Ugd2l0aCAtLWxvY2FsX3Jlc291cmNlcz1jcHU9SE9TVF9DUFVTIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KF0JVSUxEX1RJTUVfT1BUSU1JWkFUSU9OUAAK3gEKMWV4cGVyaW1lbnRhbF9jb2xsZWN0X2xvY2FsX3NhbmRib3hfYWN0aW9uX21ldHJpY3MQARoRRGVwcmVjYXRlZCBuby1vcC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QSgdMT0dHSU5HUAAKvQEKIGVtaXRfc2NyaXB0X3BhdGhfaW5fZXhlY19yZXF1ZXN0EAEab0lmIHRydWUsIGVtaXRzIHRoZSBFeGVjUmVxdWVzdCB3aXRoIC0tc2NyaXB0X3BhdGggZmlsZSB2YWx1ZSBhbmQgc2NyaXB0IGNvbnRlbnRzIGluc3RlYWQgb2Ygd3JpdGluZyB0aGUgc2NyaXB0LiIDcnVuMAA6D0FGRkVDVFNfT1VUUFVUU0oMVU5ET0NVTUVOVEVEUAAKxgQKI2V4cGVyaW1lbnRhbF9sb2NhbF9yZXRyaWVzX29uX2NyYXNoEAAa/QJOdW1iZXIgb2YgdGltZXMgdG8gcmV0cnkgYSBsb2NhbCBhY3Rpb24gd2hlbiB3ZSBkZXRlY3QgdGhhdCBpdCBjcmFzaGVkLiBUaGlzIGV4aXN0cyB0byB3b3JrYXJvdW5kIGEgYnVnIGluIE9TWEZVU0Ugd2hpY2ggaXMgdGlja2xlZCBieSB0aGUgdXNlIG9mIHRoZSBkeW5hbWljIHNjaGVkdWxlciBhbmQgLS1leHBlcmltZW50YWxfbG9jYWxfbG9ja2ZyZWVfb3V0cHV0IGR1ZSB0byBjb25zdGFudCBwcm9jZXNzIGNodXJuLiBUaGUgYnVnIGNhbiBiZSB0cmlnZ2VyZWQgYnkgYSBjYW5jZWxsZWQgcHJvY2VzcyB0aGF0IHJhbiAqYmVmb3JlKiB0aGUgcHJvY2VzcyB3ZSBhcmUgdHJ5aW5nIHRvIHJ1biwgaW50cm9kdWNpbmcgY29ycnVwdGlvbiBpbiBpdHMgZmlsZSByZWFkcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkoMVU5ET0NVTUVOVEVEUAEKsAMKGHdvcmtzcGFjZV9zdGF0dXNfY29tbWFuZBAAGvMBQSBjb21tYW5kIGludm9rZWQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYnVpbGQgdG8gcHJvdmlkZSBzdGF0dXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHdvcmtzcGFjZSBpbiB0aGUgZm9ybSBvZiBrZXkvdmFsdWUgcGFpcnMuICBTZWUgdGhlIFVzZXIncyBNYW51YWwgZm9yIHRoZSBmdWxsIHNwZWNpZmljYXRpb24uIEFsc28gc2VlIHRvb2xzL2J1aWxkc3RhbXAvZ2V0X3dvcmtzcGFjZV9zdGF0dXMgZm9yIGFuIGV4YW1wbGUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEK9wIKEGNvdmVyYWdlX3N1cHBvcnQQABqYAUxvY2F0aW9uIG9mIHN1cHBvcnQgZmlsZXMgdGhhdCBhcmUgcmVxdWlyZWQgb24gdGhlIGlucHV0cyBvZiBldmVyeSB0ZXN0IGFjdGlvbiB0aGF0IGNvbGxlY3RzIGNvZGUgY292ZXJhZ2UuIERlZmF1bHRzIHRvICcvL3Rvb2xzL3Rlc3Q6Y292ZXJhZ2Vfc3VwcG9ydCcuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg5DSEFOR0VTX0lOUFVUUzoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0oJVE9PTENIQUlOUAEKyQEKImV4cGVyaW1lbnRhbF9wcm9maWxlX2FjdGlvbl9jb3VudHMQARoGTm8tb3AuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgVOT19PUEoMVU5ET0NVTUVOVEVEUAAKpQIKGmFuZHJvaWRfcmVzb3VyY2Vfc2hyaW5raW5nEAEaRUVuYWJsZXMgcmVzb3VyY2Ugc2hyaW5raW5nIGZvciBhbmRyb2lkX2JpbmFyeSBBUEtzIHRoYXQgdXNlIFByb0d1YXJkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0oRT1VUUFVUX1BBUkFNRVRFUlNQAAqVAwoWbmVzdGVkX3NldF9kZXB0aF9saW1pdBAAGn5UaGUgbWF4aW11bSBkZXB0aCBvZiB0aGUgZ3JhcGggaW50ZXJuYWwgdG8gYSBkZXBzZXQgKGFsc28ga25vd24gYXMgTmVzdGVkU2V0KSwgYWJvdmUgd2hpY2ggdGhlIGRlcHNldCgpIGNvbnN0cnVjdG9yIHdpbGwgZmFpbC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTShJTVEFSTEFSS19TRU1BTlRJQ1NQAQqVAgooZXhwZXJpbWVudGFsX3Rocm90dGxlX2FjdGlvbl9jYWNoZV9jaGVjaxABGjpXaGV0aGVyIHRvIHRocm90dGxlIHRoZSBjaGVjayB3aGV0aGVyIGFuIGFjdGlvbiBpcyBjYWNoZWQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05CDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAK2AEKFWhpZ2hfcHJpb3JpdHlfd29ya2VycxAAGhxOby1vcCwgd2lsbCBiZSByZW1vdmVkIHNvb24uIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOgVOT19PUEoSRVhFQ1VUSU9OX1NUUkFURUdZUAEK5QIKCm5vZGVwX2RlcHMQARqcAklmIGVuYWJsZWQsIGRlcHMgZnJvbSAibm9kZXAiIGF0dHJpYnV0ZXMgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgZGVwZW5kZW5jeSBncmFwaCBvdmVyIHdoaWNoIHRoZSBxdWVyeSBvcGVyYXRlcy4gQSBjb21tb24gZXhhbXBsZSBvZiBhICJub2RlcCIgYXR0cmlidXRlIGlzICJ2aXNpYmlsaXR5Ii4gUnVuIGFuZCBwYXJzZSB0aGUgb3V0cHV0IG9mIGBpbmZvIGJ1aWxkLWxhbmd1YWdlYCB0byBsZWFybiBhYm91dCBhbGwgdGhlICJub2RlcCIgYXR0cmlidXRlcyBpbiB0aGUgYnVpbGQgbGFuZ3VhZ2UuIgZhcXVlcnkiBmNxdWVyeSIFcXVlcnkwADoUQlVJTERfRklMRV9TRU1BTlRJQ1NKBVFVRVJZUAAKnwIKLGV4cGVyaW1lbnRhbF9hbmRyb2lkX2NvbXByZXNzX2phdmFfcmVzb3VyY2VzEAEaH0NvbXByZXNzIEphdmEgcmVzb3VyY2VzIGluIEFQS3MiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUUzoUTE9BRElOR19BTkRfQU5BTFlTSVNCDEVYUEVSSU1FTlRBTEoRT1VUUFVUX1BBUkFNRVRFUlNQAAq9AQobbW9iaWxlX2luc3RhbGxfcnVuX2RlcGxveWVyEAEaSFdoZXRoZXIgdG8gcnVuIHRoZSBtb2JpbGUtaW5zdGFsbCBkZXBsb3llciBhZnRlciBidWlsZGluZyBhbGwgYXJ0aWZhY3RzLiIObW9iaWxlLWluc3RhbGwwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6D0FGRkVDVFNfT1VUUFVUUzoJRVhFQ1VUSU9OSgxVTkRPQ1VNRU5URURQAAqxAgoecGVyc2lzdGVudF9hbmRyb2lkX2RleF9kZXN1Z2FyEAAaQ0VuYWJsZSBwZXJzaXN0ZW50IEFuZHJvaWQgZGV4IGFuZCBkZXN1Z2FyIGFjdGlvbnMgYnkgdXNpbmcgd29ya2Vycy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVAACo4DChtyZW1vdGVfdXBsb2FkX2xvY2FsX3Jlc3VsdHMQARqKAVdoZXRoZXIgdG8gdXBsb2FkIGxvY2FsbHkgZXhlY3V0ZWQgYWN0aW9uIHJlc3VsdHMgdG8gdGhlIHJlbW90ZSBjYWNoZSBpZiB0aGUgcmVtb3RlIGNhY2hlIHN1cHBvcnRzIGl0IGFuZCB0aGUgdXNlciBpcyBhdXRob3JpemVkIHRvIGRvIHNvLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoGUkVNT1RFUAAK7gIKDHN0YXJ0dXBfdGltZRAAGlJUaGUgdGltZSBpbiBtcyB0aGUgbGF1bmNoZXIgc3BlbmRzIGJlZm9yZSBzZW5kaW5nIHRoZSByZXF1ZXN0IHRvIHRoZSBiYXplbCBzZXJ2ZXIuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg9BRkZFQ1RTX09VVFBVVFM6EEJBWkVMX01PTklUT1JJTkdCBkhJRERFTkoMVU5ET0NVTUVOVEVEUAEKmwEKB2FkYl9hcmcQABpRRXh0cmEgYXJndW1lbnRzIHRvIHBhc3MgdG8gYWRiLiBVc3VhbGx5IHVzZWQgdG8gZGVzaWduYXRlIGEgZGV2aWNlIHRvIGluc3RhbGwgdG8uIg5tb2JpbGUtaW5zdGFsbDABOhRBQ1RJT05fQ09NTUFORF9MSU5FU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQrXAgofcHJvY2Vzc19oZWFkZXJzX2luX2RlcGVuZGVuY2llcxABGocBV2hlbiBidWlsZGluZyBhIHRhcmdldCAvL2E6YSwgcHJvY2VzcyBoZWFkZXJzIGluIGFsbCB0YXJnZXRzIHRoYXQgLy9hOmEgZGVwZW5kcyBvbiAoaWYgaGVhZGVyIHByb2Nlc3NpbmcgaXMgZW5hYmxlZCBmb3IgdGhlIHRvb2xjaGFpbikuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KF0JVSUxEX1RJTUVfT1BUSU1JWkFUSU9OUAAK1QIKKWV4cGVyaW1lbnRhbF9wcm9maWxlX2luY2x1ZGVfdGFyZ2V0X2xhYmVsEAEaOkluY2x1ZGVzIHRhcmdldCBsYWJlbCBpbiBhY3Rpb24gZXZlbnRzJyBKU09OIHByb2ZpbGUgZGF0YS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6EEJBWkVMX01PTklUT1JJTkdKB0xPR0dJTkdQAAqQAgoadG9vbF9qYXZhX2xhbmd1YWdlX3ZlcnNpb24QABpSVGhlIEphdmEgbGFuZ3VhZ2UgdmVyc2lvbiB1c2VkIHRvIGV4ZWN1dGUgdGhlIHRvb2xzIHRoYXQgYXJlIG5lZWRlZCBkdXJpbmcgYSBidWlsZCIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCugBCi1leHBlcmltZW50YWxfamF2YV90ZXN0X2F1dG9fY3JlYXRlX2RlcGxveV9qYXIQARoKRE8gTk9UIFVTRSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkIMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAArUAgoLb29tX21lc3NhZ2UQABo5Q3VzdG9tIG1lc3NhZ2UgdG8gYmUgZW1pdHRlZCBvbiBhbiBvdXQgb2YgbWVtb3J5IGZhaWx1cmUuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhBCQVpFTF9NT05JVE9SSU5HOg9URVJNSU5BTF9PVVRQVVRCBkhJRERFTkoMVU5ET0NVTUVOVEVEUAEK+QQKFmdycGNfa2VlcGFsaXZlX3RpbWVvdXQQABrzAkNvbmZpZ3VyZXMgYSBrZWVwLWFsaXZlIHRpbWVvdXQgZm9yIG91dGdvaW5nIGdSUEMgY29ubmVjdGlvbnMuIElmIGtlZXAtYWxpdmUgcGluZ3MgYXJlIGVuYWJsZWQgd2l0aCAtLWdycGNfa2VlcGFsaXZlX3RpbWUsIHRoZW4gQmF6ZWwgdGltZXMgb3V0IGEgY29ubmVjdGlvbiBpZiBpdCBkb2VzIG5vdCByZWNlaXZlIGEgcGluZyByZXBseSBhZnRlciB0aGlzIG11Y2ggdGltZS4gVGltZXMgYXJlIHRyZWF0ZWQgYXMgc2Vjb25kIGdyYW51bGFyaXR5OyBpdCBpcyBhbiBlcnJvciB0byBzZXQgYSB2YWx1ZSBsZXNzIHRoYW4gb25lIHNlY29uZC4gSWYga2VlcC1hbGl2ZSBwaW5ncyBhcmUgZGlzYWJsZWQsIHRoZW4gdGhpcyBzZXR0aW5nIGlzIGlnbm9yZWQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEKpQIKKGVuYWJsZV9wcm9wZWxsZXJfb3B0aW1pemVfYWJzb2x1dGVfcGF0aHMQARpNSWYgc2V0LCBhbnkgdXNlIG9mIGFic29sdXRlIHBhdGhzIGZvciBwcm9wZWxsZXIgb3B0aW1pemUgd2lsbCByYWlzZSBhbiBlcnJvci4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAArHAgoGZGVmaW5lEAAagAFFYWNoIC0tZGVmaW5lIG9wdGlvbiBzcGVjaWZpZXMgYW4gYXNzaWdubWVudCBmb3IgYSBidWlsZCB2YXJpYWJsZS4gSW4gY2FzZSBvZiBtdWx0aXBsZSB2YWx1ZXMgZm9yIGEgdmFyaWFibGUsIHRoZSBsYXN0IG9uZSB3aW5zLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToOQ0hBTkdFU19JTlBVVFM6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQqiAQoEZHVtcBAAGmVvdXRwdXQgZnVsbCBwcm9maWxlIGRhdGEgZHVtcCBlaXRoZXIgaW4gaHVtYW4tcmVhZGFibGUgJ3RleHQnIGZvcm1hdCBvciBzY3JpcHQtZnJpZW5kbHkgJ3JhdycgZm9ybWF0LiIPYW5hbHl6ZS1wcm9maWxlKgFkMAA6EEJBWkVMX01PTklUT1JJTkdKB0xPR0dJTkdQAQqEBgoVYWxsb3dfeWFua2VkX3ZlcnNpb25zEAAa+QNTcGVjaWZpZWQgdGhlIG1vZHVsZSB2ZXJzaW9ucyBpbiB0aGUgZm9ybSBvZiBgPG1vZHVsZTE+QDx2ZXJzaW9uMT4sPG1vZHVsZTI+QDx2ZXJzaW9uMj5gIHRoYXQgd2lsbCBiZSBhbGxvd2VkIGluIHRoZSByZXNvbHZlZCBkZXBlbmRlbmN5IGdyYXBoIGV2ZW4gaWYgdGhleSBhcmUgZGVjbGFyZWQgeWFua2VkIGluIHRoZSByZWdpc3RyeSB3aGVyZSB0aGV5IGNvbWUgZnJvbSAoaWYgdGhleSBhcmUgbm90IGNvbWluZyBmcm9tIGEgTm9uUmVnaXN0cnlPdmVycmlkZSkuIE90aGVyd2lzZSwgeWFua2VkIHZlcnNpb25zIHdpbGwgY2F1c2UgdGhlIHJlc29sdXRpb24gdG8gZmFpbC4gWW91IGNhbiBhbHNvIGRlZmluZSBhbGxvd2VkIHlhbmtlZCB2ZXJzaW9uIHdpdGggdGhlIGBCWkxNT0RfQUxMT1dfWUFOS0VEX1ZFUlNJT05TYCBlbnZpcm9ubWVudCB2YXJpYWJsZS4gWW91IGNhbiBkaXNhYmxlIHRoaXMgY2hlY2sgYnkgdXNpbmcgdGhlIGtleXdvcmQgJ2FsbCcgKG5vdCByZWNvbW1lbmRlZCkuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjABOhRMT0FESU5HX0FORF9BTkFMWVNJU0oGQlpMTU9EUAEKjwIKKGluY29tcGF0aWJsZV9kaXNhbGxvd19sZWdhY3lfcHlfcHJvdmlkZXIQARocTm8tb3AsIHdpbGwgYmUgcmVtb3ZlZCBzb29uLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKElNUQVJMQVJLX1NFTUFOVElDU1AACqcCCgZqdm1vcHQQABp9QWRkaXRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEphdmEgVk0uIFRoZXNlIG9wdGlvbnMgd2lsbCBnZXQgYWRkZWQgdG8gdGhlIFZNIHN0YXJ0dXAgb3B0aW9ucyBvZiBlYWNoIGphdmFfYmluYXJ5IHRhcmdldC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQqzAwoScHJvZmlsZXNfdG9fcmV0YWluEAAargFOdW1iZXIgb2YgcHJvZmlsZXMgdG8gcmV0YWluIGluIHRoZSBvdXRwdXQgYmFzZS4gSWYgdGhlcmUgYXJlIG1vcmUgdGhhbiB0aGlzIG51bWJlciBvZiBwcm9maWxlcyBpbiB0aGUgb3V0cHV0IGJhc2UsIHRoZSBvbGRlc3QgYXJlIGRlbGV0ZWQgdW50aWwgdGhlIHRvdGFsIGlzIHVuZGVyIHRoZSBsaW1pdC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6EEJBWkVMX01PTklUT1JJTkdKB0xPR0dJTkdQAQr6AgogYW5kcm9pZF9kYXRhYmluZGluZ191c2VfYW5kcm9pZHgQARptR2VuZXJhdGUgQW5kcm9pZFgtY29tcGF0aWJsZSBkYXRhLWJpbmRpbmcgZmlsZXMuIFRoaXMgaXMgb25seSB1c2VkIHdpdGggZGF0YWJpbmRpbmcgdjIuIFRoaXMgZmxhZyBpcyBhIG5vLW9wLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJUzoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEVCDEVYUEVSSU1FTlRBTEoRT1VUUFVUX1BBUkFNRVRFUlNQAAquAgoibWVyZ2VfYW5kcm9pZF9tYW5pZmVzdF9wZXJtaXNzaW9ucxABGmFJZiBlbmFibGVkLCB0aGUgbWFuaWZlc3QgbWVyZ2VyIHdpbGwgbWVyZ2UgdXNlcy1wZXJtaXNzaW9uIGFuZCB1c2VzLXBlcm1pc3Npb24tc2RrLTIzIGF0dHJpYnV0ZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKDFVORE9DVU1FTlRFRFAACqMCCh9sb2NhbF90ZXJtaW5hdGlvbl9ncmFjZV9zZWNvbmRzEAAaYFRpbWUgdG8gd2FpdCBiZXR3ZWVuIHRlcm1pbmF0aW5nIGEgbG9jYWwgcHJvY2VzcyBkdWUgdG8gdGltZW91dCBhbmQgZm9yY2VmdWxseSBzaHV0dGluZyBpdCBkb3duLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCv4DChVjb2xsZWN0X2NvZGVfY292ZXJhZ2UQARq4AklmIHNwZWNpZmllZCwgQmF6ZWwgd2lsbCBpbnN0cnVtZW50IGNvZGUgKHVzaW5nIG9mZmxpbmUgaW5zdHJ1bWVudGF0aW9uIHdoZXJlIHBvc3NpYmxlKSBhbmQgd2lsbCBjb2xsZWN0IGNvdmVyYWdlIGluZm9ybWF0aW9uIGR1cmluZyB0ZXN0cy4gT25seSB0YXJnZXRzIHRoYXQgIG1hdGNoIC0taW5zdHJ1bWVudGF0aW9uX2ZpbHRlciB3aWxsIGJlIGFmZmVjdGVkLiBVc3VhbGx5IHRoaXMgb3B0aW9uIHNob3VsZCAgbm90IGJlIHNwZWNpZmllZCBkaXJlY3RseSAtICdiYXplbCBjb3ZlcmFnZScgY29tbWFuZCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1AACosBCgtwcmVlbXB0aWJsZRABGkRJZiB0cnVlLCB0aGUgY29tbWFuZCBjYW4gYmUgcHJlZW1wdGVkIGlmIGFub3RoZXIgY29tbWFuZCBpcyBzdGFydGVkLiIHc3RhcnR1cDAAOhFFQUdFUk5FU1NfVE9fRVhJVEoUQkFaRUxfQ0xJRU5UX09QVElPTlNQAAr2Awofc2FuZGJveF9leHBsaWNpdF9wc2V1ZG90ZXJtaW5hbBABGqsCRXhwbGljaXRseSBlbmFibGUgdGhlIGNyZWF0aW9uIG9mIHBzZXVkb3Rlcm1pbmFscyBmb3Igc2FuZGJveGVkIGFjdGlvbnMuIFNvbWUgbGludXggZGlzdHJpYnV0aW9ucyByZXF1aXJlIHNldHRpbmcgdGhlIGdyb3VwIGlkIG9mIHRoZSBwcm9jZXNzIHRvICd0dHknIGluc2lkZSB0aGUgc2FuZGJveCBpbiBvcmRlciBmb3IgcHNldWRvdGVybWluYWxzIHRvIGZ1bmN0aW9uLiBJZiB0aGlzIGlzIGNhdXNpbmcgaXNzdWVzLCB0aGlzIGZsYWcgY2FuIGJlIGRpc2FibGVkIHRvIGVuYWJsZSBvdGhlciBncm91cHMgdG8gYmUgdXNlZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkoSRVhFQ1VUSU9OX1NUUkFURUdZUAAKjAUKFGluZmVyX3VuaXZlcnNlX3Njb3BlEAEauQRJZiBzZXQgYW5kIC0tdW5pdmVyc2Vfc2NvcGUgaXMgdW5zZXQsIHRoZW4gYSB2YWx1ZSBvZiAtLXVuaXZlcnNlX3Njb3BlIHdpbGwgYmUgaW5mZXJyZWQgYXMgdGhlIGxpc3Qgb2YgdW5pcXVlIHRhcmdldCBwYXR0ZXJucyBpbiB0aGUgcXVlcnkgZXhwcmVzc2lvbi4gTm90ZSB0aGF0IHRoZSAtLXVuaXZlcnNlX3Njb3BlIHZhbHVlIGluZmVycmVkIGZvciBhIHF1ZXJ5IGV4cHJlc3Npb24gdGhhdCB1c2VzIHVuaXZlcnNlLXNjb3BlZCBmdW5jdGlvbnMgKGUuZy5gYWxscmRlcHNgKSBtYXkgbm90IGJlIHdoYXQgeW91IHdhbnQsIHNvIHlvdSBzaG91bGQgdXNlIHRoaXMgb3B0aW9uIG9ubHkgaWYgeW91IGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nLiBTZWUgaHR0cHM6Ly9iYXplbC5idWlsZC9yZWZlcmVuY2UvcXVlcnkjc2t5LXF1ZXJ5IGZvciBkZXRhaWxzIGFuZCBleGFtcGxlcy4gSWYgLS11bml2ZXJzZV9zY29wZSBpcyBzZXQsIHRoZW4gdGhpcyBvcHRpb24ncyB2YWx1ZSBpcyBpZ25vcmVkLiBOb3RlOiB0aGlzIG9wdGlvbiBhcHBsaWVzIG9ubHkgdG8gYHF1ZXJ5YCAoaS5lLiBub3QgYGNxdWVyeWApLiIGYXF1ZXJ5IgZjcXVlcnkiBXF1ZXJ5MAA6FExPQURJTkdfQU5EX0FOQUxZU0lTSgVRVUVSWVAACkgKDm9wdGlvbl9zb3VyY2VzEAAaACIHc3RhcnR1cDAAOg9BRkZFQ1RTX09VVFBVVFNCBkhJRERFTkoMVU5ET0NVTUVOVEVEUAEKjAUKCHN0cmF0ZWd5EAAa2ANTcGVjaWZ5IGhvdyB0byBkaXN0cmlidXRlIGNvbXBpbGF0aW9uIG9mIG90aGVyIHNwYXduIGFjdGlvbnMuIEFjY2VwdHMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBzdHJhdGVnaWVzIGZyb20gaGlnaGVzdCB0byBsb3dlc3QgcHJpb3JpdHkuIEZvciBlYWNoIGFjdGlvbiBCYXplbCBwaWNrcyB0aGUgc3RyYXRlZ3kgd2l0aCB0aGUgaGlnaGVzdCBwcmlvcml0eSB0aGF0IGNhbiBleGVjdXRlIHRoZSBhY3Rpb24uIFRoZSBkZWZhdWx0IHZhbHVlIGlzICJyZW1vdGUsd29ya2VyLHNhbmRib3hlZCxsb2NhbCIuIFRoaXMgZmxhZyBvdmVycmlkZXMgdGhlIHZhbHVlcyBzZXQgYnkgLS1zcGF3bl9zdHJhdGVneSAoYW5kIC0tZ2VucnVsZV9zdHJhdGVneSBpZiB1c2VkIHdpdGggbW5lbW9uaWMgR2VucnVsZSkuIFNlZSBodHRwczovL2Jsb2cuYmF6ZWwuYnVpbGQvMjAxOS8wNi8xOS9saXN0LXN0cmF0ZWd5Lmh0bWwgZm9yIGRldGFpbHMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVABCpwBCg9pbmNsdWRlX2J1aWx0aW4QARpgSW5jbHVkZSBidWlsdC1pbiBtb2R1bGVzIGluIHRoZSBkZXBlbmRlbmN5IGdyYXBoLiBEaXNhYmxlZCBieSBkZWZhdWx0IGJlY2F1c2UgaXQgaXMgcXVpdGUgbm9pc3kuIgNtb2QwADoPVEVSTUlOQUxfT1VUUFVUSgtNT0RfQ09NTUFORFAACuYCCi1leHBlcmltZW50YWxfYW5kcm9pZF9yZXNvdXJjZV9jeWNsZV9zaHJpbmtpbmcQARpqRW5hYmxlcyBtb3JlIHNocmlua2luZyBvZiBjb2RlIGFuZCByZXNvdXJjZXMgYnkgaW5zdHJ1Y3RpbmcgQUFQVDIgdG8gZW1pdCBjb25kaXRpb25hbCBQcm9ndWFyZCBrZWVwIHJ1bGVzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0IMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAAqABAoeaW5jb21wYXRpYmxlX3N0cmljdF9hY3Rpb25fZW52EAEamwJJZiB0cnVlLCBCYXplbCB1c2VzIGFuIGVudmlyb25tZW50IHdpdGggYSBzdGF0aWMgdmFsdWUgZm9yIFBBVEggYW5kIGRvZXMgbm90IGluaGVyaXQgTERfTElCUkFSWV9QQVRILiBVc2UgLS1hY3Rpb25fZW52PUVOVl9WQVJJQUJMRSBpZiB5b3Ugd2FudCB0byBpbmhlcml0IHNwZWNpZmljIGVudmlyb25tZW50IHZhcmlhYmxlcyBmcm9tIHRoZSBjbGllbnQsIGJ1dCBub3RlIHRoYXQgZG9pbmcgc28gY2FuIHByZXZlbnQgY3Jvc3MtdXNlciBjYWNoaW5nIGlmIGEgc2hhcmVkIGNhY2hlIGlzIHVzZWQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoNVU5DQVRFR09SSVpFRFAACuoECiNleHBlcmltZW50YWxfZGlza19jYWNoZV9nY19tYXhfc2l6ZRAAGtcCSWYgc2V0IHRvIGEgcG9zaXRpdmUgdmFsdWUsIHRoZSBkaXNrIGNhY2hlIHdpbGwgYmUgcGVyaW9kaWNhbGx5IGdhcmJhZ2UgY29sbGVjdGVkIHRvIHN0YXkgdW5kZXIgdGhpcyBzaXplLiBJZiBzZXQgaW4gY29uanVuY3Rpb24gd2l0aCAtLWV4cGVyaW1lbnRhbF9kaXNrX2NhY2hlX2djX21heF9hZ2UsIGJvdGggY3JpdGVyaWEgYXJlIGFwcGxpZWQuIEdhcmJhZ2UgY29sbGVjdGlvbiBvY2N1cnJzIGluIHRoZSBiYWNrZ3JvdW5kIG9uY2UgdGhlIHNlcnZlciBoYXMgYmVjb21lIGlkbGUsIGFzIGRldGVybWluZWQgYnkgdGhlIC0tZXhwZXJpbWVudGFsX2Rpc2tfY2FjaGVfZ2NfaWRsZV9kZWxheSBmbGFnLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCowEChtyZXBvc2l0b3J5X2Rpc2FibGVfZG93bmxvYWQQARrlAUlmIHNldCwgZG93bmxvYWRpbmcgdXNpbmcgY3R4LmRvd25sb2FkeyxfYW5kX2V4dHJhY3R9IGlzIG5vdCBhbGxvd2VkIGR1cmluZyByZXBvc2l0b3J5IGZldGNoaW5nLiBOb3RlIHRoYXQgbmV0d29yayBhY2Nlc3MgaXMgbm90IGNvbXBsZXRlbHkgZGlzYWJsZWQ7IGN0eC5leGVjdXRlIGNvdWxkIHN0aWxsIHJ1biBhbiBhcmJpdHJhcnkgZXhlY3V0YWJsZSB0aGF0IGFjY2Vzc2VzIHRoZSBJbnRlcm5ldC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05KFEJBWkVMX0NMSUVOVF9PUFRJT05TUAAK7AIKEnRhcmdldF9lbnZpcm9ubWVudBAAGqsBRGVjbGFyZXMgdGhpcyBidWlsZCdzIHRhcmdldCBlbnZpcm9ubWVudC4gTXVzdCBiZSBhIGxhYmVsIHJlZmVyZW5jZSB0byBhbiAiZW52aXJvbm1lbnQiIHJ1bGUuIElmIHNwZWNpZmllZCwgYWxsIHRvcC1sZXZlbCB0YXJnZXRzIG11c3QgYmUgY29tcGF0aWJsZSB3aXRoIHRoaXMgZW52aXJvbm1lbnQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOg5DSEFOR0VTX0lOUFVUU0oQSU5QVVRfU1RSSUNUTkVTU1ABCnoKCWRlYnVnX2FwcBAAGjlXaGV0aGVyIHRvIHdhaXQgZm9yIHRoZSBkZWJ1Z2dlciBiZWZvcmUgc3RhcnRpbmcgdGhlIGFwcC4iDm1vYmlsZS1pbnN0YWxsMAA6CUVYRUNVVElPTkoRT1VUUFVUX1BBUkFNRVRFUlNQAAqOAgotaW5jb21wYXRpYmxlX2FsbG93X3B5dGhvbl92ZXJzaW9uX3RyYW5zaXRpb25zEAEaHE5vLW9wLCB3aWxsIGJlIHJlbW92ZWQgc29vbi4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQhNJTkNPTVBBVElCTEVfQ0hBTkdFSgxVTkRPQ1VNRU5URURQAAq2BAoOc3ltbGlua19wcmVmaXgQABr3AlRoZSBwcmVmaXggdGhhdCBpcyBwcmVwZW5kZWQgdG8gYW55IG9mIHRoZSBjb252ZW5pZW5jZSBzeW1saW5rcyB0aGF0IGFyZSBjcmVhdGVkIGFmdGVyIGEgYnVpbGQuIElmIG9taXR0ZWQsIHRoZSBkZWZhdWx0IHZhbHVlIGlzIHRoZSBuYW1lIG9mIHRoZSBidWlsZCB0b29sIGZvbGxvd2VkIGJ5IGEgaHlwaGVuLiBJZiAnLycgaXMgcGFzc2VkLCB0aGVuIG5vIHN5bWxpbmtzIGFyZSBjcmVhdGVkIGFuZCBubyB3YXJuaW5nIGlzIGVtaXR0ZWQuIFdhcm5pbmc6IHRoZSBzcGVjaWFsIGZ1bmN0aW9uYWxpdHkgZm9yICcvJyB3aWxsIGJlIGRlcHJlY2F0ZWQgc29vbjsgdXNlIC0tZXhwZXJpbWVudGFsX2NvbnZlbmllbmNlX3N5bWxpbmtzPWlnbm9yZSBpbnN0ZWFkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1ABCv0DCiRleHBlcmltZW50YWxfcmVjb3JkX3NreWZyYW1lX21ldHJpY3MQARrvAUNvbnRyb2xzIHRoZSBvdXRwdXQgb2YgQkVQIEJ1aWxkR3JhcGhNZXRyaWNzLCBpbmNsdWRpbmcgZXhwZW5zaXZldG8gY29tcHV0ZSBza3lmcmFtZSBtZXRyaWNzIGFib3V0IFNreWtleXMsIFJ1bGVDbGFzc2VzIGFuZCBBc3BlY3RzLldpdGggdGhpcyBmbGFnIHNldCB0byBmYWxzZSBCdWlsZEdyYXBoTWV0cmljcy5ydWxlX2NvdW50IGFuZCBhc3BlY3RmaWVsZHMgd2lsbCBub3QgYmUgcG9wdWxhdGVkIGluIHRoZSBCRVAuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgdMT0dHSU5HUAAK/wMKHmV4cGVyaW1lbnRhbF90b29sX2NvbW1hbmRfbGluZRAAGtQBQW4gZXh0cmEgY29tbWFuZCBsaW5lIHRvIHJlcG9ydCB3aXRoIHRoaXMgaW52b2NhdGlvbidzIGNvbW1hbmQgbGluZS4gVXNlZnVsIGZvciB0b29scyB0aGF0IGludm9rZSBCYXplbCBhbmQgd2FudCB0aGUgb3JpZ2luYWwgaW5mb3JtYXRpb24gdGhhdCB0aGUgdG9vbCByZWNlaXZlZCB0byBiZSBsb2dnZWQgd2l0aCB0aGUgcmVzdCBvZiB0aGUgQmF6ZWwgaW52b2NhdGlvbi4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6D0FGRkVDVFNfT1VUUFVUU0IMRVhQRVJJTUVOVEFMQgZISURERU5KDFVORE9DVU1FTlRFRFABCpYCChhqMm9iamNfZGVhZF9jb2RlX3JlbW92YWwQARpbV2hldGhlciB0byBwZXJmb3JtIEoyT2JqQyBkZWFkIGNvZGUgcmVtb3ZhbCB0byBzdHJpcCB1bnVzZWQgY29kZSBmcm9tIHRoZSBmaW5hbCBhcHAgYnVuZGxlLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoMVU5ET0NVTUVOVEVEUAAK3AIKM2V4cGVyaW1lbnRhbF9kaXNhYmxlX2luc3RydW1lbnRhdGlvbl9tYW5pZmVzdF9tZXJnZRABGnBEaXNhYmxlcyBtYW5pZmVzdCBtZXJnaW5nIHdoZW4gYW4gYW5kcm9pZF9iaW5hcnkgaGFzIGluc3RydW1lbnRzIHNldCAoaS5lLiBpcyB1c2VkIGZvciBpbnN0cnVtZW50YXRpb24gdGVzdGluZykuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNCDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAKjQUKEmF1dG9fb3V0cHV0X2ZpbHRlchAAGtYDSWYgLS1vdXRwdXRfZmlsdGVyIGlzIG5vdCBzcGVjaWZpZWQsIHRoZW4gdGhlIHZhbHVlIGZvciB0aGlzIG9wdGlvbiBpcyB1c2VkIGNyZWF0ZSBhIGZpbHRlciBhdXRvbWF0aWNhbGx5LiBBbGxvd2VkIHZhbHVlcyBhcmUgJ25vbmUnIChmaWx0ZXIgbm90aGluZyAvIHNob3cgZXZlcnl0aGluZyksICdhbGwnIChmaWx0ZXIgZXZlcnl0aGluZyAvIHNob3cgbm90aGluZyksICdwYWNrYWdlcycgKGluY2x1ZGUgb3V0cHV0IGZyb20gcnVsZXMgaW4gcGFja2FnZXMgbWVudGlvbmVkIG9uIHRoZSBCbGF6ZSBjb21tYW5kIGxpbmUpLCBhbmQgJ3N1YnBhY2thZ2VzJyAobGlrZSAncGFja2FnZXMnLCBidXQgYWxzbyBpbmNsdWRlIHN1YnBhY2thZ2VzKS4gRm9yIHRoZSAncGFja2FnZXMnIGFuZCAnc3VicGFja2FnZXMnIHZhbHVlcyAvL2phdmEvZm9vIGFuZCAvL2phdmF0ZXN0cy9mb28gYXJlIHRyZWF0ZWQgYXMgb25lIHBhY2thZ2UpJy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQqIAgoOZ3JhcGg6ZmFjdG9yZWQQARrAAUlmIHRydWUsIHRoZW4gdGhlIGdyYXBoIHdpbGwgYmUgZW1pdHRlZCAnZmFjdG9yZWQnLCBpLmUuIHRvcG9sb2dpY2FsbHktZXF1aXZhbGVudCBub2RlcyB3aWxsIGJlIG1lcmdlZCB0b2dldGhlciBhbmQgdGhlaXIgbGFiZWxzIGNvbmNhdGVuYXRlZC4gVGhpcyBvcHRpb24gaXMgb25seSBhcHBsaWNhYmxlIHRvIC0tb3V0cHV0PWdyYXBoLiIGYXF1ZXJ5IgZjcXVlcnkiBXF1ZXJ5MAA6D1RFUk1JTkFMX09VVFBVVEoFUVVFUllQAArdAwo5ZXhwZXJpbWVudGFsX3VzZV9wbGF0Zm9ybXNfaW5fb3V0cHV0X2Rpcl9sZWdhY3lfaGV1cmlzdGljEAEa5QFQbGVhc2Ugb25seSB1c2UgdGhpcyBmbGFnIGFzIHBhcnQgb2YgYSBzdWdnZXN0ZWQgbWlncmF0aW9uIG9yIHRlc3Rpbmcgc3RyYXRlZ3kuIE5vdGUgdGhhdCB0aGUgaGV1cmlzdGljIGhhcyBrbm93biBkZWZpY2llbmNpZXMgYW5kIGl0IGlzIHN1Z2dlc3RlZCB0byBtaWdyYXRlIHRvIHJlbHlpbmcgb24ganVzdCAtLWV4cGVyaW1lbnRhbF9vdmVycmlkZV9uYW1lX3BsYXRmb3JtX2luX291dHB1dF9kaXIuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNCDEVYUEVSSU1FTlRBTEoRT1VUUFVUX1BBUkFNRVRFUlNQAArZAwolZXhwZXJpbWVudGFsX3JlbW90ZV9tZXJrbGVfdHJlZV9jYWNoZRABGssBSWYgc2V0IHRvIHRydWUsIE1lcmtsZSB0cmVlIGNhbGN1bGF0aW9ucyB3aWxsIGJlIG1lbW9pemVkIHRvIGltcHJvdmUgdGhlIHJlbW90ZSBjYWNoZSBoaXQgY2hlY2tpbmcgc3BlZWQuIFRoZSBtZW1vcnkgZm9vdCBwcmludCBvZiB0aGUgY2FjaGUgaXMgY29udHJvbGxlZCBieSAtLWV4cGVyaW1lbnRhbF9yZW1vdGVfbWVya2xlX3RyZWVfY2FjaGVfc2l6ZS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KBlJFTU9URVAACukDChF0ZXN0X3NpemVfZmlsdGVycxAAGrMCU3BlY2lmaWVzIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgdGVzdCBzaXplcy4gRWFjaCBzaXplIGNhbiBiZSBvcHRpb25hbGx5IHByZWNlZGVkIHdpdGggJy0nIHRvIHNwZWNpZnkgZXhjbHVkZWQgc2l6ZXMuIE9ubHkgdGhvc2UgdGVzdCB0YXJnZXRzIHdpbGwgYmUgZm91bmQgdGhhdCBjb250YWluIGF0IGxlYXN0IG9uZSBpbmNsdWRlZCBzaXplIGFuZCBkbyBub3QgY29udGFpbiBhbnkgZXhjbHVkZWQgc2l6ZXMuIFRoaXMgb3B0aW9uIGFmZmVjdHMgLS1idWlsZF90ZXN0c19vbmx5IGJlaGF2aW9yIGFuZCB0aGUgdGVzdCBjb21tYW5kLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCtsBCilleHBlcmltZW50YWxfY29sbGVjdF9sb2NhbF9hY3Rpb25fbWV0cmljcxABGhFEZXByZWNhdGVkIG5vLW9wLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BKDFVORE9DVU1FTlRFRFAACooDCipleHBlcmltZW50YWxfcmVwb3NpdG9yeV9kb3dubG9hZGVyX3JldHJpZXMQABpcVGhlIG1heGltdW0gbnVtYmVyIG9mIGF0dGVtcHRzIHRvIHJldHJ5IGEgZG93bmxvYWQgZXJyb3IuIElmIHNldCB0byAwLCByZXRyaWVzIGFyZSBkaXNhYmxlZC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05CDEVYUEVSSU1FTlRBTEoUQkFaRUxfQ0xJRU5UX09QVElPTlNQAQqGAgoSbWluaW11bV9vc192ZXJzaW9uEAAaNlRoZSBtaW5pbXVtIE9TIHZlcnNpb24gd2hpY2ggeW91ciBjb21waWxhdGlvbiB0YXJnZXRzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6D0FGRkVDVFNfT1VUUFVUU0oJVE9PTENIQUlOUAEKoAQKKGV4cGVyaW1lbnRhbF9yZW1vdGVfZGlzY2FyZF9tZXJrbGVfdHJlZXMQARqPAklmIHNldCB0byB0cnVlLCBkaXNjYXJkIGluLW1lbW9yeSBjb3BpZXMgb2YgdGhlIGlucHV0IHJvb3QncyBNZXJrbGUgdHJlZSBhbmQgYXNzb2NpYXRlZCBpbnB1dCBtYXBwaW5ncyBkdXJpbmcgY2FsbHMgdG8gR2V0QWN0aW9uUmVzdWx0KCkgYW5kIEV4ZWN1dGUoKS4gVGhpcyByZWR1Y2VzIG1lbW9yeSB1c2FnZSBzaWduaWZpY2FudGx5LCBidXQgZG9lcyByZXF1aXJlIEJhemVsIHRvIHJlY29tcHV0ZSB0aGVtIHVwb24gcmVtb3RlIGNhY2hlIG1pc3NlcyBhbmQgcmV0cmllcy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KBlJFTU9URVAACocDChNoaWRlX2FzcGVjdF9yZXN1bHRzEAAayAFDb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBhc3BlY3QgbmFtZXMgdG8gbm90IGRpc3BsYXkgaW4gcmVzdWx0cyAoc2VlIC0tc2hvd19yZXN1bHQpLiBVc2VmdWwgZm9yIGtlZXBpbmcgYXNwZWN0cyBhZGRlZCBieSB3cmFwcGVycyB3aGljaCBhcmUgdHlwaWNhbGx5IG5vdCBpbnRlcmVzdGluZyB0byBlbmQgdXNlcnMgb3V0IG9mIGNvbnNvbGUgb3V0cHV0LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPVEVSTUlOQUxfT1VUUFVUSgxVTkRPQ1VNRU5URURQAQrKAQoVbWFrZV92YXJpYWJsZXNfc291cmNlEAAaACIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BCBkhJRERFTkIKREVQUkVDQVRFREoMVU5ET0NVTUVOVEVEUAEKuAMKJ2V4cGVyaW1lbnRhbF9yZXBvc2l0b3J5X2NhY2hlX2hhcmRsaW5rcxABGoUBSWYgc2V0LCB0aGUgcmVwb3NpdG9yeSBjYWNoZSB3aWxsIGhhcmRsaW5rIHRoZSBmaWxlIGluIGNhc2Ugb2YgYSBjYWNoZSBoaXQsIHJhdGhlciB0aGFuIGNvcHlpbmcuIFRoaXMgaXMgaW50ZW5kZWQgdG8gc2F2ZSBkaXNrIHNwYWNlLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADocQkFaRUxfSU5URVJOQUxfQ09ORklHVVJBVElPTkoUQkFaRUxfQ0xJRU5UX09QVElPTlNQAAqYAgogZXhwZXJpbWVudGFsX2FjdGlvbl9yZXNvdXJjZV9zZXQQARoGTm8tb3AuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgVOT19PUEoSU1RBUkxBUktfU0VNQU5USUNTUAAK2AQKKWluY29tcGF0aWJsZV9hbHdheXNfY2hlY2tfZGVwc2V0X2VsZW1lbnRzEAEamAJDaGVjayB0aGUgdmFsaWRpdHkgb2YgZWxlbWVudHMgYWRkZWQgdG8gZGVwc2V0cywgaW4gYWxsIGNvbnN0cnVjdG9ycy4gRWxlbWVudHMgbXVzdCBiZSBpbW11dGFibGUsIGJ1dCBoaXN0b3JpY2FsbHkgdGhlIGRlcHNldChkaXJlY3Q9Li4uKSBjb25zdHJ1Y3RvciBmb3Jnb3QgdG8gY2hlY2suIFVzZSB0dXBsZXMgaW5zdGVhZCBvZiBsaXN0cyBpbiBkZXBzZXQgZWxlbWVudHMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYmF6ZWxidWlsZC9iYXplbC9pc3N1ZXMvMTAzMTMgZm9yIGRldGFpbHMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRCVUlMRF9GSUxFX1NFTUFOVElDU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoSU1RBUkxBUktfU0VNQU5USUNTUAAKxgIKLmluY29tcGF0aWJsZV9lbmFibGVfYXBwbGVfdG9vbGNoYWluX3Jlc29sdXRpb24QARpWVXNlIHRvb2xjaGFpbiByZXNvbHV0aW9uIHRvIHNlbGVjdCB0aGUgQXBwbGUgU0RLIGZvciBhcHBsZSBydWxlcyAoU3RhcmxhcmsgYW5kIG5hdGl2ZSkiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQhNJTkNPTVBBVElCTEVfQ0hBTkdFSglUT09MQ0hBSU5QAAq2AQoQYW5kcm9pZF9ncnRlX3RvcBAAGgVOby1vcCIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BKDFVORE9DVU1FTlRFRFABClQKCHNreWZyYW1lEAAaGER1bXAgdGhlIFNreWZyYW1lIGdyYXBoLiIEZHVtcDAAOhBCQVpFTF9NT05JVE9SSU5HShBPVVRQVVRfU0VMRUNUSU9OUAEKsQIKJ2V4cGVyaW1lbnRhbF9qMm9iamNfc2hvcnRlcl9oZWFkZXJfcGF0aBABGlBXaGV0aGVyIHRvIGdlbmVyYXRlIHdpdGggc2hvcnRlciBoZWFkZXIgcGF0aCAodXNlcyAiX2lvcyIgaW5zdGVhZCBvZiAiX2oyb2JqYyIpLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTQgxFWFBFUklNRU5UQUxKDVVOQ0FURUdPUklaRURQAAq3AwofcmVtb3RlX3ByaW50X2V4ZWN1dGlvbl9tZXNzYWdlcxAAGqYBQ2hvb3NlIHdoZW4gdG8gcHJpbnQgcmVtb3RlIGV4ZWN1dGlvbiBtZXNzYWdlcy4gVmFsaWQgdmFsdWVzIGFyZSBgZmFpbHVyZWAsIHRvIHByaW50IG9ubHkgb24gZmFpbHVyZXMsIGBzdWNjZXNzYCB0byBwcmludCBvbmx5IG9uIHN1Y2Nlc3NlcyBhbmQgYGFsbGAgdG8gcHJpbnQgYWx3YXlzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPVEVSTUlOQUxfT1VUUFVUSgdMT0dHSU5HUAEK/AEKFXNhbmRib3hfZmFrZV91c2VybmFtZRABGj5DaGFuZ2UgdGhlIGN1cnJlbnQgdXNlcm5hbWUgdG8gJ25vYm9keScgZm9yIHNhbmRib3hlZCBhY3Rpb25zLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OShBJTlBVVF9TVFJJQ1RORVNTUAAKpQEKCmdudV9mb3JtYXQQARpZSWYgc2V0LCB3cml0ZSB0aGUgdmVyc2lvbiB0byBzdGRvdXQgdXNpbmcgdGhlIGNvbnZlbnRpb25zIGRlc2NyaWJlZCBpbiB0aGUgR05VIHN0YW5kYXJkcy4iB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTOglFWEVDVVRJT05KEU9VVFBVVF9QQVJBTUVURVJTUAAK8QEKFW9iamNfZ2VuZXJhdGVfbGlua21hcBABGi1TcGVjaWZpZXMgd2hldGhlciB0byBnZW5lcmF0ZSBhIGxpbmttYXAgZmlsZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0oQT1VUUFVUX1NFTEVDVElPTlAACogCCitleHBlcmltZW50YWxfcnVuX2FuZHJvaWRfbGludF9vbl9qYXZhX3J1bGVzEAEaI1doZXRoZXIgdG8gdmFsaWRhdGUgamF2YV8qIHNvdXJjZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNCDEVYUEVSSU1FTlRBTEoNVU5DQVRFR09SSVpFRFAACp8ECgx0ZXN0X3RpbWVvdXQQABr0Ak92ZXJyaWRlIHRoZSBkZWZhdWx0IHRlc3QgdGltZW91dCB2YWx1ZXMgZm9yIHRlc3QgdGltZW91dHMgKGluIHNlY3MpLiBJZiBhIHNpbmdsZSBwb3NpdGl2ZSBpbnRlZ2VyIHZhbHVlIGlzIHNwZWNpZmllZCBpdCB3aWxsIG92ZXJyaWRlIGFsbCBjYXRlZ29yaWVzLiAgSWYgNCBjb21tYS1zZXBhcmF0ZWQgaW50ZWdlcnMgYXJlIHNwZWNpZmllZCwgdGhleSB3aWxsIG92ZXJyaWRlIHRoZSB0aW1lb3V0cyBmb3Igc2hvcnQsIG1vZGVyYXRlLCBsb25nIGFuZCBldGVybmFsIChpbiB0aGF0IG9yZGVyKS4gSW4gZWl0aGVyIGZvcm0sIGEgdmFsdWUgb2YgLTEgdGVsbHMgYmxhemUgdG8gdXNlIGl0cyBkZWZhdWx0IHRpbWVvdXRzIGZvciB0aGF0IGNhdGVnb3J5LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoHVEVTVElOR1ABCsgCChJyZWxhdGl2ZV9sb2NhdGlvbnMQARr8AUlmIHRydWUsIHRoZSBsb2NhdGlvbiBvZiBCVUlMRCBmaWxlcyBpbiB4bWwgYW5kIHByb3RvIG91dHB1dHMgd2lsbCBiZSByZWxhdGl2ZS4gQnkgZGVmYXVsdCwgdGhlIGxvY2F0aW9uIG91dHB1dCBpcyBhbiBhYnNvbHV0ZSBwYXRoIGFuZCB3aWxsIG5vdCBiZSBjb25zaXN0ZW50IGFjcm9zcyBtYWNoaW5lcy4gWW91IGNhbiBzZXQgdGhpcyBvcHRpb24gdG8gdHJ1ZSB0byBoYXZlIGEgY29uc2lzdGVudCByZXN1bHQgYWNyb3NzIG1hY2hpbmVzLiIGYXF1ZXJ5IgZjcXVlcnkiBXF1ZXJ5MAA6D1RFUk1JTkFMX09VVFBVVEoFUVVFUllQAArBAwoXYnVpbGRfZXZlbnRfYmluYXJ5X2ZpbGUQABq4AUlmIG5vbi1lbXB0eSwgd3JpdGUgYSB2YXJpbnQgZGVsaW1pdGVkIGJpbmFyeSByZXByZXNlbnRhdGlvbiBvZiByZXByZXNlbnRhdGlvbiBvZiB0aGUgYnVpbGQgZXZlbnQgcHJvdG9jb2wgdG8gdGhhdCBmaWxlLiBUaGlzIG9wdGlvbiBpbXBsaWVzIC0tYmVzX3VwbG9hZF9tb2RlPXdhaXRfZm9yX3VwbG9hZF9jb21wbGV0ZS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6D0FGRkVDVFNfT1VUUFVUU0oHTE9HR0lOR1ABCtoCCg1qYXZhX2xhdW5jaGVyEAAaqAFUaGUgSmF2YSBsYXVuY2hlciB0byB1c2Ugd2hlbiBidWlsZGluZyBKYXZhIGJpbmFyaWVzLiAgSWYgdGhpcyBmbGFnIGlzIHNldCB0byB0aGUgZW1wdHkgc3RyaW5nLCB0aGUgSkRLIGxhdW5jaGVyIGlzIHVzZWQuIFRoZSAibGF1bmNoZXIiIGF0dHJpYnV0ZSBvdmVycmlkZXMgdGhpcyBmbGFnLiAiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQqGBAoSZXhlY3V0aW9uX2xvZ19zb3J0EAEazwJXaGV0aGVyIHRvIHNvcnQgdGhlIGV4ZWN1dGlvbiBsb2csIG1ha2luZyBpdCBlYXNpZXIgdG8gY29tcGFyZSBsb2dzIGFjcm9zcyBpbnZvY2F0aW9ucy4gU2V0IHRvIGZhbHNlIHRvIGF2b2lkIHBvdGVudGlhbGx5IHNpZ25pZmljYW50IENQVSBhbmQgbWVtb3J5IHVzYWdlIGF0IHRoZSBlbmQgb2YgdGhlIGludm9jYXRpb24sIGF0IHRoZSBjb3N0IG9mIHByb2R1Y2luZyB0aGUgbG9nIGluIG5vbmRldGVybWluaXN0aWMgZXhlY3V0aW9uIG9yZGVyLiBPbmx5IGFwcGxpZXMgdG8gdGhlIGJpbmFyeSBhbmQgSlNPTiBmb3JtYXRzOyB0aGUgY29tcGFjdCBmb3JtYXQgaXMgbmV2ZXIgc29ydGVkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFAACo0DChljcmVkZW50aWFsX2hlbHBlcl90aW1lb3V0EAAahAFDb25maWd1cmVzIHRoZSB0aW1lb3V0IGZvciBhIGNyZWRlbnRpYWwgaGVscGVyLgoKQ3JlZGVudGlhbCBoZWxwZXJzIGZhaWxpbmcgdG8gcmVzcG9uZCB3aXRoaW4gdGhpcyB0aW1lb3V0IHdpbGwgZmFpbCB0aGUgaW52b2NhdGlvbi4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQqYBAotZXhwZXJpbWVudGFsX3NhbmRib3hfZW5mb3JjZV9yZXNvdXJjZXNfcmVnZXhwEAAavwJJZiB0cnVlLCBhY3Rpb25zIHdob3NlIG1uZW1vbmljIG1hdGNoZXMgdGhlIGlucHV0IHJlZ2V4IHdpbGwgaGF2ZSB0aGVpciByZXNvdXJjZXMgcmVxdWVzdCBlbmZvcmNlZCBhcyBsaW1pdHMsIG92ZXJyaWRpbmcgdGhlIHZhbHVlIG9mIC0tZXhwZXJpbWVudGFsX3NhbmRib3hfbGltaXRzLCBpZiB0aGUgcmVzb3VyY2UgdHlwZSBzdXBwb3J0cyBpdC4gRm9yIGV4YW1wbGUgYSB0ZXN0IHRoYXQgZGVjbGFyZXMgY3B1OjMgYW5kIHJlc291cmNlczptZW1vcnk6MTAsIHdpbGwgcnVuIHdpdGggYXQgbW9zdCAzIGNwdXMgYW5kIDEwIG1lZ2FieXRlcyBvZiBtZW1vcnkuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVABCrYDCiVleHBlcmltZW50YWxfY2lyY3VpdF9icmVha2VyX3N0cmF0ZWd5EAAapgFTcGVjaWZpZXMgdGhlIHN0cmF0ZWd5IGZvciB0aGUgY2lyY3VpdCBicmVha2VyIHRvIHVzZS4gQXZhaWxhYmxlIHN0cmF0ZWdpZXMgYXJlICJmYWlsdXJlIi4gT24gaW52YWxpZCB2YWx1ZSBmb3IgdGhlIG9wdGlvbiB0aGUgYmVoYXZpb3Igc2FtZSBhcyB0aGUgb3B0aW9uIGlzIG5vdCBzZXQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOglFWEVDVVRJT05KBlJFTU9URVABCpoCCh5leHBlcmltZW50YWxfajJvYmpjX2hlYWRlcl9tYXAQARpKV2hldGhlciB0byBnZW5lcmF0ZSBKMk9iakMgaGVhZGVyIG1hcCBpbiBwYXJhbGxlbCBvZiBKMk9iakMgdHJhbnNwaWxhdGlvbi4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05CDEVYUEVSSU1FTlRBTEoNVU5DQVRFR09SSVpFRFAACtsCChVidWlsZF9ldmVudF90ZXh0X2ZpbGUQABpVSWYgbm9uLWVtcHR5LCB3cml0ZSBhIHRleHR1YWwgcmVwcmVzZW50YXRpb24gb2YgdGhlIGJ1aWxkIGV2ZW50IHByb3RvY29sIHRvIHRoYXQgZmlsZSIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAEK8gEKE3dvcmtzcGFjZV9kaXJlY3RvcnkQABqMAVRoZSByb290IG9mIHRoZSB3b3Jrc3BhY2UsIHRoYXQgaXMsIHRoZSBkaXJlY3RvcnkgdGhhdCBCYXplbCB1c2VzIGFzIHRoZSByb290IG9mIHRoZSBidWlsZC4gVGhpcyBmbGFnIGlzIG9ubHkgdG8gYmUgc2V0IGJ5IHRoZSBiYXplbCBjbGllbnQuIgdzdGFydHVwMAA6DkNIQU5HRVNfSU5QVVRTOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUIGSElEREVOSgxVTkRPQ1VNRU5URURQAQr3CAoTZmxha3lfdGVzdF9hdHRlbXB0cxAAGsMHRWFjaCB0ZXN0IHdpbGwgYmUgcmV0cmllZCB1cCB0byB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiB0aW1lcyBpbiBjYXNlIG9mIGFueSB0ZXN0IGZhaWx1cmUuIFRlc3RzIHRoYXQgcmVxdWlyZWQgbW9yZSB0aGFuIG9uZSBhdHRlbXB0IHRvIHBhc3MgYXJlIG1hcmtlZCBhcyAnRkxBS1knIGluIHRoZSB0ZXN0IHN1bW1hcnkuIE5vcm1hbGx5IHRoZSB2YWx1ZSBzcGVjaWZpZWQgaXMganVzdCBhbiBpbnRlZ2VyIG9yIHRoZSBzdHJpbmcgJ2RlZmF1bHQnLiBJZiBhbiBpbnRlZ2VyLCB0aGVuIGFsbCB0ZXN0cyB3aWxsIGJlIHJ1biB1cCB0byBOIHRpbWVzLiBJZiAnZGVmYXVsdCcsIHRoZW4gb25seSBhIHNpbmdsZSB0ZXN0IGF0dGVtcHQgd2lsbCBiZSBtYWRlIGZvciByZWd1bGFyIHRlc3RzIGFuZCB0aHJlZSBmb3IgdGVzdHMgbWFya2VkIGV4cGxpY2l0bHkgYXMgZmxha3kgYnkgdGhlaXIgcnVsZSAoZmxha3k9MSBhdHRyaWJ1dGUpLiBBbHRlcm5hdGUgc3ludGF4OiByZWdleF9maWx0ZXJAZmxha3lfdGVzdF9hdHRlbXB0cy4gV2hlcmUgZmxha3lfdGVzdF9hdHRlbXB0cyBpcyBhcyBhYm92ZSBhbmQgcmVnZXhfZmlsdGVyIHN0YW5kcyBmb3IgYSBsaXN0IG9mIGluY2x1ZGUgYW5kIGV4Y2x1ZGUgcmVndWxhciBleHByZXNzaW9uIHBhdHRlcm5zIChBbHNvIHNlZSAtLXJ1bnNfcGVyX3Rlc3QpLiBFeGFtcGxlOiAtLWZsYWt5X3Rlc3RfYXR0ZW1wdHM9Ly9mb28vLiosLS8vZm9vL2Jhci8uKkAzIGRlZmxha2VzIGFsbCB0ZXN0cyBpbiAvL2Zvby8gZXhjZXB0IHRob3NlIHVuZGVyIGZvby9iYXIgdGhyZWUgdGltZXMuIFRoaXMgb3B0aW9uIGNhbiBiZSBwYXNzZWQgbXVsdGlwbGUgdGltZXMuIFRoZSBtb3N0IHJlY2VudGx5IHBhc3NlZCBhcmd1bWVudCB0aGF0IG1hdGNoZXMgdGFrZXMgcHJlY2VkZW5jZS4gSWYgbm90aGluZyBtYXRjaGVzLCBiZWhhdmlvciBpcyBhcyBpZiAnZGVmYXVsdCcgYWJvdmUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOglFWEVDVVRJT05KB1RFU1RJTkdQAQr1AgolZXhwZXJpbWVudGFsX3dvcmtlcl9zYW5kYm94X2hhcmRlbmluZxABGqQBSWYgZW5hYmxlZCwgd29ya2VycyBhcmUgcnVuIGluIGEgaGFyZGVuZWQgc2FuZGJveCwgaWYgdGhlIGltcGxlbWVudGF0aW9uIGFsbG93cyBpdC4gSWYgaGFyZGVuaW5nIGlzIGVuYWJsZWQgdGhlbiB0bXAgZGlyZWN0b3JpZXMgYXJlIGRpc3RpbmN0IGZvciBkaWZmZXJlbnQgd29ya2Vycy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkoSRVhFQ1VUSU9OX1NUUkFURUdZUAAK3gMKNmV4cGVyaW1lbnRhbF9vb21fc2Vuc2l0aXZlX3NreWZ1bmN0aW9uc19zZW1hcGhvcmVfc2l6ZRAAGssBU2V0cyB0aGUgc2l6ZSBvZiB0aGUgc2VtYXBob3JlIHVzZWQgdG8gcHJldmVudCBTa3lGdW5jdGlvbnMgd2l0aCBsYXJnZSBwZWFrIG1lbW9yeSByZXF1aXJlbWVudCBmcm9tIE9PTS1pbmcgYmxhemUuIEEgdmFsdWUgb2YgMCBpbmRpY2F0ZXMgdGhhdCBubyBzZW1hcGhvcmUgc2hvdWxkIGJlIHVzZWQuIEV4YW1wbGUgdmFsdWU6ICJIT1NUX0NQVVMqMC41Ii4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFABCrACChNhcHBsZV9jcm9zc3Rvb2xfdG9wEAAaXVRoZSBsYWJlbCBvZiB0aGUgY3Jvc3N0b29sIHBhY2thZ2UgdG8gYmUgdXNlZCBpbiBBcHBsZSBhbmQgT2JqYyBydWxlcyBhbmQgdGhlaXIgZGVwZW5kZW5jaWVzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEU6DkNIQU5HRVNfSU5QVVRTSglUT09MQ0hBSU5QAQqzAwoeZXhwZXJpbWVudGFsX2NjX3N0YXRpY19saWJyYXJ5EAEacElmIHNldCB0byB0cnVlLCBydWxlIGF0dHJpYnV0ZXMgYW5kIFN0YXJsYXJrIEFQSSBtZXRob2RzIG5lZWRlZCBmb3IgdGhlIHJ1bGUgY2Nfc3RhdGljX2xpYnJhcnkgd2lsbCBiZSBhdmFpbGFibGUiD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTOhRMT0FESU5HX0FORF9BTkFMWVNJU0IMRVhQRVJJTUVOVEFMShJTVEFSTEFSS19TRU1BTlRJQ1NQAAr2AgoRd29ya2VyX3NhbmRib3hpbmcQARq5AUlmIGVuYWJsZWQsIHNpbmdsZXBsZXggd29ya2VycyB3aWxsIHJ1biBpbiBhIHNhbmRib3hlZCBlbnZpcm9ubWVudC4gU2luZ2xlcGxleCB3b3JrZXJzIGFyZSBhbHdheXMgc2FuZGJveGVkIHdoZW4gcnVubmluZyB1bmRlciB0aGUgZHluYW1pYyBleGVjdXRpb24gc3RyYXRlZ3ksIGlycmVzcGVjdGl2ZSBvZiB0aGlzIGZsYWcuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVAACsUCCh1leHBlcmltZW50YWxfc3RyaWN0X2phdmFfZGVwcxAAGmFJZiB0cnVlLCBjaGVja3MgdGhhdCBhIEphdmEgdGFyZ2V0IGV4cGxpY2l0bHkgZGVjbGFyZXMgYWxsIGRpcmVjdGx5IHVzZWQgdGFyZ2V0cyBhcyBkZXBlbmRlbmNpZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRCVUlMRF9GSUxFX1NFTUFOVElDUzoRRUFHRVJORVNTX1RPX0VYSVRKEElOUFVUX1NUUklDVE5FU1NQAQqyAgomZXhwZXJpbWVudGFsX29iamNfcHJvdmlkZXJfZnJvbV9saW5rZWQQARpdTm8tb3AuIEtlcHQgaGVyZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIFRoaXMgZmllbGQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgVOT19PUEIMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAAr5AgoTcmVtb3RlX2Rvd25sb2FkX2FsbBAAGmtEb3dubG9hZHMgYWxsIHJlbW90ZSBvdXRwdXRzIHRvIHRoZSBsb2NhbCBtYWNoaW5lLiBUaGlzIGZsYWcgaXMgYW4gYWxpYXMgZm9yIC0tcmVtb3RlX2Rvd25sb2FkX291dHB1dHM9YWxsLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1AACuoDCjlleHBlcmltZW50YWxfbWF4X2RpcmVjdG9yaWVzX3RvX2VhZ2VybHlfdmlzaXRfaW5fZ2xvYmJpbmcQABr7AUlmIG5vbi1uZWdhdGl2ZSwgdGhlIGZpcnN0IHRpbWUgYSBnbG9iIGlzIGV2YWx1YXRlZCBpbiBhIHBhY2thZ2UsIHRoZSBzdWJkaXJlY3RvcmllcyBvZiB0aGUgcGFja2FnZSB3aWxsIGJlIHRyYXZlcnNlZCBpbiBvcmRlciB0byB3YXJtIGZpbGVzeXN0ZW0gY2FjaGVzIGFuZCBjb21wZW5zYXRlIGZvciBsYWNrIG9mIHBhcmFsbGVsaXNtIGluIGdsb2JiaW5nLiBBdCBtb3N0IHRoaXMgbWFueSBkaXJlY3RvcmllcyB3aWxsIGJlIHZpc2l0ZWQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iBHN5bmMiBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSgxVTkRPQ1VNRU5URURQAQroAQoGcGx1Z2luEAAaPlBsdWdpbnMgdG8gdXNlIGluIHRoZSBidWlsZC4gQ3VycmVudGx5IHdvcmtzIHdpdGggamF2YV9wbHVnaW4uIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEK5QQKF3JlbW90ZV9kb3dubG9hZF9vdXRwdXRzEAAa0gJJZiBzZXQgdG8gJ21pbmltYWwnIGRvZXNuJ3QgZG93bmxvYWQgYW55IHJlbW90ZSBidWlsZCBvdXRwdXRzIHRvIHRoZSBsb2NhbCBtYWNoaW5lLCBleGNlcHQgdGhlIG9uZXMgcmVxdWlyZWQgYnkgbG9jYWwgYWN0aW9ucy4gSWYgc2V0IHRvICd0b3BsZXZlbCcgYmVoYXZlcyBsaWtlJ21pbmltYWwnIGV4Y2VwdCB0aGF0IGl0IGFsc28gZG93bmxvYWRzIG91dHB1dHMgb2YgdG9wIGxldmVsIHRhcmdldHMgdG8gdGhlIGxvY2FsIG1hY2hpbmUuIEJvdGggb3B0aW9ucyBjYW4gc2lnbmlmaWNhbnRseSByZWR1Y2UgYnVpbGQgdGltZXMgaWYgbmV0d29yayBiYW5kd2lkdGggaXMgYSBib3R0bGVuZWNrLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1ABCtIBChVqYXZhX2xhbmd1YWdlX3ZlcnNpb24QABoZVGhlIEphdmEgbGFuZ3VhZ2UgdmVyc2lvbiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCvQDCiNpbmNvbXBhdGlibGVfYWxsb3dfdGFnc19wcm9wYWdhdGlvbhABGsEBSWYgc2V0IHRvIHRydWUsIHRhZ3Mgd2lsbCBiZSBwcm9wYWdhdGVkIGZyb20gYSB0YXJnZXQgdG8gdGhlIGFjdGlvbnMnIGV4ZWN1dGlvbiByZXF1aXJlbWVudHM7IG90aGVyd2lzZSB0YWdzIGFyZSBub3QgcHJvcGFnYXRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iYXplbGJ1aWxkL2JhemVsL2lzc3Vlcy84ODMwIGZvciBkZXRhaWxzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUQlVJTERfRklMRV9TRU1BTlRJQ1NCDEVYUEVSSU1FTlRBTEoSU1RBUkxBUktfU0VNQU5USUNTUAAKzwIKGGxlZ2FjeV9leHRlcm5hbF9ydW5maWxlcxABGocBSWYgdHJ1ZSwgYnVpbGQgcnVuZmlsZXMgc3ltbGluayBmb3Jlc3RzIGZvciBleHRlcm5hbCByZXBvc2l0b3JpZXMgdW5kZXIgLnJ1bmZpbGVzL3dzbmFtZS9leHRlcm5hbC9yZXBvIChpbiBhZGRpdGlvbiB0byAucnVuZmlsZXMvcmVwbykuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKEE9VVFBVVF9TRUxFQ1RJT05QAAruAgoOdGxzX2NsaWVudF9rZXkQABpxU3BlY2lmeSB0aGUgVExTIGNsaWVudCBrZXkgdG8gdXNlOyB5b3UgYWxzbyBuZWVkIHRvIHByb3ZpZGUgYSBjbGllbnQgY2VydGlmaWNhdGUgdG8gZW5hYmxlIGNsaWVudCBhdXRoZW50aWNhdGlvbi4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQqQBAoicmVtb3RlX2RlZmF1bHRfcGxhdGZvcm1fcHJvcGVydGllcxAAGoUCU2V0IHRoZSBkZWZhdWx0IHBsYXRmb3JtIHByb3BlcnRpZXMgdG8gYmUgc2V0IGZvciB0aGUgcmVtb3RlIGV4ZWN1dGlvbiBBUEksIGlmIHRoZSBleGVjdXRpb24gcGxhdGZvcm0gZG9lcyBub3QgYWxyZWFkeSBzZXQgcmVtb3RlX2V4ZWN1dGlvbl9wcm9wZXJ0aWVzLiBUaGlzIHZhbHVlIHdpbGwgYWxzbyBiZSB1c2VkIGlmIHRoZSBob3N0IHBsYXRmb3JtIGlzIHNlbGVjdGVkIGFzIHRoZSBleGVjdXRpb24gcGxhdGZvcm0gZm9yIHJlbW90ZSBleGVjdXRpb24uIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgZSRU1PVEVQAQrEAgoVb2JqY191c2VfZG90ZF9wcnVuaW5nEAEaZElmIHNldCwgLmQgZmlsZXMgZW1pdHRlZCBieSBjbGFuZyB3aWxsIGJlIHVzZWQgdG8gcHJ1bmUgdGhlIHNldCBvZiBpbnB1dHMgcGFzc2VkIGludG8gb2JqYyBjb21waWxlcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6DkNIQU5HRVNfSU5QVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0oXQlVJTERfVElNRV9PUFRJTUlaQVRJT05QAArvAgoQZ2VucnVsZV9zdHJhdGVneRAAGrMBU3BlY2lmeSBob3cgdG8gZXhlY3V0ZSBnZW5ydWxlcy4gVGhpcyBmbGFnIHdpbGwgYmUgcGhhc2VkIG91dC4gSW5zdGVhZCwgdXNlIC0tc3Bhd25fc3RyYXRlZ3k9PHZhbHVlPiB0byBjb250cm9sIGFsbCBhY3Rpb25zIG9yIC0tc3RyYXRlZ3k9R2VucnVsZT08dmFsdWU+IHRvIGNvbnRyb2wgZ2VucnVsZXMgb25seS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkoSRVhFQ1VUSU9OX1NUUkFURUdZUAEK4wIKJWV4cGVyaW1lbnRhbF93b3Jrc3BhY2VfcnVsZXNfbG9nX2ZpbGUQABpVTG9nIGNlcnRhaW4gV29ya3NwYWNlIFJ1bGVzIGV2ZW50cyBpbnRvIHRoaXMgZmlsZSBhcyBkZWxpbWl0ZWQgV29ya3NwYWNlRXZlbnQgcHJvdG9zLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoHTE9HR0lOR1ABCuYGChR3b3JrZXJfbWF4X2luc3RhbmNlcxAAGoEFSG93IG1hbnkgaW5zdGFuY2VzIG9mIGVhY2gga2luZCBvZiBwZXJzaXN0ZW50IHdvcmtlciBtYXkgYmUgbGF1bmNoZWQgaWYgeW91IHVzZSB0aGUgJ3dvcmtlcicgc3RyYXRlZ3kuIE1heSBiZSBzcGVjaWZpZWQgYXMgW25hbWU9dmFsdWVdIHRvIGdpdmUgYSBkaWZmZXJlbnQgdmFsdWUgcGVyIG1uZW1vbmljLiBUaGUgbGltaXQgaXMgYmFzZWQgb24gd29ya2VyIGtleXMsIHdoaWNoIGFyZSBkaWZmZXJlbnRpYXRlZCBiYXNlZCBvbiBtbmVtb25pYywgYnV0IGFsc28gb24gc3RhcnR1cCBmbGFncyBhbmQgZW52aXJvbm1lbnQsIHNvIHRoZXJlIGNhbiBpbiBzb21lIGNhc2VzIGJlIG1vcmUgd29ya2VycyBwZXIgbW5lbW9uaWMgdGhhbiB0aGlzIGZsYWcgc3BlY2lmaWVzLiBUYWtlcyBhbiBpbnRlZ2VyLCBvciBhIGtleXdvcmQgKCJhdXRvIiwgIkhPU1RfQ1BVUyIsICJIT1NUX1JBTSIpLCBvcHRpb25hbGx5IGZvbGxvd2VkIGJ5IGFuIG9wZXJhdGlvbiAoWy18Kl08ZmxvYXQ+KSBlZy4gImF1dG8iLCAiSE9TVF9DUFVTKi41Ii4gJ2F1dG8nIGNhbGN1bGF0ZXMgYSByZWFzb25hYmxlIGRlZmF1bHQgYmFzZWQgb24gbWFjaGluZSBjYXBhY2l0eS4gIj12YWx1ZSIgc2V0cyBhIGRlZmF1bHQgZm9yIHVuc3BlY2lmaWVkIG1uZW1vbmljcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6CUVYRUNVVElPTjojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlNKEkVYRUNVVElPTl9TVFJBVEVHWVABCsABCgNydW4QARqGAUlmIGZhbHNlLCBza2lwIHJ1bm5pbmcgdGhlIGNvbW1hbmQgbGluZSBjb25zdHJ1Y3RlZCBmb3IgdGhlIGJ1aWx0IHRhcmdldC4gTm90ZSB0aGF0IHRoaXMgZmxhZyBpcyBpZ25vcmVkIGZvciBhbGwgLS1zY3JpcHRfcGF0aCBidWlsZHMuIgNydW4wADoPQUZGRUNUU19PVVRQVVRTShRCQVpFTF9DTElFTlRfT1BUSU9OU1AACpQBCh1pbmNyZW1lbnRhbF9pbnN0YWxsX3ZlcmJvc2l0eRAAGkJUaGUgdmVyYm9zaXR5IGZvciBpbmNyZW1lbnRhbCBpbnN0YWxsLiBTZXQgdG8gMSBmb3IgZGVidWcgbG9nZ2luZy4iDm1vYmlsZS1pbnN0YWxsMAA6EEJBWkVMX01PTklUT1JJTkdKB0xPR0dJTkdQAQrgAgooZXhwZXJpbWVudGFsX2J1aWxkX2V2ZW50X3VwbG9hZF9zdHJhdGVneRAAGkdTZWxlY3RzIGhvdyB0byB1cGxvYWQgYXJ0aWZhY3RzIHJlZmVyZW5jZWQgaW4gdGhlIGJ1aWxkIGV2ZW50IHByb3RvY29sLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAEK3gIKEWJlc19pbnN0YW5jZV9uYW1lEAAaXFNwZWNpZmllcyB0aGUgaW5zdGFuY2UgbmFtZSB1bmRlciB3aGljaCB0aGUgQkVTIHdpbGwgcGVyc2lzdCB1cGxvYWRlZCBCRVAuIERlZmF1bHRzIHRvIG51bGwuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg9BRkZFQ1RTX09VVFBVVFNKB0xPR0dJTkdQAQqyAQojaW5jb21wYXRpYmxlX2xleGljb2dyYXBoaWNhbF9vdXRwdXQQARpRSWYgdGhpcyBvcHRpb24gaXMgc2V0LCBzb3J0cyAtLW9yZGVyX291dHB1dD1hdXRvIG91dHB1dCBpbiBsZXhpY29ncmFwaGljYWwgb3JkZXIuIgVxdWVyeTAAOg9URVJNSU5BTF9PVVRQVVRCE0lOQ09NUEFUSUJMRV9DSEFOR0VKBVFVRVJZUAAKpAIKDGhvc3RfbGlua29wdBAAGlJBZGRpdGlvbmFsIG9wdGlvbiB0byBwYXNzIHRvIGxpbmtlciB3aGVuIGxpbmtpbmcgdG9vbHMgaW4gdGhlIGV4ZWMgY29uZmlndXJhdGlvbnMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOhRBQ1RJT05fQ09NTUFORF9MSU5FUzoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1ABCugECitleHBlcmltZW50YWxfb3V0cHV0X2RpcmVjdG9yeV9uYW1pbmdfc2NoZW1lEAAagwNQbGVhc2Ugb25seSB1c2UgdGhpcyBmbGFnIGFzIHBhcnQgb2YgYSBzdWdnZXN0ZWQgbWlncmF0aW9uIG9yIHRlc3Rpbmcgc3RyYXRlZ3kuIEluIGxlZ2FjeSBtb2RlLCB0cmFuc2l0aW9ucyAoZ2VuZXJhbGx5IG9ubHkgU3RhcmxhcmspIHNldCBhbmQgdXNlIGBhZmZlY3RlZCBieSBTdGFybGFyayB0cmFuc2l0aW9uYCB0byBkZXRlcm1pbmUgdGhlIFNUIGhhc2guIEluIGRpZmZfYWdhaW5zdF9iYXNlbGluZSBtb2RlLCBgYWZmZWN0ZWQgYnkgU3RhcmxhcmsgdHJhbnNpdGlvbmAgaXMgaWdub3JlZCBhbmQgaW5zdGVhZCBTVCBoYXNoIGlzIGRldGVybWluZWQsIGZvciBhbGwgY29uZmlndXJhdGlvbiwgYnkgZGlmZmluZyBhZ2FpbnN0IHRoZSB0b3AtbGV2ZWwgY29uZmlndXJhdGlvbi4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0IMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAQqUAwokZXhwZXJpbWVudGFsX3JlbW90ZV9tYXJrX3Rvb2xfaW5wdXRzEAEahwFJZiBzZXQgdG8gdHJ1ZSwgQmF6ZWwgd2lsbCBtYXJrIGlucHV0cyBhcyB0b29sIGlucHV0cyBmb3IgdGhlIHJlbW90ZSBleGVjdXRvci4gVGhpcyBjYW4gYmUgdXNlZCB0byBpbXBsZW1lbnQgcmVtb3RlIHBlcnNpc3RlbnQgd29ya2Vycy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KBlJFTU9URVAACqsDCghmZWF0dXJlcxAAGuIBVGhlIGdpdmVuIGZlYXR1cmVzIHdpbGwgYmUgZW5hYmxlZCBvciBkaXNhYmxlZCBieSBkZWZhdWx0IGZvciB0YXJnZXRzIGJ1aWx0IGluIHRoZSB0YXJnZXQgY29uZmlndXJhdGlvbi4gU3BlY2lmeWluZyAtPGZlYXR1cmU+IHdpbGwgZGlzYWJsZSB0aGUgZmVhdHVyZS4gTmVnYXRpdmUgZmVhdHVyZXMgYWx3YXlzIG92ZXJyaWRlIHBvc2l0aXZlIG9uZXMuIFNlZSBhbHNvIC0taG9zdF9mZWF0dXJlcyIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToOQ0hBTkdFU19JTlBVVFM6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQrPBgojZXhwZXJpbWVudGFsX3BsYXRmb3JtX2luX291dHB1dF9kaXIQARrtBElmIHRydWUsIGEgc2hvcnRuYW1lIGZvciB0aGUgdGFyZ2V0IHBsYXRmb3JtIGlzIHVzZWQgaW4gdGhlIG91dHB1dCBkaXJlY3RvcnkgbmFtZSBpbnN0ZWFkIG9mIHRoZSBDUFUuIFRoZSBleGFjdCBzY2hlbWUgaXMgZXhwZXJpbWVudGFsIGFuZCBzdWJqZWN0IHRvIGNoYW5nZTogRmlyc3QsIGluIHRoZSByYXJlIGNhc2UgdGhlIC0tcGxhdGZvcm1zIG9wdGlvbiBkb2VzIG5vdCBoYXZlIGV4YWN0bHkgb25lIHZhbHVlLCBhIGhhc2ggb2YgdGhlIHBsYXRmb3JtcyBvcHRpb24gaXMgdXNlZC4gTmV4dCwgaWYgYW55IHNob3J0bmFtZSBmb3IgdGhlIGN1cnJlbnQgcGxhdGZvcm0gd2FzIHJlZ2lzdGVyZWQgYnkgLS1leHBlcmltZW50YWxfb3ZlcnJpZGVfbmFtZV9wbGF0Zm9ybV9pbl9vdXRwdXRfZGlyLCB0aGVuIHRoYXQgc2hvcnRuYW1lIGlzIHVzZWQuIFRoZW4sIGlmIC0tZXhwZXJpbWVudGFsX3VzZV9wbGF0Zm9ybXNfaW5fb3V0cHV0X2Rpcl9sZWdhY3lfaGV1cmlzdGljIGlzIHNldCwgdXNlIGEgc2hvcnRuYW1lIGJhc2VkIG9mZiB0aGUgY3VycmVudCBwbGF0Zm9ybSBMYWJlbC4gRmluYWxseSwgYSBoYXNoIG9mIHRoZSBwbGF0Zm9ybSBvcHRpb24gaXMgdXNlZCBhcyBhIGxhc3QgcmVzb3J0LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTQgxFWFBFUklNRU5UQUxKEU9VVFBVVF9QQVJBTUVURVJTUAAK6AEKC3Rlc3RfdG1wZGlyEAAaP1NwZWNpZmllcyB0aGUgYmFzZSB0ZW1wb3JhcnkgZGlyZWN0b3J5IGZvciAnYmF6ZWwgdGVzdCcgdG8gdXNlLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoHVEVTVElOR1ABCvkCCippbmNvbXBhdGlibGVfdXNlX25ld19jZ3JvdXBfaW1wbGVtZW50YXRpb24QARqjAUlmIHRydWUsIHVzZSB0aGUgbmV3IGltcGxlbWVudGF0aW9uIGZvciBjZ3JvdXBzLiBUaGUgb2xkIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgdGhlIG1lbW9yeSBjb250cm9sbGVyIGFuZCBpZ25vcmVzIHRoZSB2YWx1ZSBvZiAtLWV4cGVyaW1lbnRhbF9zYW5kYm94X2xpbWl0cy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkoSRVhFQ1VUSU9OX1NUUkFURUdZUAAKvAIKL2luY29tcGF0aWJsZV9kZXBzZXRfZm9yX2phdmFfb3V0cHV0X3NvdXJjZV9qYXJzEAEaBk5vLW9wLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoFTk9fT1BCE0lOQ09NUEFUSUJMRV9DSEFOR0VKElNUQVJMQVJLX1NFTUFOVElDU1AACp8FChlleGVjdXRpb25fbG9nX2JpbmFyeV9maWxlEAAa4QNMb2cgdGhlIGV4ZWN1dGVkIHNwYXducyBpbnRvIHRoaXMgZmlsZSBhcyBsZW5ndGgtZGVsaW1pdGVkIFNwYXduRXhlYyBwcm90b3MsIGFjY29yZGluZyB0byBzcmMvbWFpbi9wcm90b2J1Zi9zcGF3bi5wcm90by4gUHJlZmVyIC0tZXhlY3V0aW9uX2xvZ19jb21wYWN0X2ZpbGUsIHdoaWNoIGlzIHNpZ25pZmljYW50bHkgc21hbGxlciBhbmQgY2hlYXBlciB0byBwcm9kdWNlLiBSZWxhdGVkIGZsYWdzOiAtLWV4ZWN1dGlvbl9sb2dfY29tcGFjdF9maWxlIChjb21wYWN0IGZvcm1hdDsgbXV0dWFsbHkgZXhjbHVzaXZlKSwgLS1leGVjdXRpb25fbG9nX2pzb25fZmlsZSAodGV4dCBKU09OIGZvcm1hdDsgbXV0dWFsbHkgZXhjbHVzaXZlKSwgLS1leGVjdXRpb25fbG9nX3NvcnQgKHdoZXRoZXIgdG8gc29ydCB0aGUgZXhlY3V0aW9uIGxvZyksIC0tc3ViY29tbWFuZHMgKGZvciBkaXNwbGF5aW5nIHN1YmNvbW1hbmRzIGluIHRlcm1pbmFsIG91dHB1dCkuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEKjQMKL2V4cGVyaW1lbnRhbF9yZW1vdGVfY2FjaGVfY29tcHJlc3Npb25fdGhyZXNob2xkEAAadlRoZSBtaW5pbXVtIGJsb2Igc2l6ZSByZXF1aXJlZCB0byBjb21wcmVzcy9kZWNvbXByZXNzIHdpdGggenN0ZC4gSW5lZmZlY3R1YWwgdW5sZXNzIC0tcmVtb3RlX2NhY2hlX2NvbXByZXNzaW9uIGlzIHNldC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KBlJFTU9URVABCtoDCiRleHBlcmltZW50YWxfaW5zdGFsbF9iYXNlX2djX21heF9hZ2UQABqqAUhvdyBsb25nIGFuIGluc3RhbGwgYmFzZSBtdXN0IGdvIHVudXNlZCBiZWZvcmUgaXQncyBlbGlnaWJsZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLiBJZiBub256ZXJvLCB0aGUgc2VydmVyIHdpbGwgYXR0ZW1wdCB0byBnYXJiYWdlIGNvbGxlY3Qgb3RoZXIgaW5zdGFsbCBiYXNlcyB3aGVuIGlkbGUuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OU0oNVU5DQVRFR09SSVpFRFABCv4GChZwZXJfZmlsZV9sdG9iYWNrZW5kb3B0EAAaoQVBZGRpdGlvbmFsIG9wdGlvbnMgdG8gc2VsZWN0aXZlbHkgcGFzcyB0byBMVE8gYmFja2VuZCAodW5kZXIgLS1mZWF0dXJlcz10aGluX2x0bykgd2hlbiBjb21waWxpbmcgY2VydGFpbiBiYWNrZW5kIG9iamVjdHMuIFRoaXMgb3B0aW9uIGNhbiBiZSBwYXNzZWQgbXVsdGlwbGUgdGltZXMuIFN5bnRheDogcmVnZXhfZmlsdGVyQG9wdGlvbl8xLG9wdGlvbl8yLC4uLixvcHRpb25fbi4gV2hlcmUgcmVnZXhfZmlsdGVyIHN0YW5kcyBmb3IgYSBsaXN0IG9mIGluY2x1ZGUgYW5kIGV4Y2x1ZGUgcmVndWxhciBleHByZXNzaW9uIHBhdHRlcm5zLiBvcHRpb25fMSB0byBvcHRpb25fbiBzdGFuZCBmb3IgYXJiaXRyYXJ5IGNvbW1hbmQgbGluZSBvcHRpb25zLiBJZiBhbiBvcHRpb24gY29udGFpbnMgYSBjb21tYSBpdCBoYXMgdG8gYmUgcXVvdGVkIHdpdGggYSBiYWNrc2xhc2guIE9wdGlvbnMgY2FuIGNvbnRhaW4gQC4gT25seSB0aGUgZmlyc3QgQCBpcyB1c2VkIHRvIHNwbGl0IHRoZSBzdHJpbmcuIEV4YW1wbGU6IC0tcGVyX2ZpbGVfbHRvYmFja2VuZG9wdD0vL2Zvby8uKlwubywtLy9mb28vYmFyXC5vQC1PMCBhZGRzIHRoZSAtTzAgY29tbWFuZCBsaW5lIG9wdGlvbiB0byB0aGUgTFRPIGJhY2tlbmQgY29tbWFuZCBsaW5lIG9mIGFsbCBvIGZpbGVzIGluIC8vZm9vLyBleGNlcHQgYmFyLm8uIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOhRBQ1RJT05fQ09NTUFORF9MSU5FUzoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1ABCrgDChhleHBlcmltZW50YWxfd29ya2luZ19zZXQQABrVAVRoZSB3b3JraW5nIHNldCBmb3IgU2t5Zm9jdXMuIFNwZWNpZnkgYXMgY29tbWEtc2VwYXJhdGVkIHdvcmtzcGFjZSByb290LXJlbGF0aXZlIHBhdGhzLiBUaGlzIGlzIGEgc3RhdGVmdWwgZmxhZy4gRGVmaW5pbmcgYSB3b3JraW5nIHNldCBwZXJzaXN0cyBpdCBmb3Igc3Vic2VxdWVudCBpbnZvY2F0aW9ucywgdW50aWwgaXQgaXMgcmVkZWZpbmVkIHdpdGggYSBuZXcgc2V0LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlNKF0JVSUxEX1RJTUVfT1BUSU1JWkFUSU9OUAEKkwUKK2V4cGVyaW1lbnRhbF9hcXVlcnlfZHVtcF9hZnRlcl9idWlsZF9mb3JtYXQQABq8A1dyaXRlcyB0aGUgc3RhdGUgb2YgU2t5ZnJhbWUgKHdoaWNoIGluY2x1ZGVzIHByZXZpb3VzIGludm9jYXRpb25zIG9uIHRoaXMgYmxhemUgaW5zdGFuY2UgYXMgd2VsbCkgYWZ0ZXIgYSBidWlsZC4gT3V0cHV0IGlzIHN0cmVhbWVkIHJlbW90ZWx5IHVubGVzcyBsb2NhbCBvdXRwdXQgaXMgcmVxdWVzdGVkIHdpdGggLS1leHBlcmltZW50YWxfYXF1ZXJ5X2R1bXBfYWZ0ZXJfYnVpbGRfb3V0cHV0X2ZpbGUuICBEb2VzIG5vdCBob25vciBhcXVlcnkgZmxhZ3MgZm9yIC0taW5jbHVkZV8qLCBidXQgdXNlcyB0aGUgc2FtZSBkZWZhdWx0cywgZXhjZXB0IGZvciAtLWluY2x1ZGVfY29tbWFuZGxpbmU9ZmFsc2UuIFBvc3NpYmxlIG91dHB1dCBmb3JtYXRzOiBwcm90b3xzdHJlYW1lZF9wcm90b3x0ZXh0cHJvdG98anNvbnByb3RvLiBVc2luZyB0aGlzIHdpbGwgZGlzYWJsZSBTa3ltZWxkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTSgxVTkRPQ1VNRU5URURQAQquBwoRY3JlZGVudGlhbF9oZWxwZXIQABqtBUNvbmZpZ3VyZXMgYSBjcmVkZW50aWFsIGhlbHBlciBjb25mb3JtaW5nIHRvIHRoZSA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vRW5nRmxvdy9jcmVkZW50aWFsLWhlbHBlci1zcGVjIj5DcmVkZW50aWFsIEhlbHBlciBTcGVjaWZpY2F0aW9uPC9hPiB0byB1c2UgZm9yIHJldHJpZXZpbmcgYXV0aG9yaXphdGlvbiBjcmVkZW50aWFscyBmb3IgIHJlcG9zaXRvcnkgZmV0Y2hpbmcsIHJlbW90ZSBjYWNoaW5nIGFuZCBleGVjdXRpb24sIGFuZCB0aGUgYnVpbGQgZXZlbnQgc2VydmljZS4KCkNyZWRlbnRpYWxzIHN1cHBsaWVkIGJ5IGEgaGVscGVyIHRha2UgcHJlY2VkZW5jZSBvdmVyIGNyZWRlbnRpYWxzIHN1cHBsaWVkIGJ5IGAtLWdvb2dsZV9kZWZhdWx0X2NyZWRlbnRpYWxzYCwgYC0tZ29vZ2xlX2NyZWRlbnRpYWxzYCwgYSBgLm5ldHJjYCBmaWxlLCBvciB0aGUgYXV0aCBwYXJhbWV0ZXIgdG8gYHJlcG9zaXRvcnlfY3R4LmRvd25sb2FkKClgIGFuZCBgcmVwb3NpdG9yeV9jdHguZG93bmxvYWRfYW5kX2V4dHJhY3QoKWAuCgpNYXkgYmUgc3BlY2lmaWVkIG11bHRpcGxlIHRpbWVzIHRvIHNldCB1cCBtdWx0aXBsZSBoZWxwZXJzLgoKU2VlIGh0dHBzOi8vYmxvZy5lbmdmbG93LmNvbS8yMDIzLzEwLzA5L2NvbmZpZ3VyaW5nLWJhemVscy1jcmVkZW50aWFsLWhlbHBlci8gZm9yIGluc3RydWN0aW9ucy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAE6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQrnAgoFYmF0Y2gQARr1AUlmIHNldCwgQmF6ZWwgd2lsbCBiZSBydW4gYXMganVzdCBhIGNsaWVudCBwcm9jZXNzIHdpdGhvdXQgYSBzZXJ2ZXIsIGluc3RlYWQgb2YgaW4gdGhlIHN0YW5kYXJkIGNsaWVudC9zZXJ2ZXIgbW9kZS4gVGhpcyBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQsIHBsZWFzZSBwcmVmZXIgc2h1dHRpbmcgZG93biB0aGUgc2VydmVyIGV4cGxpY2l0bHkgaWYgeW91IHdpc2ggdG8gYXZvaWQgbGluZ2VyaW5nIHNlcnZlcnMuIgdzdGFydHVwMAA6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OQgpERVBSRUNBVEVEShRCQVpFTF9DTElFTlRfT1BUSU9OU1AACt4BCg1ob3N0X2phdmFiYXNlEAAaLk5vLW9wLiAgS2VwdCBoZXJlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDFVORE9DVU1FTlRFRFABCuIBCg1vcmRlcl9yZXN1bHRzEAAaqwFPdXRwdXQgdGhlIHJlc3VsdHMgaW4gZGVwZW5kZW5jeS1vcmRlcmVkIChkZWZhdWx0KSBvciB1bm9yZGVyZWQgZmFzaGlvbi4gVGhlIHVub3JkZXJlZCBvdXRwdXQgaXMgZmFzdGVyIGJ1dCBvbmx5IHN1cHBvcnRlZCB3aGVuIC0tb3V0cHV0IGlzIG5vdCBtaW5yYW5rLCBtYXhyYW5rLCBvciBncmFwaC4iBXF1ZXJ5MAA6D1RFUk1JTkFMX09VVFBVVEoFUVVFUllQAArYAQoIamF2YWJhc2UQABotTm8tb3AuIEtlcHQgaGVyZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSgxVTkRPQ1VNRU5URURQAQqHAgoqZXhwZXJpbWVudGFsX2V4ZWN1dGlvbl9ncmFwaF9sb2dfbWlkZGxlbWFuEAEaOlN1YnNjcmliZSB0byBBY3Rpb25NaWRkbGVtYW5FdmVudCBpbiBFeGVjdXRpb25HcmFwaE1vZHVsZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDFVORE9DVU1FTlRFRFAACrMDCh5leHBlcmltZW50YWxfY2Nfc2hhcmVkX2xpYnJhcnkQARpwSWYgc2V0IHRvIHRydWUsIHJ1bGUgYXR0cmlidXRlcyBhbmQgU3RhcmxhcmsgQVBJIG1ldGhvZHMgbmVlZGVkIGZvciB0aGUgcnVsZSBjY19zaGFyZWRfbGlicmFyeSB3aWxsIGJlIGF2YWlsYWJsZSIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUQlVJTERfRklMRV9TRU1BTlRJQ1M6FExPQURJTkdfQU5EX0FOQUxZU0lTQgxFWFBFUklNRU5UQUxKElNUQVJMQVJLX1NFTUFOVElDU1AACoYCChdzdHJpY3RfZGVwc19qYXZhX3Byb3RvcxABGixOby1vcCwga2VwdCBvbmx5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQlVJTERfRklMRV9TRU1BTlRJQ1M6EUVBR0VSTkVTU19UT19FWElUSgxVTkRPQ1VNRU5URURQAAqZAwoVYnVpbGRfZXZlbnRfanNvbl9maWxlEAAakgFJZiBub24tZW1wdHksIHdyaXRlIGEgSlNPTiBzZXJpYWxpc2F0aW9uIG9mIHRoZSBidWlsZCBldmVudCBwcm90b2NvbCB0byB0aGF0IGZpbGUuIFRoaXMgb3B0aW9uIGltcGxpZXMgLS1iZXNfdXBsb2FkX21vZGU9d2FpdF9mb3JfdXBsb2FkX2NvbXBsZXRlLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAEKrAUKE292ZXJyaWRlX3JlcG9zaXRvcnkQABqpA092ZXJyaWRlIGEgcmVwb3NpdG9yeSB3aXRoIGEgbG9jYWwgcGF0aCBpbiB0aGUgZm9ybSBvZiA8cmVwb3NpdG9yeSBuYW1lPj08cGF0aD4uIElmIHRoZSBnaXZlbiBwYXRoIGlzIGFuIGFic29sdXRlIHBhdGgsIGl0IHdpbGwgYmUgdXNlZCBhcyBpdCBpcy4gSWYgdGhlIGdpdmVuIHBhdGggaXMgYSByZWxhdGl2ZSBwYXRoLCBpdCBpcyByZWxhdGl2ZSB0byB0aGUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeS4gSWYgdGhlIGdpdmVuIHBhdGggc3RhcnRzIHdpdGggJyV3b3Jrc3BhY2UlLCBpdCBpcyByZWxhdGl2ZSB0byB0aGUgd29ya3NwYWNlIHJvb3QsIHdoaWNoIGlzIHRoZSBvdXRwdXQgb2YgYGJhemVsIGluZm8gd29ya3NwYWNlYC4gSWYgdGhlIGdpdmVuIHBhdGggaXMgZW1wdHksIHRoZW4gcmVtb3ZlIGFueSBwcmV2aW91cyBvdmVycmlkZXMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjABOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEK7QMKG2dlbmVyYXRlX2pzb25fdHJhY2VfcHJvZmlsZRABGt8BSWYgZW5hYmxlZCwgQmF6ZWwgcHJvZmlsZXMgdGhlIGJ1aWxkIGFuZCB3cml0ZXMgYSBKU09OLWZvcm1hdCBwcm9maWxlIGludG8gYSBmaWxlIGluIHRoZSBvdXRwdXQgYmFzZS4gVmlldyBwcm9maWxlIGJ5IGxvYWRpbmcgaW50byBjaHJvbWU6Ly90cmFjaW5nLiBCeSBkZWZhdWx0IEJhemVsIHdyaXRlcyB0aGUgcHJvZmlsZSBmb3IgYWxsIGJ1aWxkLWxpa2UgY29tbWFuZHMgYW5kIHF1ZXJ5LiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoQQkFaRUxfTU9OSVRPUklOR0oHTE9HR0lOR1AACt4GCg1wZXJfZmlsZV9jb3B0EAAaigVBZGRpdGlvbmFsIG9wdGlvbnMgdG8gc2VsZWN0aXZlbHkgcGFzcyB0byBnY2Mgd2hlbiBjb21waWxpbmcgY2VydGFpbiBmaWxlcy4gVGhpcyBvcHRpb24gY2FuIGJlIHBhc3NlZCBtdWx0aXBsZSB0aW1lcy4gU3ludGF4OiByZWdleF9maWx0ZXJAb3B0aW9uXzEsb3B0aW9uXzIsLi4uLG9wdGlvbl9uLiBXaGVyZSByZWdleF9maWx0ZXIgc3RhbmRzIGZvciBhIGxpc3Qgb2YgaW5jbHVkZSBhbmQgZXhjbHVkZSByZWd1bGFyIGV4cHJlc3Npb24gcGF0dGVybnMgKEFsc28gc2VlIC0taW5zdHJ1bWVudGF0aW9uX2ZpbHRlcikuIG9wdGlvbl8xIHRvIG9wdGlvbl9uIHN0YW5kIGZvciBhcmJpdHJhcnkgY29tbWFuZCBsaW5lIG9wdGlvbnMuIElmIGFuIG9wdGlvbiBjb250YWlucyBhIGNvbW1hIGl0IGhhcyB0byBiZSBxdW90ZWQgd2l0aCBhIGJhY2tzbGFzaC4gT3B0aW9ucyBjYW4gY29udGFpbiBALiBPbmx5IHRoZSBmaXJzdCBAIGlzIHVzZWQgdG8gc3BsaXQgdGhlIHN0cmluZy4gRXhhbXBsZTogLS1wZXJfZmlsZV9jb3B0PS8vZm9vLy4qXC5jYywtLy9mb28vYmFyXC5jY0AtTzAgYWRkcyB0aGUgLU8wIGNvbW1hbmQgbGluZSBvcHRpb24gdG8gdGhlIGdjYyBjb21tYW5kIGxpbmUgb2YgYWxsIGNjIGZpbGVzIGluIC8vZm9vLyBleGNlcHQgYmFyLmNjLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToUQUNUSU9OX0NPTU1BTkRfTElORVM6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQqfAQoRaWRsZV9zZXJ2ZXJfdGFza3MQARonUnVuIFN5c3RlbS5nYygpIHdoZW4gdGhlIHNlcnZlciBpcyBpZGxlIgdzdGFydHVwMAA6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OU0oUQkFaRUxfQ0xJRU5UX09QVElPTlNQAAr9BAoPaG9zdF9hY3Rpb25fZW52EAAauANTcGVjaWZpZXMgdGhlIHNldCBvZiBlbnZpcm9ubWVudCB2YXJpYWJsZXMgYXZhaWxhYmxlIHRvIGFjdGlvbnMgd2l0aCBleGVjdXRpb24gY29uZmlndXJhdGlvbnMuIFZhcmlhYmxlcyBjYW4gYmUgZWl0aGVyIHNwZWNpZmllZCBieSBuYW1lLCBpbiB3aGljaCBjYXNlIHRoZSB2YWx1ZSB3aWxsIGJlIHRha2VuIGZyb20gdGhlIGludm9jYXRpb24gZW52aXJvbm1lbnQsIG9yIGJ5IHRoZSBuYW1lPXZhbHVlIHBhaXIgd2hpY2ggc2V0cyB0aGUgdmFsdWUgaW5kZXBlbmRlbnQgb2YgdGhlIGludm9jYXRpb24gZW52aXJvbm1lbnQuIFRoaXMgb3B0aW9uIGNhbiBiZSB1c2VkIG11bHRpcGxlIHRpbWVzOyBmb3Igb3B0aW9ucyBnaXZlbiBmb3IgdGhlIHNhbWUgdmFyaWFibGUsIHRoZSBsYXRlc3Qgd2lucywgb3B0aW9ucyBmb3IgZGlmZmVyZW50IHZhcmlhYmxlcyBhY2N1bXVsYXRlLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToUQUNUSU9OX0NPTU1BTkRfTElORVNKEU9VVFBVVF9QQVJBTUVURVJTUAEKrgMKH2F0dGVtcHRfdG9fcHJpbnRfcmVsYXRpdmVfcGF0aHMQARqdAVdoZW4gcHJpbnRpbmcgdGhlIGxvY2F0aW9uIHBhcnQgb2YgbWVzc2FnZXMsIGF0dGVtcHQgdG8gdXNlIGEgcGF0aCByZWxhdGl2ZSB0byB0aGUgd29ya3NwYWNlIGRpcmVjdG9yeSBvciBvbmUgb2YgdGhlIGRpcmVjdG9yaWVzIHNwZWNpZmllZCBieSAtLXBhY2thZ2VfcGF0aC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6D1RFUk1JTkFMX09VVFBVVEoHTE9HR0lOR1AACtgBCiZleHBlcmltZW50YWxfcmVxdWlyZV9hdmFpbGFiaWxpdHlfaW5mbxABGhFEZXByZWNhdGVkIG5vLW9wLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BKDFVORE9DVU1FTlRFRFAACuICCixleHBlcmltZW50YWxfY29sbGVjdF93b3JrZXJfZGF0YV9pbl9wcm9maWxlchABGkRJZiBlbmFibGVkLCB0aGUgcHJvZmlsZXIgY29sbGVjdHMgd29ya2VyJ3MgYWdncmVnYXRlZCByZXNvdXJjZSBkYXRhLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoQQkFaRUxfTU9OSVRPUklOR0oHTE9HR0lOR1AACqQDCg1lbmFibGVfYnpsbW9kEAEalQFJZiB0cnVlLCBlbmFibGVzIHRoZSBCemxtb2QgZGVwZW5kZW5jeSBtYW5hZ2VtZW50IHN5c3RlbSwgdGFraW5nIHByZWNlZGVuY2Ugb3ZlciBXT1JLU1BBQ0UuIFNlZSBodHRwczovL2JhemVsLmJ1aWxkL2RvY3MvYnpsbW9kIGZvciBtb3JlIGluZm9ybWF0aW9uLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUTE9BRElOR19BTkRfQU5BTFlTSVNKElNUQVJMQVJLX1NFTUFOVElDU1AACpkECgxzYW5kYm94X2Jhc2UQABq8AkxldHMgdGhlIHNhbmRib3ggY3JlYXRlIGl0cyBzYW5kYm94IGRpcmVjdG9yaWVzIHVuZGVybmVhdGggdGhpcyBwYXRoLiBTcGVjaWZ5IGEgcGF0aCBvbiB0bXBmcyAobGlrZSAvcnVuL3NobSkgdG8gcG9zc2libHkgaW1wcm92ZSBwZXJmb3JtYW5jZSBhIGxvdCB3aGVuIHlvdXIgYnVpbGQgLyB0ZXN0cyBoYXZlIG1hbnkgaW5wdXQgZmlsZXMuIE5vdGU6IFlvdSBuZWVkIGVub3VnaCBSQU0gYW5kIGZyZWUgc3BhY2Ugb24gdGhlIHRtcGZzIHRvIGhvbGQgb3V0cHV0IGFuZCBpbnRlcm1lZGlhdGUgZmlsZXMgZ2VuZXJhdGVkIGJ5IHJ1bm5pbmcgYWN0aW9ucy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVABCrACCipleHBlcmltZW50YWxfc3BsaXRfY292ZXJhZ2VfcG9zdHByb2Nlc3NpbmcQARpNSWYgdHJ1ZSwgdGhlbiBCYXplbCB3aWxsIHJ1biBjb3ZlcmFnZSBwb3N0cHJvY2Vzc2luZyBmb3IgdGVzdCBpbiBhIG5ldyBzcGF3bi4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkIMRVhQRVJJTUVOVEFMShJFWEVDVVRJT05fU1RSQVRFR1lQAAqcAwoHd2F0Y2hmcxABGokBSWYgdHJ1ZSwgJXtwcm9kdWN0fSB0cmllcyB0byB1c2UgdGhlIG9wZXJhdGluZyBzeXN0ZW0ncyBmaWxlIHdhdGNoIHNlcnZpY2UgZm9yIGxvY2FsIGNoYW5nZXMgaW5zdGVhZCBvZiBzY2FubmluZyBldmVyeSBmaWxlIGZvciBhIGNoYW5nZS4iB3N0YXJ0dXAiD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05CCkRFUFJFQ0FURURKFEJBWkVMX0NMSUVOVF9PUFRJT05TUAAKpAEKD2RpZ2VzdF9mdW5jdGlvbhAAGjVUaGUgaGFzaCBmdW5jdGlvbiB0byB1c2Ugd2hlbiBjb21wdXRpbmcgZmlsZSBkaWdlc3RzLiIHc3RhcnR1cDAAOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURTocQkFaRUxfSU5URVJOQUxfQ09ORklHVVJBVElPTkoUQkFaRUxfQ0xJRU5UX09QVElPTlNQAQppCgZtZW1vcnkQABovRHVtcCB0aGUgbWVtb3J5IHVzZSBvZiB0aGUgZ2l2ZW4gU2t5ZnJhbWUgbm9kZS4iBGR1bXAwADoQQkFaRUxfTU9OSVRPUklOR0oQT1VUUFVUX1NFTEVDVElPTlABCqQCCgl0dm9zX2NwdXMQABpNQ29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgYXJjaGl0ZWN0dXJlcyBmb3Igd2hpY2ggdG8gYnVpbGQgQXBwbGUgdHZPUyBiaW5hcmllcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFOhRMT0FESU5HX0FORF9BTkFMWVNJU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQqnAwouaW5jb21wYXRpYmxlX2Rpc2FibGVfc3RhcmxhcmtfaG9zdF90cmFuc2l0aW9ucxABGmNJZiBzZXQgdG8gdHJ1ZSwgcnVsZSBhdHRyaWJ1dGVzIGNhbm5vdCBzZXQgJ2NmZyA9ICJob3N0IicuIFJ1bGVzIHNob3VsZCBzZXQgJ2NmZyA9ICJleGVjIicgaW5zdGVhZC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShJTVEFSTEFSS19TRU1BTlRJQ1NQAAqdAgoFY29sb3IQABopVXNlIHRlcm1pbmFsIGNvbnRyb2xzIHRvIGNvbG9yaXplIG91dHB1dC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQrtAwoLYmVzX2JhY2tlbmQQABrwAVNwZWNpZmllcyB0aGUgYnVpbGQgZXZlbnQgc2VydmljZSAoQkVTKSBiYWNrZW5kIGVuZHBvaW50IGluIHRoZSBmb3JtIFtTQ0hFTUU6Ly9dSE9TVFs6UE9SVF0uIFRoZSBkZWZhdWx0IGlzIHRvIGRpc2FibGUgQkVTIHVwbG9hZHMuIFN1cHBvcnRlZCBzY2hlbWVzIGFyZSBncnBjIGFuZCBncnBjcyAoZ3JwYyB3aXRoIFRMUyBlbmFibGVkKS4gSWYgbm8gc2NoZW1lIGlzIHByb3ZpZGVkLCBCYXplbCBhc3N1bWVzIGdycGNzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAEKuAYKB2FzcGVjdHMQABqIBUNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGFzcGVjdHMgdG8gYmUgYXBwbGllZCB0byB0b3AtbGV2ZWwgdGFyZ2V0cy4gSW4gdGhlIGxpc3QsIGlmIGFzcGVjdCBzb21lX2FzcGVjdCBzcGVjaWZpZXMgcmVxdWlyZWQgYXNwZWN0IHByb3ZpZGVycyB2aWEgcmVxdWlyZWRfYXNwZWN0X3Byb3ZpZGVycywgc29tZV9hc3BlY3Qgd2lsbCBydW4gYWZ0ZXIgZXZlcnkgYXNwZWN0IHRoYXQgd2FzIG1lbnRpb25lZCBiZWZvcmUgaXQgaW4gdGhlIGFzcGVjdHMgbGlzdCB3aG9zZSBhZHZlcnRpc2VkIHByb3ZpZGVycyBzYXRpc2Z5IHNvbWVfYXNwZWN0IHJlcXVpcmVkIGFzcGVjdCBwcm92aWRlcnMuIE1vcmVvdmVyLCBzb21lX2FzcGVjdCB3aWxsIHJ1biBhZnRlciBhbGwgaXRzIHJlcXVpcmVkIGFzcGVjdHMgc3BlY2lmaWVkIGJ5IHJlcXVpcmVzIGF0dHJpYnV0ZS4gc29tZV9hc3BlY3Qgd2lsbCB0aGVuIGhhdmUgYWNjZXNzIHRvIHRoZSB2YWx1ZXMgb2YgdGhvc2UgYXNwZWN0cycgcHJvdmlkZXJzLiA8YnpsLWZpbGUtbGFiZWw+JTxhc3BlY3RfbmFtZT4sIGZvciBleGFtcGxlICcvL3Rvb2xzOm15X2RlZi5iemwlbXlfYXNwZWN0Jywgd2hlcmUgJ215X2FzcGVjdCcgaXMgYSB0b3AtbGV2ZWwgdmFsdWUgZnJvbSBhIGZpbGUgdG9vbHMvbXlfZGVmLmJ6bCIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToHVU5LTk9XTkoRT1VUUFVUX1BBUkFNRVRFUlNQAQrqAgocZXhwZXJpbWVudGFsX2FzeW5jX2V4ZWN1dGlvbhABGoABSWYgc2V0IHRvIHRydWUsIEJhemVsIGlzIGFsbG93ZWQgdG8gcnVuIGFjdGlvbiBpbiBhIHZpcnR1YWwgdGhyZWFkLiBUaGUgbnVtYmVyIG9mIGFjdGlvbnMgaW4gZmxpZ2h0IGlzIHN0aWxsIGNhcHBlZCB3aXRoIC0tam9icy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05CE0lOQ09NUEFUSUJMRV9DSEFOR0VKDFVORE9DVU1FTlRFRFAACpwCCippbmNvbXBhdGlibGVfZXhpc3RpbmdfcnVsZXNfaW1tdXRhYmxlX3ZpZXcQARoGTm8tb3AuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgVOT19PUEoMVU5ET0NVTUVOVEVEUAAK/QEKHXRlc3RfdmVyYm9zZV90aW1lb3V0X3dhcm5pbmdzEAEalAFJZiB0cnVlLCBwcmludCBhZGRpdGlvbmFsIHdhcm5pbmdzIHdoZW4gdGhlIGFjdHVhbCB0ZXN0IGV4ZWN1dGlvbiB0aW1lIGRvZXMgbm90IG1hdGNoIHRoZSB0aW1lb3V0IGRlZmluZWQgYnkgdGhlIHRlc3QgKHdoZXRoZXIgaW1wbGllZCBvciBleHBsaWNpdCkuIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0oHTE9HR0lOR1AACtQFCg51bml2ZXJzZV9zY29wZRAAGocFQSBjb21tYS1zZXBhcmF0ZWQgc2V0IG9mIHRhcmdldCBwYXR0ZXJucyAoYWRkaXRpdmUgYW5kIHN1YnRyYWN0aXZlKS4gVGhlIHF1ZXJ5IG1heSBiZSBwZXJmb3JtZWQgaW4gdGhlIHVuaXZlcnNlIGRlZmluZWQgYnkgdGhlIHRyYW5zaXRpdmUgY2xvc3VyZSBvZiB0aGUgc3BlY2lmaWVkIHRhcmdldHMuIFRoaXMgb3B0aW9uIGlzIHVzZWQgZm9yIHRoZSBxdWVyeSBhbmQgY3F1ZXJ5IGNvbW1hbmRzLgpGb3IgY3F1ZXJ5LCB0aGUgaW5wdXQgdG8gdGhpcyBvcHRpb24gaXMgdGhlIHRhcmdldHMgYWxsIGFuc3dlcnMgYXJlIGJ1aWx0IHVuZGVyIGFuZCBzbyB0aGlzIG9wdGlvbiBtYXkgYWZmZWN0IGNvbmZpZ3VyYXRpb25zIGFuZCB0cmFuc2l0aW9ucy4gSWYgdGhpcyBvcHRpb24gaXMgbm90IHNwZWNpZmllZCwgdGhlIHRvcC1sZXZlbCB0YXJnZXRzIGFyZSBhc3N1bWVkIHRvIGJlIHRoZSB0YXJnZXRzIHBhcnNlZCBmcm9tIHRoZSBxdWVyeSBleHByZXNzaW9uLiBOb3RlOiBGb3IgY3F1ZXJ5LCBub3Qgc3BlY2lmeWluZyB0aGlzIG9wdGlvbiBtYXkgY2F1c2UgdGhlIGJ1aWxkIHRvIGJyZWFrIGlmIHRhcmdldHMgcGFyc2VkIGZyb20gdGhlIHF1ZXJ5IGV4cHJlc3Npb24gYXJlIG5vdCBidWlsZGFibGUgd2l0aCB0b3AtbGV2ZWwgb3B0aW9ucy4iBmFxdWVyeSIGY3F1ZXJ5IgVxdWVyeTAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0oFUVVFUllQAQqAAwojZXhwZXJpbWVudGFsX3VpX21heF9zdGRvdXRlcnJfYnl0ZXMQABpnVGhlIG1heGltdW0gc2l6ZSBvZiB0aGUgc3Rkb3V0IC8gc3RkZXJyIGZpbGVzIHRoYXQgd2lsbCBiZSBwcmludGVkIHRvIHRoZSBjb25zb2xlLiAtMSBpbXBsaWVzIG5vIGxpbWl0LiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoJRVhFQ1VUSU9OShJFWEVDVVRJT05fU1RSQVRFR1lQAQquBQodZXhwZXJpbWVudGFsX3JlbW90ZV9jYWNoZV90dGwQABqmA1RoZSBndWFyYW50ZWVkIG1pbmltYWwgVFRMIG9mIGJsb2JzIGluIHRoZSByZW1vdGUgY2FjaGUgYWZ0ZXIgdGhlaXIgZGlnZXN0cyBhcmUgcmVjZW50bHkgcmVmZXJlbmNlZCBlLmcuIGJ5IGFuIEFjdGlvblJlc3VsdCBvciBGaW5kTWlzc2luZ0Jsb2JzLiBCYXplbCBkb2VzIHNldmVyYWwgb3B0aW1pemF0aW9ucyBiYXNlZCBvbiB0aGUgYmxvYnMnIFRUTCBlLmcuIGRvZXNuJ3QgcmVwZWF0ZWRseSBjYWxsIEdldEFjdGlvblJlc3VsdCBpbiBhbiBpbmNyZW1lbnRhbCBidWlsZC4gVGhlIHZhbHVlIHNob3VsZCBiZSBzZXQgc2xpZ2h0bHkgbGVzcyB0aGFuIHRoZSByZWFsIFRUTCBzaW5jZSB0aGVyZSBpcyBhIGdhcCBiZXR3ZWVuIHdoZW4gdGhlIHNlcnZlciByZXR1cm5zIHRoZSBkaWdlc3RzIGFuZCB3aGVuIEJhemVsIHJlY2VpdmVzIHRoZW0uIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOglFWEVDVVRJT05KBlJFTU9URVABCpEDCiJleHBlcmltZW50YWxfcHJvcGFnYXRlX2N1c3RvbV9mbGFnEAAatQFXaGljaCBjdXN0b20gZmxhZ3MgKHN0YXJsYXJrIGZsYWdzIG9yIGRlZmluZXMpIHRvIHByb3BhZ2F0ZSB0byB0aGUgZXhlYyB0cmFuc2l0aW9uLCBieSBrZXkuIGUuZy4gaWYgJy0tZGVmaW5lPWE9Yicgc2hvdWxkIGJlIHByb3BhZ2F0ZWQsIHNldCBgLS1leHBlcmltZW50YWxfcHJvcGFnYXRlX2N1c3RvbV9mbGFnPWFgIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOg9BRkZFQ1RTX09VVFBVVFNCDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAEK1gMKPmV4cGVyaW1lbnRhbF9hbHdheXNfZmlsdGVyX2R1cGxpY2F0ZV9jbGFzc2VzX2Zyb21fYW5kcm9pZF90ZXN0EAEa3wFJZiBlbmFibGVkIGFuZCB0aGUgYW5kcm9pZF90ZXN0IGRlZmluZXMgYSBiaW5hcnlfdW5kZXJfdGVzdCwgdGhlIGNsYXNzIGZpbHRlcmVyaW5nIGFwcGxpZWQgdG8gdGhlIHRlc3QncyBkZXBsb3kgamFyIHdpbGwgYWx3YXlzIGZpbHRlciBkdXBsaWNhdGUgY2xhc3NlcyBiYXNlZCBzb2xlbHkgb24gbWF0Y2hpbmcgY2xhc3MgYW5kIHBhY2thZ2UgbmFtZSwgaWdub3JpbmcgaGFzaCB2YWx1ZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg5DSEFOR0VTX0lOUFVUU0IMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAArwAgo1aW5jb21wYXRpYmxlX3JlbW90ZV91c2VfbmV3X2V4aXRfY29kZV9mb3JfbG9zdF9pbnB1dHMQARqIAUlmIHNldCB0byB0cnVlLCBCYXplbCB3aWxsIHVzZSBuZXcgZXhpdCBjb2RlIDM5IGluc3RlYWQgb2YgMzQgaWYgcmVtb3RlIGNhY2hlZXJyb3JzLCBpbmNsdWRpbmcgY2FjaGUgZXZpY3Rpb25zLCBjYXVzZSB0aGUgYnVpbGQgdG8gZmFpbC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05CE0lOQ09NUEFUSUJMRV9DSEFOR0VKBlJFTU9URVAACo8DChdyZW1vdGVfZG93bmxvYWRfbWluaW1hbBAAGn1Eb2VzIG5vdCBkb3dubG9hZCBhbnkgcmVtb3RlIGJ1aWxkIG91dHB1dHMgdG8gdGhlIGxvY2FsIG1hY2hpbmUuIFRoaXMgZmxhZyBpcyBhbiBhbGlhcyBmb3IgLS1yZW1vdGVfZG93bmxvYWRfb3V0cHV0cz1taW5pbWFsLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1AACr8BCgVzdGFydBAAGoEBSG93IHRoZSBhcHAgc2hvdWxkIGJlIHN0YXJ0ZWQgYWZ0ZXIgaW5zdGFsbGluZyBpdC4gU2V0IHRvIFdBUk0gdG8gcHJlc2VydmUgYW5kIHJlc3RvcmUgYXBwbGljYXRpb24gc3RhdGUgb24gaW5jcmVtZW50YWwgaW5zdGFsbHMuIg5tb2JpbGUtaW5zdGFsbDAAOglFWEVDVVRJT05KEU9VVFBVVF9QQVJBTUVURVJTUAEKsAIKD3Rlc3Rfa2VlcF9nb2luZxABGoABV2hlbiBkaXNhYmxlZCwgYW55IG5vbi1wYXNzaW5nIHRlc3Qgd2lsbCBjYXVzZSB0aGUgZW50aXJlIGJ1aWxkIHRvIHN0b3AuIEJ5IGRlZmF1bHQgYWxsIHRlc3RzIGFyZSBydW4sIGV2ZW4gaWYgc29tZSBkbyBub3QgcGFzcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkoHVEVTVElOR1AACvsCChZ0bHNfYXV0aG9yaXR5X292ZXJyaWRlEAAab1RFU1RJTkcgT05MWSEgQ2FuIGJlIHVzZWQgd2l0aCBhIHNlbGYtc2lnbmVkIGNlcnRpZmljYXRlIHRvIGNvbnNpZGVyIHRoZSBzcGVjaWZpZWQgdmFsdWUgYSB2YWxpZCBUTFMgYXV0aG9yaXR5LiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkIGSElEREVOSgxVTkRPQ1VNRU5URURQAQqwAQoJY29uZmlndXJlEAEaeE9ubHkgZmV0Y2hlcyByZXBvc2l0b3JpZXMgbWFya2VkIGFzICdjb25maWd1cmUnIGZvciBzeXN0ZW0tY29uZmlndXJhdGlvbiBwdXJwb3NlLiBPbmx5IHdvcmtzIHdoZW4gLS1lbmFibGVfYnpsbW9kIGlzIG9uLiIFZmV0Y2giBHN5bmMwADoOQ0hBTkdFU19JTlBVVFNKBkJaTE1PRFAACqECChZwcm90b190b29sY2hhaW5fZm9yX2NjEAAaSUxhYmVsIG9mIHByb3RvX2xhbmdfdG9vbGNoYWluKCkgd2hpY2ggZGVzY3JpYmVzIGhvdyB0byBjb21waWxlIEMrKyBwcm90b3MiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUUzoUTE9BRElOR19BTkRfQU5BTFlTSVNKDVVOQ0FURUdPUklaRURQAQrGAwopaW5jb21wYXRpYmxlX3B5dGhvbl9kaXNhbGxvd19uYXRpdmVfcnVsZXMQARrRAVdoZW4gdHJ1ZSwgYW4gZXJyb3Igb2NjdXJzIHdoZW4gdXNpbmcgdGhlIGJ1aWx0aW4gcHlfKiBydWxlczsgaW5zdGVhZCB0aGUgcnVsZV9weXRob24gcnVsZXMgc2hvdWxkIGJlIHVzZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYmF6ZWxidWlsZC9iYXplbC9pc3N1ZXMvMTc3NzMgZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIG1pZ3JhdGlvbiBpbnN0cnVjdGlvbnMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoSU1RBUkxBUktfU0VNQU5USUNTUAAK4AQKK2V4cGVyaW1lbnRhbF9yZW1vdGVfZmFpbHVyZV93aW5kb3dfaW50ZXJ2YWwQABrKAlRoZSBpbnRlcnZhbCBpbiB3aGljaCB0aGUgZmFpbHVyZSByYXRlIG9mIHRoZSByZW1vdGUgcmVxdWVzdHMgYXJlIGNvbXB1dGVkLiBPbiB6ZXJvIG9yIG5lZ2F0aXZlIHZhbHVlIHRoZSBmYWlsdXJlIGR1cmF0aW9uIGlzIGNvbXB1dGVkIHRoZSB3aG9sZSBkdXJhdGlvbiBvZiB0aGUgZXhlY3V0aW9uLkZvbGxvd2luZyB1bml0cyBjYW4gYmUgdXNlZDogRGF5cyAoZCksIGhvdXJzIChoKSwgbWludXRlcyAobSksIHNlY29uZHMgKHMpLCBhbmQgbWlsbGlzZWNvbmRzIChtcykuIElmIHRoZSB1bml0IGlzIG9taXR0ZWQsIHRoZSB2YWx1ZSBpcyBpbnRlcnByZXRlZCBhcyBzZWNvbmRzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoJRVhFQ1VUSU9OSgZSRU1PVEVQAQrPAwopZXhwZXJpbWVudGFsX2R5bmFtaWNfaWdub3JlX2xvY2FsX3NpZ25hbHMQABr1AVRha2VzIGEgbGlzdCBvZiBPUyBzaWduYWwgbnVtYmVycy4gSWYgYSBsb2NhbCBicmFuY2ggb2YgZHluYW1pYyBleGVjdXRpb24gZ2V0cyBraWxsZWQgd2l0aCBhbnkgb2YgdGhlc2Ugc2lnbmFscywgdGhlIHJlbW90ZSBicmFuY2ggd2lsbCBiZSBhbGxvd2VkIHRvIGZpbmlzaCBpbnN0ZWFkLiBGb3IgcGVyc2lzdGVudCB3b3JrZXJzLCB0aGlzIG9ubHkgYWZmZWN0cyBzaWduYWxzIHRoYXQga2lsbCB0aGUgd29ya2VyIHByb2Nlc3MuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KF0JVSUxEX1RJTUVfT1BUSU1JWkFUSU9OUAEKjQIKBmN4eG9wdBAAGkFBZGRpdGlvbmFsIG9wdGlvbiB0byBwYXNzIHRvIGdjYyB3aGVuIGNvbXBpbGluZyBDKysgc291cmNlIGZpbGVzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToUQUNUSU9OX0NPTU1BTkRfTElORVM6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQriAQomaW5jb21wYXRpYmxlX2VuYWJsZV9wcm9maWxlX2J5X2RlZmF1bHQQARoGTm8tb3AuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgVOT19PUEITSU5DT01QQVRJQkxFX0NIQU5HRUoMVU5ET0NVTUVOVEVEUAAKbwoFc2hvcnQQABpAU2hvdyBvbmx5IHRoZSBuYW1lcyBvZiB0aGUgb3B0aW9ucywgbm90IHRoZWlyIHR5cGVzIG9yIG1lYW5pbmdzLiIEaGVscDAAOg9URVJNSU5BTF9PVVRQVVRKB0xPR0dJTkdQAAr1AgoKa2VlcF9nb2luZxABGqcBQ29udGludWUgYXMgbXVjaCBhcyBwb3NzaWJsZSBhZnRlciBhbiBlcnJvci4gIFdoaWxlIHRoZSB0YXJnZXQgdGhhdCBmYWlsZWQgYW5kIHRob3NlIHRoYXQgZGVwZW5kIG9uIGl0IGNhbm5vdCBiZSBhbmFseXplZCwgb3RoZXIgcHJlcmVxdWlzaXRlcyBvZiB0aGVzZSB0YXJnZXRzIGNhbiBiZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iBHN5bmMiBHRlc3QiBnZlbmRvcioBazAAOhFFQUdFUk5FU1NfVE9fRVhJVEoSRVhFQ1VUSU9OX1NUUkFURUdZUAAK0AIKCGdydGVfdG9wEAAaiQFBIGxhYmVsIHRvIGEgY2hlY2tlZC1pbiBsaWJjIGxpYnJhcnkuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHNlbGVjdGVkIGJ5IHRoZSBjcm9zc3Rvb2wgdG9vbGNoYWluLCBhbmQgeW91IGFsbW9zdCBuZXZlciBuZWVkIHRvIG92ZXJyaWRlIGl0LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQUNUSU9OX0NPTU1BTkRfTElORVM6D0FGRkVDVFNfT1VUUFVUU0oJVE9PTENIQUlOUAEKwAEKGmNvbGxhcHNlX2R1cGxpY2F0ZV9kZWZpbmVzEAEaBW5vLW9wIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgVOT19PUEoMVU5ET0NVTUVOVEVEUAAK1QIKFGJhdGNoX2NwdV9zY2hlZHVsaW5nEAEa8gFPbmx5IG9uIExpbnV4OyB1c2UgJ2JhdGNoJyBDUFUgc2NoZWR1bGluZyBmb3IgQmxhemUuIFRoaXMgcG9saWN5IGlzIHVzZWZ1bCBmb3Igd29ya2xvYWRzIHRoYXQgYXJlIG5vbi1pbnRlcmFjdGl2ZSwgYnV0IGRvIG5vdCB3YW50IHRvIGxvd2VyIHRoZWlyIG5pY2UgdmFsdWUuIFNlZSAnbWFuIDIgc2NoZWRfc2V0c2NoZWR1bGVyJy4gSWYgZmFsc2UsIHRoZW4gQmF6ZWwgZG9lcyBub3QgcGVyZm9ybSBhIHN5c3RlbSBjYWxsLiIHc3RhcnR1cDAAOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OU0oUQkFaRUxfQ0xJRU5UX09QVElPTlNQAArXAgobYW5kcm9pZF9taWdyYXRpb25fdGFnX2NoZWNrEAEajgFJZiBlbmFibGVkLCBzdHJpY3QgdXNhZ2Ugb2YgdGhlIFN0YXJsYXJrIG1pZ3JhdGlvbiB0YWcgaXMgZW5hYmxlZCBmb3IgYW5kcm9pZCBydWxlcy4gUHJlZmVyIHVzaW5nIC0taW5jb21wYXRpYmxlX2Rpc2FibGVfbmF0aXZlX2FuZHJvaWRfcnVsZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhFFQUdFUk5FU1NfVE9fRVhJVEoMVU5ET0NVTUVOVEVEUAAK0AIKK2V4cGVyaW1lbnRhbF9wdWJsaXNoX3BhY2thZ2VfbWV0cmljc19pbl9iZXAQARouV2hldGhlciB0byBwdWJsaXNoIHBhY2thZ2UgbWV0cmljcyBpbiB0aGUgQkVQLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoQQkFaRUxfTU9OSVRPUklOR0oMVU5ET0NVTUVOVEVEUAAKzAMKDGR5bmFtaWNfbW9kZRAAGvkBRGV0ZXJtaW5lcyB3aGV0aGVyIEMrKyBiaW5hcmllcyB3aWxsIGJlIGxpbmtlZCBkeW5hbWljYWxseS4gICdkZWZhdWx0JyBtZWFucyBCYXplbCB3aWxsIGNob29zZSB3aGV0aGVyIHRvIGxpbmsgZHluYW1pY2FsbHkuICAnZnVsbHknIG1lYW5zIGFsbCBsaWJyYXJpZXMgd2lsbCBiZSBsaW5rZWQgZHluYW1pY2FsbHkuICdvZmYnIG1lYW5zIHRoYXQgYWxsIGxpYnJhcmllcyB3aWxsIGJlIGxpbmtlZCBpbiBtb3N0bHkgc3RhdGljIG1vZGUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJUzoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1ABCvACCg1zdGFybGFyazpleHByEAAauAJBIFN0YXJsYXJrIGV4cHJlc3Npb24gdG8gZm9ybWF0IGVhY2ggY29uZmlndXJlZCB0YXJnZXQgaW4gY3F1ZXJ5J3MgLS1vdXRwdXQ9c3RhcmxhcmsgbW9kZS4gVGhlIGNvbmZpZ3VyZWQgdGFyZ2V0IGlzIGJvdW5kIHRvICd0YXJnZXQnLiBJZiBuZWl0aGVyIC0tc3Rhcmxhcms6ZXhwciBub3IgLS1zdGFybGFyazpmaWxlIGlzIHNwZWNpZmllZCwgdGhpcyBvcHRpb24gd2lsbCBkZWZhdWx0IHRvICdzdHIodGFyZ2V0LmxhYmVsKScuIEl0IGlzIGFuIGVycm9yIHRvIHNwZWNpZnkgYm90aCAtLXN0YXJsYXJrOmV4cHIgYW5kIC0tc3Rhcmxhcms6ZmlsZS4iBmNxdWVyeTAAOg9URVJNSU5BTF9PVVRQVVRKBVFVRVJZUAEKjQMKJWluY29tcGF0aWJsZV9ydW5fc2hlbGxfY29tbWFuZF9zdHJpbmcQARpSSWYgc2V0IHRvIHRydWUsIHRoZSBjb21tYW5kIHBhcmFtZXRlciBvZiBhY3Rpb25zLnJ1bl9zaGVsbCB3aWxsIG9ubHkgYWNjZXB0IHN0cmluZyIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUQlVJTERfRklMRV9TRU1BTlRJQ1NCE0lOQ09NUEFUSUJMRV9DSEFOR0VKElNUQVJMQVJLX1NFTUFOVElDU1AACqECCjtleHBlcmltZW50YWxfbGltaXRfYW5kcm9pZF9saW50X3RvX2FuZHJvaWRfY29uc3RyYWluZWRfamF2YRABGixOby1vcCwga2VwdCBvbmx5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTQgxFWFBFUklNRU5UQUxKDVVOQ0FURUdPUklaRURQAAq+AgouZXhwZXJpbWVudGFsX2FuZHJvaWRfcmVzb3VyY2VfbmFtZV9vYmZ1c2NhdGlvbhABGkFFbmFibGVzIG9iZnVzY2F0aW9uIG9mIHJlc291cmNlIG5hbWVzIHdpdGhpbiBhbmRyb2lkX2JpbmFyeSBBUEtzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0IMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAAqWAQoLaW5zdGFsbF9tZDUQABo3VGhpcyBsYXVuY2hlciBvcHRpb24gaXMgaW50ZW5kZWQgZm9yIHVzZSBvbmx5IGJ5IHRlc3RzLiIHc3RhcnR1cDAAOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURToQQkFaRUxfTU9OSVRPUklOR0IGSElEREVOSgxVTkRPQ1VNRU5URURQAQqPBAo2ZXhwZXJpbWVudGFsX3JldGFpbl90ZXN0X2NvbmZpZ3VyYXRpb25fYWNyb3NzX3Rlc3Rvbmx5EAEa9gFXaGVuIGVuYWJsZWQsIC0tdHJpbV90ZXN0X2NvbmZpZ3VyYXRpb24gd2lsbCBub3QgdHJpbSB0aGUgdGVzdCBjb25maWd1cmF0aW9uIGZvciBydWxlcyBtYXJrZWQgdGVzdG9ubHk9MS4gVGhpcyBpcyBtZWFudCB0byByZWR1Y2UgYWN0aW9uIGNvbmZsaWN0IGlzc3VlcyB3aGVuIG5vbi10ZXN0IHJ1bGVzIGRlcGVuZCBvbiBjY190ZXN0IHJ1bGVzLiBObyBlZmZlY3QgaWYgLS10cmltX3Rlc3RfY29uZmlndXJhdGlvbiBpcyBmYWxzZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUIMRVhQRVJJTUVOVEFMShdCVUlMRF9USU1FX09QVElNSVpBVElPTlAACosDCjRleHBlcmltZW50YWxfZXhjbHVkZV9zdGFybGFya19mbGFnc19mcm9tX2V4ZWNfY29uZmlnEAEanQFJZiB0cnVlLCBkb24ndCBwcm9wYWdhdGUgc3RhcmxhcmsgZmxhZ3MgdG8gdGhlIGV4ZWMgdHJhbnNpdGlvbiBhdCBkZWZhdWx0OyBvbmx5IHByb3BhZ2F0ZSBzdGFybGFyayBmbGFncyBzcGVjaWZpZWQgaW4gYC0tZXhwZXJpbWVudGFsX3Byb3BhZ2F0ZV9jdXN0b21fZmxhZ2AuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNCDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAKYQoNaG9zdF9qdm1fYXJncxAAGilGbGFncyB0byBwYXNzIHRvIHRoZSBKVk0gZXhlY3V0aW5nIEJsYXplLiIHc3RhcnR1cDABOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEK2AEKE2lnbm9yZV9hbGxfcmNfZmlsZXMQARqLAURpc2FibGVzIGFsbCByYyBmaWxlcywgcmVnYXJkbGVzcyBvZiB0aGUgdmFsdWVzIG9mIG90aGVyIHJjLW1vZGlmeWluZyBmbGFncywgZXZlbiBpZiB0aGVzZSBmbGFncyBjb21lIGxhdGVyIGluIHRoZSBsaXN0IG9mIHN0YXJ0dXAgb3B0aW9ucy4iB3N0YXJ0dXAwADoOQ0hBTkdFU19JTlBVVFNKFEJBWkVMX0NMSUVOVF9PUFRJT05TUAAKowMKD2Jlc19yZXN1bHRzX3VybBAAGqIBU3BlY2lmaWVzIHRoZSBiYXNlIFVSTCB3aGVyZSBhIHVzZXIgY2FuIHZpZXcgdGhlIGluZm9ybWF0aW9uIHN0cmVhbWVkIHRvIHRoZSBCRVMgYmFja2VuZC4gQmF6ZWwgd2lsbCBvdXRwdXQgdGhlIFVSTCBhcHBlbmRlZCBieSB0aGUgaW52b2NhdGlvbiBpZCB0byB0aGUgdGVybWluYWwuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg9URVJNSU5BTF9PVVRQVVRKB0xPR0dJTkdQAQrVAgoYaW50ZXJmYWNlX3NoYXJlZF9vYmplY3RzEAEablVzZSBpbnRlcmZhY2Ugc2hhcmVkIG9iamVjdHMgaWYgc3VwcG9ydGVkIGJ5IHRoZSB0b29sY2hhaW4uIEFsbCBFTEYgdG9vbGNoYWlucyBjdXJyZW50bHkgc3VwcG9ydCB0aGlzIHNldHRpbmcuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJUzoPQUZGRUNUU19PVVRQVVRTOg9BRkZFQ1RTX09VVFBVVFNKCVRPT0xDSEFJTlAACtwCChxpbmNvbXBhdGlibGVfZGlzYWJsZV9ub2NvcHRzEAEae1doZW4gZW5hYmxlZCwgaXQgcmVtb3ZlcyBub2NvcHRzIGF0dHJpYnV0ZSBmcm9tIEMrKyBydWxlcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iYXplbGJ1aWxkL2JhemVsL2lzc3Vlcy84NzA2IGZvciBkZXRhaWxzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQUNUSU9OX0NPTU1BTkRfTElORVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKDFVORE9DVU1FTlRFRFAACvMECh1hbmRyb2lkX21hbmlmZXN0X21lcmdlcl9vcmRlchAAGpUDU2V0cyB0aGUgb3JkZXIgb2YgbWFuaWZlc3RzIHBhc3NlZCB0byB0aGUgbWFuaWZlc3QgbWVyZ2VyIGZvciBBbmRyb2lkIGJpbmFyaWVzLiBBTFBIQUJFVElDQUwgbWVhbnMgbWFuaWZlc3RzIGFyZSBzb3J0ZWQgYnkgcGF0aCByZWxhdGl2ZSB0byB0aGUgZXhlY3Jvb3QuIEFMUEhBQkVUSUNBTF9CWV9DT05GSUdVUkFUSU9OIG1lYW5zIG1hbmlmZXN0cyBhcmUgc29ydGVkIGJ5IHBhdGhzIHJlbGF0aXZlIHRvIHRoZSBjb25maWd1cmF0aW9uIGRpcmVjdG9yeSB3aXRoaW4gdGhlIG91dHB1dCBkaXJlY3RvcnkuIERFUEVOREVOQ1kgbWVhbnMgbWFuaWZlc3RzIGFyZSBvcmRlcmVkIHdpdGggZWFjaCBsaWJyYXJ5J3MgbWFuaWZlc3QgY29taW5nIGJlZm9yZSB0aGUgbWFuaWZlc3RzIG9mIGl0cyBkZXBlbmRlbmNpZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRBQ1RJT05fQ09NTUFORF9MSU5FUzoJRVhFQ1VUSU9OShFPVVRQVVRfUEFSQU1FVEVSU1ABCrEBCgtmYXRfYXBrX2NwdRAAGgVOby1vcCIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BKDFVORE9DVU1FTlRFRFABCqcCCiBjY19wcm90b19saWJyYXJ5X2hlYWRlcl9zdWZmaXhlcxAAGkJTZXRzIHRoZSBzdWZmaXhlcyBvZiBoZWFkZXIgZmlsZXMgdGhhdCBhIGNjX3Byb3RvX2xpYnJhcnkgY3JlYXRlcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUUzoUTE9BRElOR19BTkRfQU5BTFlTSVNKEE9VVFBVVF9TRUxFQ1RJT05QAQqlAQoWcHJpbnRfYWN0aW9uX21uZW1vbmljcxAAGl9MaXN0cyB3aGljaCBtbmVtb25pY3MgdG8gZmlsdGVyIHByaW50X2FjdGlvbiBkYXRhIGJ5LCBubyBmaWx0ZXJpbmcgdGFrZXMgcGxhY2Ugd2hlbiBsZWZ0IGVtcHR5LiIMcHJpbnRfYWN0aW9uMAE6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQqPBAosZXhwZXJpbWVudGFsX3Rocm90dGxlX3JlbW90ZV9hY3Rpb25fYnVpbGRpbmcQARrkAVdoZXRoZXIgdG8gdGhyb3R0bGUgdGhlIGJ1aWxkaW5nIG9mIHJlbW90ZSBhY3Rpb24gdG8gYXZvaWQgT09NLiBEZWZhdWx0cyB0byB0cnVlLgoKVGhpcyBpcyBhIHRlbXBvcmFyeSBmbGFnIHRvIGFsbG93IHVzZXJzIHN3aXRjaCBvZmYgdGhlIGJlaGF2aW91ci4gT25jZSBCYXplbCBpcyBzbWFydCBlbm91Z2ggYWJvdXQgdGhlIFJBTS9DUFUgdXNhZ2VzLCB0aGlzIGZsYWcgd2lsbCBiZSByZW1vdmVkLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoJRVhFQ1VUSU9OQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFAACr8CCixpbmNvbXBhdGlibGVfY2hlY2tfdmlzaWJpbGl0eV9mb3JfdG9vbGNoYWlucxABGkpJZiBlbmFibGVkLCB2aXNpYmlsaXR5IGNoZWNraW5nIGFsc28gYXBwbGllcyB0byB0b29sY2hhaW4gaW1wbGVtZW50YXRpb25zLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQlVJTERfRklMRV9TRU1BTlRJQ1NCE0lOQ09NUEFUSUJMRV9DSEFOR0VKEElOUFVUX1NUUklDVE5FU1NQAArjAgotZXhwZXJpbWVudGFsX2NvbGxlY3RfbG9hZF9hdmVyYWdlX2luX3Byb2ZpbGVyEAEaRElmIGVuYWJsZWQsIHRoZSBwcm9maWxlciBjb2xsZWN0cyB0aGUgc3lzdGVtJ3Mgb3ZlcmFsbCBsb2FkIGF2ZXJhZ2UuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhBCQVpFTF9NT05JVE9SSU5HSgdMT0dHSU5HUAAK5gIKEnByb3RvOnJ1bGVfY2xhc3NlcxABGpoCUG9wdWxhdGUgdGhlIHJ1bGVfY2xhc3Nfa2V5IGZpZWxkIG9mIGVhY2ggcnVsZTsgYW5kIGZvciB0aGUgZmlyc3QgcnVsZSB3aXRoIGEgZ2l2ZW4gcnVsZV9jbGFzc19rZXksIGFsc28gcG9wdWxhdGUgaXRzIHJ1bGVfY2xhc3NfaW5mbyBwcm90byBmaWVsZC4gVGhlIHJ1bGVfY2xhc3Nfa2V5IGZpZWxkIHVuaXF1ZWx5IGlkZW50aWZpZXMgYSBydWxlIGNsYXNzLCBhbmQgdGhlIHJ1bGVfY2xhc3NfaW5mbyBmaWVsZCBpcyBhIFN0YXJkb2MtZm9ybWF0IHJ1bGUgY2xhc3MgQVBJIGRlZmluaXRpb24uIgZhcXVlcnkiBmNxdWVyeSIFcXVlcnkwADoPVEVSTUlOQUxfT1VUUFVUSgVRVUVSWVAACp0DCiBleHBlcmltZW50YWxfcHJlZmVyX211dHVhbF94Y29kZRABGr4BSWYgdHJ1ZSwgdXNlIHRoZSBtb3N0IHJlY2VudCBYY29kZSB0aGF0IGlzIGF2YWlsYWJsZSBib3RoIGxvY2FsbHkgYW5kIHJlbW90ZWx5LiBJZiBmYWxzZSwgb3IgaWYgdGhlcmUgYXJlIG5vIG11dHVhbCBhdmFpbGFibGUgdmVyc2lvbnMsIHVzZSB0aGUgbG9jYWwgWGNvZGUgdmVyc2lvbiBzZWxlY3RlZCB2aWEgeGNvZGUtc2VsZWN0LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEVCDEVYUEVSSU1FTlRBTEoJVE9PTENIQUlOUAAKyQEKBHJlcG8QABqTAU9ubHkgZmV0Y2hlcyB0aGUgc3BlY2lmaWVkIHJlcG9zaXRvcnksIHdoaWNoIGNhbiBiZSBlaXRoZXIge0BhcHBhcmVudF9yZXBvX25hbWV9IG9yIHtAQGNhbm9uaWNhbF9yZXBvX25hbWV9LiBPbmx5IHdvcmtzIHdoZW4gLS1lbmFibGVfYnpsbW9kIGlzIG9uLiIFZmV0Y2giBnZlbmRvcjABOg5DSEFOR0VTX0lOUFVUU0oGQlpMTU9EUAEKvQUKKWJ1aWxkX2V2ZW50X21heF9uYW1lZF9zZXRfb2ZfZmlsZV9lbnRyaWVzEAAaogNUaGUgbWF4aW11bSBudW1iZXIgb2YgZW50cmllcyBmb3IgYSBzaW5nbGUgbmFtZWRfc2V0X29mX2ZpbGVzIGV2ZW50OyB2YWx1ZXMgc21hbGxlciB0aGFuIDIgYXJlIGlnbm9yZWQgYW5kIG5vIGV2ZW50IHNwbGl0dGluZyBpcyBwZXJmb3JtZWQuIFRoaXMgaXMgaW50ZW5kZWQgZm9yIGxpbWl0aW5nIHRoZSBtYXhpbXVtIGV2ZW50IHNpemUgaW4gdGhlIGJ1aWxkIGV2ZW50IHByb3RvY29sLCBhbHRob3VnaCBpdCBkb2VzIG5vdCBkaXJlY3RseSBjb250cm9sIGV2ZW50IHNpemUuIFRoZSB0b3RhbCBldmVudCBzaXplIGlzIGEgZnVuY3Rpb24gb2YgdGhlIHN0cnVjdHVyZSBvZiB0aGUgc2V0IGFzIHdlbGwgYXMgdGhlIGZpbGUgYW5kIHVyaSBsZW5ndGhzLCB3aGljaCBtYXkgaW4gdHVybiBkZXBlbmQgb24gdGhlIGhhc2ggZnVuY3Rpb24uIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg9BRkZFQ1RTX09VVFBVVFNKB0xPR0dJTkdQAQqKAgoNaG9zdF9qYXZhY29wdBAAGllBZGRpdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byBqYXZhYyB3aGVuIGJ1aWxkaW5nIHRvb2xzIHRoYXQgYXJlIGV4ZWN1dGVkIGR1cmluZyBhIGJ1aWxkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCvQCCilleHBlcmltZW50YWxfdG90YWxfd29ya2VyX21lbW9yeV9saW1pdF9tYhAAGntJZiB0aGlzIGxpbWl0IGlzIGdyZWF0ZXIgdGhhbiB6ZXJvIGlkbGUgd29ya2VycyBtaWdodCBiZSBraWxsZWQgaWYgdGhlIHRvdGFsIG1lbW9yeSB1c2FnZSBvZiBhbGwgIHdvcmtlcnMgZXhjZWVkIHRoZSBsaW1pdC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTjojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlNKEkVYRUNVVElPTl9TVFJBVEVHWVABCugBCixpbmNvbXBhdGlibGVfZG9udF91c2VfamF2YXNvdXJjZWluZm9wcm92aWRlchABGgVOby1vcCIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BCE0lOQ09NUEFUSUJMRV9DSEFOR0VKDVVOQ0FURUdPUklaRURQAArXAwoxZXhwZXJpbWVudGFsX292ZXJyaWRlX25hbWVfcGxhdGZvcm1faW5fb3V0cHV0X2RpchAAGucBRWFjaCBlbnRyeSBzaG91bGQgYmUgb2YgdGhlIGZvcm0gbGFiZWw9dmFsdWUgd2hlcmUgbGFiZWwgcmVmZXJzIHRvIGEgcGxhdGZvcm0gYW5kIHZhbHVlcyBpcyB0aGUgZGVzaXJlZCBzaG9ydG5hbWUgdG8gdXNlIGluIHRoZSBvdXRwdXQgcGF0aC4gT25seSB1c2VkIHdoZW4gLS1leHBlcmltZW50YWxfcGxhdGZvcm1faW5fb3V0cHV0X2RpciBpcyB0cnVlLiBIYXMgaGlnaGVzdCBuYW1pbmcgcHJpb3JpdHkuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOg9BRkZFQ1RTX09VVFBVVFNCDEVYUEVSSU1FTlRBTEoRT1VUUFVUX1BBUkFNRVRFUlNQAQqQAwoccmVtb3RlX3Jlc3VsdF9jYWNoZV9wcmlvcml0eRAAGosBVGhlIHJlbGF0aXZlIHByaW9yaXR5IG9mIHJlbW90ZSBhY3Rpb25zIHRvIGJlIHN0b3JlZCBpbiByZW1vdGUgY2FjaGUuIFRoZSBzZW1hbnRpY3Mgb2YgdGhlIHBhcnRpY3VsYXIgcHJpb3JpdHkgdmFsdWVzIGFyZSBzZXJ2ZXItZGVwZW5kZW50LiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoGUkVNT1RFUAEKmQUKD292ZXJyaWRlX21vZHVsZRAAGqEDT3ZlcnJpZGUgYSBtb2R1bGUgd2l0aCBhIGxvY2FsIHBhdGggaW4gdGhlIGZvcm0gb2YgPG1vZHVsZSBuYW1lPj08cGF0aD4uIElmIHRoZSBnaXZlbiBwYXRoIGlzIGFuIGFic29sdXRlIHBhdGgsIGl0IHdpbGwgYmUgdXNlZCBhcyBpdCBpcy4gSWYgdGhlIGdpdmVuIHBhdGggaXMgYSByZWxhdGl2ZSBwYXRoLCBpdCBpcyByZWxhdGl2ZSB0byB0aGUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeS4gSWYgdGhlIGdpdmVuIHBhdGggc3RhcnRzIHdpdGggJyV3b3Jrc3BhY2UlLCBpdCBpcyByZWxhdGl2ZSB0byB0aGUgd29ya3NwYWNlIHJvb3QsIHdoaWNoIGlzIHRoZSBvdXRwdXQgb2YgYGJhemVsIGluZm8gd29ya3NwYWNlYC4gSWYgdGhlIGdpdmVuIHBhdGggaXMgZW1wdHksIHRoZW4gcmVtb3ZlIGFueSBwcmV2aW91cyBvdmVycmlkZXMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjABOgdVTktOT1dOSgZCWkxNT0RQAQr2BAoecmVwb3NpdG9yaWVzX3dpdGhvdXRfYXV0b2xvYWRzEAAaqAJBIGxpc3Qgb2YgYWRkaXRpb25hbCByZXBvc2l0b3JpZXMgKGJleW9uZCB0aGUgaGFyZGNvZGVkIG9uZXMgQmF6ZWwga25vd3MgYWJvdXQpIHdoZXJlIGF1dG9sb2FkcyBhcmUgbm90IHRvIGJlIGFkZGVkLiBUaGlzIHNob3VsZCB0eXBpY2FsbHkgY29udGFpbiByZXBvc2l0b3JpZXMgdGhhdCBhcmUgdHJhbnNpdGl2ZWx5IGRlcGVuZGVkIG9uIGJ5IGEgcmVwb3NpdG9yeSB0aGF0IG1heSBiZSBsb2FkZWQgYXV0b21hdGljYWxseSAoYW5kIHdoaWNoIGNhbiB0aGVyZWZvcmUgcG90ZW50aWFsbHkgY3JlYXRlIGEgY3ljbGUpLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEU6FEJVSUxEX0ZJTEVfU0VNQU5USUNTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShJTVEFSTEFSS19TRU1BTlRJQ1NQAQqIAQoVbW9iaWxlX2luc3RhbGxfYXNwZWN0EAAaJVRoZSBhc3BlY3QgdG8gdXNlIGZvciBtb2JpbGUtaW5zdGFsbC4iDm1vYmlsZS1pbnN0YWxsMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTOg5DSEFOR0VTX0lOUFVUU0oMVU5ET0NVTUVOVEVEUAEK7AMKEXBsYXRmb3JtX21hcHBpbmdzEAAagQJUaGUgbG9jYXRpb24gb2YgYSBtYXBwaW5nIGZpbGUgdGhhdCBkZXNjcmliZXMgd2hpY2ggcGxhdGZvcm0gdG8gdXNlIGlmIG5vbmUgaXMgc2V0IG9yIHdoaWNoIGZsYWdzIHRvIHNldCB3aGVuIGEgcGxhdGZvcm0gYWxyZWFkeSBleGlzdHMuIE11c3QgYmUgcmVsYXRpdmUgdG8gdGhlIG1haW4gd29ya3NwYWNlIHJvb3QuIERlZmF1bHRzIHRvICdwbGF0Zm9ybV9tYXBwaW5ncycgKGEgZmlsZSBkaXJlY3RseSB1bmRlciB0aGUgd29ya3NwYWNlIHJvb3QpLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOg5DSEFOR0VTX0lOUFVUUzoUTE9BRElOR19BTkRfQU5BTFlTSVNCCUlNTVVUQUJMRUoJVE9PTENIQUlOUAEKsAcKJmV4cGVyaW1lbnRhbF9keW5hbWljX2xvY2FsX2xvYWRfZmFjdG9yEAAauQVDb250cm9scyBob3cgbXVjaCBsb2FkIGZyb20gZHluYW1pYyBleGVjdXRpb24gdG8gcHV0IG9uIHRoZSBsb2NhbCBtYWNoaW5lLiBUaGlzIGZsYWcgYWRqdXN0cyBob3cgbWFueSBhY3Rpb25zIGluIGR5bmFtaWMgZXhlY3V0aW9uIHdlIHdpbGwgc2NoZWR1bGUgY29uY3VycmVudGx5LiBJdCBpcyBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIENQVXMgQmxhemUgdGhpbmtzIGlzIGF2YWlsYWJsZSwgd2hpY2ggY2FuIGJlIGNvbnRyb2xsZWQgd2l0aCB0aGUgLS1sb2NhbF9jcHVfcmVzb3VyY2VzIGZsYWcuCklmIHRoaXMgZmxhZyBpcyAwLCBhbGwgYWN0aW9ucyBhcmUgc2NoZWR1bGVkIGxvY2FsbHkgaW1tZWRpYXRlbHkuIElmID4gMCwgdGhlIGFtb3VudCBvZiBhY3Rpb25zIHNjaGVkdWxlZCBsb2NhbGx5IGlzIGxpbWl0ZWQgYnkgdGhlIG51bWJlciBvZiBDUFVzIGF2YWlsYWJsZS4gSWYgPCAxLCB0aGUgbG9hZCBmYWN0b3IgaXMgdXNlZCB0byByZWR1Y2UgdGhlIG51bWJlciBvZiBsb2NhbGx5IHNjaGVkdWxlZCBhY3Rpb25zIHdoZW4gdGhlIG51bWJlciBvZiBhY3Rpb25zIHdhaXRpbmcgdG8gc2NoZWR1bGUgaXMgaGlnaC4gVGhpcyBsZXNzZW5zIHRoZSBsb2FkIG9uIHRoZSBsb2NhbCBtYWNoaW5lIGluIHRoZSBjbGVhbiBidWlsZCBjYXNlLCB3aGVyZSB0aGUgbG9jYWwgbWFjaGluZSBkb2VzIG5vdCBjb250cmlidXRlIG11Y2guIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT046I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TShJFWEVDVVRJT05fU1RSQVRFR1lQAQrsAwoPcmVtb3RlX2V4ZWN1dG9yEAAa9AFIT1NUIG9yIEhPU1Q6UE9SVCBvZiBhIHJlbW90ZSBleGVjdXRpb24gZW5kcG9pbnQuIFRoZSBzdXBwb3J0ZWQgc2NoZW1hcyBhcmUgZ3JwYywgZ3JwY3MgKGdycGMgd2l0aCBUTFMgZW5hYmxlZCkgYW5kIHVuaXggKGxvY2FsIFVOSVggc29ja2V0cykuIElmIG5vIHNjaGVtYSBpcyBwcm92aWRlZCBCYXplbCB3aWxsIGRlZmF1bHQgdG8gZ3JwY3MuIFNwZWNpZnkgZ3JwYzovLyBvciB1bml4OiBzY2hlbWEgdG8gZGlzYWJsZSBUTFMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgZSRU1PVEVQAQrnAgoeYWx3YXlzX3Byb2ZpbGVfc2xvd19vcGVyYXRpb25zEAEaNVdoZXRoZXIgcHJvZmlsaW5nIHNsb3cgb3BlcmF0aW9ucyBpcyBhbHdheXMgdHVybmVkIG9uIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg9BRkZFQ1RTX09VVFBVVFM6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05KDFVORE9DVU1FTlRFRFAACvsCChFjc19mZG9faW5zdHJ1bWVudBAAGrkBR2VuZXJhdGUgYmluYXJpZXMgd2l0aCBjb250ZXh0IHNlbnNpdGl2ZSBGRE8gaW5zdHJ1bWVudGF0aW9uLiBXaXRoIENsYW5nL0xMVk0gY29tcGlsZXIsIGl0IGFsc28gYWNjZXB0cyB0aGUgZGlyZWN0b3J5IG5hbWUgdW5kZXIgd2hpY2ggdGhlIHJhdyBwcm9maWxlIGZpbGUocykgd2lsbCBiZSBkdW1wZWQgYXQgcnVudGltZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQqGAgoJcmNfc291cmNlEAAaACIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wAToOQ0hBTkdFU19JTlBVVFNCBkhJRERFTkoMVU5ET0NVTUVOVEVEUAEKzwIKJ2JyZWFrX2J1aWxkX29uX3BhcmFsbGVsX2RleDJvYXRfZmFpbHVyZRABGm9JZiB0cnVlIGRleDJvYXQgYWN0aW9uIGZhaWx1cmVzIHdpbGwgY2F1c2UgdGhlIGJ1aWxkIHRvIGJyZWFrIGluc3RlYWQgb2YgZXhlY3V0aW5nIGRleDJvYXQgZHVyaW5nIHRlc3QgcnVudGltZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQgxFWFBFUklNRU5UQUxKB1RFU1RJTkdQAArQAwomZXhwZXJpbWVudGFsX2lzb2xhdGVkX2V4dGVuc2lvbl91c2FnZXMQARqoAUlmIHRydWUsIGVuYWJsZXMgdGhlIDxjb2RlPmlzb2xhdGU8L2NvZGU+IHBhcmFtZXRlciBpbiB0aGUgPGEgaHJlZj0iaHR0cHM6Ly9iYXplbC5idWlsZC9ydWxlcy9saWIvZ2xvYmFscy9tb2R1bGUjdXNlX2V4dGVuc2lvbiI+PGNvZGU+dXNlX2V4dGVuc2lvbjwvY29kZT48L2E+IGZ1bmN0aW9uLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUTE9BRElOR19BTkRfQU5BTFlTSVNKElNUQVJMQVJLX1NFTUFOVElDU1AACpoFCiJub25faW5jcmVtZW50YWxfcGVyX3RhcmdldF9kZXhvcHRzEAAargNkeCBmbGFncyB0aGF0IHRoYXQgcHJldmVudCBpbmNyZW1lbnRhbCBkZXhpbmcgZm9yIGJpbmFyeSB0YXJnZXRzIHRoYXQgbGlzdCBhbnkgb2YgdGhlIGZsYWdzIGxpc3RlZCBoZXJlIGluIHRoZWlyICdkZXhvcHRzJyBhdHRyaWJ1dGUsIHdoaWNoIGFyZSBpZ25vcmVkIHdpdGggaW5jcmVtZW50YWwgZGV4aW5nIChzdXBlcnNlZGluZyAtLWRleG9wdHNfc3VwcG9ydGVkX2luX2luY3JlbWVudGFsX2RleGluZykuICBEZWZhdWx0cyB0byAtLXBvc2l0aW9ucyBmb3Igc2FmZXR5IGJ1dCBjYW4gaW4gZ2VuZXJhbCBiZSB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgbGlzdGVkIGR4IGZsYWdzIGFyZSBob25vcmVkLCB3aXRoIGFkZGl0aW9uYWwgYnVpbGQgbGF0ZW5jeS4gIFBsZWFzZSBub3RpZnkgdXMgaWYgeW91IGZpbmQgeW91cnNlbGYgbmVlZGluZyB0aGlzIGZsYWcuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJUzoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEVKDFVORE9DVU1FTlRFRFABCsoDChB1aV9hY3Rpb25zX3Nob3duEAAawgFOdW1iZXIgb2YgY29uY3VycmVudCBhY3Rpb25zIHNob3duIGluIHRoZSBkZXRhaWxlZCBwcm9ncmVzcyBiYXI7IGVhY2ggYWN0aW9uIGlzIHNob3duIG9uIGEgc2VwYXJhdGUgbGluZS4gVGhlIHByb2dyZXNzIGJhciBhbHdheXMgc2hvd3MgYXQgbGVhc3Qgb25lIG9uZSwgYWxsIG51bWJlcnMgbGVzcyB0aGFuIDEgYXJlIG1hcHBlZCB0byAxLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPVEVSTUlOQUxfT1VUUFVUSg1VTkNBVEVHT1JJWkVEUAEK5gEKFnRlc3RfcmVzdWx0X2V4cGlyYXRpb24QABosVGhpcyBvcHRpb24gaXMgZGVwcmVjYXRlZCBhbmQgaGFzIG5vIGVmZmVjdC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQr4Agocb2JqY19lbmFibGVfYmluYXJ5X3N0cmlwcGluZxABGqYBV2hldGhlciB0byBwZXJmb3JtIHN5bWJvbCBhbmQgZGVhZC1jb2RlIHN0cmlwcGluZ3Mgb24gbGlua2VkIGJpbmFyaWVzLiBCaW5hcnkgc3RyaXBwaW5ncyB3aWxsIGJlIHBlcmZvcm1lZCBpZiBib3RoIHRoaXMgZmxhZyBhbmQgLS1jb21waWxhdGlvbl9tb2RlPW9wdCBhcmUgc3BlY2lmaWVkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQUNUSU9OX0NPTU1BTkRfTElORVNKEU9VVFBVVF9QQVJBTUVURVJTUAAKlQEKC2Zvcl9jb21tYW5kEAAaOlRoZSBjb21tYW5kIGZvciB3aGljaCB0aGUgb3B0aW9ucyBzaG91bGQgYmUgY2Fub25pY2FsaXplZC4iEmNhbm9uaWNhbGl6ZS1mbGFnczAAOg9BRkZFQ1RTX09VVFBVVFM6D1RFUk1JTkFMX09VVFBVVEoOR0VORVJJQ19JTlBVVFNQAQqLAgoPY29tYmluZWRfcmVwb3J0EAAaWFNwZWNpZmllcyBkZXNpcmVkIGN1bXVsYXRpdmUgY292ZXJhZ2UgcmVwb3J0IHR5cGUuIEF0IHRoaXMgcG9pbnQgb25seSBMQ09WIGlzIHN1cHBvcnRlZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQqwAgoUdmVyYm9zZV9leHBsYW5hdGlvbnMQARp2SW5jcmVhc2VzIHRoZSB2ZXJib3NpdHkgb2YgdGhlIGV4cGxhbmF0aW9ucyBpc3N1ZWQgaWYgLS1leHBsYWluIGlzIGVuYWJsZWQuIEhhcyBubyBlZmZlY3QgaWYgLS1leHBsYWluIGlzIG5vdCBlbmFibGVkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAAK9gIKBWZldGNoEAEaugFBbGxvd3MgdGhlIGNvbW1hbmQgdG8gZmV0Y2ggZXh0ZXJuYWwgZGVwZW5kZW5jaWVzLiBJZiBzZXQgdG8gZmFsc2UsIHRoZSBjb21tYW5kIHdpbGwgdXRpbGl6ZSBhbnkgY2FjaGVkIHZlcnNpb24gb2YgdGhlIGRlcGVuZGVuY3ksIGFuZCBpZiBub25lIGV4aXN0cywgdGhlIGNvbW1hbmQgd2lsbCByZXN1bHQgaW4gZmFpbHVyZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIEc3luYyIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAAqqAgoMd2F0Y2hvc19jcHVzEAAaUENvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGFyY2hpdGVjdHVyZXMgZm9yIHdoaWNoIHRvIGJ1aWxkIEFwcGxlIHdhdGNoT1MgYmluYXJpZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURToUTE9BRElOR19BTkRfQU5BTFlTSVNKEU9VVFBVVF9QQVJBTUVURVJTUAEK8QMKFmdjX3RocmFzaGluZ190aHJlc2hvbGQQABrKAVRoZSBwZXJjZW50IG9mIHRlbnVyZWQgc3BhY2Ugb2NjdXBpZWQgKDAtMTAwKSBhYm92ZSB3aGljaCBHY1RocmFzaGluZ0RldGVjdG9yIGNvbnNpZGVycyBtZW1vcnkgcHJlc3N1cmUgZXZlbnRzIGFnYWluc3QgaXRzIGxpbWl0cyAoLS1nY190aHJhc2hpbmdfbGltaXRzKS4gSWYgc2V0IHRvIDEwMCwgR2NUaHJhc2hpbmdEZXRlY3RvciBpcyBkaXNhYmxlZC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TShJFWEVDVVRJT05fU1RSQVRFR1lQAQrrAwoVbWF4X3Rlc3Rfb3V0cHV0X2J5dGVzEAAalwJTcGVjaWZpZXMgbWF4aW11bSBwZXItdGVzdC1sb2cgc2l6ZSB0aGF0IGNhbiBiZSBlbWl0dGVkIHdoZW4gLS10ZXN0X291dHB1dCBpcyAnZXJyb3JzJyBvciAnYWxsJy4gVXNlZnVsIGZvciBhdm9pZGluZyBvdmVyd2hlbG1pbmcgdGhlIG91dHB1dCB3aXRoIGV4Y2Vzc2l2ZWx5IG5vaXN5IHRlc3Qgb3V0cHV0LiBUaGUgdGVzdCBoZWFkZXIgaXMgaW5jbHVkZWQgaW4gdGhlIGxvZyBzaXplLiBOZWdhdGl2ZSB2YWx1ZXMgaW1wbHkgbm8gbGltaXQuIE91dHB1dCBpcyBhbGwgb3Igbm90aGluZy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6C1RFU1RfUlVOTkVSOg9URVJNSU5BTF9PVVRQVVQ6CUVYRUNVVElPTkoHTE9HR0lOR1ABCtcDChljaGVja19iYXplbF9jb21wYXRpYmlsaXR5EAAayAFDaGVjayBiYXplbCB2ZXJzaW9uIGNvbXBhdGliaWxpdHkgb2YgQmF6ZWwgbW9kdWxlcy4gVmFsaWQgdmFsdWVzIGFyZSBgZXJyb3JgIHRvIGVzY2FsYXRlIGl0IHRvIGEgcmVzb2x1dGlvbiBmYWlsdXJlLCBgb2ZmYCB0byBkaXNhYmxlIHRoZSBjaGVjaywgb3IgYHdhcm5pbmdgIHRvIHByaW50IGEgd2FybmluZyB3aGVuIG1pc21hdGNoIGRldGVjdGVkLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUTE9BRElOR19BTkRfQU5BTFlTSVNKBkJaTE1PRFABCvoECjlpbmNvbXBhdGlibGVfc2ltcGxpZnlfdW5jb25kaXRpb25hbF9zZWxlY3RzX2luX3J1bGVfYXR0cnMQARqqAklmIHRydWUsIHNpbXBsaWZ5IGNvbmZpZ3VyYWJsZSBydWxlIGF0dHJpYnV0ZXMgd2hpY2ggY29udGFpbiBvbmx5IHVuY29uZGl0aW9uYWwgc2VsZWN0czsgZm9yIGV4YW1wbGUsIGlmIFsiYSJdICsgc2VsZWN0KCIvL2NvbmRpdGlvbnM6ZGVmYXVsdCIsIFsiYiJdKSBpcyBhc3NpZ25lZCB0byBhIHJ1bGUgYXR0cmlidXRlLCBpdCBpcyBzdG9yZWQgYXMgWyJhIiwgImIiXS4gVGhpcyBvcHRpb24gZG9lcyBub3QgYWZmZWN0IGF0dHJpYnV0ZXMgb2Ygc3ltYm9saWMgbWFjcm9zIG9yIGF0dHJpYnV0ZSBkZWZhdWx0IHZhbHVlcy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShJTVEFSTEFSS19TRU1BTlRJQ1NQAArDAgoNeGNvZGVfdmVyc2lvbhAAGoUBSWYgc3BlY2lmaWVkLCB1c2VzIFhjb2RlIG9mIHRoZSBnaXZlbiB2ZXJzaW9uIGZvciByZWxldmFudCBidWlsZCBhY3Rpb25zLiBJZiB1bnNwZWNpZmllZCwgdXNlcyB0aGUgZXhlY3V0b3IgZGVmYXVsdCB2ZXJzaW9uIG9mIFhjb2RlLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEVKCVRPT0xDSEFJTlABCpMDChdhbGxvd19hbmFseXNpc19mYWlsdXJlcxABGsIBSWYgdHJ1ZSwgYW4gYW5hbHlzaXMgZmFpbHVyZSBvZiBhIHJ1bGUgdGFyZ2V0IHJlc3VsdHMgaW4gdGhlIHRhcmdldCdzIHByb3BhZ2F0aW9uIG9mIGFuIGluc3RhbmNlIG9mIEFuYWx5c2lzRmFpbHVyZUluZm8gY29udGFpbmluZyB0aGUgZXJyb3IgZGVzY3JpcHRpb24sIGluc3RlYWQgb2YgcmVzdWx0aW5nIGluIGEgYnVpbGQgZmFpbHVyZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQgxFWFBFUklNRU5UQUxKB1RFU1RJTkdQAAqhAgpAZXhwZXJpbWVudGFsX2V4ZWN1dGlvbl9ncmFwaF9lbmFibGVfZWRnZXNfZnJvbV9maWxld3JpdGVfYWN0aW9ucxABGj5IYW5kbGUgZWRnZXMgZnJvbSBmaWxld3JpdGUgYWN0aW9ucyB0byB0aGVpciBpbnB1dHMgY29ycmVjdGx5LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoMVU5ET0NVTUVOVEVEUAAKtAQKGXJlY29yZF9mdWxsX3Byb2ZpbGVyX2RhdGEQARqoAkJ5IGRlZmF1bHQsIEJhemVsIHByb2ZpbGVyIHdpbGwgcmVjb3JkIG9ubHkgYWdncmVnYXRlZCBkYXRhIGZvciBmYXN0IGJ1dCBudW1lcm91cyBldmVudHMgKHN1Y2ggYXMgc3RhdHRpbmcgdGhlIGZpbGUpLiBJZiB0aGlzIG9wdGlvbiBpcyBlbmFibGVkLCBwcm9maWxlciB3aWxsIHJlY29yZCBlYWNoIGV2ZW50IC0gcmVzdWx0aW5nIGluIG1vcmUgcHJlY2lzZSBwcm9maWxpbmcgZGF0YSBidXQgTEFSR0UgcGVyZm9ybWFuY2UgaGl0LiBPcHRpb24gb25seSBoYXMgZWZmZWN0IGlmIC0tcHJvZmlsZSB1c2VkIGFzIHdlbGwuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhBCQVpFTF9NT05JVE9SSU5HSgdMT0dHSU5HUAAKkQEKBmN5Y2xlcxABGl5Qb2ludHMgb3V0IGRlcGVuZGVuY3kgY3ljbGVzIGluc2lkZSB0aGUgZGlzcGxheWVkIHRyZWUsIHdoaWNoIGFyZSBub3JtYWxseSBpZ25vcmVkIGJ5IGRlZmF1bHQuIgNtb2QwADoPVEVSTUlOQUxfT1VUUFVUSgtNT0RfQ09NTUFORFAACt4ECjZpbmNvbXBhdGlibGVfY29uZmlnX3NldHRpbmdfcHJpdmF0ZV9kZWZhdWx0X3Zpc2liaWxpdHkQARrKAklmIGluY29tcGF0aWJsZV9lbmZvcmNlX2NvbmZpZ19zZXR0aW5nX3Zpc2liaWxpdHk9ZmFsc2UsIHRoaXMgaXMgYSBub29wLiBFbHNlLCBpZiB0aGlzIGZsYWcgaXMgZmFsc2UsIGFueSBjb25maWdfc2V0dGluZyB3aXRob3V0IGFuIGV4cGxpY2l0IHZpc2liaWxpdHkgYXR0cmlidXRlIGlzIC8vdmlzaWJpbGl0eTpwdWJsaWMuIElmIHRoaXMgZmxhZyBpcyB0cnVlLCBjb25maWdfc2V0dGluZyBmb2xsb3dzIHRoZSBzYW1lIHZpc2liaWxpdHkgbG9naWMgYXMgYWxsIG90aGVyIHJ1bGVzLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2JhemVsYnVpbGQvYmF6ZWwvaXNzdWVzLzEyOTMzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKElNUQVJMQVJLX1NFTUFOVElDU1AACrcDCh9pbmNvbXBhdGlibGVfcHl0aG9uX2Rpc2FibGVfcHkyEAEazgFJZiB0cnVlLCB1c2luZyBQeXRob24gMiBzZXR0aW5ncyB3aWxsIGNhdXNlIGFuIGVycm9yLiBUaGlzIGluY2x1ZGVzIHB5dGhvbl92ZXJzaW9uPVBZMiwgc3Jjc192ZXJzaW9uPVBZMiwgYW5kIHNyY3NfdmVyc2lvbj1QWTJPTkxZLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2JhemVsYnVpbGQvYmF6ZWwvaXNzdWVzLzE1Njg0IGZvciBtb3JlIGluZm9ybWF0aW9uLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKEElOUFVUX1NUUklDVE5FU1NQAApyCgt0cmFuc2l0aW9ucxAAGj1UaGUgZm9ybWF0IGluIHdoaWNoIGNxdWVyeSB3aWxsIHByaW50IHRyYW5zaXRpb24gaW5mb3JtYXRpb24uIgZjcXVlcnkwADoPQUZGRUNUU19PVVRQVVRTSgVRVUVSWVABCoYDCilleHBlcmltZW50YWxfYW5kcm9pZF9hc3N1bWVfbWluc2RrdmVyc2lvbhABGogBV2hlbiBlbmFibGVkLCB0aGUgbWluU2RrVmVyc2lvbiBpcyBwYXJzZWQgZnJvbSB0aGUgbWVyZ2VkIEFuZHJvaWRNYW5pZmVzdCBhbmQgdXNlZCB0byBpbnN0cnVjdCBQcm9ndWFyZCBvbiB2YWxpZCBBbmRyb2lkIGJ1aWxkIHZlcnNpb25zLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQUNUSU9OX0NPTU1BTkRfTElORVM6FExPQURJTkdfQU5EX0FOQUxZU0lTQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFAACoYECgZpc2F0dHkQARqJAkEgc3lzdGVtLWdlbmVyYXRlZCBwYXJhbWV0ZXIgd2hpY2ggaXMgdXNlZCB0byBub3RpZnkgdGhlIHNlcnZlciB3aGV0aGVyIHRoaXMgY2xpZW50IGlzIHJ1bm5pbmcgaW4gYSB0ZXJtaW5hbC4gSWYgdGhpcyBpcyBzZXQgdG8gZmFsc2UsIHRoZW4gJy0tY29sb3I9YXV0bycgd2lsbCBiZSB0cmVhdGVkIGFzICctLWNvbG9yPW5vJy4gSWYgdGhpcyBpcyBzZXQgdG8gdHJ1ZSwgdGhlbiAnLS1jb2xvcj1hdXRvJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJy0tY29sb3I9eWVzJy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05CBkhJRERFTkoMVU5ET0NVTUVOVEVEUAAK6QIKC3B5dGhvbl9wYXRoEAAanwFUaGUgYWJzb2x1dGUgcGF0aCBvZiB0aGUgUHl0aG9uIGludGVycHJldGVyIGludm9rZWQgdG8gcnVuIFB5dGhvbiB0YXJnZXRzIG9uIHRoZSB0YXJnZXQgcGxhdGZvcm0uIERlcHJlY2F0ZWQ7IGRpc2FibGVkIGJ5IC0taW5jb21wYXRpYmxlX3VzZV9weXRob25fdG9vbGNoYWlucy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTOg9BRkZFQ1RTX09VVFBVVFNKCVRPT0xDSEFJTlABCrACCjFpbmNvbXBhdGlibGVfcmVxdWlyZV9qYXZhcGx1Z2luaW5mb19pbl9qYXZhY29tbW9uEAEaSVdoZW4gZW5hYmxlZCBqYXZhX2NvbW1vbi5jb21waWxlIG9ubHkgYWNjZXB0cyBKYXZhUGx1Z2luSW5mbyBmb3IgcGx1Z2lucy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QQhNJTkNPTVBBVElCTEVfQ0hBTkdFSgxVTkRPQ1VNRU5URURQAAqeAgohaW50ZXJuYWxfcGVyc2lzdGVudF9idXN5Ym94X3Rvb2xzEAEaM1RyYWNraW5nIGZsYWcgZm9yIHdoZW4gYnVzeWJveCB3b3JrZXJzIGFyZSBlbmFibGVkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlM6CUVYRUNVVElPTkoMVU5ET0NVTUVOVEVEUAAKkAQKGWV4dHJhX2V4ZWN1dGlvbl9wbGF0Zm9ybXMQABrUAlRoZSBwbGF0Zm9ybXMgdGhhdCBhcmUgYXZhaWxhYmxlIGFzIGV4ZWN1dGlvbiBwbGF0Zm9ybXMgdG8gcnVuIGFjdGlvbnMuIFBsYXRmb3JtcyBjYW4gYmUgc3BlY2lmaWVkIGJ5IGV4YWN0IHRhcmdldCwgb3IgYXMgYSB0YXJnZXQgcGF0dGVybi4gVGhlc2UgcGxhdGZvcm1zIHdpbGwgYmUgY29uc2lkZXJlZCBiZWZvcmUgdGhvc2UgZGVjbGFyZWQgaW4gdGhlIFdPUktTUEFDRSBmaWxlIGJ5IHJlZ2lzdGVyX2V4ZWN1dGlvbl9wbGF0Zm9ybXMoKS4gVGhpcyBvcHRpb24gbWF5IG9ubHkgYmUgc2V0IG9uY2U7IGxhdGVyIGluc3RhbmNlcyB3aWxsIG92ZXJyaWRlIGVhcmxpZXIgZmxhZyBzZXR0aW5ncy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkoJVE9PTENIQUlOUAEKwAIKFWhvc3RfY29tcGlsYXRpb25fbW9kZRAAGmVTcGVjaWZ5IHRoZSBtb2RlIHRoZSB0b29scyB1c2VkIGR1cmluZyB0aGUgYnVpbGQgd2lsbCBiZSBidWlsdCBpbi4gVmFsdWVzOiAnZmFzdGJ1aWxkJywgJ2RiZycsICdvcHQnLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRBQ1RJT05fQ09NTUFORF9MSU5FU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQrwAQoOcHJvdG9fY29tcGlsZXIQABogVGhlIGxhYmVsIG9mIHRoZSBwcm90by1jb21waWxlci4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUUzoUTE9BRElOR19BTkRfQU5BTFlTSVNKDVVOQ0FURUdPUklaRURQAQqYBAoOc3Bhd25fc3RyYXRlZ3kQABreAlNwZWNpZnkgaG93IHNwYXduIGFjdGlvbnMgYXJlIGV4ZWN1dGVkIGJ5IGRlZmF1bHQuIEFjY2VwdHMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBzdHJhdGVnaWVzIGZyb20gaGlnaGVzdCB0byBsb3dlc3QgcHJpb3JpdHkuIEZvciBlYWNoIGFjdGlvbiBCYXplbCBwaWNrcyB0aGUgc3RyYXRlZ3kgd2l0aCB0aGUgaGlnaGVzdCBwcmlvcml0eSB0aGF0IGNhbiBleGVjdXRlIHRoZSBhY3Rpb24uIFRoZSBkZWZhdWx0IHZhbHVlIGlzICJyZW1vdGUsd29ya2VyLHNhbmRib3hlZCxsb2NhbCIuIFNlZSBodHRwczovL2Jsb2cuYmF6ZWwuYnVpbGQvMjAxOS8wNi8xOS9saXN0LXN0cmF0ZWd5Lmh0bWwgZm9yIGRldGFpbHMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVABCssECh5leHBlcmltZW50YWxfcmVtb3RlX2Rvd25sb2FkZXIQABrEAkEgUmVtb3RlIEFzc2V0IEFQSSBlbmRwb2ludCBVUkksIHRvIGJlIHVzZWQgYXMgYSByZW1vdGUgZG93bmxvYWQgcHJveHkuIFRoZSBzdXBwb3J0ZWQgc2NoZW1hcyBhcmUgZ3JwYywgZ3JwY3MgKGdycGMgd2l0aCBUTFMgZW5hYmxlZCkgYW5kIHVuaXggKGxvY2FsIFVOSVggc29ja2V0cykuIElmIG5vIHNjaGVtYSBpcyBwcm92aWRlZCBCYXplbCB3aWxsIGRlZmF1bHQgdG8gZ3JwY3MuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JhemVsYnVpbGQvcmVtb3RlLWFwaXMvYmxvYi9tYXN0ZXIvYnVpbGQvYmF6ZWwvcmVtb3RlL2Fzc2V0L3YxL3JlbW90ZV9hc3NldC5wcm90byIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoGUkVNT1RFUAEK4wIKHmJ1aWxkX2V2ZW50X3VwbG9hZF9tYXhfcmV0cmllcxAAGkdUaGUgbWF4aW11bSBudW1iZXIgb2YgdGltZXMgQmF6ZWwgc2hvdWxkIHJldHJ5IHVwbG9hZGluZyBhIGJ1aWxkIGV2ZW50LiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADocQkFaRUxfSU5URVJOQUxfQ09ORklHVVJBVElPTkoHTE9HR0lOR1ABCswCChNidWlsZF9ydW5maWxlX2xpbmtzEAEaiQFJZiB0cnVlLCBidWlsZCBydW5maWxlcyBzeW1saW5rIGZvcmVzdHMgZm9yIGFsbCB0YXJnZXRzLiAgSWYgZmFsc2UsIHdyaXRlIHRoZW0gb25seSB3aGVuIHJlcXVpcmVkIGJ5IGEgbG9jYWwgYWN0aW9uLCB0ZXN0IG9yIHJ1biBjb21tYW5kLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTShBPVVRQVVRfU0VMRUNUSU9OUAAK5AYKCXRvb2xfZGVwcxABGpwGUXVlcnk6IElmIGRpc2FibGVkLCBkZXBlbmRlbmNpZXMgb24gJ2V4ZWMgY29uZmlndXJhdGlvbicgd2lsbCBub3QgYmUgaW5jbHVkZWQgaW4gdGhlIGRlcGVuZGVuY3kgZ3JhcGggb3ZlciB3aGljaCB0aGUgcXVlcnkgb3BlcmF0ZXMuIEFuICdleGVjIGNvbmZpZ3VyYXRpb24nIGRlcGVuZGVuY3kgZWRnZSwgc3VjaCBhcyB0aGUgb25lIGZyb20gYW55ICdwcm90b19saWJyYXJ5JyBydWxlIHRvIHRoZSBQcm90b2NvbCBDb21waWxlciwgdXN1YWxseSBwb2ludHMgdG8gYSB0b29sIGV4ZWN1dGVkIGR1cmluZyB0aGUgYnVpbGQgcmF0aGVyIHRoYW4gYSBwYXJ0IG9mIHRoZSBzYW1lICd0YXJnZXQnIHByb2dyYW0uCkNxdWVyeTogSWYgZGlzYWJsZWQsIGZpbHRlcnMgb3V0IGFsbCBjb25maWd1cmVkIHRhcmdldHMgd2hpY2ggY3Jvc3MgYW4gZXhlY3V0aW9uIHRyYW5zaXRpb24gZnJvbSB0aGUgdG9wLWxldmVsIHRhcmdldCB0aGF0IGRpc2NvdmVyZWQgdGhpcyBjb25maWd1cmVkIHRhcmdldC4gVGhhdCBtZWFucyBpZiB0aGUgdG9wLWxldmVsIHRhcmdldCBpcyBpbiB0aGUgdGFyZ2V0IGNvbmZpZ3VyYXRpb24sIG9ubHkgY29uZmlndXJlZCB0YXJnZXRzIGFsc28gaW4gdGhlIHRhcmdldCBjb25maWd1cmF0aW9uIHdpbGwgYmUgcmV0dXJuZWQuIElmIHRoZSB0b3AtbGV2ZWwgdGFyZ2V0IGlzIGluIHRoZSBleGVjIGNvbmZpZ3VyYXRpb24sIG9ubHkgZXhlYyBjb25maWd1cmVkIHRhcmdldHMgd2lsbCBiZSByZXR1cm5lZC4gVGhpcyBvcHRpb24gd2lsbCBOT1QgZXhjbHVkZSByZXNvbHZlZCB0b29sY2hhaW5zLiIGYXF1ZXJ5IgZjcXVlcnkiBXF1ZXJ5MAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTSgVRVUVSWVAACuQECipleHBlcmltZW50YWxfcmVtb3RlX21lcmtsZV90cmVlX2NhY2hlX3NpemUQABrRAlRoZSBudW1iZXIgb2YgTWVya2xlIHRyZWVzIHRvIG1lbW9pemUgdG8gaW1wcm92ZSB0aGUgcmVtb3RlIGNhY2hlIGhpdCBjaGVja2luZyBzcGVlZC4gRXZlbiB0aG91Z2ggdGhlIGNhY2hlIGlzIGF1dG9tYXRpY2FsbHkgcHJ1bmVkIGFjY29yZGluZyB0byBKYXZhJ3MgaGFuZGxpbmcgb2Ygc29mdCByZWZlcmVuY2VzLCBvdXQtb2YtbWVtb3J5IGVycm9ycyBjYW4gb2NjdXIgaWYgc2V0IHRvbyBoaWdoLiBJZiBzZXQgdG8gMCAgdGhlIGNhY2hlIHNpemUgaXMgdW5saW1pdGVkLiBPcHRpbWFsIHZhbHVlIHZhcmllcyBkZXBlbmRpbmcgb24gcHJvamVjdCdzIHNpemUuIERlZmF1bHQgdG8gMTAwMC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KBlJFTU9URVABCtsCChlyZXVzZV9zYW5kYm94X2RpcmVjdG9yaWVzEAEacklmIHNldCB0byB0cnVlLCBkaXJlY3RvcmllcyB1c2VkIGJ5IHNhbmRib3hlZCBub24td29ya2VyIGV4ZWN1dGlvbiBtYXkgYmUgcmV1c2VkIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHNldHVwIGNvc3RzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlM6CUVYRUNVVElPTkoSRVhFQ1VUSU9OX1NUUkFURUdZUAAKuwIKD3J1bl92YWxpZGF0aW9ucxABGnJXaGV0aGVyIHRvIHJ1biB2YWxpZGF0aW9uIGFjdGlvbnMgYXMgcGFydCBvZiB0aGUgYnVpbGQuIFNlZSBodHRwczovL2JhemVsLmJ1aWxkL2V4dGVuZGluZy9ydWxlcyN2YWxpZGF0aW9uX2FjdGlvbnMiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTjoPQUZGRUNUU19PVVRQVVRTShBPVVRQVVRfU0VMRUNUSU9OUAAKoAIKC2x0b2luZGV4b3B0EAAaT0FkZGl0aW9uYWwgb3B0aW9uIHRvIHBhc3MgdG8gdGhlIExUTyBpbmRleGluZyBzdGVwICh1bmRlciAtLWZlYXR1cmVzPXRoaW5fbHRvKS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6FEFDVElPTl9DT01NQU5EX0xJTkVTOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAEKnAQKKGluY29tcGF0aWJsZV9yZXF1aXJlX2xpbmtlcl9pbnB1dF9jY19hcGkQARrHAUlmIHNldCB0byB0cnVlLCBydWxlIGNyZWF0ZV9saW5raW5nX2NvbnRleHQgd2lsbCByZXF1aXJlIGxpbmtlcl9pbnB1dHMgaW5zdGVhZCBvZiBsaWJyYXJpZXNfdG9fbGluay4gVGhlIG9sZCBnZXR0ZXJzIG9mIGxpbmtpbmdfY29udGV4dCB3aWxsIGFsc28gYmUgZGlzYWJsZWQgYW5kIGp1c3QgbGlua2VyX2lucHV0cyB3aWxsIGJlIGF2YWlsYWJsZS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTOhRMT0FESU5HX0FORF9BTkFMWVNJU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoSU1RBUkxBUktfU0VNQU5USUNTUAAKlwQKC3Rlc3Rfb3V0cHV0EAAazQJTcGVjaWZpZXMgZGVzaXJlZCBvdXRwdXQgbW9kZS4gVmFsaWQgdmFsdWVzIGFyZSAnc3VtbWFyeScgdG8gb3V0cHV0IG9ubHkgdGVzdCBzdGF0dXMgc3VtbWFyeSwgJ2Vycm9ycycgdG8gYWxzbyBwcmludCB0ZXN0IGxvZ3MgZm9yIGZhaWxlZCB0ZXN0cywgJ2FsbCcgdG8gcHJpbnQgbG9ncyBmb3IgYWxsIHRlc3RzIGFuZCAnc3RyZWFtZWQnIHRvIG91dHB1dCBsb2dzIGZvciBhbGwgdGVzdHMgaW4gcmVhbCB0aW1lICh0aGlzIHdpbGwgZm9yY2UgdGVzdHMgdG8gYmUgZXhlY3V0ZWQgbG9jYWxseSBvbmUgYXQgYSB0aW1lIHJlZ2FyZGxlc3Mgb2YgLS10ZXN0X3N0cmF0ZWd5IHZhbHVlKS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6C1RFU1RfUlVOTkVSOg9URVJNSU5BTF9PVVRQVVQ6CUVYRUNVVElPTkoHTE9HR0lOR1ABCswFCiZleHBlcmltZW50YWxfc2libGluZ19yZXBvc2l0b3J5X2xheW91dBABGskCSWYgc2V0IHRvIHRydWUsIG5vbi1tYWluIHJlcG9zaXRvcmllcyBhcmUgcGxhbnRlZCBhcyBzeW1saW5rcyB0byB0aGUgbWFpbiByZXBvc2l0b3J5IGluIHRoZSBleGVjdXRpb24gcm9vdC4gVGhhdCBpcywgYWxsIHJlcG9zaXRvcmllcyBhcmUgZGlyZWN0IGNoaWxkcmVuIG9mIHRoZSAkb3V0cHV0X2Jhc2UvZXhlY3V0aW9uX3Jvb3QgZGlyZWN0b3J5LiBUaGlzIGhhcyB0aGUgc2lkZSBlZmZlY3Qgb2YgZnJlZWluZyB1cCAkb3V0cHV0X2Jhc2UvZXhlY3V0aW9uX3Jvb3QvX19tYWluX18vZXh0ZXJuYWwgZm9yIHRoZSByZWFsIHRvcC1sZXZlbCAnZXh0ZXJuYWwnIGRpcmVjdG9yeS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FEFDVElPTl9DT01NQU5EX0xJTkVTOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OOhRMT0FESU5HX0FORF9BTkFMWVNJUzoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEVCDEVYUEVSSU1FTlRBTEoSU1RBUkxBUktfU0VNQU5USUNTUAAKggQKGHJlbW90ZV9kb3dubG9hZGVyX2hlYWRlchAAGoECU3BlY2lmeSBhIGhlYWRlciB0aGF0IHdpbGwgYmUgaW5jbHVkZWQgaW4gcmVtb3RlIGRvd25sb2FkZXIgcmVxdWVzdHM6IC0tcmVtb3RlX2Rvd25sb2FkZXJfaGVhZGVyPU5hbWU9VmFsdWUuIE11bHRpcGxlIGhlYWRlcnMgY2FuIGJlIHBhc3NlZCBieSBzcGVjaWZ5aW5nIHRoZSBmbGFnIG11bHRpcGxlIHRpbWVzLiBNdWx0aXBsZSB2YWx1ZXMgZm9yIHRoZSBzYW1lIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBjb21tYS1zZXBhcmF0ZWQgbGlzdC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAE6B1VOS05PV05KBlJFTU9URVABCrUDCi5pbmNvbXBhdGlibGVfZW5mb3JjZV9jb25maWdfc2V0dGluZ192aXNpYmlsaXR5EAEaqQFJZiB0cnVlLCBlbmZvcmNlIGNvbmZpZ19zZXR0aW5nIHZpc2liaWxpdHkgcmVzdHJpY3Rpb25zLiBJZiBmYWxzZSwgZXZlcnkgY29uZmlnX3NldHRpbmcgaXMgdmlzaWJsZSB0byBldmVyeSB0YXJnZXQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYmF6ZWxidWlsZC9iYXplbC9pc3N1ZXMvMTI5MzIuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iBHN5bmMiBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoSU1RBUkxBUktfU0VNQU5USUNTUAAKsQMKIWluY29tcGF0aWJsZV9zYW5kYm94X2hlcm1ldGljX3RtcBABGuQBSWYgc2V0IHRvIHRydWUsIGVhY2ggTGludXggc2FuZGJveCB3aWxsIGhhdmUgaXRzIG93biBkZWRpY2F0ZWQgZW1wdHkgZGlyZWN0b3J5IG1vdW50ZWQgYXMgL3RtcCByYXRoZXIgdGhhbiBzaGFyaW5nIC90bXAgd2l0aCB0aGUgaG9zdCBmaWxlc3lzdGVtLiBVc2UgLS1zYW5kYm94X2FkZF9tb3VudF9wYWlyPS90bXAgdG8ga2VlcCBzZWVpbmcgdGhlIGhvc3QncyAvdG1wIGluIGFsbCBzYW5kYm94ZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVAACs8CCiVpbmNvbXBhdGlibGVfZXhjbHVzaXZlX3Rlc3Rfc2FuZGJveGVkEAEacUlmIHRydWUsIGV4Y2x1c2l2ZSB0ZXN0cyB3aWxsIHJ1biB3aXRoIHNhbmRib3hlZCBzdHJhdGVneS4gQWRkICdsb2NhbCcgdGFnIHRvIGZvcmNlIGFuIGV4Y2x1c2l2ZSB0ZXN0IHJ1biBsb2NhbGx5IgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOQhNJTkNPTVBBVElCTEVfQ0hBTkdFSg1VTkNBVEVHT1JJWkVEUAAK5wEKC2VtYmVkX2xhYmVsEAAaOEVtYmVkIHNvdXJjZSBjb250cm9sIHJldmlzaW9uIG9yIHJlbGVhc2UgbGFiZWwgaW4gYmluYXJ5IgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEKlQEKDGluc3RhbGxfYmFzZRAAGjdUaGlzIGxhdW5jaGVyIG9wdGlvbiBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGVzdHMuIgdzdGFydHVwMAA6DkNIQU5HRVNfSU5QVVRTOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUIGSElEREVOSgxVTkRPQ1VNRU5URURQAQqsAgoQb3V0cHV0X3VzZXJfcm9vdBAAGsgBVGhlIHVzZXItc3BlY2lmaWMgZGlyZWN0b3J5IGJlbmVhdGggd2hpY2ggYWxsIGJ1aWxkIG91dHB1dHMgYXJlIHdyaXR0ZW47IGJ5IGRlZmF1bHQsIHRoaXMgaXMgYSBmdW5jdGlvbiBvZiAkVVNFUiwgYnV0IGJ5IHNwZWNpZnlpbmcgYSBjb25zdGFudCwgYnVpbGQgb3V0cHV0cyBjYW4gYmUgc2hhcmVkIGJldHdlZW4gY29sbGFib3JhdGluZyB1c2Vycy4iB3N0YXJ0dXAwADoPQUZGRUNUU19PVVRQVVRTOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUoUQkFaRUxfQ0xJRU5UX09QVElPTlNQAQr5AgokaW5jb21wYXRpYmxlX3VzZV9zcGVjaWZpY190b29sX2ZpbGVzEAEajwFVc2UgY2MgdG9vbGNoYWluJ3MgY29tcGlsZXJfZmlsZXMsIGFzX2ZpbGVzLCBhbmQgYXJfZmlsZXMgYXMgaW5wdXRzIHRvIGFwcHJvcHJpYXRlIGFjdGlvbnMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYmF6ZWxidWlsZC9iYXplbC9pc3N1ZXMvODUzMSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKDFVORE9DVU1FTlRFRFAACpsFCjBleHBlcmltZW50YWxfc2t5bWVsZF9hbmFseXNpc19vdmVybGFwX3BlcmNlbnRhZ2UQABqhA1RoZSB2YWx1ZSByZXByZXNlbnRzIHRoZSAlIG9mIHRoZSBhbmFseXNpcyBwaGFzZSB3aGljaCB3aWxsIGJlIG92ZXJsYXBwZWQgd2l0aCB0aGUgZXhlY3V0aW9uIHBoYXNlLiBBIHZhbHVlIG9mIHggbWVhbnMgU2t5ZnJhbWUgd2lsbCBxdWV1ZSB1cCBleGVjdXRpb24gdGFza3MgYW5kIHdhaXQgdW50aWwgdGhlcmUncyB4JSBvZiB0aGUgdG9wIGxldmVsIHRhcmdldCBsZWZ0IHRvIGJlIGFuYWx5emVkIGJlZm9yZSBhbGxvd2luZyB0aGVtIHRvIGxhdW5jaC4gV2hlbiB0aGUgdmFsdWUgaXMgMCUsIHdlJ2Qgd2FpdCBmb3IgYWxsIGFuYWx5c2lzIHRvIGZpbmlzaCBiZWZvcmUgZXhlY3V0aW5nIChubyBvdmVybGFwKS4gV2hlbiBpdCdzIDEwMCUsIHRoZSBwaGFzZXMgYXJlIGZyZWUgdG8gb3ZlcmxhcCBhcyBtdWNoIGFzIHRoZXkgY2FuLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6CUVYRUNVVElPTkIMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAQqoAgoacHJvdG9fdG9vbGNoYWluX2Zvcl9qMm9iamMQABpMTGFiZWwgb2YgcHJvdG9fbGFuZ190b29sY2hhaW4oKSB3aGljaCBkZXNjcmliZXMgaG93IHRvIGNvbXBpbGUgajJvYmpjIHByb3RvcyIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0oNVU5DQVRFR09SSVpFRFABCuICCh1keW5hbWljX2xvY2FsX2V4ZWN1dGlvbl9kZWxheRAAGnVIb3cgbWFueSBtaWxsaXNlY29uZHMgc2hvdWxkIGxvY2FsIGV4ZWN1dGlvbiBiZSBkZWxheWVkLCBpZiByZW1vdGUgZXhlY3V0aW9uIHdhcyBmYXN0ZXIgZHVyaW5nIGEgYnVpbGQgYXQgbGVhc3Qgb25jZT8iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTjojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlNKEkVYRUNVVElPTl9TVFJBVEVHWVABCs8ICihleHBlcmltZW50YWxfYnVpbHRpbnNfaW5qZWN0aW9uX292ZXJyaWRlEAAanQZBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIHN5bWJvbCBuYW1lcyBwcmVmaXhlZCBieSBhICsgb3IgLSBjaGFyYWN0ZXIsIGluZGljYXRpbmcgd2hpY2ggc3ltYm9scyBmcm9tIGBAX2J1aWx0aW5zLy86ZXhwb3J0cy5iemxgIHRvIGluamVjdCwgb3ZlcnJpZGluZyB0aGVpciBkZWZhdWx0IGluamVjdGlvbiBzdGF0dXMuIFByZWNpc2VseSwgdGhpcyB3b3JrcyBhcyBmb2xsb3dzLiBFYWNoIGRpY3Qga2V5IG9mIGBleHBvcnRlZF90b3BsZXZlbHNgIG9yIGBleHBvcnRlZF9ydWxlc2AgaGFzIHRoZSBmb3JtIGBmb29gLCBgK2Zvb2AsIG9yIGAtZm9vYC4gVGhlIGZpcnN0IHR3byBmb3JtcyBtZWFuIGl0IGdldHMgaW5qZWN0ZWQgYnkgZGVmYXVsdCwgd2hpbGUgdGhlIGxhc3QgZm9ybSBtZWFucyBpdCBkb2VzIG5vdCBnZXQgaW5qZWN0ZWQgYnkgZGVmYXVsdC4gSW4gdGhlIGZpcnN0IGNhc2UgKHVucHJlZml4ZWQpLCB0aGUgZGVmYXVsdCBpcyBhYnNvbHV0ZSBhbmQgY2Fubm90IGJlIG92ZXJyaWRkZW4uIE90aGVyd2lzZSwgd2UgdGhlbiBjb25zdWx0IHRoaXMgb3B0aW9ucyBsaXN0LCBhbmQgaWYgd2Ugc2VlIGZvbyBvY2N1ciBoZXJlLCB3ZSB0YWtlIHRoZSBwcmVmaXggb2YgaXRzIGxhc3Qgb2NjdXJyZW5jZSBhbmQgdXNlIHRoYXQgdG8gZGVjaWRlIHdoZXRoZXIgb3Igbm90IHRvIGluamVjdC4gSXQgaXMgYSBuby1vcCB0byBzcGVjaWZ5IGFuIHVua25vd24gc3ltYm9sLCBvciB0byBhdHRlbXB0IHRvIG5vdCBpbmplY3QgYSBzeW1ib2wgdGhhdCBvY2N1cnMgdW5wcmVmaXhlZCBpbiBhIGRpY3Qga2V5LiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wAToUTE9BRElOR19BTkRfQU5BTFlTSVNCDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAEKxgIKL2V4cGVyaW1lbnRhbF9tZXJnZWRfc2t5ZnJhbWVfYW5hbHlzaXNfZXhlY3V0aW9uEAEaTklmIHRoaXMgZmxhZyBpcyBzZXQsIHRoZSBhbmFseXNpcyBhbmQgZXhlY3V0aW9uIHBoYXNlcyBvZiBTa3lmcmFtZSBhcmUgbWVyZ2VkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6CUVYRUNVVElPTkIMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAArEAgo4aW5jb21wYXRpYmxlX3Zpc2liaWxpdHlfcHJpdmF0ZV9hdHRyaWJ1dGVzX2F0X2RlZmluaXRpb24QARoFTm8tb3AiD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6BU5PX09QQhNJTkNPTVBBVElCTEVfQ0hBTkdFShJTVEFSTEFSS19TRU1BTlRJQ1NQAAr0AQoSYWxsb3dlZF9jcHVfdmFsdWVzEAAaIkFsbG93ZWQgdmFsdWVzIGZvciB0aGUgLS1jcHUgZmxhZy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6DkNIQU5HRVNfSU5QVVRTOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAEK7wEKDmhvc3RfanZtX2RlYnVnEAAatQFDb252ZW5pZW5jZSBvcHRpb24gdG8gYWRkIHNvbWUgYWRkaXRpb25hbCBKVk0gc3RhcnR1cCBmbGFncywgd2hpY2ggY2F1c2UgdGhlIEpWTSB0byB3YWl0IGR1cmluZyBzdGFydHVwIHVudGlsIHlvdSBjb25uZWN0IGZyb20gYSBKRFdQLWNvbXBsaWFudCBkZWJ1Z2dlciAobGlrZSBFY2xpcHNlKSB0byBwb3J0IDUwMDUuIgdzdGFydHVwMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAArPAgoyZXhwZXJpbWVudGFsX2FkZF90ZXN0X3N1cHBvcnRfdG9fY29tcGlsZV90aW1lX2RlcHMQARpsRmxhZyB0byBoZWxwIHRyYW5zaXRpb24gYXdheSBmcm9tIGFkZGluZyB0ZXN0IHN1cHBvcnQgbGlicmFyaWVzIHRvIHRoZSBjb21waWxlLXRpbWUgZGVwcyBvZiBKYXZhIHRlc3QgcnVsZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFAACuwCChBleHRlbnNpb25fZmlsdGVyEAAargJPbmx5IGRpc3BsYXkgdGhlIHVzYWdlcyBvZiB0aGVzZSBtb2R1bGUgZXh0ZW5zaW9ucyBhbmQgdGhlIHJlcG9zIGdlbmVyYXRlZCBieSB0aGVtIGlmIHRoZWlyIHJlc3BlY3RpdmUgZmxhZ3MgYXJlIHNldC4gSWYgc2V0LCB0aGUgcmVzdWx0IGdyYXBoIHdpbGwgb25seSBpbmNsdWRlIHBhdGhzIHRoYXQgY29udGFpbiBtb2R1bGVzIHVzaW5nIHRoZSBzcGVjaWZpZWQgZXh0ZW5zaW9ucy4gQW4gZW1wdHkgbGlzdCBkaXNhYmxlcyB0aGUgZmlsdGVyLCBlZmZlY3RpdmVseSBzcGVjaWZ5aW5nIGFsbCBwb3NzaWJsZSBleHRlbnNpb25zLiIDbW9kMAA6D1RFUk1JTkFMX09VVFBVVEoLTU9EX0NPTU1BTkRQAQqDAgoXcHJvdG86b3V0cHV0X3J1bGVfYXR0cnMQABqyAUNvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXMgdG8gaW5jbHVkZSBpbiBvdXRwdXQuIERlZmF1bHRzIHRvIGFsbCBhdHRyaWJ1dGVzLiBTZXQgdG8gZW1wdHkgc3RyaW5nIHRvIG5vdCBvdXRwdXQgYW55IGF0dHJpYnV0ZS4gVGhpcyBvcHRpb24gaXMgYXBwbGljYWJsZSB0byAtLW91dHB1dD1wcm90by4iBmFxdWVyeSIGY3F1ZXJ5IgVxdWVyeTAAOg9URVJNSU5BTF9PVVRQVVRKBVFVRVJZUAEKsgQKIWJ1aWxkX2V2ZW50X3RleHRfZmlsZV91cGxvYWRfbW9kZRAAGp0CU3BlY2lmaWVzIHdoZXRoZXIgdGhlIEJ1aWxkIEV2ZW50IFNlcnZpY2UgdXBsb2FkIGZvciAtLWJ1aWxkX2V2ZW50X3RleHRfZmlsZSBzaG91bGQgYmxvY2sgdGhlIGJ1aWxkIGNvbXBsZXRpb24gb3Igc2hvdWxkIGVuZCB0aGUgaW52b2NhdGlvbiBpbW1lZGlhdGVseSBhbmQgZmluaXNoIHRoZSB1cGxvYWQgaW4gdGhlIGJhY2tncm91bmQuIEVpdGhlciAnd2FpdF9mb3JfdXBsb2FkX2NvbXBsZXRlJyAoZGVmYXVsdCksICdub3dhaXRfZm9yX3VwbG9hZF9jb21wbGV0ZScsIG9yICdmdWxseV9hc3luYycuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhFFQUdFUk5FU1NfVE9fRVhJVEoHTE9HR0lOR1ABCs0CCg9pb3Nfc2RrX3ZlcnNpb24QABqNAVNwZWNpZmllcyB0aGUgdmVyc2lvbiBvZiB0aGUgaU9TIFNESyB0byB1c2UgdG8gYnVpbGQgaU9TIGFwcGxpY2F0aW9ucy4gSWYgdW5zcGVjaWZpZWQsIHVzZXMgdGhlIGRlZmF1bHQgaU9TIFNESyB2ZXJzaW9uIGZyb20gJ3hjb2RlX3ZlcnNpb24nLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEVKCVRPT0xDSEFJTlABCtACChZkaXNjYXJkX2FuYWx5c2lzX2NhY2hlEAEalQFEaXNjYXJkIHRoZSBhbmFseXNpcyBjYWNoZSBpbW1lZGlhdGVseSBhZnRlciB0aGUgYW5hbHlzaXMgcGhhc2UgY29tcGxldGVzLiBSZWR1Y2VzIG1lbW9yeSB1c2FnZSBieSB+MTAlLCBidXQgbWFrZXMgZnVydGhlciBpbmNyZW1lbnRhbCBidWlsZHMgc2xvd2VyLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFAACu8BChJzYW5kYm94X2Jsb2NrX3BhdGgQABo0Rm9yIHNhbmRib3hlZCBhY3Rpb25zLCBkaXNhbGxvdyBhY2Nlc3MgdG8gdGhpcyBwYXRoLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToJRVhFQ1VUSU9OShBJTlBVVF9TVFJJQ1RORVNTUAEKggMKFW1heF9jb21wdXRhdGlvbl9zdGVwcxAAGmxUaGUgbWF4aW11bSBudW1iZXIgb2YgU3RhcmxhcmsgY29tcHV0YXRpb24gc3RlcHMgdGhhdCBtYXkgYmUgZXhlY3V0ZWQgYnkgYSBCVUlMRCBmaWxlICh6ZXJvIG1lYW5zIG5vIGxpbWl0KS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTShJTVEFSTEFSS19TRU1BTlRJQ1NQAQrEBAoXdHJhY2tfaW5jcmVtZW50YWxfc3RhdGUQARqjAklmIGZhbHNlLCBCbGF6ZSB3aWxsIG5vdCBwZXJzaXN0IGRhdGEgdGhhdCBhbGxvd3MgZm9yIGludmFsaWRhdGlvbiBhbmQgcmUtZXZhbHVhdGlvbiBvbiBpbmNyZW1lbnRhbCBidWlsZHMgaW4gb3JkZXIgdG8gc2F2ZSBtZW1vcnkgb24gdGhpcyBidWlsZC4gU3Vic2VxdWVudCBidWlsZHMgd2lsbCBub3QgaGF2ZSBhbnkgaW5jcmVtZW50YWxpdHkgd2l0aCByZXNwZWN0IHRvIHRoaXMgb25lLiBVc3VhbGx5IHlvdSB3aWxsIHdhbnQgdG8gc3BlY2lmeSAtLWJhdGNoIHdoZW4gc2V0dGluZyB0aGlzIHRvIGZhbHNlLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEVKF0JVSUxEX1RJTUVfT1BUSU1JWkFUSU9OUAAKqAIKCnNjbF9jb25maWcQABptTmFtZSBvZiB0aGUgc2NsIGNvbmZpZyBkZWZpbmVkIGluIFBST0pFQ1Quc2NsLiBOb3RlIHRoYXQgdGhpcyBmZWF0dXJlIGlzIHN0aWxsIHVuZGVyIGRldmVsb3BtZW50IGIvMzI0MTE5ODc5LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkIMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAQquAwoXaW5zdHJ1bWVudF90ZXN0X3RhcmdldHMQARrmAVdoZW4gY292ZXJhZ2UgaXMgZW5hYmxlZCwgc3BlY2lmaWVzIHdoZXRoZXIgdG8gY29uc2lkZXIgaW5zdHJ1bWVudGluZyB0ZXN0IHJ1bGVzLiBXaGVuIHNldCwgdGVzdCBydWxlcyBpbmNsdWRlZCBieSAtLWluc3RydW1lbnRhdGlvbl9maWx0ZXIgYXJlIGluc3RydW1lbnRlZC4gT3RoZXJ3aXNlLCB0ZXN0IHJ1bGVzIGFyZSBhbHdheXMgZXhjbHVkZWQgZnJvbSBjb3ZlcmFnZSBpbnN0cnVtZW50YXRpb24uIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAAK9AMKH3VuaXhfZGlnZXN0X2hhc2hfYXR0cmlidXRlX25hbWUQABqKA1RoZSBuYW1lIG9mIGFuIGV4dGVuZGVkIGF0dHJpYnV0ZSB0aGF0IGNhbiBiZSBwbGFjZWQgb24gZmlsZXMgdG8gc3RvcmUgYSBwcmVjb21wdXRlZCBjb3B5IG9mIHRoZSBmaWxlJ3MgaGFzaCwgY29ycmVzcG9uZGluZyB3aXRoIC0tZGlnZXN0X2Z1bmN0aW9uLiBUaGlzIG9wdGlvbiBjYW4gYmUgdXNlZCB0byByZWR1Y2UgZGlzayBJL08gYW5kIENQVSBsb2FkIGNhdXNlZCBieSBoYXNoIGNvbXB1dGF0aW9uLiBUaGlzIGV4dGVuZGVkIGF0dHJpYnV0ZSBpcyBjaGVja2VkIG9uIGFsbCBzb3VyY2UgZmlsZXMgYW5kIG91dHB1dCBmaWxlcywgbWVhbmluZyB0aGF0IGl0IGNhdXNlcyBhIHNpZ25pZmljYW50IG51bWJlciBvZiBpbnZvY2F0aW9ucyBvZiB0aGUgZ2V0eGF0dHIoKSBzeXN0ZW0gY2FsbC4iB3N0YXJ0dXAwADoOQ0hBTkdFU19JTlBVVFM6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFSgxVTkRPQ1VNRU5URURQAQrNAgoUYmVzX2xpZmVjeWNsZV9ldmVudHMQARpIU3BlY2lmaWVzIHdoZXRoZXIgdG8gcHVibGlzaCBCRVMgbGlmZWN5Y2xlIGV2ZW50cy4gKGRlZmF1bHRzIHRvICd0cnVlJykuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg9BRkZFQ1RTX09VVFBVVFNKB0xPR0dJTkdQAArgAgonZXhwZXJpbWVudGFsX2lucHJvY2Vzc19zeW1saW5rX2NyZWF0aW9uEAEaaldoZXRoZXIgdG8gbWFrZSBkaXJlY3QgZmlsZXN5c3RlbSBjYWxscyB0byBjcmVhdGUgc3ltbGluayB0cmVlcyBpbnN0ZWFkIG9mIGRlbGVnYXRpbmcgdG8gYSBoZWxwZXIgcHJvY2Vzcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTOglFWEVDVVRJT05CDEVYUEVSSU1FTlRBTEoSRVhFQ1VUSU9OX1NUUkFURUdZUAAKkQQKJmluY29tcGF0aWJsZV9kaXNhYmxlX25hdGl2ZV9yZXBvX3J1bGVzEAEa3wFJZiBmYWxzZSwgbmF0aXZlIHJlcG8gcnVsZXMgY2FuIGJlIHVzZWQgaW4gV09SS1NQQUNFOyBvdGhlcndpc2UsIFN0YXJsYXJrIHJlcG8gcnVsZXMgbXVzdCBiZSB1c2VkIGluc3RlYWQuIE5hdGl2ZSByZXBvIHJ1bGVzIGluY2x1ZGUgbG9jYWxfcmVwb3NpdG9yeSwgbmV3X2xvY2FsX3JlcG9zaXRvcnksIGxvY2FsX2NvbmZpZ19wbGF0Zm9ybSwgYW5kIGFuZHJvaWRfc2RrX3JlcG9zaXRvcnkuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OShRCQVpFTF9DTElFTlRfT1BUSU9OU1AACroCCg5leHRlbnNpb25faW5mbxAAGv4BU3BlY2lmeSBob3cgbXVjaCBkZXRhaWwgYWJvdXQgZXh0ZW5zaW9uIHVzYWdlcyB0byBpbmNsdWRlIGluIHRoZSBxdWVyeSByZXN1bHQuICJVc2FnZXMiIHdpbGwgb25seSBzaG93IHRoZSBleHRlbnNpb25zIG5hbWVzLCAicmVwb3MiIHdpbGwgYWxzbyBpbmNsdWRlIHJlcG9zIGltcG9ydGVkIHdpdGggdXNlX3JlcG8sIGFuZCAiYWxsIiB3aWxsIGFsc28gc2hvdyB0aGUgb3RoZXIgcmVwb3NpdG9yaWVzIGdlbmVyYXRlZCBieSBleHRlbnNpb25zLgoiA21vZDAAOg9URVJNSU5BTF9PVVRQVVRKC01PRF9DT01NQU5EUAEKpQQKKWluY29tcGF0aWJsZV9kb19ub3Rfc3BsaXRfbGlua2luZ19jbWRsaW5lEAEa4AFXaGVuIHRydWUsIEJhemVsIG5vIGxvbmdlciBtb2RpZmllcyBjb21tYW5kIGxpbmUgZmxhZ3MgdXNlZCBmb3IgbGlua2luZywgYW5kIGFsc28gZG9lc24ndCBzZWxlY3RpdmVseSBkZWNpZGUgd2hpY2ggZmxhZ3MgZ28gdG8gdGhlIHBhcmFtIGZpbGUgYW5kIHdoaWNoIGRvbid0LiAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iYXplbGJ1aWxkL2JhemVsL2lzc3Vlcy83NjcwIGZvciBkZXRhaWxzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKF0JVSUxEX1RJTUVfT1BUSU1JWkFUSU9OUAAK7AEKEG9wdGltaXppbmdfZGV4ZXIQABo4U3BlY2lmaWVzIGEgYmluYXJ5IHRvIHVzZSB0byBkbyBkZXhpbmcgd2l0aG91dCBzaGFyZGluZy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQqnBAolZXhwZXJpbWVudGFsX2Rpc2FibGVfZXh0ZXJuYWxfcGFja2FnZRABGtkBSWYgc2V0IHRvIHRydWUsIHRoZSBhdXRvLWdlbmVyYXRlZCAvL2V4dGVybmFsIHBhY2thZ2Ugd2lsbCBub3QgYmUgYXZhaWxhYmxlIGFueW1vcmUuIEJhemVsIHdpbGwgc3RpbGwgYmUgdW5hYmxlIHRvIHBhcnNlIHRoZSBmaWxlICdleHRlcm5hbC9CVUlMRCcsIGJ1dCBnbG9icyByZWFjaGluZyBpbnRvIGV4dGVybmFsLyBmcm9tIHRoZSB1bm5hbWVkIHBhY2thZ2Ugd2lsbCB3b3JrLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUTE9BRElOR19BTkRfQU5BTFlTSVM6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFQgxFWFBFUklNRU5UQUxKElNUQVJMQVJLX1NFTUFOVElDU1AACokCChxvdXRwdXRfbGlicmFyeV9tZXJnZWRfYXNzZXRzEAEaSklmIGRpc2FibGVkLCBkb2VzIG5vdCBwcm9kdWNlIG1lcmdlZCBhc3NldC56aXAgb3V0cHV0cyBmb3IgbGlicmFyeSB0YXJnZXRzIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSgxVTkRPQ1VNRU5URURQAAqrAgosaW5jb21wYXRpYmxlX3VzZV9jcHBfY29tcGlsZV9oZWFkZXJfbW5lbW9uaWMQARpFSWYgZW5hYmxlZCwgZ2l2ZSBkaXN0aW5ndWlzaGluZyBtbmVtb25pYyB0byBoZWFkZXIgcHJvY2Vzc2luZyBhY3Rpb25zIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05CE0lOQ09NUEFUSUJMRV9DSEFOR0VKDFVORE9DVU1FTlRFRFAACsIDCgVidWlsZBABGoICRXhlY3V0ZSB0aGUgYnVpbGQ7IHRoaXMgaXMgdGhlIHVzdWFsIGJlaGF2aW91ci4gU3BlY2lmeWluZyAtLW5vYnVpbGQgY2F1c2VzIHRoZSBidWlsZCB0byBzdG9wIGJlZm9yZSBleGVjdXRpbmcgdGhlIGJ1aWxkIGFjdGlvbnMsIHJldHVybmluZyB6ZXJvIGlmZiB0aGUgcGFja2FnZSBsb2FkaW5nIGFuZCBhbmFseXNpcyBwaGFzZXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseTsgdGhpcyBtb2RlIGlzIHVzZWZ1bCBmb3IgdGVzdGluZyB0aG9zZSBwaGFzZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT046D0FGRkVDVFNfT1VUUFVUU0oQT1VUUFVUX1NFTEVDVElPTlAACsMCChR4Y29kZV92ZXJzaW9uX2NvbmZpZxAAGmlUaGUgbGFiZWwgb2YgdGhlIHhjb2RlX2NvbmZpZyBydWxlIHRvIGJlIHVzZWQgZm9yIHNlbGVjdGluZyB0aGUgWGNvZGUgdmVyc2lvbiBpbiB0aGUgYnVpbGQgY29uZmlndXJhdGlvbi4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFOhRMT0FESU5HX0FORF9BTkFMWVNJU0oJVE9PTENIQUlOUAEK1QIKEW1hY29zX3Nka192ZXJzaW9uEAAakwFTcGVjaWZpZXMgdGhlIHZlcnNpb24gb2YgdGhlIG1hY09TIFNESyB0byB1c2UgdG8gYnVpbGQgbWFjT1MgYXBwbGljYXRpb25zLiBJZiB1bnNwZWNpZmllZCwgdXNlcyB0aGUgZGVmYXVsdCBtYWNPUyBTREsgdmVyc2lvbiBmcm9tICd4Y29kZV92ZXJzaW9uJy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFSglUT09MQ0hBSU5QAQrJAgovcGVyc2lzdGVudF9tdWx0aXBsZXhfYW5kcm9pZF9yZXNvdXJjZV9wcm9jZXNzb3IQABpKRW5hYmxlIHBlcnNpc3RlbnQgbXVsdGlwbGV4ZWQgQW5kcm9pZCByZXNvdXJjZSBwcm9jZXNzb3IgYnkgdXNpbmcgd29ya2Vycy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVAACvoCCi1leHBlcmltZW50YWxfZXhjbHVkZV9kZWZpbmVzX2Zyb21fZXhlY19jb25maWcQARqTAUlmIHRydWUsIGRvbid0IHByb3BhZ2F0ZSAnLS1kZWZpbmUncyB0byB0aGUgZXhlYyB0cmFuc2l0aW9uIGF0IGRlZmF1bHQ7IG9ubHkgcHJvcGFnYXRlIGRlZmluZXMgc3BlY2lmaWVkIGJ5IGAtLWV4cGVyaW1lbnRhbF9wcm9wYWdhdGVfY3VzdG9tX2ZsYWdgLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFAACs0CCjBleHBlcmltZW50YWxfZmlsdGVyX2xpYnJhcnlfamFyX3dpdGhfcHJvZ3JhbV9qYXIQARpURmlsdGVyIHRoZSBQcm9HdWFyZCBQcm9ncmFtSmFyIHRvIHJlbW92ZSBhbnkgY2xhc3NlcyBhbHNvIHByZXNlbnQgaW4gdGhlIExpYnJhcnlKYXIuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRBQ1RJT05fQ09NTUFORF9MSU5FU0IMRVhQRVJJTUVOVEFMShdCVUlMRF9USU1FX09QVElNSVpBVElPTlAACuQCCjtleHBlcmltZW50YWxfcmVtb3ZlX3JfY2xhc3Nlc19mcm9tX2luc3RydW1lbnRhdGlvbl90ZXN0X2phchABGnFJZiBlbmFibGVkIGFuZCB0aGUgdGVzdCBpbnN0cnVtZW50cyBhbiBhcHBsaWNhdGlvbiwgYWxsIHRoZSBSIGNsYXNzZXMgZnJvbSB0aGUgdGVzdCdzIGRlcGxveSBqYXIgd2lsbCBiZSByZW1vdmVkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoOQ0hBTkdFU19JTlBVVFNCDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAKuQQKEWJ1aWxkX3RhZ19maWx0ZXJzEAAagwNTcGVjaWZpZXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiB0YWdzLiBFYWNoIHRhZyBjYW4gYmUgb3B0aW9uYWxseSBwcmVjZWRlZCB3aXRoICctJyB0byBzcGVjaWZ5IGV4Y2x1ZGVkIHRhZ3MuIE9ubHkgdGhvc2UgdGFyZ2V0cyB3aWxsIGJlIGJ1aWx0IHRoYXQgY29udGFpbiBhdCBsZWFzdCBvbmUgaW5jbHVkZWQgdGFnIGFuZCBkbyBub3QgY29udGFpbiBhbnkgZXhjbHVkZWQgdGFncy4gVGhpcyBvcHRpb24gZG9lcyBub3QgYWZmZWN0IHRoZSBzZXQgb2YgdGVzdHMgZXhlY3V0ZWQgd2l0aCB0aGUgJ3Rlc3QnIGNvbW1hbmQ7IHRob3NlIGFyZSBiZSBnb3Zlcm5lZCBieSB0aGUgdGVzdCBmaWx0ZXJpbmcgb3B0aW9ucywgZm9yIGV4YW1wbGUgJy0tdGVzdF90YWdfZmlsdGVycyciBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQraAgooZXhwZXJpbWVudGFsX2J1aWxkX2V2ZW50X2V4cGFuZF9maWxlc2V0cxABGkFJZiB0cnVlLCBleHBhbmQgRmlsZXNldHMgaW4gdGhlIEJFUCB3aGVuIHByZXNlbnRpbmcgb3V0cHV0IGZpbGVzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAAK8AMKJWV4cGVyaW1lbnRhbF9kaXNrX2NhY2hlX2djX2lkbGVfZGVsYXkQABrbAUhvdyBsb25nIHRoZSBzZXJ2ZXIgbXVzdCByZW1haW4gaWRsZSBiZWZvcmUgYSBnYXJiYWdlIGNvbGxlY3Rpb24gb2YgdGhlIGRpc2sgY2FjaGUgb2NjdXJzLiBUbyBzcGVjaWZ5IHRoZSBnYXJiYWdlIGNvbGxlY3Rpb24gcG9saWN5LCBzZXQgLS1leHBlcmltZW50YWxfZGlza19jYWNoZV9nY19tYXhfc2l6ZSBhbmQvb3IgLS1leHBlcmltZW50YWxfZGlza19jYWNoZV9nY19tYXhfYWdlLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCs8DChBleHRyYV90b29sY2hhaW5zEAAa8AFUaGUgdG9vbGNoYWluIHJ1bGVzIHRvIGJlIGNvbnNpZGVyZWQgZHVyaW5nIHRvb2xjaGFpbiByZXNvbHV0aW9uLiBUb29sY2hhaW5zIGNhbiBiZSBzcGVjaWZpZWQgYnkgZXhhY3QgdGFyZ2V0LCBvciBhcyBhIHRhcmdldCBwYXR0ZXJuLiBUaGVzZSB0b29sY2hhaW5zIHdpbGwgYmUgY29uc2lkZXJlZCBiZWZvcmUgdGhvc2UgZGVjbGFyZWQgaW4gdGhlIFdPUktTUEFDRSBmaWxlIGJ5IHJlZ2lzdGVyX3Rvb2xjaGFpbnMoKS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6D0FGRkVDVFNfT1VUUFVUUzoOQ0hBTkdFU19JTlBVVFM6FExPQURJTkdfQU5EX0FOQUxZU0lTSglUT09MQ0hBSU5QAQqNAgoIY29ubHlvcHQQABo/QWRkaXRpb25hbCBvcHRpb24gdG8gcGFzcyB0byBnY2Mgd2hlbiBjb21waWxpbmcgQyBzb3VyY2UgZmlsZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOhRBQ1RJT05fQ09NTUFORF9MSU5FUzoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1ABCpEGCiFpbmNsdWRlX2NvbmZpZ19mcmFnbWVudHNfcHJvdmlkZXIQABqeBElOVEVSTkFMIEJMQVpFIERFVkVMT1BFUiBGRUFUVVJFOiBJZiAiZGlyZWN0IiwgYWxsIGNvbmZpZ3VyZWQgdGFyZ2V0cyBleHBvc2UgUmVxdWlyZWRDb25maWdGcmFnbWVudHNQcm92aWRlciB3aXRoIHRoZSBjb25maWd1cmF0aW9uIGZyYWdtZW50cyB0aGV5IGRpcmVjdGx5IHJlcXVpcmUuIElmICJ0cmFuc2l0aXZlIiwgdGhleSBkbyB0aGUgc2FtZSBidXQgYWxzbyBpbmNsdWRlIHRoZSBmcmFnbWVudHMgdGhlaXIgdHJhbnNpdGl2ZSBkZXBlbmRlbmNpZXMgcmVxdWlyZS4gSWYgIm9mZiIsIHRoZSBwcm92aWRlciBpcyBvbWl0dGVkLiBJZiBub3QgIm9mZiIsIHRoaXMgYWxzbyBwb3B1bGF0ZXMgY29uZmlnX3NldHRpbmcncyBDb25maWdNYXRjaGluZ1Byb3ZpZGVyLnJlcXVpcmVkRnJhZ21lbnRPcHRpb25zIHdpdGggdGhlIGZyYWdtZW50IG9wdGlvbnMgdGhlIGNvbmZpZ19zZXR0aW5nIHJlcXVpcmVzLkJlIGNhcmVmdWwgdXNpbmcgdGhpcyBmZWF0dXJlOiBpdCBhZGRzIG1lbW9yeSB0byBldmVyeSBjb25maWd1cmVkIHRhcmdldCBpbiB0aGUgYnVpbGQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJUzoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEVCBkhJRERFTkoMVU5ET0NVTUVOVEVEUAEK3wIKFGh0dHBfdGltZW91dF9zY2FsaW5nEAAaQFNjYWxlIGFsbCB0aW1lb3V0cyByZWxhdGVkIHRvIGh0dHAgZG93bmxvYWRzIGJ5IHRoZSBnaXZlbiBmYWN0b3IiD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05KFEJBWkVMX0NMSUVOVF9PUFRJT05TUAEKvgEKD2luY2x1ZGVfYXNwZWN0cxABGnZhcXVlcnksIGNxdWVyeTogd2hldGhlciB0byBpbmNsdWRlIGFzcGVjdC1nZW5lcmF0ZWQgYWN0aW9ucyBpbiB0aGUgb3V0cHV0LiBxdWVyeTogbm8tb3AgKGFzcGVjdHMgYXJlIGFsd2F5cyBmb2xsb3dlZCkuIgZhcXVlcnkiBmNxdWVyeSIFcXVlcnkwADoPVEVSTUlOQUxfT1VUUFVUSgVRVUVSWVAACv8CChpwcm9ncmVzc19pbl90ZXJtaW5hbF90aXRsZRABGnZTaG93IHRoZSBjb21tYW5kIHByb2dyZXNzIGluIHRoZSB0ZXJtaW5hbCB0aXRsZS4gVXNlZnVsIHRvIHNlZSB3aGF0IGJhemVsIGlzIGRvaW5nIHdoZW4gaGF2aW5nIG11bHRpcGxlIHRlcm1pbmFsIHRhYnMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAAKvgIKEmdvb2dsZV9hdXRoX3Njb3BlcxAAGj1BIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIEdvb2dsZSBDbG91ZCBhdXRoZW50aWNhdGlvbiBzY29wZXMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEK2AEKJWV4cGVyaW1lbnRhbF91c2Vfc2NoZWR1bGluZ19taWRkbGVtZW4QARoSRGVwcmVjYXRlZC4gTm8tb3AuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgVOT19PUEoMVU5ET0NVTUVOVEVEUAAK2QIKKWV4cGVyaW1lbnRhbF9za3lsYXJrX2RlYnVnX3Jlc2V0X2FuYWx5c2lzEAEaZ0lmIHRydWUsIHJlc2V0cyBhbmFseXNpcyBiZWZvcmUgZXhlY3V0aW5nIHRoZSBidWlsZC4gSGFzIG5vIGVmZmVjdCB3aXRob3V0IC0tZXhwZXJpbWVudGFsX3NreWxhcmtfZGVidWciBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTjoUTE9BRElOR19BTkRfQU5BTFlTSVNCDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAKuwEKFWFuZHJvaWRfY3Jvc3N0b29sX3RvcBAAGgVOby1vcCIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BKDFVORE9DVU1FTlRFRFABCsYBCg5zZXJ2ZXJfanZtX291dBAAGmVUaGUgbG9jYXRpb24gdG8gd3JpdGUgdGhlIHNlcnZlcidzIEpWTSdzIG91dHB1dC4gSWYgdW5zZXQgdGhlbiBkZWZhdWx0cyB0byBhIGxvY2F0aW9uIGluIG91dHB1dF9iYXNlLiIHc3RhcnR1cDAAOg9BRkZFQ1RTX09VVFBVVFM6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFShRCQVpFTF9DTElFTlRfT1BUSU9OU1ABCoUDCgliZXNfcHJveHkQABqSAUNvbm5lY3QgdG8gdGhlIEJ1aWxkIEV2ZW50IFNlcnZpY2UgdGhyb3VnaCBhIHByb3h5LiBDdXJyZW50bHkgdGhpcyBmbGFnIGNhbiBvbmx5IGJlIHVzZWQgdG8gY29uZmlndXJlIGEgVW5peCBkb21haW4gc29ja2V0ICh1bml4Oi9wYXRoL3RvL3NvY2tldCkuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgdMT0dHSU5HUAEKkQEKDHdvcmtzcGFjZV9yYxABGkxXaGV0aGVyIG9yIG5vdCB0byBsb29rIGZvciB0aGUgd29ya3NwYWNlIGJhemVscmMgZmlsZSBhdCAkd29ya3NwYWNlLy5iYXplbHJjIgdzdGFydHVwMAA6DkNIQU5HRVNfSU5QVVRTShRCQVpFTF9DTElFTlRfT1BUSU9OU1AACo0BChFpbmNsdWRlX2FydGlmYWN0cxABGlJJbmNsdWRlcyBuYW1lcyBvZiB0aGUgYWN0aW9uIGlucHV0cyBhbmQgb3V0cHV0cyBpbiB0aGUgb3V0cHV0IChwb3RlbnRpYWxseSBsYXJnZSkuIgZhcXVlcnkwADoPVEVSTUlOQUxfT1VUUFVUSgVRVUVSWVAACoYCCippbmNvbXBhdGlibGVfb3ZlcnJpZGVfdG9vbGNoYWluX3RyYW5zaXRpb24QARo7RGVwcmVjYXRlZCwgdGhpcyBpcyBubyBsb25nZXIgaW4gdXNlIGFuZCBzaG91bGQgYmUgcmVtb3ZlZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QSgxVTkRPQ1VNRU5URURQAAqSAgoNcnVuX2luX2NsaWVudBABGr4BSWYgdHJ1ZSwgdGhlIG1vYmlsZS1pbnN0YWxsIGRlcGxveWVyIGNvbW1hbmQgd2lsbCBiZSBzZW50IHRvIHRoZSBiYXplbCBjbGllbnQgZm9yIGV4ZWN1dGlvbi4gVXNlZnVsIGZvciBjb25maWd1cmF0aW9ucyB3aGVyZSB0aGUgYmF6ZWwgY2xpZW50IGlzIG9uIGEgZGlmZmVyZW50IG1hY2hpbmUgdGhhbiB0aGUgYmF6ZWwgc2VydmVyLiIObW9iaWxlLWluc3RhbGwwADocQkFaRUxfSU5URVJOQUxfQ09ORklHVVJBVElPTkoMVU5ET0NVTUVOVEVEUAAKxwMKJWJ1aWxkX2V2ZW50X2pzb25fZmlsZV9wYXRoX2NvbnZlcnNpb24QARqwAUNvbnZlcnQgcGF0aHMgaW4gdGhlIGpzb24gZmlsZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgYnVpbGQgZXZlbnQgcHJvdG9jb2wgdG8gbW9yZSBnbG9iYWxseSB2YWxpZCBVUklzIHdoZW5ldmVyIHBvc3NpYmxlOyBpZiBkaXNhYmxlZCwgdGhlIGZpbGU6Ly8gdXJpIHNjaGVtZSB3aWxsIGFsd2F5cyBiZSB1c2VkIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg9BRkZFQ1RTX09VVFBVVFNKB0xPR0dJTkdQAArgAQoyZXhwZXJpbWVudGFsX2xvY2FsX2phdmFfb3B0aW1pemF0aW9uX2NvbmZpZ3VyYXRpb24QABoLRG8gbm90IHVzZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDFVORE9DVU1FTlRFRFABCrgECjNleHBlcmltZW50YWxfc2FuZGJveF9hc3luY190cmVlX2RlbGV0ZV9pZGxlX3RocmVhZHMQABq0AklmIDAsIGRlbGV0ZSBzYW5kYm94IHRyZWVzIGFzIHNvb24gYXMgYW4gYWN0aW9uIGNvbXBsZXRlcyAoY2F1c2luZyBjb21wbGV0aW9uIG9mIHRoZSBhY3Rpb24gdG8gYmUgZGVsYXllZCkuIElmIGdyZWF0ZXIgdGhhbiB6ZXJvLCBleGVjdXRlIHRoZSBkZWxldGlvbiBvZiBzdWNoIHRocmVlcyBvbiBhbiBhc3luY2hyb25vdXMgdGhyZWFkIHBvb2wgdGhhdCBoYXMgc2l6ZSAxIHdoZW4gdGhlIGJ1aWxkIGlzIHJ1bm5pbmcgYW5kIGdyb3dzIHRvIHRoZSBzaXplIHNwZWNpZmllZCBieSB0aGlzIGZsYWcgd2hlbiB0aGUgc2VydmVyIGlzIGlkbGUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OUzoJRVhFQ1VUSU9OShJFWEVDVVRJT05fU1RSQVRFR1lQAQqUBAoPbG9jYWxfdGVzdF9qb2JzEAAa5AJUaGUgbWF4IG51bWJlciBvZiBsb2NhbCB0ZXN0IGpvYnMgdG8gcnVuIGNvbmN1cnJlbnRseS4gVGFrZXMgYW4gaW50ZWdlciwgb3IgYSBrZXl3b3JkICgiYXV0byIsICJIT1NUX0NQVVMiLCAiSE9TVF9SQU0iKSwgb3B0aW9uYWxseSBmb2xsb3dlZCBieSBhbiBvcGVyYXRpb24gKFstfCpdPGZsb2F0PikgZWcuICJhdXRvIiwgIkhPU1RfQ1BVUyouNSIuIDAgbWVhbnMgbG9jYWwgcmVzb3VyY2VzIHdpbGwgbGltaXQgdGhlIG51bWJlciBvZiBsb2NhbCB0ZXN0IGpvYnMgdG8gcnVuIGNvbmN1cnJlbnRseSBpbnN0ZWFkLiBTZXR0aW5nIHRoaXMgZ3JlYXRlciB0aGFuIHRoZSB2YWx1ZSBmb3IgLS1qb2JzIGlzIGluZWZmZWN0dWFsLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OSgdURVNUSU5HUAEKvAMKJWV4cGVyaW1lbnRhbF93b3JrZXJfZm9yX3JlcG9fZmV0Y2hpbmcQABquAVRoZSB0aHJlYWRpbmcgbW9kZSB0byB1c2UgZm9yIHJlcG8gZmV0Y2hpbmcuIElmIHNldCB0byAnb2ZmJywgbm8gd29ya2VyIHRocmVhZCBpcyB1c2VkLCBhbmQgdGhlIHJlcG8gZmV0Y2hpbmcgaXMgc3ViamVjdCB0byByZXN0YXJ0cy4gT3RoZXJ3aXNlLCB1c2VzIGEgdmlydHVhbCB3b3JrZXIgdGhyZWFkLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoGUkVNT1RFUAEKiAMKImV4cGVyaW1lbnRhbF9sb2NhbF9sb2NrZnJlZV9vdXRwdXQQARrAAVdoZW4gdHJ1ZSwgdGhlIGxvY2FsIHNwYXduIHJ1bm5lciBkb2Vzbid0IGxvY2sgdGhlIG91dHB1dCB0cmVlIGR1cmluZyBkeW5hbWljIGV4ZWN1dGlvbi4gSW5zdGVhZCwgc3Bhd25zIGFyZSBhbGxvd2VkIHRvIGV4ZWN1dGUgdW50aWwgdGhleSBhcmUgZXhwbGljaXRseSBpbnRlcnJ1cHRlZCBieSBhIGZhc3RlciByZW1vdGUgYWN0aW9uLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OSgxVTkRPQ1VNRU5URURQAAraAgoyZXhwZXJpbWVudGFsX2phdmFfcHJvdG9fYWRkX2FsbG93ZWRfcHVibGljX2ltcG9ydHMQARouVGhpcyBmbGFnIGlzIGEgbm9vcCBhbmQgc2NoZWR1bGVkIGZvciByZW1vdmFsLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoFTk9fT1BCDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAK/gMKJGJlc19jaGVja19wcmVjZWRpbmdfbGlmZWN5Y2xlX2V2ZW50cxABGugBU2V0cyB0aGUgZmllbGQgY2hlY2tfcHJlY2VkaW5nX2xpZmVjeWNsZV9ldmVudHNfcHJlc2VudCBvbiBQdWJsaXNoQnVpbGRUb29sRXZlbnRTdHJlYW1SZXF1ZXN0IHdoaWNoIHRlbGxzIEJFUyB0byBjaGVjayB3aGV0aGVyIGl0IHByZXZpb3VzbHkgcmVjZWl2ZWQgSW52b2NhdGlvbkF0dGVtcHRTdGFydGVkIGFuZCBCdWlsZEVucXVldWVkIGV2ZW50cyBtYXRjaGluZyB0aGUgY3VycmVudCB0b29sIGV2ZW50LiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAAKwwEKI2V4cGVyaW1lbnRhbF9wYXJhbGxlbF9hcXVlcnlfb3V0cHV0EAEaBk5vLW9wLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BKBVFVRVJZUAAK4wIKE3RhcmdldF9wYXR0ZXJuX2ZpbGUQABqjAUlmIHNldCwgYnVpbGQgd2lsbCByZWFkIHBhdHRlcm5zIGZyb20gdGhlIGZpbGUgbmFtZWQgaGVyZSwgcmF0aGVyIHRoYW4gb24gdGhlIGNvbW1hbmQgbGluZS4gSXQgaXMgYW4gZXJyb3IgdG8gc3BlY2lmeSBhIGZpbGUgaGVyZSBhcyB3ZWxsIGFzIGNvbW1hbmQtbGluZSBwYXR0ZXJucy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6DkNIQU5HRVNfSU5QVVRTSg5HRU5FUklDX0lOUFVUU1ABCo0CChZqYXZhX29wdGltaXphdGlvbl9tb2RlEAAaC0RvIG5vdCB1c2UuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgVOT19PUEoMVU5ET0NVTUVOVEVEUAEK1gQKHGV4cGVyaW1lbnRhbF9zcGF3bl9zY2hlZHVsZXIQABqVA0VuYWJsZSBkeW5hbWljIGV4ZWN1dGlvbiBieSBydW5uaW5nIGFjdGlvbnMgbG9jYWxseSBhbmQgcmVtb3RlbHkgaW4gcGFyYWxsZWwuIEJhemVsIHNwYXducyBlYWNoIGFjdGlvbiBsb2NhbGx5IGFuZCByZW1vdGVseSBhbmQgcGlja3MgdGhlIG9uZSB0aGF0IGNvbXBsZXRlcyBmaXJzdC4gSWYgYW4gYWN0aW9uIHN1cHBvcnRzIHdvcmtlcnMsIHRoZSBsb2NhbCBhY3Rpb24gd2lsbCBiZSBydW4gaW4gdGhlIHBlcnNpc3RlbnQgd29ya2VyIG1vZGUuIFRvIGVuYWJsZSBkeW5hbWljIGV4ZWN1dGlvbiBmb3IgYW4gaW5kaXZpZHVhbCBhY3Rpb24gbW5lbW9uaWMsIHVzZSB0aGUgYC0taW50ZXJuYWxfc3Bhd25fc2NoZWR1bGVyYCBhbmQgYC0tc3RyYXRlZ3k9PG1uZW1vbmljPj1keW5hbWljYCBmbGFncyBpbnN0ZWFkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFAACpkECghyZXBvX2VudhAAGpACU3BlY2lmaWVzIGFkZGl0aW9uYWwgZW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIGJlIGF2YWlsYWJsZSBvbmx5IGZvciByZXBvc2l0b3J5IHJ1bGVzLiBOb3RlIHRoYXQgcmVwb3NpdG9yeSBydWxlcyBzZWUgdGhlIGZ1bGwgZW52aXJvbm1lbnQgYW55d2F5LCBidXQgaW4gdGhpcyB3YXkgY29uZmlndXJhdGlvbiBpbmZvcm1hdGlvbiBjYW4gYmUgcGFzc2VkIHRvIHJlcG9zaXRvcmllcyB0aHJvdWdoIG9wdGlvbnMgd2l0aG91dCBpbnZhbGlkYXRpbmcgdGhlIGFjdGlvbiBncmFwaC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAE6FEFDVElPTl9DT01NQU5EX0xJTkVTShFPVVRQVVRfUEFSQU1FVEVSU1ABCrYBChJ4bWw6ZGVmYXVsdF92YWx1ZXMQARp7SWYgdHJ1ZSwgcnVsZSBhdHRyaWJ1dGVzIHdob3NlIHZhbHVlIGlzIG5vdCBleHBsaWNpdGx5IHNwZWNpZmllZCBpbiB0aGUgQlVJTEQgZmlsZSBhcmUgcHJpbnRlZDsgb3RoZXJ3aXNlIHRoZXkgYXJlIG9taXR0ZWQuIgVxdWVyeTAAOg9URVJNSU5BTF9PVVRQVVRKBVFVRVJZUAAKhAMKGm1heF9jb25maWdfY2hhbmdlc190b19zaG93EAAawwFXaGVuIGRpc2NhcmRpbmcgdGhlIGFuYWx5c2lzIGNhY2hlIGR1ZSB0byBhIGNoYW5nZSBpbiB0aGUgYnVpbGQgb3B0aW9ucywgZGlzcGxheXMgdXAgdG8gdGhlIGdpdmVuIG51bWJlciBvZiBjaGFuZ2VkIG9wdGlvbiBuYW1lcy4gSWYgdGhlIG51bWJlciBnaXZlbiBpcyAtMSwgYWxsIGNoYW5nZWQgb3B0aW9ucyB3aWxsIGJlIGRpc3BsYXllZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D1RFUk1JTkFMX09VVFBVVEoHTE9HR0lOR1ABCuYCCgdwcm9maWxlEAAabUlmIHNldCwgcHJvZmlsZSBCYXplbCBhbmQgd3JpdGUgZGF0YSB0byB0aGUgc3BlY2lmaWVkIGZpbGUuIFVzZSBiYXplbCBhbmFseXplLXByb2ZpbGUgdG8gYW5hbHl6ZSB0aGUgcHJvZmlsZS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6EEJBWkVMX01PTklUT1JJTkdKB0xPR0dJTkdQAQrIAgoxaW50ZXJuYWxfcGVyc2lzdGVudF9tdWx0aXBsZXhfYW5kcm9pZF9kZXhfZGVzdWdhchABGk1UcmFja2luZyBmbGFnIGZvciB3aGVuIG11bHRpcGxleGVkIGRleGluZyBhbmQgZGVzdWdhcmluZyB3b3JrZXJzIGFyZSBlbmFibGVkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlM6CUVYRUNVVElPTkoMVU5ET0NVTUVOVEVEUAAKzgEKIGV4cGVyaW1lbnRhbF9ieXRlY29kZV9vcHRpbWl6ZXJzEAAaC0RvIG5vdCB1c2UuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSgxVTkRPQ1VNRU5URURQAQrjAQoRYWxsb3dfbG9jYWxfdGVzdHMQARotSWYgdHJ1ZSwgQmF6ZWwgd2lsbCBhbGxvdyBsb2NhbCB0ZXN0cyB0byBydW4uIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KDFVORE9DVU1FTlRFRFAACtMBCi1leHBlcmltZW50YWxfYnVpbGRfdHJhbnNpdGl2ZV9weXRob25fcnVuZmlsZXMQARoFTm8tb3AiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QSgxVTkRPQ1VNRU5URURQAAqBAgofZGlzY2FyZF9hY3Rpb25zX2FmdGVyX2V4ZWN1dGlvbhABGixUaGlzIG9wdGlvbiBpcyBkZXByZWNhdGVkIGFuZCBoYXMgbm8gZWZmZWN0LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BCE0lOQ09NUEFUSUJMRV9DSEFOR0VKDFVORE9DVU1FTlRFRFAACuMBChNob3N0X2phdmFfdG9vbGNoYWluEAAaLU5vLW9wLiBLZXB0IGhlcmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoMVU5ET0NVTUVOVEVEUAEKkgEKEGV4dGVuc2lvbl91c2FnZXMQABpVU3BlY2lmeSBtb2R1bGVzIHdob3NlIGV4dGVuc2lvbiB1c2FnZXMgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gdGhlIHNob3dfZXh0ZW5zaW9uIHF1ZXJ5LiIDbW9kMAA6D1RFUk1JTkFMX09VVFBVVEoLTU9EX0NPTU1BTkRQAQrXAwoWcmVtb3RlX3JldHJ5X21heF9kZWxheRAAGtgBVGhlIG1heGltdW0gYmFja29mZiBkZWxheSBiZXR3ZWVuIHJlbW90ZSByZXRyeSBhdHRlbXB0cy4gRm9sbG93aW5nIHVuaXRzIGNhbiBiZSB1c2VkOiBEYXlzIChkKSwgaG91cnMgKGgpLCBtaW51dGVzIChtKSwgc2Vjb25kcyAocyksIGFuZCBtaWxsaXNlY29uZHMgKG1zKS4gSWYgdGhlIHVuaXQgaXMgb21pdHRlZCwgdGhlIHZhbHVlIGlzIGludGVycHJldGVkIGFzIHNlY29uZHMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgZSRU1PVEVQAQreAwoxZXhwZXJpbWVudGFsX2luY2x1ZGVfeGNvZGVfZXhlY3V0aW9uX3JlcXVpcmVtZW50cxABGs0BSWYgc2V0LCBhZGQgYSAicmVxdWlyZXMteGNvZGU6e3ZlcnNpb259IiBleGVjdXRpb24gcmVxdWlyZW1lbnQgdG8gZXZlcnkgWGNvZGUgYWN0aW9uLiAgSWYgdGhlIFhjb2RlIHZlcnNpb24gaGFzIGEgaHlwaGVuYXRlZCBsYWJlbCwgIGFsc28gYWRkIGEgInJlcXVpcmVzLXhjb2RlLWxhYmVsOnt2ZXJzaW9uX2xhYmVsfSIgZXhlY3V0aW9uIHJlcXVpcmVtZW50LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEU6FExPQURJTkdfQU5EX0FOQUxZU0lTOglFWEVDVVRJT05CDEVYUEVSSU1FTlRBTEoJVE9PTENIQUlOUAAK/gUKDG9yZGVyX291dHB1dBAAGsgFT3V0cHV0IHRoZSByZXN1bHRzIHVub3JkZXJlZCAobm8pLCBkZXBlbmRlbmN5LW9yZGVyZWQgKGRlcHMpLCBvciBmdWxseSBvcmRlcmVkIChmdWxsKS4gVGhlIGRlZmF1bHQgaXMgJ2F1dG8nLCBtZWFuaW5nIHRoYXQgcmVzdWx0cyBhcmUgb3V0cHV0IGVpdGhlciBkZXBlbmRlbmN5LW9yZGVyZWQgb3IgZnVsbHkgb3JkZXJlZCwgZGVwZW5kaW5nIG9uIHRoZSBvdXRwdXQgZm9ybWF0dGVyIChkZXBlbmRlbmN5LW9yZGVyZWQgZm9yIHByb3RvLCBtaW5yYW5rLCBtYXhyYW5rLCBhbmQgZ3JhcGgsIGZ1bGx5IG9yZGVyZWQgZm9yIGFsbCBvdGhlcnMpLiBXaGVuIG91dHB1dCBpcyBmdWxseSBvcmRlcmVkLCBub2RlcyBhcmUgcHJpbnRlZCBpbiBhIGZ1bGx5IGRldGVybWluaXN0aWMgKHRvdGFsKSBvcmRlci4gRmlyc3QsIGFsbCBub2RlcyBhcmUgc29ydGVkIGFscGhhYmV0aWNhbGx5LiBUaGVuLCBlYWNoIG5vZGUgaW4gdGhlIGxpc3QgaXMgdXNlZCBhcyB0aGUgc3RhcnQgb2YgYSBwb3N0LW9yZGVyIGRlcHRoLWZpcnN0IHNlYXJjaCBpbiB3aGljaCBvdXRnb2luZyBlZGdlcyB0byB1bnZpc2l0ZWQgbm9kZXMgYXJlIHRyYXZlcnNlZCBpbiBhbHBoYWJldGljYWwgb3JkZXIgb2YgdGhlIHN1Y2Nlc3NvciBub2Rlcy4gRmluYWxseSwgbm9kZXMgYXJlIHByaW50ZWQgaW4gdGhlIHJldmVyc2Ugb2YgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgd2VyZSB2aXNpdGVkLiIFcXVlcnkwADoPVEVSTUlOQUxfT1VUUFVUSgVRVUVSWVABCvcECiVtZW1vcnlfcHJvZmlsZV9zdGFibGVfaGVhcF9wYXJhbWV0ZXJzEAAa3wJUdW5lIG1lbW9yeSBwcm9maWxlJ3MgY29tcHV0YXRpb24gb2Ygc3RhYmxlIGhlYXAgYXQgZW5kIG9mIGJ1aWxkLiBTaG91bGQgYmUgYW5kIGV2ZW4gbnVtYmVyIG9mICBpbnRlZ2VycyBzZXBhcmF0ZWQgYnkgY29tbWFzLiBJbiBlYWNoIHBhaXIgdGhlIGZpcnN0IGludGVnZXIgaXMgdGhlIG51bWJlciBvZiBHQ3MgdG8gcGVyZm9ybS4gVGhlIHNlY29uZCBpbnRlZ2VyIGluIGVhY2ggcGFpciBpcyB0aGUgbnVtYmVyIG9mIHNlY29uZHMgdG8gd2FpdCBiZXR3ZWVuIEdDcy4gRXg6IDIsNCw0LDAgd291bGQgMiBHQ3Mgd2l0aCBhIDRzZWMgcGF1c2UsIGZvbGxvd2VkIGJ5IDQgR0NzIHdpdGggemVybyBzZWNvbmQgcGF1c2UiD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6EEJBWkVMX01PTklUT1JJTkdKB0xPR0dJTkdQAQqCAwogZXhwZXJpbWVudGFsX2phdmFfbGlicmFyeV9leHBvcnQQARpMSWYgZW5hYmxlZCwgZXhwZXJpbWVudGFsX2phdmFfbGlicmFyeV9leHBvcnRfZG9fbm90X3VzZSBtb2R1bGUgaXMgYXZhaWxhYmxlLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKElNUQVJMQVJLX1NFTUFOVElDU1AACssDCh9leHBlcmltZW50YWxfY2hlY2tfb3V0cHV0X2ZpbGVzEAEa9gFDaGVjayBmb3IgbW9kaWZpY2F0aW9ucyBtYWRlIHRvIHRoZSBvdXRwdXQgZmlsZXMgb2YgYSBidWlsZC4gQ29uc2lkZXIgc2V0dGluZyB0aGlzIGZsYWcgdG8gZmFsc2UgaWYgeW91IGRvbid0IGV4cGVjdCB0aGVzZSBmaWxlcyB0byBjaGFuZ2Ugb3V0c2lkZSBvZiBiYXplbCBzaW5jZSBpdCB3aWxsIHNwZWVkIHVwIHN1YnNlcXVlbnQgcnVucyBhcyB0aGV5IHdvbid0IGhhdmUgdG8gY2hlY2sgYSBwcmV2aW91cyBydW4ncyBjYWNoZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIEc3luYyIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDFVORE9DVU1FTlRFRFAACqMEChhleHBlcmltZW50YWxfY3BwX21vZHVsZXMQARqxAkVuYWJsZXMgZXhwZXJpbWVudGFsIEMrKzIwIG1vZHVsZXMgc3VwcG9ydC4gVXNlIGl0IHdpdGggYG1vZHVsZV9pbnRlcmZhY2VzYCBhdHRyaWJ1dGUgb24gYGNjX2JpbmFyeWAgYW5kIGBjY19saWJyYXJ5YC4gV2hpbGUgdGhlIHN1cHBvcnQgaXMgYmVoaW5kIHRoZSBleHBlcmltZW50YWwgZmxhZywgdGhlcmUgYXJlIG5vIGd1YXJhbnRlZXMgYWJvdXQgaW5jb21wYXRpYmxlIGNoYW5nZXMgdG8gaXQgb3IgZXZlbiBrZWVwaW5nIHRoZSBzdXBwb3J0IGluIHRoZSBmdXR1cmUuIENvbnNpZGVyIHRob3NlIHJpc2tzIHdoZW4gdXNpbmcgaXQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJUzoJRVhFQ1VUSU9OOg5DSEFOR0VTX0lOUFVUU0IMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAAqcAgonaW5jb21wYXRpYmxlX2Rpc2FibGVfbGVnYWN5X2NjX3Byb3ZpZGVyEAEaME5vLW9wIGZsYWcuIFdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKDFVORE9DVU1FTlRFRFAACtQDCh1pbmNvbXBhdGlibGVfYXV0b19leGVjX2dyb3VwcxABGvEBV2hlbiBlbmFibGVkLCBhbiBleGVjIGdyb3VwcyBpcyBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQgZm9yIGVhY2ggdG9vbGNoYWluIHVzZWQgYnkgYSBydWxlLiBGb3IgdGhpcyB0byB3b3JrIHJ1bGUgbmVlZHMgdG8gc3BlY2lmeSBgdG9vbGNoYWluYCBwYXJhbWV0ZXIgb24gaXRzIGFjdGlvbnMuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2JhemVsYnVpbGQvYmF6ZWwvaXNzdWVzLzE3MTM0LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShFPVVRQVVRfUEFSQU1FVEVSU1AACvsCChxleHBlcmltZW50YWxfdXNlX2xsdm1fY292bWFwEAEae0lmIHNwZWNpZmllZCwgQmF6ZWwgd2lsbCBnZW5lcmF0ZSBsbHZtLWNvdiBjb3ZlcmFnZSBtYXAgaW5mb3JtYXRpb24gcmF0aGVyIHRoYW4gZ2NvdiB3aGVuIGNvbGxlY3RfY29kZV9jb3ZlcmFnZSBpcyBlbmFibGVkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoOQ0hBTkdFU19JTlBVVFM6D0FGRkVDVFNfT1VUUFVUUzoUTE9BRElOR19BTkRfQU5BTFlTSVNCDEVYUEVSSU1FTlRBTEoRT1VUUFVUX1BBUkFNRVRFUlNQAAqDAQoebW9iaWxlX2luc3RhbGxfc3VwcG9ydGVkX3J1bGVzEAAaJ1RoZSBzdXBwb3J0ZWQgcnVsZXMgZm9yIG1vYmlsZS1pbnN0YWxsLiIObW9iaWxlLWluc3RhbGwwADoUTE9BRElOR19BTkRfQU5BTFlTSVNKDFVORE9DVU1FTlRFRFABCt8CChhkaXJlY3RvcnlfY3JlYXRpb25fY2FjaGUQABqhAURlc2NyaWJlcyB0aGUgY2FjaGUgdXNlZCB0byBzdG9yZSBrbm93biByZWd1bGFyIGRpcmVjdG9yaWVzIGFzIHRoZXkncmUgY3JlYXRlZC4gUGFyZW50IGRpcmVjdG9yaWVzIG9mIG91dHB1dCBmaWxlcyBhcmUgY3JlYXRlZCBvbi1kZW1hbmQgZHVyaW5nIGFjdGlvbiBleGVjdXRpb24uIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KDFVORE9DVU1FTlRFRFABCoEDChpleHBlcmltZW50YWxfcGxhdGZvcm1zX2FwaRABGlhJZiBzZXQgdG8gdHJ1ZSwgZW5hYmxlcyBhIG51bWJlciBvZiBwbGF0Zm9ybS1yZWxhdGVkIFN0YXJsYXJrIEFQSXMgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0IMRVhQRVJJTUVOVEFMShJTVEFSTEFSS19TRU1BTlRJQ1NQAArnAgocaW5jb21wYXRpYmxlX25vX2F0dHJfbGljZW5zZRABGjVJZiBzZXQgdG8gdHJ1ZSwgZGlzYWJsZXMgdGhlIGZ1bmN0aW9uIGBhdHRyLmxpY2Vuc2VgLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUQlVJTERfRklMRV9TRU1BTlRJQ1NCE0lOQ09NUEFUSUJMRV9DSEFOR0VKElNUQVJMQVJLX1NFTUFOVElDU1AACpIDCi9pbmNvbXBhdGlibGVfZGlzYWJsZV9ub25fZXhlY3V0YWJsZV9qYXZhX2JpbmFyeRABGlJJZiB0cnVlLCBqYXZhX2JpbmFyeSBpcyBhbHdheXMgZXhlY3V0YWJsZS4gY3JlYXRlX2V4ZWN1dGFibGUgYXR0cmlidXRlIGlzIHJlbW92ZWQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoNVU5DQVRFR09SSVpFRFAACscDCiVidWlsZF9ldmVudF90ZXh0X2ZpbGVfcGF0aF9jb252ZXJzaW9uEAEasAFDb252ZXJ0IHBhdGhzIGluIHRoZSB0ZXh0IGZpbGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGJ1aWxkIGV2ZW50IHByb3RvY29sIHRvIG1vcmUgZ2xvYmFsbHkgdmFsaWQgVVJJcyB3aGVuZXZlciBwb3NzaWJsZTsgaWYgZGlzYWJsZWQsIHRoZSBmaWxlOi8vIHVyaSBzY2hlbWUgd2lsbCBhbHdheXMgYmUgdXNlZCIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAAKnAMKDHBhY2thZ2VfcGF0aBAAGtkBQSBjb2xvbi1zZXBhcmF0ZWQgbGlzdCBvZiB3aGVyZSB0byBsb29rIGZvciBwYWNrYWdlcy4gRWxlbWVudHMgYmVnaW5uaW5nIHdpdGggJyV3b3Jrc3BhY2UlJyBhcmUgcmVsYXRpdmUgdG8gdGhlIGVuY2xvc2luZyB3b3Jrc3BhY2UuIElmIG9taXR0ZWQgb3IgZW1wdHksIHRoZSBkZWZhdWx0IGlzIHRoZSBvdXRwdXQgb2YgJ2JhemVsIGluZm8gZGVmYXVsdC1wYWNrYWdlLXBhdGgnLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCpwDCh5leHBlcmltZW50YWxfZ29vZ2xlX2xlZ2FjeV9hcGkQARpvSWYgc2V0IHRvIHRydWUsIGV4cG9zZXMgYSBudW1iZXIgb2YgZXhwZXJpbWVudGFsIHBpZWNlcyBvZiBTdGFybGFyayBidWlsZCBBUEkgcGVydGFpbmluZyB0byBHb29nbGUgbGVnYWN5IGNvZGUuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0IMRVhQRVJJTUVOVEFMShJTVEFSTEFSS19TRU1BTlRJQ1NQAArYAgopZXhwZXJpbWVudGFsX2NvbGxlY3Rfc3lzdGVtX25ldHdvcmtfdXNhZ2UQARo9SWYgZW5hYmxlZCwgdGhlIHByb2ZpbGVyIGNvbGxlY3RzIHRoZSBzeXN0ZW0ncyBuZXR3b3JrIHVzYWdlLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoQQkFaRUxfTU9OSVRPUklOR0oHTE9HR0lOR1AACpwECgRqb2JzEAAaxAJUaGUgbnVtYmVyIG9mIGNvbmN1cnJlbnQgam9icyB0byBydW4uIFRha2VzIGFuIGludGVnZXIsIG9yIGEga2V5d29yZCAoImF1dG8iLCAiSE9TVF9DUFVTIiwgIkhPU1RfUkFNIiksIG9wdGlvbmFsbHkgZm9sbG93ZWQgYnkgYW4gb3BlcmF0aW9uIChbLXwqXTxmbG9hdD4pIGVnLiAiYXV0byIsICJIT1NUX0NQVVMqLjUiLiBWYWx1ZXMgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDUwMDAuIFZhbHVlcyBhYm92ZSAyNTAwIG1heSBjYXVzZSBtZW1vcnkgaXNzdWVzLiAiYXV0byIgY2FsY3VsYXRlcyBhIHJlYXNvbmFibGUgZGVmYXVsdCBiYXNlZCBvbiBob3N0IHJlc291cmNlcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yKgFqMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVABCpQCCg9lbmFibGVfcnVuZmlsZXMQARpVRW5hYmxlIHJ1bmZpbGVzIHN5bWxpbmsgdHJlZTsgQnkgZGVmYXVsdCwgaXQncyBvZmYgb24gV2luZG93cywgb24gb24gb3RoZXIgcGxhdGZvcm1zLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1AACt4BCgpzcGxpdF9hcGtzEAEagAFXaGV0aGVyIHRvIHVzZSBzcGxpdCBhcGtzIHRvIGluc3RhbGwgYW5kIHVwZGF0ZSB0aGUgYXBwbGljYXRpb24gb24gdGhlIGRldmljZS4gV29ya3Mgb25seSB3aXRoIGRldmljZXMgd2l0aCBNYXJzaG1hbGxvdyBvciBsYXRlciIObW9iaWxlLWluc3RhbGwwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6D0FGRkVDVFNfT1VUUFVUU0oQT1VUUFVUX1NFTEVDVElPTlAACq0BCgxjb21tYW5kX3BvcnQQABpJUG9ydCB0byBzdGFydCB1cCB0aGUgZ1JQQyBjb21tYW5kIHNlcnZlciBvbi4gSWYgMCwgbGV0IHRoZSBrZXJuZWwgY2hvb3NlLiIHc3RhcnR1cDAAOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURTocQkFaRUxfSU5URVJOQUxfQ09ORklHVVJBVElPTkoMVU5ET0NVTUVOVEVEUAEK8QMKK2luY29tcGF0aWJsZV91c2VfY2NfY29uZmlndXJlX2Zyb21fcnVsZXNfY2MQARqvAVdoZW4gdHJ1ZSwgQmF6ZWwgd2lsbCBubyBsb25nZXIgYWxsb3cgdXNpbmcgY2NfY29uZmlndXJlIGZyb20gQGJhemVsX3Rvb2xzLiBQbGVhc2Ugc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iYXplbGJ1aWxkL2JhemVsL2lzc3Vlcy8xMDEzNCBmb3IgZGV0YWlscyBhbmQgbWlncmF0aW9uIGluc3RydWN0aW9ucy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShJTVEFSTEFSS19TRU1BTlRJQ1NQAAr/AwoXbGVnYWN5X2dsb2JiaW5nX3RocmVhZHMQABqyAk51bWJlciBvZiB0aHJlYWRzIHRvIHVzZSBmb3IgZ2xvYiBldmFsdWF0aW9uLiBUYWtlcyBhbiBpbnRlZ2VyLCBvciBhIGtleXdvcmQgKCJhdXRvIiwgIkhPU1RfQ1BVUyIsICJIT1NUX1JBTSIpLCBvcHRpb25hbGx5IGZvbGxvd2VkIGJ5IGFuIG9wZXJhdGlvbiAoWy18Kl08ZmxvYXQ+KSBlZy4gImF1dG8iLCAiSE9TVF9DUFVTKi41Ii4gImF1dG8iIG1lYW5zIHRvIHVzZSBhIHJlYXNvbmFibGUgdmFsdWUgZGVyaXZlZCBmcm9tIHRoZSBtYWNoaW5lJ3MgaGFyZHdhcmUgcHJvZmlsZSAoZS5nLiB0aGUgbnVtYmVyIG9mIHByb2Nlc3NvcnMpLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoMVU5ET0NVTUVOVEVEUAEKhQQKCnZlbmRvcl9kaXIQABqFAlNwZWNpZmllcyB0aGUgZGlyZWN0b3J5IHRoYXQgc2hvdWxkIGhvbGQgdGhlIGV4dGVybmFsIHJlcG9zaXRvcmllcyBpbiB2ZW5kb3IgbW9kZSwgd2hldGhlciBmb3IgdGhlIHB1cnBvc2Ugb2YgZmV0Y2hpbmcgdGhlbSBpbnRvIGl0IG9yIHVzaW5nIHRoZW0gd2hpbGUgYnVpbGRpbmcuIFRoZSBwYXRoIGNhbiBiZSBzcGVjaWZpZWQgYXMgZWl0aGVyIGFuIGFic29sdXRlIHBhdGggb3IgYSBwYXRoIHJlbGF0aXZlIHRvIHRoZSB3b3Jrc3BhY2UgZGlyZWN0b3J5LiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUTE9BRElOR19BTkRfQU5BTFlTSVNKBkJaTE1PRFABCvEGCiFleHBlcmltZW50YWxfY29udmVuaWVuY2Vfc3ltbGlua3MQARqfBVRoaXMgZmxhZyBjb250cm9scyBob3cgdGhlIGNvbnZlbmllbmNlIHN5bWxpbmtzICh0aGUgc3ltbGlua3MgdGhhdCBhcHBlYXIgaW4gdGhlIHdvcmtzcGFjZSBhZnRlciB0aGUgYnVpbGQpIHdpbGwgYmUgbWFuYWdlZC4gUG9zc2libGUgdmFsdWVzOgogIG5vcm1hbCAoZGVmYXVsdCk6IEVhY2gga2luZCBvZiBjb252ZW5pZW5jZSBzeW1saW5rIHdpbGwgYmUgY3JlYXRlZCBvciBkZWxldGVkLCBhcyBkZXRlcm1pbmVkIGJ5IHRoZSBidWlsZC4KICBjbGVhbjogQWxsIHN5bWxpbmtzIHdpbGwgYmUgdW5jb25kaXRpb25hbGx5IGRlbGV0ZWQuCiAgaWdub3JlOiBTeW1saW5rcyB3aWxsIG5vdCBiZSBjcmVhdGVkIG9yIGNsZWFuZWQgdXAuCiAgbG9nX29ubHk6IEdlbmVyYXRlIGxvZyBtZXNzYWdlcyBhcyBpZiAnbm9ybWFsJyB3ZXJlIHBhc3NlZCwgYnV0IGRvbid0IGFjdHVhbGx5IHBlcmZvcm0gYW55IGZpbGVzeXN0ZW0gb3BlcmF0aW9ucyAodXNlZnVsIGZvciB0b29scykuCk5vdGUgdGhhdCBvbmx5IHN5bWxpbmtzIHdob3NlIG5hbWVzIGFyZSBnZW5lcmF0ZWQgYnkgdGhlIGN1cnJlbnQgdmFsdWUgb2YgLS1zeW1saW5rX3ByZWZpeCBjYW4gYmUgYWZmZWN0ZWQ7IGlmIHRoZSBwcmVmaXggY2hhbmdlcywgYW55IHByZS1leGlzdGluZyBzeW1saW5rcyB3aWxsIGJlIGxlZnQgYWxvbmUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAAKyQQKDHRlc3Rfc3VtbWFyeRAAGpYDU3BlY2lmaWVzIHRoZSBkZXNpcmVkIGZvcm1hdCBvZiB0aGUgdGVzdCBzdW1tYXJ5LiBWYWxpZCB2YWx1ZXMgYXJlICdzaG9ydCcgdG8gcHJpbnQgaW5mb3JtYXRpb24gb25seSBhYm91dCB0ZXN0cyBleGVjdXRlZCwgJ3RlcnNlJywgdG8gcHJpbnQgaW5mb3JtYXRpb24gb25seSBhYm91dCB1bnN1Y2Nlc3NmdWwgdGVzdHMgdGhhdCB3ZXJlIHJ1biwgJ2RldGFpbGVkJyB0byBwcmludCBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCBmYWlsZWQgdGVzdCBjYXNlcywgJ3Rlc3RjYXNlJyB0byBwcmludCBzdW1tYXJ5IGluIHRlc3QgY2FzZSByZXNvbHV0aW9uLCBkbyBub3QgcHJpbnQgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgZmFpbGVkIHRlc3QgY2FzZXMgYW5kICdub25lJyB0byBvbWl0IHRoZSBzdW1tYXJ5LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPVEVSTUlOQUxfT1VUUFVUSgdMT0dHSU5HUAEKwQIKC2JpbmFyeV9wYXRoEAAaJlRoZSBhYnNvbHV0ZSBwYXRoIG9mIHRoZSBiYXplbCBiaW5hcnkuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg9BRkZFQ1RTX09VVFBVVFM6EEJBWkVMX01PTklUT1JJTkdCBkhJRERFTkoMVU5ET0NVTUVOVEVEUAEKrwQKF2VuZm9yY2VfcHJvamVjdF9jb25maWdzEAEayAJJZiB0cnVlLCBpbnRlcmFjdGl2ZSBidWlsZHMgbWF5IG9ubHkgcGFzcyB0aGUgLS1zY2xfY29uZmlnIGJ1aWxkIGZsYWc7IHRoZXkgbWF5IG5vdCB1c2UgYW55IG90aGVyIGJ1aWxkIGZsYWdzLiAtLXNjbF9jb25maWcgbXVzdCBiZSBzZXQgdG8gYW4gb2ZmaWNpYWxseSBzdXBvcnRlZCBwcm9qZWN0IGNvbmZpZ3VyYXRpb24uIFN1cHBvcnRlZCBjb25maWd1cmF0aW9ucyBhcmUgZGVmaW5lZCBpbiB0aGUgdGFyZ2V0J3MgUFJPSkVDVC5zY2wsIHdoaWNoIGNhbiBiZSBmb3VuZCBieSB3YWxraW5nIHVwIHRoZSB0YXJnZXQncyBwYWNrYWdnZSBwYXRoLiBTZWUgYi8zMjQxMjY3NDUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJUzoPQUZGRUNUU19PVVRQVVRTQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFAACrMCChxydW5zX3Blcl90ZXN0X2RldGVjdHNfZmxha2VzEAEac0lmIHRydWUsIGFueSBzaGFyZCBpbiB3aGljaCBhdCBsZWFzdCBvbmUgcnVuL2F0dGVtcHQgcGFzc2VzIGFuZCBhdCBsZWFzdCBvbmUgcnVuL2F0dGVtcHQgZmFpbHMgZ2V0cyBhIEZMQUtZIHN0YXR1cy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAArLBAoGY29uZmlnEAAa1QJTZWxlY3RzIGFkZGl0aW9uYWwgY29uZmlnIHNlY3Rpb25zIGZyb20gdGhlIHJjIGZpbGVzOyBmb3IgZXZlcnkgPGNvbW1hbmQ+LCBpdCBhbHNvIHB1bGxzIGluIHRoZSBvcHRpb25zIGZyb20gPGNvbW1hbmQ+Ojxjb25maWc+IGlmIHN1Y2ggYSBzZWN0aW9uIGV4aXN0czsgaWYgdGhpcyBzZWN0aW9uIGRvZXNuJ3QgZXhpc3QgaW4gYW55IC5yYyBmaWxlLCBCbGF6ZSBmYWlscyB3aXRoIGFuIGVycm9yLiBUaGUgY29uZmlnIHNlY3Rpb25zIGFuZCBmbGFnIGNvbWJpbmF0aW9ucyB0aGV5IGFyZSBlcXVpdmFsZW50IHRvIGFyZSBsb2NhdGVkIGluIHRoZSB0b29scy8qLmJsYXplcmMgY29uZmlnIGZpbGVzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wAToHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCv8CCgpkaXNrX2NhY2hlEAAahQFBIHBhdGggdG8gYSBkaXJlY3Rvcnkgd2hlcmUgQmF6ZWwgY2FuIHJlYWQgYW5kIHdyaXRlIGFjdGlvbnMgYW5kIGFjdGlvbiBvdXRwdXRzLiBJZiB0aGUgZGlyZWN0b3J5IGRvZXMgbm90IGV4aXN0LCBpdCB3aWxsIGJlIGNyZWF0ZWQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEK1QEKCGhvc3RfY3B1EAAaDVRoZSBob3N0IENQVS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6DkNIQU5HRVNfSU5QVVRTOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAEKuAIKLGV4cGVyaW1lbnRhbF9jcHBfY29tcGlsZV9yZXNvdXJjZV9lc3RpbWF0aW9uEAEaWUlmIGVuYWJsZWQsIHdpbGwgZXN0aW1hdGUgcHJlY2lzZSByZXNvdXJjZSB1c2FnZSBmb3IgbG9jYWwgZXhlY3V0aW9uIG9mIENwcENvbXBpbGVBY3Rpb24uIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05CDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAK7gIKKGV4cGVyaW1lbnRhbF9jb2xsZWN0X3Jlc291cmNlX2VzdGltYXRpb24QARpUSWYgZW5hYmxlZCwgdGhlIHByb2ZpbGVyIGNvbGxlY3RzIENQVSBhbmQgbWVtb3J5IHVzYWdlIGVzdGltYXRpb24gZm9yIGxvY2FsIGFjdGlvbnMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhBCQVpFTF9NT05JVE9SSU5HSgdMT0dHSU5HUAAK7wEKJnByb3RvOmluY2x1ZGVfYXR0cmlidXRlX3NvdXJjZV9hc3BlY3RzEAEajwFQb3B1bGF0ZSB0aGUgc291cmNlX2FzcGVjdF9uYW1lIHByb3RvIGZpZWxkIG9mIGVhY2ggQXR0cmlidXRlIHdpdGggdGhlIHNvdXJjZSBhc3BlY3QgdGhhdCB0aGUgYXR0cmlidXRlIGNhbWUgZnJvbSAoZW1wdHkgc3RyaW5nIGlmIGl0IGRpZCBub3QpLiIGYXF1ZXJ5IgZjcXVlcnkiBXF1ZXJ5MAA6D1RFUk1JTkFMX09VVFBVVEoFUVVFUllQAArSAgoyaW5jb21wYXRpYmxlX2Rpc2FibGVfbGVnYWN5X2ZsYWdzX2NjX3Rvb2xjaGFpbl9hcGkQARpeRmxhZyBmb3IgZGlzYWJsaW5nIHRoZSBsZWdhY3kgY2NfdG9vbGNoYWluIFN0YXJsYXJrIEFQSSBmb3IgYWNjZXNzaW5nIGxlZ2FjeSBDUk9TU1RPT0wgZmllbGRzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BCE0lOQ09NUEFUSUJMRV9DSEFOR0VCCkRFUFJFQ0FURURKDFVORE9DVU1FTlRFRFAACrgDChVyZW1vdGVfZG93bmxvYWRfcmVnZXgQABqyAUZvcmNlIHJlbW90ZSBidWlsZCBvdXRwdXRzIHdob3NlIHBhdGggbWF0Y2hlcyB0aGlzIHBhdHRlcm4gdG8gYmUgZG93bmxvYWRlZCwgaXJyZXNwZWN0aXZlIG9mIC0tcmVtb3RlX2Rvd25sb2FkX291dHB1dHMuIE11bHRpcGxlIHBhdHRlcm5zIG1heSBiZSBzcGVjaWZpZWQgYnkgcmVwZWF0aW5nIHRoaXMgZmxhZy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAE6D0FGRkVDVFNfT1VUUFVUU0oGUkVNT1RFUAEK0AEKFGphdmFfcnVudGltZV92ZXJzaW9uEAAaGFRoZSBKYXZhIHJ1bnRpbWUgdmVyc2lvbiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCv0BChdjY19vdXRwdXRfZGlyZWN0b3J5X3RhZxAAGj5TcGVjaWZpZXMgYSBzdWZmaXggdG8gYmUgYWRkZWQgdG8gdGhlIGNvbmZpZ3VyYXRpb24gZGlyZWN0b3J5LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTSglUT09MQ0hBSU5QAQqhAgoTbWluX3BhcmFtX2ZpbGVfc2l6ZRAAGj1NaW5pbXVtIGNvbW1hbmQgbGluZSBsZW5ndGggYmVmb3JlIGNyZWF0aW5nIGEgcGFyYW1ldGVyIGZpbGUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJUzoJRVhFQ1VUSU9OOhRBQ1RJT05fQ09NTUFORF9MSU5FU0oMVU5ET0NVTUVOVEVEUAEKuAQKGmV4ZWN1dGlvbl9sb2dfY29tcGFjdF9maWxlEAAa+QJMb2cgdGhlIGV4ZWN1dGVkIHNwYXducyBpbnRvIHRoaXMgZmlsZSBhcyBsZW5ndGgtZGVsaW1pdGVkIEV4ZWNMb2dFbnRyeSBwcm90b3MsIGFjY29yZGluZyB0byBzcmMvbWFpbi9wcm90b2J1Zi9zcGF3bi5wcm90by4gVGhlIGVudGlyZSBmaWxlIGlzIHpzdGQgY29tcHJlc3NlZC4gUmVsYXRlZCBmbGFnczogLS1leGVjdXRpb25fbG9nX2JpbmFyeV9maWxlIChiaW5hcnkgcHJvdG9idWYgZm9ybWF0OyBtdXR1YWxseSBleGNsdXNpdmUpLCAtLWV4ZWN1dGlvbl9sb2dfanNvbl9maWxlICh0ZXh0IEpTT04gZm9ybWF0OyBtdXR1YWxseSBleGNsdXNpdmUpLCAtLXN1YmNvbW1hbmRzIChmb3IgZGlzcGxheWluZyBzdWJjb21tYW5kcyBpbiB0ZXJtaW5hbCBvdXRwdXQpLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCuQCChVzdHJpY3RfcHVibGljX2ltcG9ydHMQABpzVW5sZXNzIE9GRiwgY2hlY2tzIHRoYXQgYSBwcm90b19saWJyYXJ5IHRhcmdldCBleHBsaWNpdGx5IGRlY2xhcmVzIGFsbCB0YXJnZXRzIHVzZWQgaW4gJ2ltcG9ydCBwdWJsaWMnIGFzIGV4cG9ydGVkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQlVJTERfRklMRV9TRU1BTlRJQ1M6EUVBR0VSTkVTU19UT19FWElUQhNJTkNPTVBBVElCTEVfQ0hBTkdFShBJTlBVVF9TVFJJQ1RORVNTUAEKuQIKK2V4cGVyaW1lbnRhbF9hbmRyb2lkX3Jld3JpdGVfZGV4ZXNfd2l0aF9yZXgQARohdXNlIHJleCB0b29sIHRvIHJld3JpdGUgZGV4IGZpbGVzIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFM6FExPQURJTkdfQU5EX0FOQUxZU0lTOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUIMRVhQRVJJTUVOVEFMShFPVVRQVVRfUEFSQU1FVEVSU1AACrUDChhsZWdhY3lfaW1wb3J0YW50X291dHB1dHMQARqrAVVzZSB0aGlzIHRvIHN1cHByZXNzIGdlbmVyYXRpb24gb2YgdGhlIGxlZ2FjeSBpbXBvcnRhbnRfb3V0cHV0cyBmaWVsZCBpbiB0aGUgVGFyZ2V0Q29tcGxldGUgZXZlbnQuIGltcG9ydGFudF9vdXRwdXRzIGFyZSByZXF1aXJlZCBmb3IgQmF6ZWwgdG8gUmVzdWx0U3RvcmUvQlRYIGludGVncmF0aW9uLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAAKogQKDnJlbW90ZV90aW1lb3V0EAAaqwJUaGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0byB3YWl0IGZvciByZW1vdGUgZXhlY3V0aW9uIGFuZCBjYWNoZSBjYWxscy4gRm9yIHRoZSBSRVNUIGNhY2hlLCB0aGlzIGlzIGJvdGggdGhlIGNvbm5lY3QgYW5kIHRoZSByZWFkIHRpbWVvdXQuIEZvbGxvd2luZyB1bml0cyBjYW4gYmUgdXNlZDogRGF5cyAoZCksIGhvdXJzIChoKSwgbWludXRlcyAobSksIHNlY29uZHMgKHMpLCBhbmQgbWlsbGlzZWNvbmRzIChtcykuIElmIHRoZSB1bml0IGlzIG9taXR0ZWQsIHRoZSB2YWx1ZSBpcyBpbnRlcnByZXRlZCBhcyBzZWNvbmRzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoGUkVNT1RFUAEKuAMKLWV4cGVyaW1lbnRhbF9zaW5nbGVfcGFja2FnZV90b29sY2hhaW5fYmluZGluZxABGnVJZiBlbmFibGVkLCB0aGUgcmVnaXN0ZXJfdG9vbGNoYWluIGZ1bmN0aW9uIG1heSBub3QgaW5jbHVkZSB0YXJnZXQgcGF0dGVybnMgd2hpY2ggbWF5IHJlZmVyIHRvIG1vcmUgdGhhbiBvbmUgcGFja2FnZS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShJTVEFSTEFSS19TRU1BTlRJQ1NQAAqLBgo1ZXhwZXJpbWVudGFsX3Vuc3VwcG9ydGVkX2FuZF9icml0dGxlX2luY2x1ZGVfc2Nhbm5pbmcQARrxA1doZXRoZXIgdG8gbmFycm93IGlucHV0cyB0byBDL0MrKyBjb21waWxhdGlvbiBieSBwYXJzaW5nICNpbmNsdWRlIGxpbmVzIGZyb20gaW5wdXQgZmlsZXMuIFRoaXMgY2FuIGltcHJvdmUgcGVyZm9ybWFuY2UgYW5kIGluY3JlbWVudGFsaXR5IGJ5IGRlY3JlYXNpbmcgdGhlIHNpemUgb2YgY29tcGlsYXRpb24gaW5wdXQgdHJlZXMuIEhvd2V2ZXIsIGl0IGNhbiBhbHNvIGJyZWFrIGJ1aWxkcyBiZWNhdXNlIHRoZSBpbmNsdWRlIHNjYW5uZXIgZG9lcyBub3QgZnVsbHkgaW1wbGVtZW50IEMgcHJlcHJvY2Vzc29yIHNlbWFudGljcy4gSW4gcGFydGljdWxhciwgaXQgZG9lcyBub3QgdW5kZXJzdGFuZCBkeW5hbWljICNpbmNsdWRlIGRpcmVjdGl2ZXMgYW5kIGlnbm9yZXMgcHJlcHJvY2Vzc29yIGNvbmRpdGlvbmFsIGxvZ2ljLiBVc2UgYXQgeW91ciBvd24gcmlzay4gQW55IGlzc3VlcyByZWxhdGluZyB0byB0aGlzIGZsYWcgdGhhdCBhcmUgZmlsZWQgd2lsbCBiZSBjbG9zZWQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJUzoJRVhFQ1VUSU9OOg5DSEFOR0VTX0lOUFVUU0IMRVhQRVJJTUVOVEFMShdCVUlMRF9USU1FX09QVElNSVpBVElPTlAACoILCiRleHBlcmltZW50YWxfcmVtb3RlX3NjcnViYmluZ19jb25maWcQABr1CEVuYWJsZXMgcmVtb3RlIGNhY2hlIGtleSBzY3J1YmJpbmcgd2l0aCB0aGUgc3VwcGxpZWQgY29uZmlndXJhdGlvbiBmaWxlLCB3aGljaCBtdXN0IGJlIGEgcHJvdG9jb2wgYnVmZmVyIGluIHRleHQgZm9ybWF0IChzZWUgc3JjL21haW4vcHJvdG9idWYvcmVtb3RlX3NjcnViYmluZy5wcm90bykuCgpUaGlzIGZlYXR1cmUgaXMgaW50ZW5kZWQgdG8gZmFjaWxpdGF0ZSBzaGFyaW5nIGEgcmVtb3RlL2Rpc2sgY2FjaGUgYmV0d2VlbiBhY3Rpb25zIGV4ZWN1dGluZyBvbiBkaWZmZXJlbnQgcGxhdGZvcm1zIGJ1dCB0YXJnZXRpbmcgdGhlIHNhbWUgcGxhdGZvcm0uIEl0IHNob3VsZCBiZSB1c2VkIHdpdGggZXh0cmVtZSBjYXJlLCBhcyBpbXByb3BlciBzZXR0aW5ncyBtYXkgY2F1c2UgYWNjaWRlbnRhbCBzaGFyaW5nIG9mIGNhY2hlIGVudHJpZXMgYW5kIHJlc3VsdCBpbiBpbmNvcnJlY3QgYnVpbGRzLgoKU2NydWJiaW5nIGRvZXMgbm90IGFmZmVjdCBob3cgYW4gYWN0aW9uIGlzIGV4ZWN1dGVkLCBvbmx5IGhvdyBpdHMgcmVtb3RlL2Rpc2sgY2FjaGUga2V5IGlzIGNvbXB1dGVkIGZvciB0aGUgcHVycG9zZSBvZiByZXRyaWV2aW5nIG9yIHN0b3JpbmcgYW4gYWN0aW9uIHJlc3VsdC4gU2NydWJiZWQgYWN0aW9ucyBhcmUgaW5jb21wYXRpYmxlIHdpdGggcmVtb3RlIGV4ZWN1dGlvbiwgYW5kIHdpbGwgYWx3YXlzIGJlIGV4ZWN1dGVkIGxvY2FsbHkgaW5zdGVhZC4KCk1vZGlmeWluZyB0aGUgc2NydWJiaW5nIGNvbmZpZ3VyYXRpb24gZG9lcyBub3QgaW52YWxpZGF0ZSBvdXRwdXRzIHByZXNlbnQgaW4gdGhlIGxvY2FsIGZpbGVzeXN0ZW0gb3IgaW50ZXJuYWwgY2FjaGVzOyBhIGNsZWFuIGJ1aWxkIGlzIHJlcXVpcmVkIHRvIHJlZXhlY3V0ZSBhZmZlY3RlZCBhY3Rpb25zLgoKSW4gb3JkZXIgdG8gc3VjY2Vzc2Z1bGx5IHVzZSB0aGlzIGZlYXR1cmUsIHlvdSBsaWtlbHkgd2FudCB0byBzZXQgYSBjdXN0b20gLS1ob3N0X3BsYXRmb3JtIHRvZ2V0aGVyIHdpdGggLS1leHBlcmltZW50YWxfcGxhdGZvcm1faW5fb3V0cHV0X2RpciAodG8gbm9ybWFsaXplIG91dHB1dCBwcmVmaXhlcykgYW5kIC0taW5jb21wYXRpYmxlX3N0cmljdF9hY3Rpb25fZW52ICh0byBub3JtYWxpemUgZW52aXJvbm1lbnQgdmFyaWFibGVzKS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KBlJFTU9URVABCo4CChpleHBlcmltZW50YWxfZml4X2RlcHNfdG9vbBAAGkRTcGVjaWZpZXMgd2hpY2ggdG9vbCBzaG91bGQgYmUgdXNlZCB0byByZXNvbHZlIG1pc3NpbmcgZGVwZW5kZW5jaWVzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQlVJTERfRklMRV9TRU1BTlRJQ1NKDFVORE9DVU1FTlRFRFABCr4DChZjaGVja190ZXN0c191cF90b19kYXRlEAEahwJEb24ndCBydW4gdGVzdHMsIGp1c3QgY2hlY2sgaWYgdGhleSBhcmUgdXAtdG8tZGF0ZS4gIElmIGFsbCB0ZXN0cyByZXN1bHRzIGFyZSB1cC10by1kYXRlLCB0aGUgdGVzdGluZyBjb21wbGV0ZXMgc3VjY2Vzc2Z1bGx5LiAgSWYgYW55IHRlc3QgbmVlZHMgdG8gYmUgYnVpbHQgb3IgZXhlY3V0ZWQsIGFuIGVycm9yIGlzIHJlcG9ydGVkIGFuZCB0aGUgdGVzdGluZyBmYWlscy4gIFRoaXMgb3B0aW9uIGltcGxpZXMgLS1jaGVja191cF90b19kYXRlIGJlaGF2aW9yLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OSgdURVNUSU5HUAAKggEKB2hvbWVfcmMQARpCV2hldGhlciBvciBub3QgdG8gbG9vayBmb3IgdGhlIGhvbWUgYmF6ZWxyYyBmaWxlIGF0ICRIT01FLy5iYXplbHJjIgdzdGFydHVwMAA6DkNIQU5HRVNfSU5QVVRTShRCQVpFTF9DTElFTlRfT1BUSU9OU1AACo8CCi5pbmNvbXBhdGlibGVfcmVxdWlyZV9jdHhfaW5fY29uZmlndXJlX2ZlYXR1cmVzEAEaLlRoaXMgZmxhZyBpcyBhIG5vb3AgYW5kIHNjaGVkdWxlZCBmb3IgcmVtb3ZhbC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QQhNJTkNPTVBBVElCTEVfQ0hBTkdFSglUT09MQ0hBSU5QAArbAgotZXhwZXJpbWVudGFsX3JlbW90ZV9jYXB0dXJlX2NvcnJ1cHRlZF9vdXRwdXRzEAAaRkEgcGF0aCB0byBhIGRpcmVjdG9yeSB3aGVyZSB0aGUgY29ycnVwdGVkIG91dHB1dHMgd2lsbCBiZSBjYXB0dXJlZCB0by4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KBlJFTU9URVABCpADCjFleHBlcmltZW50YWxfZGlzYWxsb3dfbGVnYWN5X2phdmFfdG9vbGNoYWluX2ZsYWdzEAEarQFJZiBlbmFibGVkLCBkaXNhbGxvdyBsZWdhY3kgSmF2YSB0b29sY2hhaW4gZmxhZ3MgKC0tamF2YWJhc2UsIC0taG9zdF9qYXZhYmFzZSwgLS1qYXZhX3Rvb2xjaGFpbiwgLS1ob3N0X2phdmFfdG9vbGNoYWluKSBhbmQgcmVxdWlyZSB0aGUgdXNlIG9mIC0tcGxhdGZvcm1zIGluc3RlYWQ7IHNlZSAjNzg0OSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkIMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAAqzAQoVZGVidWdfc3Bhd25fc2NoZWR1bGVyEAEaACIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoHTE9HR0lOR1AACsoDCilpbmNvbXBhdGlibGVfYWx3YXlzX2luY2x1ZGVfZmlsZXNfaW5fZGF0YRABGtwBSWYgdHJ1ZSwgbmF0aXZlIHJ1bGVzIGFkZCA8Y29kZT5EZWZhdWx0SW5mby5maWxlczwvY29kZT4gb2YgZGF0YSBkZXBlbmRlbmNpZXMgdG8gdGhlaXIgcnVuZmlsZXMsIHdoaWNoIG1hdGNoZXMgdGhlIHJlY29tbWVuZGVkIGJlaGF2aW9yIGZvciBTdGFybGFyayBydWxlcyAoaHR0cHM6Ly9iYXplbC5idWlsZC9leHRlbmRpbmcvcnVsZXMjcnVuZmlsZXNfZmVhdHVyZXNfdG9fYXZvaWQpLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShBPVVRQVVRfU0VMRUNUSU9OUAAK2AQKK2V4cGVyaW1lbnRhbF9jb252ZW5pZW5jZV9zeW1saW5rc19iZXBfZXZlbnQQARr8AlRoaXMgZmxhZyBjb250cm9scyB3aGV0aGVyIG9yIG5vdCB3ZSB3aWxsIHBvc3QgdGhlIGJ1aWxkIGV2ZW50Q29udmVuaWVuY2VTeW1saW5rc0lkZW50aWZpZWQgdG8gdGhlIEJ1aWxkRXZlbnRQcm90b2NvbC4gSWYgdGhlIHZhbHVlIGlzIHRydWUsIHRoZSBCdWlsZEV2ZW50UHJvdG9jb2wgd2lsbCBoYXZlIGFuIGVudHJ5IGZvciBjb252ZW5pZW5jZVN5bWxpbmtzSWRlbnRpZmllZCwgbGlzdGluZyBhbGwgb2YgdGhlIGNvbnZlbmllbmNlIHN5bWxpbmtzIGNyZWF0ZWQgaW4geW91ciB3b3Jrc3BhY2UuIElmIGZhbHNlLCB0aGVuIHRoZSBjb252ZW5pZW5jZVN5bWxpbmtzSWRlbnRpZmllZCBlbnRyeSBpbiB0aGUgQnVpbGRFdmVudFByb3RvY29sIHdpbGwgYmUgZW1wdHkuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAAKqAMKGmdvb2dsZV9kZWZhdWx0X2NyZWRlbnRpYWxzEAEangFXaGV0aGVyIHRvIHVzZSAnR29vZ2xlIEFwcGxpY2F0aW9uIERlZmF1bHQgQ3JlZGVudGlhbHMnIGZvciBhdXRoZW50aWNhdGlvbi4gU2VlIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9kb2NzL2F1dGhlbnRpY2F0aW9uIGZvciBkZXRhaWxzLiBEaXNhYmxlZCBieSBkZWZhdWx0LiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFAACpsDCg5pbmNsdWRlX3VudXNlZBABGt8CVGhlIHF1ZXJpZXMgd2lsbCBhbHNvIHRha2UgaW50byBhY2NvdW50IGFuZCBkaXNwbGF5IHRoZSB1bnVzZWQgbW9kdWxlcywgd2hpY2ggYXJlIG5vdCBwcmVzZW50IGluIHRoZSBtb2R1bGUgcmVzb2x1dGlvbiBncmFwaCBhZnRlciBzZWxlY3Rpb24gKGR1ZSB0byB0aGUgTWluaW1hbC1WZXJzaW9uIFNlbGVjdGlvbiBvciBvdmVycmlkZSBydWxlcykuIFRoaXMgY2FuIGhhdmUgZGlmZmVyZW50IGVmZmVjdHMgZm9yIGVhY2ggb2YgdGhlIHF1ZXJ5IHR5cGVzIGkuZS4gaW5jbHVkZSBuZXcgcGF0aHMgaW4gdGhlIGFsbF9wYXRocyBjb21tYW5kLCBvciBleHRyYSBkZXBlbmRhbnRzIGluIHRoZSBleHBsYWluIGNvbW1hbmQuIgNtb2QwADoPVEVSTUlOQUxfT1VUUFVUSgtNT0RfQ09NTUFORFAACvkCChJnb29nbGVfY3JlZGVudGlhbHMQABp4U3BlY2lmaWVzIHRoZSBmaWxlIHRvIGdldCBhdXRoZW50aWNhdGlvbiBjcmVkZW50aWFscyBmcm9tLiBTZWUgaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2RvY3MvYXV0aGVudGljYXRpb24gZm9yIGRldGFpbHMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEK5QEKPmV4cGVyaW1lbnRhbF9wYXJzZV9oZWFkZXJzX3NraXBwZWRfaWZfY29ycmVzcG9uZGluZ19zcmNzX2ZvdW5kEAEaBk5vLW9wLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BKDFVORE9DVU1FTlRFRFAACrACChdqMm9iamNfZGVhZF9jb2RlX3JlcG9ydBAAGnZBbGxvd3MgSjJPYmpDIHRvIHN0cmlwIGRlYWQgY29kZSByZXBvcnRlZCBieSBQcm9HdWFyZC4gVGFrZXMgYSBsYWJlbCB0aGF0IGNhbiBnZW5lcmF0ZSBhIGRlYWQgY29kZSByZXBvcnQgYXMgYXJndW1lbnQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSgxVTkRPQ1VNRU5URURQAQqnAgonZXhwZXJpbWVudGFsX3JlbW90YWJsZV9zb3VyY2VfbWFuaWZlc3RzEAEaMVdoZXRoZXIgdG8gbWFrZSBzb3VyY2UgbWFuaWZlc3QgYWN0aW9ucyByZW1vdGFibGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTOglFWEVDVVRJT05CDEVYUEVSSU1FTlRBTEoSRVhFQ1VUSU9OX1NUUkFURUdZUAAK2gIKE2V4cGVyaW1lbnRhbF9vbWl0ZnAQARpzSWYgdHJ1ZSwgdXNlIGxpYnVud2luZCBmb3Igc3RhY2sgdW53aW5kaW5nLCBhbmQgY29tcGlsZSB3aXRoIC1mb21pdC1mcmFtZS1wb2ludGVyIGFuZCAtZmFzeW5jaHJvbm91cy11bndpbmQtdGFibGVzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQUNUSU9OX0NPTU1BTkRfTElORVM6D0FGRkVDVFNfT1VUUFVUU0IMRVhQRVJJTUVOVEFMShFPVVRQVVRfUEFSQU1FVEVSU1AACtgCCiVpbmNvbXBhdGlibGVfajJvYmpjX2xpYnJhcnlfbWlncmF0aW9uEAEabklmIGVuYWJsZWQsIGRpcmVjdCB1c2FnZSBvZiB0aGUgbmF0aXZlIGoyb2JqY19saWJyYXJ5IHJ1bGVzIGlzIGRpc2FibGVkLiBQbGVhc2UgdXNlIHRoZSBTdGFybGFyayBydWxlIGluc3RlYWQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoMVU5ET0NVTUVOVEVEUAAK6QMKDWludm9jYXRpb25faWQQABrFAVVuaXF1ZSBpZGVudGlmaWVyLCBpbiBVVUlEIGZvcm1hdCwgZm9yIHRoZSBjb21tYW5kIGJlaW5nIHJ1bi4gSWYgZXhwbGljaXRseSBzcGVjaWZpZWQgdW5pcXVlbmVzcyBtdXN0IGJlIGVuc3VyZWQgYnkgdGhlIGNhbGxlci4gVGhlIFVVSUQgaXMgcHJpbnRlZCB0byBzdGRlcnIsIHRoZSBCRVAgYW5kIHJlbW90ZSBleGVjdXRpb24gcHJvdG9jb2wuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhBCQVpFTF9NT05JVE9SSU5HOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OSg1VTkNBVEVHT1JJWkVEUAEKugIKH2VuZm9yY2VfcHJvZ3VhcmRfZmlsZV9leHRlbnNpb24QARpuSWYgZW5hYmxlZCwgcmVxdWlyZXMgdGhhdCBQcm9HdWFyZCBjb25maWd1cmF0aW9uIGZpbGVzIG91dHNpZGUgb2YgdGhpcmRfcGFydHkvIHVzZSB0aGUgKi5wZ2NmZyBmaWxlIGV4dGVuc2lvbi4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6EUVBR0VSTkVTU19UT19FWElUSgxVTkRPQ1VNRU5URURQAAqCAwopZXhwZXJpbWVudGFsX2RlYnVnX3NlbGVjdHNfYWx3YXlzX3N1Y2NlZWQQARqaAVdoZW4gc2V0LCBzZWxlY3QgZnVuY3Rpb25zIHdpdGggbm8gbWF0Y2hpbmcgY2xhdXNlIHdpbGwgcmV0dXJuIGFuIGVtcHR5IHZhbHVlLCBpbnN0ZWFkIG9mIGZhaWxpbmcuIFRoaXMgaXMgdG8gaGVscCB1c2UgY3F1ZXJ5IGRpYWdub3NlIGZhaWx1cmVzIGluIHNlbGVjdC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFAACocFChxyZW1vdGVfYnl0ZXN0cmVhbV91cmlfcHJlZml4EAAaggNUaGUgaG9zdG5hbWUgYW5kIGluc3RhbmNlIG5hbWUgdG8gYmUgdXNlZCBpbiBieXRlc3RyZWFtOi8vIFVSSXMgdGhhdCBhcmUgd3JpdHRlbiBpbnRvIGJ1aWxkIGV2ZW50IHN0cmVhbXMuIFRoaXMgb3B0aW9uIGNhbiBiZSBzZXQgd2hlbiBidWlsZHMgYXJlIHBlcmZvcm1lZCB1c2luZyBhIHByb3h5LCB3aGljaCBjYXVzZXMgdGhlIHZhbHVlcyBvZiAtLXJlbW90ZV9leGVjdXRvciBhbmQgLS1yZW1vdGVfaW5zdGFuY2VfbmFtZSB0byBubyBsb25nZXIgY29ycmVzcG9uZCB0byB0aGUgY2Fub25pY2FsIG5hbWUgb2YgdGhlIHJlbW90ZSBleGVjdXRpb24gc2VydmljZS4gV2hlbiBub3Qgc2V0LCBpdCB3aWxsIGRlZmF1bHQgdG8gIiR7aG9zdG5hbWV9LyR7aW5zdGFuY2VfbmFtZX0iLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoGUkVNT1RFUAEKhgEKD3Byb3RvOmxvY2F0aW9ucxABGj5XaGV0aGVyIHRvIG91dHB1dCBsb2NhdGlvbiBpbmZvcm1hdGlvbiBpbiBwcm90byBvdXRwdXQgYXQgYWxsLiIGYXF1ZXJ5IgZjcXVlcnkiBXF1ZXJ5MAA6D1RFUk1JTkFMX09VVFBVVEoFUVVFUllQAAriAQoRbG9ja19pbnN0YWxsX2Jhc2UQARqJAVdoZXRoZXIgdGhlIHNlcnZlciBzaG91bGQgaG9sZCBhIGxvY2sgb24gdGhlIGluc3RhbGwgYmFzZSB3aGlsZSBydW5uaW5nLCB0byBwcmV2ZW50IGFub3RoZXIgc2VydmVyIGZyb20gYXR0ZW1wdGluZyB0byBnYXJiYWdlIGNvbGxlY3QgaXQuIgdzdGFydHVwMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05CBkhJRERFTkoMVU5ET0NVTUVOVEVEUAAK8gIKNWV4cGVyaW1lbnRhbF9yZW1vdGVfaW5jbHVkZV9leHRyYWN0aW9uX3NpemVfdGhyZXNob2xkEAAaVVJ1biByZW1vdGFibGUgQysrIGluY2x1ZGUgZXh0cmFjdGlvbiByZW1vdGVseSBpZiB0aGUgZmlsZSBzaXplIGluIGJ5dGVzIGV4Y2VlZHMgdGhpcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT046CUVYRUNVVElPTjojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlNKDFVORE9DVU1FTlRFRFABCuQCCjVleHBlcmltZW50YWxfYW5kcm9pZF9saWJyYXJ5X2V4cG9ydHNfbWFuaWZlc3RfZGVmYXVsdBABGkdUaGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgZXhwb3J0c19tYW5pZmVzdCBhdHRyaWJ1dGUgb24gYW5kcm9pZF9saWJyYXJ5LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJUzoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEVCDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAKmAMKOGluY29tcGF0aWJsZV9kb250X2VuYWJsZV9ob3N0X25vbmhvc3RfY3Jvc3N0b29sX2ZlYXR1cmVzEAEanQFJZiB0cnVlLCBCYXplbCB3aWxsIG5vdCBlbmFibGUgJ2hvc3QnIGFuZCAnbm9uaG9zdCcgZmVhdHVyZXMgaW4gdGhlIGMrKyB0b29sY2hhaW4gKHNlZSBodHRwczovL2dpdGh1Yi5jb20vYmF6ZWxidWlsZC9iYXplbC9pc3N1ZXMvNzQwNyBmb3IgbW9yZSBpbmZvcm1hdGlvbikuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoJVE9PTENIQUlOUAAKjwIKJWV4cGVyaW1lbnRhbF9wZXJzaXN0ZW50X2Fhcl9leHRyYWN0b3IQARoxRW5hYmxlIHBlcnNpc3RlbnQgYWFyIGV4dHJhY3RvciBieSB1c2luZyB3b3JrZXJzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OQgxFWFBFUklNRU5UQUxKEkVYRUNVVElPTl9TVFJBVEVHWVAACscBCiZjaGVja19maWxlc2V0X2RlcGVuZGVuY2llc19yZWN1cnNpdmVseRABGgAiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QSgxVTkRPQ1VNRU5URURQAAqRAgojZW5hYmxlX3JlbWFpbmluZ19mZG9fYWJzb2x1dGVfcGF0aHMQARo+SWYgc2V0LCBhbnkgdXNlIG9mIGFic29sdXRlIHBhdGhzIGZvciBGRE8gd2lsbCByYWlzZSBhbiBlcnJvci4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAArMBQoQc2hlbGxfZXhlY3V0YWJsZRAAGooEQWJzb2x1dGUgcGF0aCB0byB0aGUgc2hlbGwgZXhlY3V0YWJsZSBmb3IgQmF6ZWwgdG8gdXNlLiBJZiB0aGlzIGlzIHVuc2V0LCBidXQgdGhlIEJBWkVMX1NIIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIHNldCBvbiB0aGUgZmlyc3QgQmF6ZWwgaW52b2NhdGlvbiAodGhhdCBzdGFydHMgdXAgYSBCYXplbCBzZXJ2ZXIpLCBCYXplbCB1c2VzIHRoYXQuIElmIG5laXRoZXIgaXMgc2V0LCBCYXplbCB1c2VzIGEgaGFyZC1jb2RlZCBkZWZhdWx0IHBhdGggZGVwZW5kaW5nIG9uIHRoZSBvcGVyYXRpbmcgc3lzdGVtIGl0IHJ1bnMgb24gKFdpbmRvd3M6IGM6L21zeXM2NC91c3IvYmluL2Jhc2guZXhlLCBGcmVlQlNEOiAvdXNyL2xvY2FsL2Jpbi9iYXNoLCBhbGwgb3RoZXJzOiAvYmluL2Jhc2gpLiBOb3RlIHRoYXQgdXNpbmcgYSBzaGVsbCB0aGF0IGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYmFzaCBtYXkgbGVhZCB0byBidWlsZCBmYWlsdXJlcyBvciBydW50aW1lIGZhaWx1cmVzIG9mIHRoZSBnZW5lcmF0ZWQgYmluYXJpZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0oNVU5DQVRFR09SSVpFRFABCvoCCgpweXRob25fdG9wEAAasQFUaGUgbGFiZWwgb2YgYSBweV9ydW50aW1lIHJlcHJlc2VudGluZyB0aGUgUHl0aG9uIGludGVycHJldGVyIGludm9rZWQgdG8gcnVuIFB5dGhvbiB0YXJnZXRzIG9uIHRoZSB0YXJnZXQgcGxhdGZvcm0uIERlcHJlY2F0ZWQ7IGRpc2FibGVkIGJ5IC0taW5jb21wYXRpYmxlX3VzZV9weXRob25fdG9vbGNoYWlucy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTOg9BRkZFQ1RTX09VVFBVVFNKCVRPT0xDSEFJTlABCuoBChhqMm9iamNfdHJhbnNsYXRpb25fZmxhZ3MQABouQWRkaXRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEoyT2JqQyB0b29sLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCv0BCjRleHBlcmltZW50YWxfdXNlX2RleF9zcGxpdHRlcl9mb3JfaW5jcmVtZW50YWxfZGV4aW5nEAEaC0RvIG5vdCB1c2UuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0IMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAArMAgoicGVyc2lzdGVudF9tdWx0aXBsZXhfYW5kcm9pZF90b29scxAAGlpFbmFibGUgcGVyc2lzdGVudCBhbmQgbXVsdGlwbGV4ZWQgQW5kcm9pZCB0b29scyAoZGV4aW5nLCBkZXN1Z2FyaW5nLCByZXNvdXJjZSBwcm9jZXNzaW5nKS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVAACt4BCg5qYXZhX3Rvb2xjaGFpbhAAGi1Oby1vcC4gS2VwdCBoZXJlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDFVORE9DVU1FTlRFRFABCtkDChtleHBlcmltZW50YWxfc2FuZGJveF9saW1pdHMQABqSAklmID4gMCwgZWFjaCBMaW51eCBzYW5kYm94IHdpbGwgYmUgbGltaXRlZCB0byB0aGUgZ2l2ZW4gYW1vdW50IGZvciB0aGUgc3BlY2lmaWVkIHJlc291cmNlLiBSZXF1aXJlcyAtLWluY29tcGF0aWJsZV91c2VfbmV3X2Nncm91cF9pbXBsZW1lbnRhdGlvbiBhbmQgb3ZlcnJpZGVzIC0tZXhwZXJpbWVudGFsX3NhbmRib3hfbWVtb3J5X2xpbWl0X21iLiBSZXF1aXJlcyBjZ3JvdXBzIHYxIG9yIHYyIGFuZCBwZXJtaXNzaW9ucyBmb3IgdGhlIHVzZXJzIHRvIHRoZSBjZ3JvdXBzIGRpci4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6CUVYRUNVVElPTkoSRVhFQ1VUSU9OX1NUUkFURUdZUAEKwwQKJWV4cGVyaW1lbnRhbF9leGVjdXRpb25fZ3JhcGhfbG9nX3BhdGgQABryAkxvY2FsIHBhdGggYXQgd2hpY2ggdGhlIGV4ZWN1dGlvbiBwYXRoIHdpbGwgYmUgd3JpdHRlbi4gSWYgdGhpcyBpcyBzZXQsIHRoZSBsb2cgd2lsbCBvbmx5IGJlIHdyaXR0ZW4gbG9jYWxseSwgYW5kIG5vdCB0byBCRVAuIElmIHRoaXMgaXMgc2V0IHdoZW4gZXhwZXJpbWVudGFsX2VuYWJsZV9leGVjdXRpb25fZ3JhcGhfbG9nIGlzIGRpc2FibGVkLCB0aGVyZSB3aWxsIGJlIGFuIGVycm9yLiBJZiB0aGlzIGlzIHVuc2V0IHdoaWxlIEJFUCB1cGxvYWRzIGFyZSBkaXNhYmxlZCBhbmQgZXhwZXJpbWVudGFsX2VuYWJsZV9leGVjdXRpb25fZ3JhcGhfbG9nIGlzIGVuYWJsZWQsIHRoZSBsb2cgd2lsbCBiZSB3cml0dGVuIHRvIGEgbG9jYWwgZGVmYXVsdC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0oMVU5ET0NVTUVOVEVEUAEKhgMKIGV4cGVyaW1lbnRhbF9pbm1lbW9yeV9kb3RkX2ZpbGVzEAEagAFJZiBlbmFibGVkLCBDKysgLmQgZmlsZXMgd2lsbCBiZSBwYXNzZWQgdGhyb3VnaCBpbiBtZW1vcnkgZGlyZWN0bHkgZnJvbSB0aGUgcmVtb3RlIGJ1aWxkIG5vZGVzIGluc3RlYWQgb2YgYmVpbmcgd3JpdHRlbiB0byBkaXNrLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6CUVYRUNVVElPTjoPQUZGRUNUU19PVVRQVVRTQgxFWFBFUklNRU5UQUxKF0JVSUxEX1RJTUVfT1BUSU1JWkFUSU9OUAAKtQQKG2NhY2hlX2NvbXB1dGVkX2ZpbGVfZGlnZXN0cxAAGusCSWYgZ3JlYXRlciB0aGFuIDAsIGNvbmZpZ3VyZXMgQmF6ZWwgdG8gY2FjaGUgZmlsZSBkaWdlc3RzIGluIG1lbW9yeSBiYXNlZCBvbiB0aGVpciBtZXRhZGF0YSBpbnN0ZWFkIG9mIHJlY29tcHV0aW5nIHRoZSBkaWdlc3RzIGZyb20gZGlzayBldmVyeSB0aW1lIHRoZXkgYXJlIG5lZWRlZC4gU2V0dGluZyB0aGlzIHRvIDAgZW5zdXJlcyBjb3JyZWN0bmVzcyBiZWNhdXNlIG5vdCBhbGwgZmlsZSBjaGFuZ2VzIGNhbiBiZSBub3RlZCBmcm9tIGZpbGUgbWV0YWRhdGEuIFdoZW4gbm90IDAsIHRoZSBudW1iZXIgaW5kaWNhdGVzIHRoZSBzaXplIG9mIHRoZSBjYWNoZSBhcyB0aGUgbnVtYmVyIG9mIGZpbGUgZGlnZXN0cyB0byBiZSBjYWNoZWQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOShdCVUlMRF9USU1FX09QVElNSVpBVElPTlABCsIECilleHBlcmltZW50YWxfZG9ja2VyX3VzZV9jdXN0b21pemVkX2ltYWdlcxABGu0CSWYgZW5hYmxlZCwgaW5qZWN0cyB0aGUgdWlkIGFuZCBnaWQgb2YgdGhlIGN1cnJlbnQgdXNlciBpbnRvIHRoZSBEb2NrZXIgaW1hZ2UgYmVmb3JlIHVzaW5nIGl0LiBUaGlzIGlzIHJlcXVpcmVkIGlmIHlvdXIgYnVpbGQgLyB0ZXN0cyBkZXBlbmQgb24gdGhlIHVzZXIgaGF2aW5nIGEgbmFtZSBhbmQgaG9tZSBkaXJlY3RvcnkgaW5zaWRlIHRoZSBjb250YWluZXIuIFRoaXMgaXMgb24gYnkgZGVmYXVsdCwgYnV0IHlvdSBjYW4gZGlzYWJsZSBpdCBpbiBjYXNlIHRoZSBhdXRvbWF0aWMgaW1hZ2UgY3VzdG9taXphdGlvbiBmZWF0dXJlIGRvZXNuJ3Qgd29yayBpbiB5b3VyIGNhc2Ugb3IgeW91IGtub3cgdGhhdCB5b3UgZG9uJ3QgbmVlZCBpdC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkoSRVhFQ1VUSU9OX1NUUkFURUdZUAAK/QEKF2RlZmF1bHRfc3lzdGVtX2phdmFiYXNlEAAakwFUaGUgcm9vdCBvZiB0aGUgdXNlcidzIGxvY2FsIEpESyBpbnN0YWxsLCB0byBiZSB1c2VkIGFzIHRoZSBkZWZhdWx0IHRhcmdldCBqYXZhYmFzZSBhbmQgYXMgYSBmYWxsLWJhY2sgaG9zdF9qYXZhYmFzZS4gVGhpcyBpcyBub3QgdGhlIGVtYmVkZGVkIEpESy4iB3N0YXJ0dXAwADoOQ0hBTkdFU19JTlBVVFM6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFQgZISURERU5KDFVORE9DVU1FTlRFRFABCuABCg10ZXN0X3N0cmF0ZWd5EAAaM1NwZWNpZmllcyB3aGljaCBzdHJhdGVneSB0byB1c2Ugd2hlbiBydW5uaW5nIHRlc3RzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OSgdURVNUSU5HUAEKlwEKHXByb3RvOnJ1bGVfaW5wdXRzX2FuZF9vdXRwdXRzEAEaQVdoZXRoZXIgb3Igbm90IHRvIHBvcHVsYXRlIHRoZSBydWxlX2lucHV0IGFuZCBydWxlX291dHB1dCBmaWVsZHMuIgZhcXVlcnkiBmNxdWVyeSIFcXVlcnkwADoPVEVSTUlOQUxfT1VUUFVUSgVRVUVSWVAACtUBCiJ1c2VfdG9wX2xldmVsX3RhcmdldHNfZm9yX3N5bWxpbmtzEAEaEkRlcHJlY2F0ZWQuIE5vLW9wLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BKDFVORE9DVU1FTlRFRFAACvoCCiNleHBlcmltZW50YWxfZXh0ZW5kZWRfc2FuaXR5X2NoZWNrcxABGpABRW5hYmxlcyBpbnRlcm5hbCB2YWxpZGF0aW9uIGNoZWNrcyB0byBtYWtlIHN1cmUgdGhhdCBjb25maWd1cmVkIHRhcmdldCBpbXBsZW1lbnRhdGlvbnMgb25seSBhY2Nlc3MgdGhpbmdzIHRoZXkgc2hvdWxkLiBDYXVzZXMgYSBwZXJmb3JtYW5jZSBoaXQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFAACpkCCiBleHBlcmltZW50YWxfd29ya2VyX2NhbmNlbGxhdGlvbhABGk5JZiBlbmFibGVkLCBCYXplbCBtYXkgc2VuZCBjYW5jZWxsYXRpb24gcmVxdWVzdHMgdG8gd29ya2VycyB0aGF0IHN1cHBvcnQgdGhlbS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkoSRVhFQ1VUSU9OX1NUUkFURUdZUAAKrgMKIGV4cGVyaW1lbnRhbF91c2Vfd2luZG93c19zYW5kYm94EAEa4gFVc2UgV2luZG93cyBzYW5kYm94IHRvIHJ1biBhY3Rpb25zLiBJZiAieWVzIiwgdGhlIGJpbmFyeSBwcm92aWRlZCBieSAtLWV4cGVyaW1lbnRhbF93aW5kb3dzX3NhbmRib3hfcGF0aCBtdXN0IGJlIHZhbGlkIGFuZCBjb3JyZXNwb25kIHRvIGEgc3VwcG9ydGVkIHZlcnNpb24gb2Ygc2FuZGJveGZzLiBJZiAiYXV0byIsIHRoZSBiaW5hcnkgbWF5IGJlIG1pc3Npbmcgb3Igbm90IGNvbXBhdGlibGUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVAACtsDCgpiZXNfaGVhZGVyEAAa3wFTcGVjaWZ5IGEgaGVhZGVyIGluIE5BTUU9VkFMVUUgZm9ybSB0aGF0IHdpbGwgYmUgaW5jbHVkZWQgaW4gQkVTIHJlcXVlc3RzLiBNdWx0aXBsZSBoZWFkZXJzIGNhbiBiZSBwYXNzZWQgYnkgc3BlY2lmeWluZyB0aGUgZmxhZyBtdWx0aXBsZSB0aW1lcy4gTXVsdGlwbGUgdmFsdWVzIGZvciB0aGUgc2FtZSBuYW1lIHdpbGwgYmUgY29udmVydGVkIHRvIGEgY29tbWEtc2VwYXJhdGVkIGxpc3QuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjABOg9BRkZFQ1RTX09VVFBVVFNKB0xPR0dJTkdQAQqgAgotaW5jb21wYXRpYmxlX2Rpc2FibGVfbmF0aXZlX2FwcGxlX2JpbmFyeV9ydWxlEAEaLU5vLW9wLiBLZXB0IGhlcmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoRRUFHRVJORVNTX1RPX0VYSVRCE0lOQ09NUEFUSUJMRV9DSEFOR0VKEElOUFVUX1NUUklDVE5FU1NQAArjAQoWcHJvdG86ZGVmaW5pdGlvbl9zdGFjaxABGpMBUG9wdWxhdGUgdGhlIGRlZmluaXRpb25fc3RhY2sgcHJvdG8gZmllbGQsIHdoaWNoIHJlY29yZHMgZm9yIGVhY2ggcnVsZSBpbnN0YW5jZSB0aGUgU3RhcmxhcmsgY2FsbCBzdGFjayBhdCB0aGUgbW9tZW50IHRoZSBydWxlJ3MgY2xhc3Mgd2FzIGRlZmluZWQuIgZhcXVlcnkiBmNxdWVyeSIFcXVlcnkwADoPVEVSTUlOQUxfT1VUUFVUSgVRVUVSWVAACsMCChJmYWlsdXJlX2RldGFpbF9vdXQQABrdAUlmIHNldCwgc3BlY2lmaWVzIGEgbG9jYXRpb24gdG8gd3JpdGUgYSBmYWlsdXJlX2RldGFpbCBwcm90b2J1ZiBtZXNzYWdlIGlmIHRoZSBzZXJ2ZXIgZXhwZXJpZW5jZXMgYSBmYWlsdXJlIGFuZCBjYW5ub3QgcmVwb3J0IGl0IHZpYSBnUlBDLCBhcyBub3JtYWwuIE90aGVyd2lzZSwgdGhlIGxvY2F0aW9uIHdpbGwgYmUgJHtPVVRQVVRfQkFTRX0vZmFpbHVyZV9kZXRhaWwucmF3cHJvdG8uIgdzdGFydHVwMAA6D0FGRkVDVFNfT1VUUFVUUzoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEVKFEJBWkVMX0NMSUVOVF9PUFRJT05TUAEK2AIKJWV4cGVyaW1lbnRhbF9wcm9maWxlX2FkZGl0aW9uYWxfdGFza3MQABpBU3BlY2lmaWVzIGFkZGl0aW9uYWwgcHJvZmlsZSB0YXNrcyB0byBiZSBpbmNsdWRlZCBpbiB0aGUgcHJvZmlsZS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAE6EEJBWkVMX01PTklUT1JJTkdKB0xPR0dJTkdQAQqRAgoVaW5jbHVkZV9wcnVuZWRfaW5wdXRzEAEa0QFJbmNsdWRlcyBhY3Rpb24gaW5wdXRzIHRoYXQgd2VyZSBwcnVuZWQgZHVyaW5nIGFjdGlvbiBleGVjdXRpb24uIE9ubHkgYWZmZWN0cyBhY3Rpb25zIHRoYXQgZGlzY292ZXIgaW5wdXRzIGFuZCBoYXZlIGJlZW4gZXhlY3V0ZWQgaW4gYSBwcmV2aW91cyBpbnZvY2F0aW9uLiBPbmx5IHRha2VzIGVmZmVjdCBpZiAtLWluY2x1ZGVfYXJ0aWZhY3RzIGlzIGFsc28gc2V0LiIGYXF1ZXJ5MAA6D1RFUk1JTkFMX09VVFBVVEoFUVVFUllQAAqbAgomcHJvcGVsbGVyX29wdGltaXplX2Fic29sdXRlX2NjX3Byb2ZpbGUQABpFQWJzb2x1dGUgcGF0aCBuYW1lIG9mIGNjX3Byb2ZpbGUgZmlsZSBmb3IgUHJvcGVsbGVyIE9wdGltaXplZCBidWlsZHMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAEK4AIKH2V4cGVyaW1lbnRhbF9ydWxlX2V4dGVuc2lvbl9hcGkQARo3RW5hYmxlIGV4cGVyaW1lbnRhbCBydWxlIGV4dGVuc2lvbiBBUEkgYW5kIHN1YnJ1bGUgQVBJcyIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUTE9BRElOR19BTkRfQU5BTFlTSVNCDEVYUEVSSU1FTlRBTEoNVU5DQVRFR09SSVpFRFAACqYCCgdleHBsYWluEAAaeUNhdXNlcyB0aGUgYnVpbGQgc3lzdGVtIHRvIGV4cGxhaW4gZWFjaCBleGVjdXRlZCBzdGVwIG9mIHRoZSBidWlsZC4gVGhlIGV4cGxhbmF0aW9uIGlzIHdyaXR0ZW4gdG8gdGhlIHNwZWNpZmllZCBsb2cgZmlsZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0oHTE9HR0lOR1ABCpsCCiZwcm9wZWxsZXJfb3B0aW1pemVfYWJzb2x1dGVfbGRfcHJvZmlsZRAAGkVBYnNvbHV0ZSBwYXRoIG5hbWUgb2YgbGRfcHJvZmlsZSBmaWxlIGZvciBQcm9wZWxsZXIgT3B0aW1pemVkIGJ1aWxkcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQqfAgodanBsUHJvcGFnYXRlQ2NMaW5rUGFyYW1zU3RvcmUQARosTm8tb3AsIGtlcHQgb25seSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUUzoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKDFVORE9DVU1FTlRFRFAACvQECgphY3Rpb25fZW52EAAatANTcGVjaWZpZXMgdGhlIHNldCBvZiBlbnZpcm9ubWVudCB2YXJpYWJsZXMgYXZhaWxhYmxlIHRvIGFjdGlvbnMgd2l0aCB0YXJnZXQgY29uZmlndXJhdGlvbi4gVmFyaWFibGVzIGNhbiBiZSBlaXRoZXIgc3BlY2lmaWVkIGJ5IG5hbWUsIGluIHdoaWNoIGNhc2UgdGhlIHZhbHVlIHdpbGwgYmUgdGFrZW4gZnJvbSB0aGUgaW52b2NhdGlvbiBlbnZpcm9ubWVudCwgb3IgYnkgdGhlIG5hbWU9dmFsdWUgcGFpciB3aGljaCBzZXRzIHRoZSB2YWx1ZSBpbmRlcGVuZGVudCBvZiB0aGUgaW52b2NhdGlvbiBlbnZpcm9ubWVudC4gVGhpcyBvcHRpb24gY2FuIGJlIHVzZWQgbXVsdGlwbGUgdGltZXM7IGZvciBvcHRpb25zIGdpdmVuIGZvciB0aGUgc2FtZSB2YXJpYWJsZSwgdGhlIGxhdGVzdCB3aW5zLCBvcHRpb25zIGZvciBkaWZmZXJlbnQgdmFyaWFibGVzIGFjY3VtdWxhdGUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOhRBQ1RJT05fQ09NTUFORF9MSU5FU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQq4AworaW5jb21wYXRpYmxlX3N0b3BfZXhwb3J0aW5nX2J1aWxkX2ZpbGVfcGF0aBABGndJZiBzZXQgdG8gdHJ1ZSwgZGVwcmVjYXRlZCBjdHguYnVpbGRfZmlsZV9wYXRoIHdpbGwgbm90IGJlIGF2YWlsYWJsZS4gY3R4LmxhYmVsLnBhY2thZ2UgKyAnL0JVSUxEJyBjYW4gYmUgdXNlZCBpbnN0ZWFkLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKElNUQVJMQVJLX1NFTUFOVElDU1AACoUEChVsb2FkaW5nX3BoYXNlX3RocmVhZHMQABqfAk51bWJlciBvZiBwYXJhbGxlbCB0aHJlYWRzIHRvIHVzZSBmb3IgdGhlIGxvYWRpbmcvYW5hbHlzaXMgcGhhc2UuVGFrZXMgYW4gaW50ZWdlciwgb3IgYSBrZXl3b3JkICgiYXV0byIsICJIT1NUX0NQVVMiLCAiSE9TVF9SQU0iKSwgb3B0aW9uYWxseSBmb2xsb3dlZCBieSBhbiBvcGVyYXRpb24gKFstfCpdPGZsb2F0PikgZWcuICJhdXRvIiwgIkhPU1RfQ1BVUyouNSIuICJhdXRvIiBzZXRzIGEgcmVhc29uYWJsZSBkZWZhdWx0IGJhc2VkIG9uIGhvc3QgcmVzb3VyY2VzLiBNdXN0IGJlIGF0IGxlYXN0IDEuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iBHN5bmMiBHRlc3QiBnZlbmRvcjAAOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OShJFWEVDVVRJT05fU1RSQVRFR1lQAQq3Awo3ZXhwZXJpbWVudGFsX2J1aWxkX2V2ZW50X2Z1bGx5X3Jlc29sdmVfZmlsZXNldF9zeW1saW5rcxABGo4BSWYgdHJ1ZSwgZnVsbHkgcmVzb2x2ZSByZWxhdGl2ZSBGaWxlc2V0IHN5bWxpbmtzIGluIHRoZSBCRVAgd2hlbiBwcmVzZW50aW5nIG91dHB1dCBmaWxlcy4gUmVxdWlyZXMgLS1leHBlcmltZW50YWxfYnVpbGRfZXZlbnRfZXhwYW5kX2ZpbGVzZXRzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAAKdQoJc3lzdGVtX3JjEAEaM1doZXRoZXIgb3Igbm90IHRvIGxvb2sgZm9yIHRoZSBzeXN0ZW0td2lkZSBiYXplbHJjLiIHc3RhcnR1cDAAOg5DSEFOR0VTX0lOUFVUU0oUQkFaRUxfQ0xJRU5UX09QVElPTlNQAAq8BQotZXhwZXJpbWVudGFsX3JlY29yZF9tZXRyaWNzX2Zvcl9hbGxfbW5lbW9uaWNzEAEapQNDb250cm9scyB0aGUgb3V0cHV0IG9mIEJFUCBBY3Rpb25TdW1tYXJ5IGFuZCBCdWlsZEdyYXBoTWV0cmljcywgbGltaXRpbmcgdGhlIG51bWJlciBvZiBtbmVtb25pY3MgaW4gQWN0aW9uRGF0YSBhbmQgbnVtYmVyIG9mIGVudHJpZXMgcmVwb3J0ZWQgaW4gQnVpbGRHcmFwaE1ldHJpY3MuQXNwZWN0Q291bnQvUnVsZUNsYXNzQ291bnQuIEJ5IGRlZmF1bHQgdGhlIG51bWJlciBvZiB0eXBlcyBpcyBsaW1pdGVkIHRvIHRoZSB0b3AgMjAsIGJ5IG51bWJlciBvZiBleGVjdXRlZCBhY3Rpb25zIGZvciBBY3Rpb25EYXRhLCBhbmQgaW5zdGFuY2VzIGZvciBSdWxlQ2xhc3MgYW5kIEFzZXBjdHMuIFNldHRpbmcgdGhpcyBvcHRpb24gd2lsbCB3cml0ZSBzdGF0aXN0aWNzIGZvciBhbGwgbW5lbW9uaWNzLCBydWxlIGNsYXNzZXMgYW5kIGFzcGVjdHMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgdMT0dHSU5HUAAK2AEKBm91dHB1dBAAGosBVGhlIGZvcm1hdCBpbiB3aGljaCB0aGUgYXF1ZXJ5IHJlc3VsdHMgc2hvdWxkIGJlIHByaW50ZWQuIEFsbG93ZWQgdmFsdWVzIGZvciBhcXVlcnkgYXJlOiB0ZXh0LCB0ZXh0cHJvdG8sIHByb3RvLCBzdHJlYW1lZF9wcm90bywganNvbnByb3RvLiIGYXF1ZXJ5IgZjb25maWciBmNxdWVyeSIDbW9kIgVxdWVyeTAAOg9URVJNSU5BTF9PVVRQVVRKBVFVRVJZUAEKqQIKJmV4cGVyaW1lbnRhbF9weV9iaW5hcmllc19pbmNsdWRlX2xhYmVsEAEaRXB5X2JpbmFyeSB0YXJnZXRzIGluY2x1ZGUgdGhlaXIgbGFiZWwgZXZlbiB3aGVuIHN0YW1waW5nIGlzIGRpc2FibGVkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTQgxFWFBFUklNRU5UQUxKEU9VVFBVVF9QQVJBTUVURVJTUAAKpwIKDWN1c3RvbV9tYWxsb2MQABpiU3BlY2lmaWVzIGEgY3VzdG9tIG1hbGxvYyBpbXBsZW1lbnRhdGlvbi4gVGhpcyBzZXR0aW5nIG92ZXJyaWRlcyBtYWxsb2MgYXR0cmlidXRlcyBpbiBidWlsZCBydWxlcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6DkNIQU5HRVNfSU5QVVRTOg9BRkZFQ1RTX09VVFBVVFNKCVRPT0xDSEFJTlABCp0CChphdXRvX2NwdV9lbnZpcm9ubWVudF9ncm91cBAAGgVOby1vcCIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoFTk9fT1BCDEVYUEVSSU1FTlRBTEoQSU5QVVRfU1RSSUNUTkVTU1ABCuICCiNpbmNvbXBhdGlibGVfZW5hYmxlX2NjX3Rlc3RfZmVhdHVyZRABGnpXaGVuIGVuYWJsZWQsIGl0IHN3aXRjaGVzIENyb3NzdG9vbCB0byB1c2UgZmVhdHVyZSAnaXNfY2NfdGVzdCcgcmF0aGVyIHRoYW4gdGhlIGxpbmstdGltZSBidWlsZCB2YXJpYWJsZSBvZiB0aGUgc2FtZSBuYW1lLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQUNUSU9OX0NPTU1BTkRfTElORVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKDFVORE9DVU1FTlRFRFAACv0BCipleHBlcmltZW50YWxfc2FuZGJveGZzX21hcF9zeW1saW5rX3RhcmdldHMQARoFTm8tb3AiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TOglFWEVDVVRJT05KEElOUFVUX1NUUklDVE5FU1NQAArhAQolZXhwZXJpbWVudGFsX2xvY2FsX2phdmFfb3B0aW1pemF0aW9ucxABGgtEbyBub3QgdXNlLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkIMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAAq3AgoUcmVtb3RlX2luc3RhbmNlX25hbWUQABo7VmFsdWUgdG8gcGFzcyBhcyBpbnN0YW5jZV9uYW1lIGluIHRoZSByZW1vdGUgZXhlY3V0aW9uIEFQSS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KBlJFTU9URVABCqcDCixyZWRpcmVjdF9sb2NhbF9pbnN0cnVtZW50YXRpb25fb3V0cHV0X3dyaXRlcxABGogBSWYgdHJ1ZSBhbmQgc3VwcG9ydGVkLCBpbnN0cnVtZW50YXRpb24gb3V0cHV0IGlzIHJlZGlyZWN0ZWQgdG8gYmUgd3JpdHRlbiBsb2NhbGx5IG9uIGEgZGlmZmVyZW50IG1hY2hpbmUgdGhhbiB3aGVyZSBiYXplbCBpcyBydW5uaW5nIG9uLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoQQkFaRUxfTU9OSVRPUklOR0oHTE9HR0lOR1AACuADCiNleHBlcmltZW50YWxfd29ya2VyX21lbW9yeV9saW1pdF9tYhAAGuwBSWYgdGhpcyBsaW1pdCBpcyBncmVhdGVyIHRoYW4gemVybywgd29ya2VycyBtaWdodCBiZSBraWxsZWQgaWYgdGhlIG1lbW9yeSB1c2FnZSBvZiB0aGUgd29ya2VyIGV4Y2VlZHMgdGhlIGxpbWl0LiBJZiBub3QgdXNlZCB0b2dldGhlciB3aXRoIGR5bmFtaWMgZXhlY3V0aW9uIGFuZCBgLS1leHBlcmltZW50YWxfZHluYW1pY19pZ25vcmVfbG9jYWxfc2lnbmFscz05YCwgdGhpcyBtYXkgY3Jhc2ggeW91ciBidWlsZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTjojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlNKEkVYRUNVVElPTl9TVFJBVEVHWVABCuEBCiBleHBlcmltZW50YWxfcHJvdG9fZXh0cmFfYWN0aW9ucxABGhJEZXByZWNhdGVkLiBOby1vcC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFAACswCChVzYW5kYm94X3dyaXRhYmxlX3BhdGgQABqNAUZvciBzYW5kYm94ZWQgYWN0aW9ucywgbWFrZSBhbiBleGlzdGluZyBkaXJlY3Rvcnkgd3JpdGFibGUgaW4gdGhlIHNhbmRib3ggKGlmIHN1cHBvcnRlZCBieSB0aGUgc2FuZGJveGluZyBpbXBsZW1lbnRhdGlvbiwgaWdub3JlZCBvdGhlcndpc2UpLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToJRVhFQ1VUSU9OShBJTlBVVF9TVFJJQ1RORVNTUAEKhAQKImV4cGVyaW1lbnRhbF9yZW1vdGVfb3V0cHV0X3NlcnZpY2UQABr5AUhPU1Qgb3IgSE9TVDpQT1JUIG9mIGEgcmVtb3RlIG91dHB1dCBzZXJ2aWNlIGVuZHBvaW50LiBUaGUgc3VwcG9ydGVkIHNjaGVtYXMgYXJlIGdycGMsIGdycGNzIChncnBjIHdpdGggVExTIGVuYWJsZWQpIGFuZCB1bml4IChsb2NhbCBVTklYIHNvY2tldHMpLiBJZiBubyBzY2hlbWEgaXMgcHJvdmlkZWQgQmF6ZWwgd2lsbCBkZWZhdWx0IHRvIGdycGNzLiBTcGVjaWZ5IGdycGM6Ly8gb3IgdW5peDogc2NoZW1hIHRvIGRpc2FibGUgVExTLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoGUkVNT1RFUAEKlgIKB2V4cHVuZ2UQARrGAUlmIHRydWUsIGNsZWFuIHJlbW92ZXMgdGhlIGVudGlyZSB3b3JraW5nIHRyZWUgZm9yIHRoaXMgJXtwcm9kdWN0fSBpbnN0YW5jZSwgd2hpY2ggaW5jbHVkZXMgYWxsICV7cHJvZHVjdH0tY3JlYXRlZCB0ZW1wb3JhcnkgYW5kIGJ1aWxkIG91dHB1dCBmaWxlcywgYW5kIHN0b3BzIHRoZSAle3Byb2R1Y3R9IHNlcnZlciBpZiBpdCBpcyBydW5uaW5nLiIFY2xlYW4wADojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlNKEE9VVFBVVF9TRUxFQ1RJT05QAAqsBAoiZXhwZXJpbWVudGFsX3JlbW90ZV9yZXF1aXJlX2NhY2hlZBABGqECSWYgc2V0IHRvIHRydWUsIGVuZm9yY2UgdGhhdCBhbGwgYWN0aW9ucyB0aGF0IGNhbiBydW4gcmVtb3RlbHkgYXJlIGNhY2hlZCwgb3IgZWxzZSBmYWlsIHRoZSBidWlsZC4gVGhpcyBpcyB1c2VmdWwgdG8gdHJvdWJsZXNob290IG5vbi1kZXRlcm1pbmlzbSBpc3N1ZXMgYXMgaXQgYWxsb3dzIGNoZWNraW5nIHdoZXRoZXIgYWN0aW9ucyB0aGF0IHNob3VsZCBiZSBjYWNoZWQgYXJlIGFjdHVhbGx5IGNhY2hlZCB3aXRob3V0IHNwdXJpb3VzbHkgaW5qZWN0aW5nIG5ldyByZXN1bHRzIGludG8gdGhlIGNhY2hlLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoGUkVNT1RFUAAK/gIKD21hY29zX3Fvc19jbGFzcxAAGqACU2V0cyB0aGUgUW9TIHNlcnZpY2UgY2xhc3Mgb2YgdGhlICV7cHJvZHVjdH0gc2VydmVyIHdoZW4gcnVubmluZyBvbiBtYWNPUy4gVGhpcyBmbGFnIGhhcyBubyBlZmZlY3Qgb24gYWxsIG90aGVyIHBsYXRmb3JtcyBidXQgaXMgc3VwcG9ydGVkIHRvIGVuc3VyZSByYyBmaWxlcyBjYW4gYmUgc2hhcmVkIGFtb25nIHRoZW0gd2l0aG91dCBjaGFuZ2VzLiBQb3NzaWJsZSB2YWx1ZXMgYXJlOiB1c2VyLWludGVyYWN0aXZlLCB1c2VyLWluaXRpYXRlZCwgZGVmYXVsdCwgdXRpbGl0eSwgYW5kIGJhY2tncm91bmQuIgdzdGFydHVwMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TShRCQVpFTF9DTElFTlRfT1BUSU9OU1ABCpwCChJkZWZhdWx0X3Zpc2liaWxpdHkQABpVRGVmYXVsdCB2aXNpYmlsaXR5IGZvciBwYWNrYWdlcyB0aGF0IGRvbid0IHNldCBpdCBleHBsaWNpdGx5ICgncHVibGljJyBvciAncHJpdmF0ZScpLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoMVU5ET0NVTUVOVEVEUAEK8wUKFmR5bmFtaWNfbG9jYWxfc3RyYXRlZ3kQABqMBFRoZSBsb2NhbCBzdHJhdGVnaWVzLCBpbiBvcmRlciwgdG8gdXNlIGZvciB0aGUgZ2l2ZW4gbW5lbW9uaWMgLSB0aGUgZmlyc3QgYXBwbGljYWJsZSBzdHJhdGVneSBpcyB1c2VkLiBGb3IgZXhhbXBsZSwgYHdvcmtlcixzYW5kYm94ZWRgIHJ1bnMgYWN0aW9ucyB0aGF0IHN1cHBvcnQgcGVyc2lzdGVudCB3b3JrZXJzIHVzaW5nIHRoZSB3b3JrZXIgc3RyYXRlZ3ksIGFuZCBhbGwgb3RoZXJzIHVzaW5nIHRoZSBzYW5kYm94ZWQgc3RyYXRlZ3kuIElmIG5vIG1uZW1vbmljIGlzIGdpdmVuLCB0aGUgbGlzdCBvZiBzdHJhdGVnaWVzIGlzIHVzZWQgYXMgdGhlIGZhbGxiYWNrIGZvciBhbGwgbW5lbW9uaWNzLiBUaGUgZGVmYXVsdCBmYWxsYmFjayBsaXN0IGlzIGB3b3JrZXIsc2FuZGJveGVkYCwgb3Jgd29ya2VyLHNhbmRib3hlZCxzdGFuZGFsb25lYCBpZiBgZXhwZXJpbWVudGFsX2xvY2FsX2xvY2tmcmVlX291dHB1dGAgaXMgc2V0LiBUYWtlcyBbbW5lbW9uaWM9XWxvY2FsX3N0cmF0ZWd5Wyxsb2NhbF9zdHJhdGVneSwuLi5dIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOglFWEVDVVRJT046I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TShJFWEVDVVRJT05fU1RSQVRFR1lQAQrQAQoiYnl0ZWNvZGVfb3B0aW1pemF0aW9uX3Bhc3NfYWN0aW9ucxAAGgtEbyBub3QgdXNlLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoMVU5ET0NVTUVOVEVEUAEK0QIKEHRlcm1pbmFsX2NvbHVtbnMQABpLQSBzeXN0ZW0tZ2VuZXJhdGVkIHBhcmFtZXRlciB3aGljaCBzcGVjaWZpZXMgdGhlIHRlcm1pbmFsIHdpZHRoIGluIGNvbHVtbnMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOQgZISURERU5KDFVORE9DVU1FTlRFRFABCpcDCglmb3JjZV9waWMQARrHAUlmIGVuYWJsZWQsIGFsbCBDKysgY29tcGlsYXRpb25zIHByb2R1Y2UgcG9zaXRpb24taW5kZXBlbmRlbnQgY29kZSAoIi1mUElDIiksIGxpbmtzIHByZWZlciBQSUMgcHJlLWJ1aWx0IGxpYnJhcmllcyBvdmVyIG5vbi1QSUMgbGlicmFyaWVzLCBhbmQgbGlua3MgcHJvZHVjZSBwb3NpdGlvbi1pbmRlcGVuZGVudCBleGVjdXRhYmxlcyAoIi1waWUiKS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAAKuwEKCGFubm91bmNlEAEaEkRlcHJlY2F0ZWQuIE5vLW9wLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BKDFVORE9DVU1FTlRFRFAACvUECh9lbmFibGVfcGxhdGZvcm1fc3BlY2lmaWNfY29uZmlnEAEa5gJJZiB0cnVlLCBCYXplbCBwaWNrcyB1cCBob3N0LU9TLXNwZWNpZmljIGNvbmZpZyBsaW5lcyBmcm9tIGJhemVscmMgZmlsZXMuIEZvciBleGFtcGxlLCBpZiB0aGUgaG9zdCBPUyBpcyBMaW51eCBhbmQgeW91IHJ1biBiYXplbCBidWlsZCwgQmF6ZWwgcGlja3MgdXAgbGluZXMgc3RhcnRpbmcgd2l0aCBidWlsZDpsaW51eC4gU3VwcG9ydGVkIE9TIGlkZW50aWZpZXJzIGFyZSBsaW51eCwgbWFjb3MsIHdpbmRvd3MsIGZyZWVic2QsIGFuZCBvcGVuYnNkLiBFbmFibGluZyB0aGlzIGZsYWcgaXMgZXF1aXZhbGVudCB0byB1c2luZyAtLWNvbmZpZz1saW51eCBvbiBMaW51eCwgLS1jb25maWc9d2luZG93cyBvbiBXaW5kb3dzLCBldGMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAAK4ggKHmV4cGVyaW1lbnRhbF9idWlsdGluc19iemxfcGF0aBAAGqEGVGhpcyBmbGFnIHRlbGxzIEJhemVsIGhvdyB0byBmaW5kIHRoZSAiQF9idWlsdGlucyIgLmJ6bCBmaWxlcyB0aGF0IGdvdmVybiBob3cgcHJlZGVjbGFyZWQgc3ltYm9scyBmb3IgQlVJTEQgYW5kIC5iemwgZmlsZXMgYXJlIGRlZmluZWQuIFRoaXMgZmxhZyBpcyBvbmx5IGludGVuZGVkIGZvciBCYXplbCBkZXZlbG9wZXJzLCB0byBoZWxwIHdoZW4gd3JpdGluZyBAX2J1aWx0aW5zIC5iemwgY29kZS4gT3JkaW5hcmlseSB0aGlzIHZhbHVlIGlzIHNldCB0byAiJWJ1bmRsZWQlIiwgd2hpY2ggbWVhbnMgdG8gdXNlIHRoZSBidWlsdGluc19iemwvIGRpcmVjdG9yeSBwYWNrYWdlZCBpbiB0aGUgQmF6ZWwgYmluYXJ5LiBIb3dldmVyLCBpdCBjYW4gYmUgc2V0IHRvIHRoZSBwYXRoIChyZWxhdGl2ZSB0byB0aGUgcm9vdCBvZiB0aGUgY3VycmVudCB3b3Jrc3BhY2UpIG9mIGFuIGFsdGVybmF0ZSBidWlsdGluc19iemwvIGRpcmVjdG9yeSwgc3VjaCBhcyBvbmUgaW4gYSBCYXplbCBzb3VyY2UgdHJlZSB3b3Jrc3BhY2UuIEEgbGl0ZXJhbCB2YWx1ZSBvZiAiJXdvcmtzcGFjZSUiIGlzIGVxdWl2YWxlbnQgdG8gdGhlIHJlbGF0aXZlIHBhY2thZ2UgcGF0aCBvZiBidWlsdGluc19iemwvIHdpdGhpbiBhIEJhemVsIHNvdXJjZSB0cmVlOyB0aGlzIHNob3VsZCBvbmx5IGJlIHVzZWQgd2hlbiBydW5uaW5nIEJhemVsIHdpdGhpbiBpdHMgb3duIHNvdXJjZSB0cmVlLiBGaW5hbGx5LCBhIHZhbHVlIG9mIHRoZSBlbXB0eSBzdHJpbmcgZGlzYWJsZXMgdGhlIGJ1aWx0aW5zIGluamVjdGlvbiBtZWNoYW5pc20gZW50aXJlbHkuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURToUQlVJTERfRklMRV9TRU1BTlRJQ1NCDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAEK9wMKFmJlc19vdXRlcnJfYnVmZmVyX3NpemUQABrvAVNwZWNpZmllcyB0aGUgbWF4aW1hbCBzaXplIG9mIHN0ZG91dCBvciBzdGRlcnIgdG8gYmUgYnVmZmVyZWQgaW4gQkVQLCBiZWZvcmUgaXQgaXMgcmVwb3J0ZWQgYXMgYSBwcm9ncmVzcyBldmVudC4gSW5kaXZpZHVhbCB3cml0ZXMgYXJlIHN0aWxsIHJlcG9ydGVkIGluIGEgc2luZ2xlIGV2ZW50LCBldmVuIGlmIGxhcmdlciB0aGFuIHRoZSBzcGVjaWZpZWQgdmFsdWUgdXAgdG8gLS1iZXNfb3V0ZXJyX2NodW5rX3NpemUuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg9BRkZFQ1RTX09VVFBVVFNKB0xPR0dJTkdQAQqtBAomaW5jb21wYXRpYmxlX2JhemVsX3Rlc3RfZXhlY19ydW5fdW5kZXIQARrJAklmIGVuYWJsZWQsICJiYXplbCB0ZXN0IC0tcnVuX3VuZGVyPS8vOnJ1bm5lciIgYnVpbGRzICIvLzpydW5uZXIiIGluIHRoZSBleGVjIGNvbmZpZ3VyYXRpb24uIElmIGRpc2FibGVkLCBpdCBidWlsZHMgIi8vOnJ1bm5lciIgaW4gdGhlIHRhcmdldCBjb25maWd1cmF0aW9uLiBCYXplbCBleGVjdXRlcyB0ZXN0cyBvbiBleGVjIG1hY2hpbmVzLCBzbyB0aGUgZm9ybWVyIGlzIG1vcmUgY29ycmVjdC4gVGhpcyBkb2Vzbid0IGFmZmVjdCAiYmF6ZWwgcnVuIiwgd2hpY2ggYWx3YXlzIGJ1aWxkcyAiYC0tcnVuX3VuZGVyPS8vZm9vIiBpbiB0aGUgdGFyZ2V0IGNvbmZpZ3VyYXRpb24uIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKCVRPT0xDSEFJTlAACvYBChxleHBlcmltZW50YWxfZW5hYmxlX2pzcGVjaWZ5EAEaKUVuYWJsZSBleHBlcmltZW50YWwganNwZWNpZnkgaW50ZWdyYXRpb24uIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFAACrIBCgdjaGFyc2V0EAAafkNob29zZXMgdGhlIGNoYXJhY3RlciBzZXQgdG8gdXNlIGZvciB0aGUgdHJlZS4gT25seSBhZmZlY3RzIHRleHQgb3V0cHV0LiBWYWxpZCB2YWx1ZXMgYXJlICJ1dGY4IiBvciAiYXNjaWkiLiBEZWZhdWx0IGlzICJ1dGY4IiIDbW9kMAA6D1RFUk1JTkFMX09VVFBVVEoLTU9EX0NPTU1BTkRQAQq1AQoZcHJvdG86aW5zdGFudGlhdGlvbl9zdGFjaxABGmNQb3B1bGF0ZSB0aGUgaW5zdGFudGlhdGlvbiBjYWxsIHN0YWNrIG9mIGVhY2ggcnVsZS4gTm90ZSB0aGF0IHRoaXMgcmVxdWlyZXMgdGhlIHN0YWNrIHRvIGJlIHByZXNlbnQiBmFxdWVyeSIGY3F1ZXJ5IgVxdWVyeTAAOg9URVJNSU5BTF9PVVRQVVRKBVFVRVJZUAAKwgMKDWV4cHVuZ2VfYXN5bmMQABrsAklmIHNwZWNpZmllZCwgY2xlYW4gYXN5bmNocm9ub3VzbHkgcmVtb3ZlcyB0aGUgZW50aXJlIHdvcmtpbmcgdHJlZSBmb3IgdGhpcyAle3Byb2R1Y3R9IGluc3RhbmNlLCB3aGljaCBpbmNsdWRlcyBhbGwgJXtwcm9kdWN0fS1jcmVhdGVkIHRlbXBvcmFyeSBhbmQgYnVpbGQgb3V0cHV0IGZpbGVzLCBhbmQgc3RvcHMgdGhlICV7cHJvZHVjdH0gc2VydmVyIGlmIGl0IGlzIHJ1bm5pbmcuIFdoZW4gdGhpcyBjb21tYW5kIGNvbXBsZXRlcywgaXQgd2lsbCBiZSBzYWZlIHRvIGV4ZWN1dGUgbmV3IGNvbW1hbmRzIGluIHRoZSBzYW1lIGNsaWVudCwgZXZlbiB0aG91Z2ggdGhlIGRlbGV0aW9uIG1heSBjb250aW51ZSBpbiB0aGUgYmFja2dyb3VuZC4iBWNsZWFuMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TShBPVVRQVVRfU0VMRUNUSU9OUAAKugUKIHJlbW90ZV9kb3dubG9hZF9zeW1saW5rX3RlbXBsYXRlEAAangNJbnN0ZWFkIG9mIGRvd25sb2FkaW5nIHJlbW90ZSBidWlsZCBvdXRwdXRzIHRvIHRoZSBsb2NhbCBtYWNoaW5lLCBjcmVhdGUgc3ltYm9saWMgbGlua3MuIFRoZSB0YXJnZXQgb2YgdGhlIHN5bWJvbGljIGxpbmtzIGNhbiBiZSBzcGVjaWZpZWQgaW4gdGhlIGZvcm0gb2YgYSB0ZW1wbGF0ZSBzdHJpbmcuIFRoaXMgdGVtcGxhdGUgc3RyaW5nIG1heSBjb250YWluIHtoYXNofSBhbmQge3NpemVfYnl0ZXN9IHRoYXQgZXhwYW5kIHRvIHRoZSBoYXNoIG9mIHRoZSBvYmplY3QgYW5kIHRoZSBzaXplIGluIGJ5dGVzLCByZXNwZWN0aXZlbHkuIFRoZXNlIHN5bWJvbGljIGxpbmtzIG1heSwgZm9yIGV4YW1wbGUsIHBvaW50IHRvIGEgRlVTRSBmaWxlIHN5c3RlbSB0aGF0IGxvYWRzIG9iamVjdHMgZnJvbSB0aGUgQ0FTIG9uIGRlbWFuZC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQrEAwotZXhwZXJpbWVudGFsX3Byb2Nlc3Nfd3JhcHBlcl9ncmFjZWZ1bF9zaWd0ZXJtEAEa8QFXaGVuIHRydWUsIG1ha2UgdGhlIHByb2Nlc3Mtd3JhcHBlciBwcm9wYWdhdGUgU0lHVEVSTXMgKHVzZWQgYnkgdGhlIGR5bmFtaWMgc2NoZWR1bGVyIHRvIHN0b3AgcHJvY2VzcyB0cmVlcykgdG8gdGhlIHN1YnByb2Nlc3NlcyB0aGVtc2VsdmVzLCBnaXZpbmcgdGhlbSB0aGUgZ3JhY2UgcGVyaW9kIGluIC0tbG9jYWxfdGVybWluYXRpb25fZ3JhY2Vfc2Vjb25kcyBiZWZvcmUgZm9yY2libHkgc2VuZGluZyBhIFNJR0tJTEwuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KDFVORE9DVU1FTlRFRFAACugDCiRpbmNvbXBhdGlibGVfbm9faW1wbGljaXRfZmlsZV9leHBvcnQQARqtAUlmIHNldCwgKHVzZWQpIHNvdXJjZSBmaWxlcyBhcmUgYXJlIHBhY2thZ2UgcHJpdmF0ZSB1bmxlc3MgZXhwb3J0ZWQgZXhwbGljaXRseS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iYXplbGJ1aWxkL3Byb3Bvc2Fscy9ibG9iL21hc3Rlci9kZXNpZ25zLzIwMTktMTAtMjQtZmlsZS12aXNpYmlsaXR5Lm1kIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRCVUlMRF9GSUxFX1NFTUFOVElDU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoSU1RBUkxBUktfU0VNQU5USUNTUAAKggIKBXN0YW1wEAEaTVN0YW1wIGJpbmFyaWVzIHdpdGggdGhlIGRhdGUsIHVzZXJuYW1lLCBob3N0bmFtZSwgd29ya3NwYWNlIGluZm9ybWF0aW9uLCBldGMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAAKwAIKMmVuZm9yY2VfdHJhbnNpdGl2ZV9jb25maWdzX2Zvcl9jb25maWdfZmVhdHVyZV9mbGFnEAEaACIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEU6D0FGRkVDVFNfT1VUUFVUUzoUQlVJTERfRklMRV9TRU1BTlRJQ1M6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT046FExPQURJTkdfQU5EX0FOQUxZU0lTSgxVTkRPQ1VNRU5URURQAAq+AgogZXhwZXJpbWVudGFsX3VpX2RlYnVnX2FsbF9ldmVudHMQARooUmVwb3J0IGFsbCBldmVudHMga25vd24gdG8gdGhlIEJhemVsIFVJLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkIGSElEREVOSgxVTkRPQ1VNRU5URURQAAqXAgoNaG9zdF9wbGF0Zm9ybRAAGjxUaGUgbGFiZWwgb2YgYSBwbGF0Zm9ybSBydWxlIHRoYXQgZGVzY3JpYmVzIHRoZSBob3N0IHN5c3RlbS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUUzoOQ0hBTkdFU19JTlBVVFM6FExPQURJTkdfQU5EX0FOQUxZU0lTSglUT09MQ0hBSU5QAQrbAQoSZmRvX3ByZWZldGNoX2hpbnRzEAAaGVVzZSBjYWNoZSBwcmVmZXRjaCBoaW50cy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQraAQodZ3JhcGg6Y29uZGl0aW9uYWxfZWRnZXNfbGltaXQQABqTAVRoZSBtYXhpbXVtIG51bWJlciBvZiBjb25kaXRpb24gbGFiZWxzIHRvIHNob3cuIC0xIG1lYW5zIG5vIHRydW5jYXRpb24gYW5kIDAgbWVhbnMgbm8gYW5ub3RhdGlvbi4gVGhpcyBvcHRpb24gaXMgb25seSBhcHBsaWNhYmxlIHRvIC0tb3V0cHV0PWdyYXBoLiIFcXVlcnkwADoPVEVSTUlOQUxfT1VUUFVUSgVRVUVSWVABCs0CCiRpbmNvbXBhdGlibGVfc3RyaXBfZXhlY3V0YWJsZV9zYWZlbHkQARpnSWYgdHJ1ZSwgc3RyaXAgYWN0aW9uIGZvciBleGVjdXRhYmxlcyB3aWxsIHVzZSBmbGFnIC14LCB3aGljaCBkb2VzIG5vdCBicmVhayBkeW5hbWljIHN5bWJvbCByZXNvbHV0aW9uLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQUNUSU9OX0NPTU1BTkRfTElORVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKCVRPT0xDSEFJTlAACsgDChtleHBlcmltZW50YWxfYnpsX3Zpc2liaWxpdHkQARqdAUlmIGVuYWJsZWQsIGFkZHMgYSBgdmlzaWJpbGl0eSgpYCBmdW5jdGlvbiB0aGF0IC5iemwgZmlsZXMgbWF5IGNhbGwgZHVyaW5nIHRvcC1sZXZlbCBldmFsdWF0aW9uIHRvIHNldCB0aGVpciB2aXNpYmlsaXR5IGZvciB0aGUgcHVycG9zZSBvZiBsb2FkKCkgc3RhdGVtZW50cy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQgxFWFBFUklNRU5UQUxKElNUQVJMQVJLX1NFTUFOVElDU1AACrMDChxhbGxvd19hbmFseXNpc19jYWNoZV9kaXNjYXJkEAEa6AFJZiBkaXNjYXJkaW5nIHRoZSBhbmFseXNpcyBjYWNoZSBkdWUgdG8gYSBjaGFuZ2UgaW4gdGhlIGJ1aWxkIHN5c3RlbSwgc2V0dGluZyB0aGlzIG9wdGlvbiB0byBmYWxzZSB3aWxsIGNhdXNlIGJhemVsIHRvIGV4aXQsIHJhdGhlciB0aGFuIGNvbnRpbnVpbmcgd2l0aCB0aGUgYnVpbGQuIFRoaXMgb3B0aW9uIGhhcyBubyBlZmZlY3Qgd2hlbiAnZGlzY2FyZF9hbmFseXNpc19jYWNoZScgaXMgYWxzbyBzZXQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhFFQUdFUk5FU1NfVE9fRVhJVEoNVU5DQVRFR09SSVpFRFAACrkFCilleHBlcmltZW50YWxfaW5jbHVkZV9zY2FubmluZ19wYXJhbGxlbGlzbRAAGqcDQ29uZmlndXJlcyB0aGUgc2l6ZSBvZiB0aGUgdGhyZWFkIHBvb2wgdXNlZCBmb3IgaW5jbHVkZSBzY2FubmluZy4gVGFrZXMgYW4gaW50ZWdlciwgb3IgYSBrZXl3b3JkICgiYXV0byIsICJIT1NUX0NQVVMiLCAiSE9TVF9SQU0iKSwgb3B0aW9uYWxseSBmb2xsb3dlZCBieSBhbiBvcGVyYXRpb24gKFstfCpdPGZsb2F0PikgZWcuICJhdXRvIiwgIkhPU1RfQ1BVUyouNSIuIDAgbWVhbnMgdG8gZGlzYWJsZSBwYXJhbGxlbGlzbSBhbmQgdG8ganVzdCByZWx5IG9uIHRoZSBidWlsZCBncmFwaCBwYXJhbGxlbGlzbSBmb3IgY29uY3VycmVuY3kuICAiYXV0byIgbWVhbnMgdG8gdXNlIGEgcmVhc29uYWJsZSB2YWx1ZSBkZXJpdmVkIGZyb20gdGhlIG1hY2hpbmUncyBoYXJkd2FyZSBwcm9maWxlIChlLmcuIHRoZSBudW1iZXIgb2YgcHJvY2Vzc29ycykuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OOglFWEVDVVRJT046I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TSgxVTkRPQ1VNRU5URURQAQqTAwoYZXhwZXJpbWVudGFsX2V4ZWNfY29uZmlnEAAatAFJZiBzZXQgdG8gJy8vc29tZTpsYWJlbDpteS5iemwlbXlfdHJhbnNpdGlvbicsIHVzZXMgbXlfdHJhbnNpdGlvbiBmb3IgJ2NmZyA9ICJleGVjIicgc2VtYW50aWNzIGluc3RlYWQgb2YgQmF6ZWwncyBpbnRlcm5hbCBleGVjIHRyYW5zaXRpb24gbG9naWMuICBFbHNlIHVzZXMgQmF6ZWwncyBpbnRlcm5hbCBsb2dpYy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05CDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAEK9AEKGmV4cGVyaW1lbnRhbF9zdGF0c19zdW1tYXJ5EAEaL0VuYWJsZSBhIG1vZGVybml6ZWQgc3VtbWFyeSBvZiB0aGUgYnVpbGQgc3RhdHMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9URVJNSU5BTF9PVVRQVVRKDFVORE9DVU1FTlRFRFAACskSCiBpbmNvbXBhdGlibGVfYXV0b2xvYWRfZXh0ZXJuYWxseRAAGvkPQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBydWxlcyAob3Igb3RoZXIgc3ltYm9scykgdGhhdCB3ZXJlIHByZXZpb3VzbHkgcGFydCBvZiBCYXplbCBhbmQgd2hpY2ggYXJlIG5vdyB0byBiZSByZXRyaWV2ZWQgZnJvbSB0aGVpciByZXNwZWN0aXZlIGV4dGVybmFsIHJlcG9zaXRvcmllcy4gVGhpcyBmbGFnIGlzIGludGVuZGVkIHRvIGJlIHVzZWQgdG8gZmFjaWxpdGF0ZSBtaWdyYXRpb24gb2YgcnVsZXMgb3V0IG9mIEJhemVsLiBTZWUgYWxzbyBodHRwczovL2dpdGh1Yi5jb20vYmF6ZWxidWlsZC9iYXplbC9pc3N1ZXMvMjMwNDMuCkEgc3ltYm9sIHRoYXQgaXMgYXV0b2xvYWRlZCB3aXRoaW4gYSBmaWxlIGJlaGF2ZXMgYXMgaWYgaXRzIGJ1aWx0LWludG8tQmF6ZWwgZGVmaW5pdGlvbiB3ZXJlIHJlcGxhY2VkIGJ5IGl0cyBjYW5vbmljYWwgbmV3IGRlZmluaXRpb24gaW4gYW4gZXh0ZXJuYWwgcmVwb3NpdG9yeS4gRm9yIGEgQlVJTEQgZmlsZSwgdGhpcyBlc3NlbnRpYWxseSBtZWFucyBpbXBsaWNpdGx5IGFkZGluZyBhIGxvYWQoKSBzdGF0ZW1lbnQuIEZvciBhIC5iemwgZmlsZSwgaXQncyBlaXRoZXIgYSBsb2FkKCkgc3RhdGVtZW50IG9yIGEgY2hhbmdlIHRvIGEgZmllbGQgb2YgdGhlIGBuYXRpdmVgIG9iamVjdCwgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGF1dG9sb2FkZWQgc3ltYm9sIGlzIGEgcnVsZS4KQmF6ZWwgbWFpbnRhaW5zIGEgaGFyZGNvZGVkIGxpc3Qgb2YgYWxsIHN5bWJvbHMgdGhhdCBtYXkgYmUgYXV0b2xvYWRlZDsgb25seSB0aG9zZSBzeW1ib2xzIG1heSBhcHBlYXIgaW4gdGhpcyBmbGFnLiBGb3IgZWFjaCBzeW1ib2wsIEJhemVsIGtub3dzIHRoZSBuZXcgZGVmaW5pdGlvbiBsb2NhdGlvbiBpbiBhbiBleHRlcm5hbCByZXBvc2l0b3J5LCBhcyB3ZWxsIGFzIGEgc2V0IG9mIHNwZWNpYWwtY2FzZWQgcmVwb3NpdG9yaWVzIHRoYXQgbXVzdCBub3QgYXV0b2xvYWQgaXQgdG8gYXZvaWQgY3JlYXRpbmcgY3ljbGVzLgpBIGxpc3QgaXRlbSBvZiAiK2ZvbyIgaW4gdGhpcyBmbGFnIGNhdXNlcyBzeW1ib2wgZm9vIHRvIGJlIGF1dG9sb2FkZWQsIGV4Y2VwdCBpbiBmb28ncyBleGVtcHQgcmVwb3NpdG9yaWVzLCB3aXRoaW4gd2hpY2ggdGhlIEJhemVsLWRlZmluZWQgdmVyc2lvbiBvZiBmb28gaXMgc3RpbGwgYXZhaWxhYmxlLgpBIGxpc3QgaXRlbSBvZiAiZm9vIiB0cmlnZ2VycyBhdXRvbG9hZGluZyBhcyBhYm92ZSwgYnV0IHRoZSBCYXplbC1kZWZpbmVkIHZlcnNpb24gb2YgZm9vIGlzIG5vdCBtYWRlIGF2YWlsYWJsZSB0byB0aGUgZXhjbHVkZWQgcmVwb3NpdG9yaWVzLiBUaGlzIGVuc3VyZXMgdGhhdCBmb28ncyBleHRlcm5hbCByZXBvc2l0b3J5IGRvZXMgbm90IGRlcGVuZCBvbiB0aGUgb2xkIEJhemVsIGltcGxlbWVudGF0aW9uIG9mIGZvbwpBIGxpc3QgaXRlbSBvZiAiLWZvbyIgZG9lcyBub3QgdHJpZ2dlciBhbnkgYXV0b2xvYWRpbmcsIGJ1dCBtYWtlcyB0aGUgQmF6ZWwtZGVmaW5lZCB2ZXJzaW9uIG9mIGZvbyBpbmFjY2Vzc2libGUgdGhyb3VnaG91dCB0aGUgd29ya3NwYWNlLiBUaGlzIGlzIHVzZWQgdG8gdmFsaWRhdGUgdGhhdCB0aGUgd29ya3NwYWNlIGlzIHJlYWR5IGZvciBmb28ncyBkZWZpbml0aW9uIHRvIGJlIGRlbGV0ZWQgZnJvbSBCYXplbC4KSWYgYSBzeW1ib2wgaXMgbm90IG5hbWVkIGluIHRoaXMgZmxhZyB0aGVuIGl0IGNvbnRpbnVlcyB0byB3b3JrIGFzIG5vcm1hbCAtLSBubyBhdXRvbG9hZGluZyBpcyBkb25lLCBub3IgaXMgdGhlIEJhemVsLWRlZmluZWQgdmVyc2lvbiBzdXBwcmVzc2VkLiBGb3IgY29uZmlndXJhdGlvbiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2JhemVsYnVpbGQvYmF6ZWwvYmxvYi9tYXN0ZXIvc3JjL21haW4vamF2YS9jb20vZ29vZ2xlL2RldnRvb2xzL2J1aWxkL2xpYi9wYWNrYWdlcy9BdXRvbG9hZFN5bWJvbHMuamF2YSBBcyBhIHNob3J0Y3V0IGFsc28gd2hvbGUgcmVwb3NpdG9yeSBtYXkgYmUgdXNlZCwgZm9yIGV4YW1wbGUgK0BydWxlc19weXRob24gd2lsbCBhdXRvbG9hZCBhbGwgUHl0aG9uIHJ1bGVzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEU6FEJVSUxEX0ZJTEVfU0VNQU5USUNTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShJTVEFSTEFSS19TRU1BTlRJQ1NQAQqiAgoTZGVzdWdhcl9mb3JfYW5kcm9pZBABGjFXaGV0aGVyIHRvIGRlc3VnYXIgSmF2YSA4IGJ5dGVjb2RlIGJlZm9yZSBkZXhpbmcuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFM6FExPQURJTkdfQU5EX0FOQUxZU0lTOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUoQSU5QVVRfU1RSSUNUTkVTU1AACrsCChJ3YXRjaG9zX21pbmltdW1fb3MQABpxTWluaW11bSBjb21wYXRpYmxlIHdhdGNoT1MgdmVyc2lvbiBmb3IgdGFyZ2V0IHNpbXVsYXRvcnMgYW5kIGRldmljZXMuIElmIHVuc3BlY2lmaWVkLCB1c2VzICd3YXRjaG9zX3Nka192ZXJzaW9uJy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFShFPVVRQVVRfUEFSQU1FVEVSU1ABCoQGChZkZWZhdWx0X3Rlc3RfcmVzb3VyY2VzEAAazwRPdmVycmlkZSB0aGUgZGVmYXVsdCByZXNvdXJjZXMgYW1vdW50IGZvciB0ZXN0cy4gVGhlIGV4cGVjdGVkIGZvcm1hdCBpcyA8cmVzb3VyY2U+PTx2YWx1ZT4uIElmIGEgc2luZ2xlIHBvc2l0aXZlIG51bWJlciBpcyBzcGVjaWZpZWQgYXMgPHZhbHVlPiBpdCB3aWxsIG92ZXJyaWRlIHRoZSBkZWZhdWx0IHJlc291cmNlcyBmb3IgYWxsIHRlc3Qgc2l6ZXMuIElmIDQgY29tbWEtc2VwYXJhdGVkIG51bWJlcnMgYXJlIHNwZWNpZmllZCwgdGhleSB3aWxsIG92ZXJyaWRlIHRoZSByZXNvdXJjZSBhbW91bnQgZm9yIHJlc3BlY3RpdmVseSB0aGUgc21hbGwsIG1lZGl1bSwgbGFyZ2UsIGVub3Jtb3VzIHRlc3Qgc2l6ZXMuIFZhbHVlcyBjYW4gYWxzbyBiZSBIT1NUX1JBTS9IT1NUX0NQVSwgb3B0aW9uYWxseSBmb2xsb3dlZCBieSBbLXwqXTxmbG9hdD4gKGVnLiBtZW1vcnk9SE9TVF9SQU0qLjEsSE9TVF9SQU0qLjIsSE9TVF9SQU0qLjMsSE9TVF9SQU0qLjQpLiBUaGUgZGVmYXVsdCB0ZXN0IHJlc291cmNlcyBzcGVjaWZpZWQgYnkgdGhpcyBmbGFnIGFyZSBvdmVycmlkZGVuIGJ5IGV4cGxpY2l0IHJlc291cmNlcyBzcGVjaWZpZWQgaW4gdGFncy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6B1VOS05PV05KB1RFU1RJTkdQAQpaCgxhY3Rpb25fY2FjaGUQARoaRHVtcCBhY3Rpb24gY2FjaGUgY29udGVudC4iBGR1bXAwADoQQkFaRUxfTU9OSVRPUklOR0oQT1VUUFVUX1NFTEVDVElPTlAACuIBChh0YXJnZXRfcGxhdGZvcm1fZmFsbGJhY2sQABosVGhpcyBvcHRpb24gaXMgZGVwcmVjYXRlZCBhbmQgaGFzIG5vIGVmZmVjdC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QSglUT09MQ0hBSU5QAQqhAgomZXhwZXJpbWVudGFsX3NreWxhcmtfZGVidWdfc2VydmVyX3BvcnQQABpIVGhlIHBvcnQgb24gd2hpY2ggdGhlIFN0YXJsYXJrIGRlYnVnIHNlcnZlciB3aWxsIGxpc3RlbiBmb3IgY29ubmVjdGlvbnMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05CDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAEK6gEKEHZlcmJvc2VfZmFpbHVyZXMQARo0SWYgYSBjb21tYW5kIGZhaWxzLCBwcmludCBvdXQgdGhlIGZ1bGwgY29tbWFuZCBsaW5lLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPVEVSTUlOQUxfT1VUUFVUSgdMT0dHSU5HUAAK3wIKJGJlcF9tYXhpbXVtX29wZW5fcmVtb3RlX3VwbG9hZF9maWxlcxAAGkBNYXhpbXVtIG51bWJlciBvZiBvcGVuIGZpbGVzIGFsbG93ZWQgZHVyaW5nIEJFUCBhcnRpZmFjdCB1cGxvYWQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAEK4wMKKmV4cGVyaW1lbnRhbF9yZW1vdGVfZmFpbHVyZV9yYXRlX3RocmVzaG9sZBAAGs4BU2V0cyB0aGUgYWxsb3dlZCBudW1iZXIgb2YgZmFpbHVyZSByYXRlIGluIHBlcmNlbnRhZ2UgZm9yIGEgc3BlY2lmaWMgdGltZSB3aW5kb3cgYWZ0ZXIgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyB0byB0aGUgcmVtb3RlIGNhY2hlL2V4ZWN1dG9yLiBCeSBkZWZhdWx0IHRoZSB2YWx1ZSBpcyAxMC4gU2V0dGluZyB0aGlzIHRvIDAgbWVhbnMgbm8gbGltaXRhdGlvbi4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6CUVYRUNVVElPTkoGUkVNT1RFUAEKhQMKGHJlbW90ZV9jYWNoZV9jb21wcmVzc2lvbhABGoQBSWYgZW5hYmxlZCwgY29tcHJlc3MvZGVjb21wcmVzcyBjYWNoZSBibG9icyB3aXRoIHpzdGQgd2hlbiB0aGVpciBzaXplIGlzIGF0IGxlYXN0IC0tZXhwZXJpbWVudGFsX3JlbW90ZV9jYWNoZV9jb21wcmVzc2lvbl90aHJlc2hvbGQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgZSRU1PVEVQAAqaBQozaW5jb21wYXRpYmxlX2Rpc2FibGVfdGFyZ2V0X2RlZmF1bHRfcHJvdmlkZXJfZmllbGRzEAEa0AJJZiBzZXQgdG8gdHJ1ZSwgZGlzYWJsZSB0aGUgYWJpbGl0eSB0byBhY2Nlc3MgcHJvdmlkZXJzIG9uICd0YXJnZXQnIG9iamVjdHMgdmlhIGZpZWxkIHN5bnRheC4gVXNlIHByb3ZpZGVyLWtleSBzeW50YXggaW5zdGVhZC4gRm9yIGV4YW1wbGUsIGluc3RlYWQgb2YgdXNpbmcgYGN0eC5hdHRyLmRlcC5teV9pbmZvYCB0byBhY2Nlc3MgYG15X2luZm9gIGZyb20gaW5zaWRlIGEgcnVsZSBpbXBsZW1lbnRhdGlvbiBmdW5jdGlvbiwgdXNlIGBjdHguYXR0ci5kZXBbTXlJbmZvXWAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYmF6ZWxidWlsZC9iYXplbC9pc3N1ZXMvOTAxNCBmb3IgZGV0YWlscy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShJTVEFSTEFSS19TRU1BTlRJQ1NQAAriAQofZXhwZXJpbWVudGFsX3dvcmtlcl9hc19yZXNvdXJjZRABGhxOby1vcCwgd2lsbCBiZSByZW1vdmVkIHNvb24uIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgVOT19PUEoSRVhFQ1VUSU9OX1NUUkFURUdZUAAK1AIKF2h0dHBfY29ubmVjdG9yX2F0dGVtcHRzEAAaMlRoZSBtYXhpbXVtIG51bWJlciBvZiBhdHRlbXB0cyBmb3IgaHR0cCBkb3dubG9hZHMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OShRCQVpFTF9DTElFTlRfT1BUSU9OU1ABCssBCgd2ZXJib3NlEAEalgFUaGUgcXVlcmllcyB3aWxsIGFsc28gZGlzcGxheSB0aGUgcmVhc29uIHdoeSBtb2R1bGVzIHdlcmUgcmVzb2x2ZWQgdG8gdGhlaXIgY3VycmVudCB2ZXJzaW9uIChpZiBjaGFuZ2VkKS4gRGVmYXVsdHMgdG8gdHJ1ZSBvbmx5IGZvciB0aGUgZXhwbGFpbiBxdWVyeS4iA21vZDAAOg9URVJNSU5BTF9PVVRQVVRKC01PRF9DT01NQU5EUAAKzgIKD3Rsc19jZXJ0aWZpY2F0ZRAAGlBTcGVjaWZ5IGEgcGF0aCB0byBhIFRMUyBjZXJ0aWZpY2F0ZSB0aGF0IGlzIHRydXN0ZWQgdG8gc2lnbiBzZXJ2ZXIgY2VydGlmaWNhdGVzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCuMECiFleHBlcmltZW50YWxfc2t5ZnJhbWVfbWVtb3J5X2R1bXAQABqWA0R1bXAgdGhlIG1lbW9yeSB1c2Ugb2YgaW5kaXZpZHVhbCBub2RlcyBpbiB0aGUgU2t5ZnJhbWUgZ3JhcGggYWZ0ZXIgdGhlIGJ1aWxkLiBUaGlzIG9wdGlvbiB0YWtlcyBhIG51bWJlciBvZiBmbGFncyBzZXBhcmF0ZWQgYnkgY29tbWFzOiAnanNvbicgKG5vLW9wLCB0aGF0J3MgdGhlIG9ubHkgZm9ybWF0KSwgJ25vdHJhbnNpZW50JyAoZG9uJ3QgdHJhdmVyc2UgdHJhbnNpZW50IGZpZWxkcyksICdub2NvbmZpZycgKGlnbm9yZSBvYmplY3RzIHJlbGF0ZWQgdG8gY29uZmlndXJhdGlvbnMpLCAnbm9wcmVjb21wdXRlZCcgKGlnbm9yZSBwcmVjb21wdXRlZCB2YWx1ZXMpIGFuZCAnbm93b3Jrc3BhY2VzdGF0dXMnIChpZ25vcmUgb2JqZWN0cyByZWxhdGVkIHRvIHRoZSB3b3Jrc3BhY2Ugc3RhdHVzIG1hY2hpbmVyeSkiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0oMVU5ET0NVTUVOVEVEUAEKqQIKIGV4cGVyaW1lbnRhbF9lbmFibGVfYXNwZWN0X2hpbnRzEAEaACIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUTE9BRElOR19BTkRfQU5BTFlTSVNCDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAK8wMKG2luY29tcGF0aWJsZV9weTNfaXNfZGVmYXVsdBABGv8BSWYgdHJ1ZSwgYHB5X2JpbmFyeWAgYW5kIGBweV90ZXN0YCB0YXJnZXRzIHRoYXQgZG8gbm90IHNldCB0aGVpciBgcHl0aG9uX3ZlcnNpb25gIChvciBgZGVmYXVsdF9weXRob25fdmVyc2lvbmApIGF0dHJpYnV0ZSB3aWxsIGRlZmF1bHQgdG8gUFkzIHJhdGhlciB0aGFuIHRvIFBZMi4gSWYgeW91IHNldCB0aGlzIGZsYWcgaXQgaXMgYWxzbyByZWNvbW1lbmRlZCB0byBzZXQgYC0taW5jb21wYXRpYmxlX3B5Ml9vdXRwdXRzX2FyZV9zdWZmaXhlZGAuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJUzoPQUZGRUNUU19PVVRQVVRTQhNJTkNPTVBBVElCTEVfQ0hBTkdFSg5HRU5FUklDX0lOUFVUU1AACrwCChxleHBlcmltZW50YWxfYWN0aW9uX2xpc3RlbmVyEAAaaERlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgYXNwZWN0cy4gVXNlIGFjdGlvbl9saXN0ZW5lciB0byBhdHRhY2ggYW4gZXh0cmFfYWN0aW9uIHRvIGV4aXN0aW5nIGJ1aWxkIGFjdGlvbnMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOglFWEVDVVRJT05CDEVYUEVSSU1FTlRBTEoRT1VUUFVUX1BBUkFNRVRFUlNQAQrhAgorZXhwZXJpbWVudGFsX3JldXNlX2luY2x1ZGVfc2Nhbm5pbmdfdGhyZWFkcxABGk5JZiBlbmFibGVkIGNvcmUgdGhyZWFkcyBvZiBpbmNsdWRlIHNjYW5uZXIgcG9vbCB3aWxsIG5vdCBkaWUgZHVyaW5nIGV4ZWN1dGlvbi4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT046CUVYRUNVVElPTjojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlNKDFVORE9DVU1FTlRFRFAACp0EChhoZXVyaXN0aWNhbGx5X2Ryb3Bfbm9kZXMQARr7AUlmIHRydWUsIEJsYXplIHdpbGwgcmVtb3ZlIEZpbGVTdGF0ZSBhbmQgRGlyZWN0b3J5TGlzdGluZ1N0YXRlIG5vZGVzIGFmdGVyIHJlbGF0ZWQgRmlsZSBhbmQgRGlyZWN0b3J5TGlzdGluZyBub2RlIGlzIGRvbmUgdG8gc2F2ZSBtZW1vcnkuIFdlIGV4cGVjdCB0aGF0IGl0IGlzIGxlc3MgbGlrZWx5IHRoYXQgdGhlc2Ugbm9kZXMgd2lsbCBiZSBuZWVkZWQgYWdhaW4uIElmIHNvLCB0aGUgcHJvZ3JhbSB3aWxsIHJlLWV2YWx1YXRlIHRoZW0uIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUoXQlVJTERfVElNRV9PUFRJTUlaQVRJT05QAAq9AwojYW5kcm9pZF9maXhlZF9yZXNvdXJjZV9uZXZlcmxpbmtpbmcQARrpAUlmIHRydWUsIHJlc291cmNlcyB3aWxsIHByb3Blcmx5IG5vdCBnZXQgcHJvcGFnYXRlZCB0aHJvdWdoIG5ldmVybGlua2VkIGxpYnJhcmllcy4gT3RoZXJ3aXNlLCB0aGUgb2xkIGJlaGF2aW9yIG9mIHByb3BhZ2F0aW5nIHRob3NlIHJlc291cmNlcyBpZiBubyByZXNvdXJjZS1yZWxhdGVkIGF0dHJpYnV0ZXMgYXJlIHNwZWNpZmllZCBpbiB0aGUgbmV2ZXJsaW5rIGxpYnJhcnkgd2lsbCBiZSBwcmVzZXJ2ZWQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0oMVU5ET0NVTUVOVEVEUAAK7AIKIWV4cGVyaW1lbnRhbF93aW5kb3dzX3NhbmRib3hfcGF0aBAAGp8BUGF0aCB0byB0aGUgV2luZG93cyBzYW5kYm94IGJpbmFyeSB0byB1c2Ugd2hlbiAtLWV4cGVyaW1lbnRhbF91c2Vfd2luZG93c19zYW5kYm94IGlzIHRydWUuIElmIGEgYmFyZSBuYW1lLCB1c2UgdGhlIGZpcnN0IGJpbmFyeSBvZiB0aGF0IG5hbWUgZm91bmQgaW4gdGhlIFBBVEguIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVABCrMBCgthbmRyb2lkX3NkaxAAGgVOby1vcCIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoMVU5ET0NVTUVOVEVEUAEKsAIKH2V4cGVyaW1lbnRhbF9iZXBfdGFyZ2V0X3N1bW1hcnkQARooV2hldGhlciB0byBwdWJsaXNoIFRhcmdldFN1bW1hcnkgZXZlbnRzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoHTE9HR0lOR1AACrYCChdidWlsZF9ydW5maWxlX21hbmlmZXN0cxABGnBJZiB0cnVlLCB3cml0ZSBydW5maWxlcyBtYW5pZmVzdHMgZm9yIGFsbCB0YXJnZXRzLiBJZiBmYWxzZSwgb21pdCB0aGVtLiBMb2NhbCB0ZXN0cyB3aWxsIGZhaWwgdG8gcnVuIHdoZW4gZmFsc2UuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKEE9VVFBVVF9TRUxFQ1RJT05QAArcAgoFc3RyaXAQABqmAVNwZWNpZmllcyB3aGV0aGVyIHRvIHN0cmlwIGJpbmFyaWVzIGFuZCBzaGFyZWQgbGlicmFyaWVzICAodXNpbmcgIi1XbCwtLXN0cmlwLWRlYnVnIikuICBUaGUgZGVmYXVsdCB2YWx1ZSBvZiAnc29tZXRpbWVzJyBtZWFucyBzdHJpcCBpZmYgLS1jb21waWxhdGlvbl9tb2RlPWZhc3RidWlsZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQrZAwoiaW5jb21wYXRpYmxlX2xlZ2FjeV9sb2NhbF9mYWxsYmFjaxABGvgBSWYgc2V0IHRvIHRydWUsIGVuYWJsZXMgdGhlIGxlZ2FjeSBpbXBsaWNpdCBmYWxsYmFjayBmcm9tIHNhbmRib3hlZCB0byBsb2NhbCBzdHJhdGVneS4gVGhpcyBmbGFnIHdpbGwgZXZlbnR1YWxseSBkZWZhdWx0IHRvIGZhbHNlIGFuZCB0aGVuIGJlY29tZSBhIG5vLW9wLiBVc2UgLS1zdHJhdGVneSwgLS1zcGF3bl9zdHJhdGVneSwgb3IgLS1keW5hbWljX2xvY2FsX3N0cmF0ZWd5IHRvIGNvbmZpZ3VyZSBmYWxsYmFja3MgaW5zdGVhZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkITSU5DT01QQVRJQkxFX0NIQU5HRUoQSU5QVVRfU1RSSUNUTkVTU1AACs4BCiBzcGxpdF9ieXRlY29kZV9vcHRpbWl6YXRpb25fcGFzcxABGgtEbyBub3QgdXNlLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoMVU5ET0NVTUVOVEVEUAAKtQIKDWhvc3RfZ3J0ZV90b3AQABpqSWYgc3BlY2lmaWVkLCB0aGlzIHNldHRpbmcgb3ZlcnJpZGVzIHRoZSBsaWJjIHRvcC1sZXZlbCBkaXJlY3RvcnkgKC0tZ3J0ZV90b3ApIGZvciB0aGUgZXhlYyBjb25maWd1cmF0aW9uLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQUNUSU9OX0NPTU1BTkRfTElORVM6D0FGRkVDVFNfT1VUUFVUU0oJVE9PTENIQUlOUAEK+wMKFHRlc3RfdGltZW91dF9maWx0ZXJzEAAawgJTcGVjaWZpZXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiB0ZXN0IHRpbWVvdXRzLiBFYWNoIHRpbWVvdXQgY2FuIGJlIG9wdGlvbmFsbHkgcHJlY2VkZWQgd2l0aCAnLScgdG8gc3BlY2lmeSBleGNsdWRlZCB0aW1lb3V0cy4gT25seSB0aG9zZSB0ZXN0IHRhcmdldHMgd2lsbCBiZSBmb3VuZCB0aGF0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGluY2x1ZGVkIHRpbWVvdXQgYW5kIGRvIG5vdCBjb250YWluIGFueSBleGNsdWRlZCB0aW1lb3V0cy4gVGhpcyBvcHRpb24gYWZmZWN0cyAtLWJ1aWxkX3Rlc3RzX29ubHkgYmVoYXZpb3IgYW5kIHRoZSB0ZXN0IGNvbW1hbmQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEKogIKH2V4cGVyaW1lbnRhbF9zdGFybGFya19jY19pbXBvcnQQARo6SWYgZW5hYmxlZCwgdGhlIFN0YXJsYXJrIHZlcnNpb24gb2YgY2NfaW1wb3J0IGNhbiBiZSB1c2VkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVNCDEVYUEVSSU1FTlRBTEoXQlVJTERfVElNRV9PUFRJTUlaQVRJT05QAAqsBAoadG9vbGNoYWluX3Jlc29sdXRpb25fZGVidWcQABrrAlByaW50IGRlYnVnIGluZm9ybWF0aW9uIGR1cmluZyB0b29sY2hhaW4gcmVzb2x1dGlvbi4gVGhlIGZsYWcgdGFrZXMgYSByZWdleCwgd2hpY2ggaXMgY2hlY2tlZCBhZ2FpbnN0IHRvb2xjaGFpbiB0eXBlcyBhbmQgc3BlY2lmaWMgdGFyZ2V0cyB0byBzZWUgd2hpY2ggdG8gZGVidWcuIE11bHRpcGxlIHJlZ2V4ZXMgbWF5IGJlICBzZXBhcmF0ZWQgYnkgY29tbWFzLCBhbmQgdGhlbiBlYWNoIHJlZ2V4IGlzIGNoZWNrZWQgc2VwYXJhdGVseS4gTm90ZTogVGhlIG91dHB1dCBvZiB0aGlzIGZsYWcgaXMgdmVyeSBjb21wbGV4IGFuZCB3aWxsIGxpa2VseSBvbmx5IGJlIHVzZWZ1bCB0byBleHBlcnRzIGluIHRvb2xjaGFpbiByZXNvbHV0aW9uLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPVEVSTUlOQUxfT1VUUFVUSgdMT0dHSU5HUAEKnwIKEG1hY29zX21pbmltdW1fb3MQABpXTWluaW11bSBjb21wYXRpYmxlIG1hY09TIHZlcnNpb24gZm9yIHRhcmdldHMuIElmIHVuc3BlY2lmaWVkLCB1c2VzICdtYWNvc19zZGtfdmVyc2lvbicuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUoRT1VUUFVUX1BBUkFNRVRFUlNQAQrTAgogZXhwZXJpbWVudGFsX2FsbG93X3Byb2plY3RfZmlsZXMQARooRW5hYmxlIHByb2Nlc3Npbmcgb2YgKzxmaWxlPiBwYXJhbWV0ZXJzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoOQ0hBTkdFU19JTlBVVFNCDEVYUEVSSU1FTlRBTEIGSElEREVOSgxVTkRPQ1VNRU5URURQAAqJAgoVc2hvd19sb2FkaW5nX3Byb2dyZXNzEAEaPklmIGVuYWJsZWQsIGNhdXNlcyBCYXplbCB0byBwcmludCAiTG9hZGluZyBwYWNrYWdlOiIgbWVzc2FnZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iBHN5bmMiBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAAKxgEKJWV4cGVyaW1lbnRhbF9za3lmcmFtZV9uYXRpdmVfZmlsZXNldHMQARoAIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgVOT19PUEoMVU5ET0NVTUVOVEVEUAAK6gIKDWlvX25pY2VfbGV2ZWwQABqOAk9ubHkgb24gTGludXg7IHNldCBhIGxldmVsIGZyb20gMC03IGZvciBiZXN0LWVmZm9ydCBJTyBzY2hlZHVsaW5nIHVzaW5nIHRoZSBzeXNfaW9wcmlvX3NldCBzeXN0ZW0gY2FsbC4gMCBpcyBoaWdoZXN0IHByaW9yaXR5LCA3IGlzIGxvd2VzdC4gVGhlIGFudGljaXBhdG9yeSBzY2hlZHVsZXIgbWF5IG9ubHkgaG9ub3IgdXAgdG8gcHJpb3JpdHkgNC4gSWYgc2V0IHRvIGEgbmVnYXRpdmUgdmFsdWUsIHRoZW4gQmF6ZWwgZG9lcyBub3QgcGVyZm9ybSBhIHN5c3RlbSBjYWxsLiIHc3RhcnR1cDAAOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OU0oUQkFaRUxfQ0xJRU5UX09QVElPTlNQAQpqCgRudWxsEAAaPVdoZXRoZXIgZWFjaCBmb3JtYXQgaXMgdGVybWluYXRlZCB3aXRoIFwwIGluc3RlYWQgb2YgbmV3bGluZS4iBXF1ZXJ5MAA6D1RFUk1JTkFMX09VVFBVVEoFUVVFUllQAAqFAwonYXJjaGl2ZWRfdHJlZV9hcnRpZmFjdF9tbmVtb25pY3NfZmlsdGVyEAAaogFSZWdleCBmaWx0ZXIgZm9yIG1uZW1vbmljcyBvZiBhY3Rpb25zIGZvciB3aGljaCB3ZSBzaG91bGQgY3JlYXRlIGFyY2hpdmVkIHRyZWUgYXJ0aWZhY3RzLiBUaGlzIG9wdGlvbiBpcyBhIG5vLW9wIGZvciBhY3Rpb25zIHdoaWNoIGRvIG5vdCBnZW5lcmF0ZSB0cmVlIGFydGlmYWN0cy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTOglFWEVDVVRJT05KDFVORE9DVU1FTlRFRFABCq8CCgZjdXJzZXMQABo6VXNlIHRlcm1pbmFsIGN1cnNvciBjb250cm9scyB0byBtaW5pbWl6ZSBzY3JvbGxpbmcgb3V0cHV0LiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCvUBCg1ob3N0X2NvbXBpbGVyEAAaME5vLW9wIGZsYWcuIFdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6CUVYRUNVVElPTkoJVE9PTENIQUlOUAEKuAIKHmxlZ2FjeV9tYWluX2RleF9saXN0X2dlbmVyYXRvchAAGnZTcGVjaWZpZXMgYSBiaW5hcnkgdG8gdXNlIHRvIGdlbmVyYXRlIHRoZSBsaXN0IG9mIGNsYXNzZXMgdGhhdCBtdXN0IGJlIGluIHRoZSBtYWluIGRleCB3aGVuIGNvbXBpbGluZyBsZWdhY3kgbXVsdGlkZXguIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEKjAMKK2V4cGVyaW1lbnRhbF9wcm9maWxlX2luY2x1ZGVfcHJpbWFyeV9vdXRwdXQQARpvSW5jbHVkZXMgdGhlIGV4dHJhICJvdXQiIGF0dHJpYnV0ZSBpbiBhY3Rpb24gZXZlbnRzIHRoYXQgY29udGFpbnMgdGhlIGV4ZWMgcGF0aCB0byB0aGUgYWN0aW9uJ3MgcHJpbWFyeSBvdXRwdXQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhBCQVpFTF9NT05JVE9SSU5HSgdMT0dHSU5HUAAKjAMKH2V4cGVyaW1lbnRhbF9zaHJpbmtfd29ya2VyX3Bvb2wQARqcAUlmIGVuYWJsZWQsIGNvdWxkIHNocmluayB3b3JrZXIgcG9vbCBpZiB3b3JrZXIgbWVtb3J5IHByZXNzdXJlIGlzIGhpZ2guIFRoaXMgZmxhZyB3b3JrcyBvbmx5IHdoZW4gZmxhZyBleHBlcmltZW50YWxfdG90YWxfd29ya2VyX21lbW9yeV9saW1pdF9tYiBpcyBlbmFibGVkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OU0oSRVhFQ1VUSU9OX1NUUkFURUdZUAAKuQMKIWV4cGVyaW1lbnRhbF9pbm1lbW9yeV9qZGVwc19maWxlcxABGrIBSWYgZW5hYmxlZCwgdGhlIGRlcGVuZGVuY3kgKC5qZGVwcykgZmlsZXMgZ2VuZXJhdGVkIGZyb20gSmF2YSBjb21waWxhdGlvbnMgd2lsbCBiZSBwYXNzZWQgdGhyb3VnaCBpbiBtZW1vcnkgZGlyZWN0bHkgZnJvbSB0aGUgcmVtb3RlIGJ1aWxkIG5vZGVzIGluc3RlYWQgb2YgYmVpbmcgd3JpdHRlbiB0byBkaXNrLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6CUVYRUNVVElPTjoPQUZGRUNUU19PVVRQVVRTQgxFWFBFUklNRU5UQUxKF0JVSUxEX1RJTUVfT1BUSU1JWkFUSU9OUAAK0wEKIGVuYWJsZV9mZG9fcHJvZmlsZV9hYnNvbHV0ZV9wYXRoEAEaEkRlcHJlY2F0ZWQuIE5vLW9wLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BKDFVORE9DVU1FTlRFRFAACo8ECixleHBlcmltZW50YWxfY2hlY2tfZXh0ZXJuYWxfcmVwb3NpdG9yeV9maWxlcxABGvQBQ2hlY2sgZm9yIG1vZGlmaWNhdGlvbnMgdG8gZmlsZXMgaW4gZXh0ZXJuYWwgcmVwb3NpdG9yaWVzLiBDb25zaWRlciBzZXR0aW5nIHRoaXMgZmxhZyB0byBmYWxzZSBpZiB5b3UgZG9uJ3QgZXhwZWN0IHRoZXNlIGZpbGVzIHRvIGNoYW5nZSBvdXRzaWRlIG9mIGJhemVsIHNpbmNlIGl0IHdpbGwgc3BlZWQgdXAgc3Vic2VxdWVudCBydW5zIGFzIHRoZXkgd29uJ3QgaGF2ZSB0byBjaGVjayBhIHByZXZpb3VzIHJ1bidzIGNhY2hlLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoMVU5ET0NVTUVOVEVEUAAK5AEKD25vb3JkZXJfcmVzdWx0cxAAGqsBT3V0cHV0IHRoZSByZXN1bHRzIGluIGRlcGVuZGVuY3ktb3JkZXJlZCAoZGVmYXVsdCkgb3IgdW5vcmRlcmVkIGZhc2hpb24uIFRoZSB1bm9yZGVyZWQgb3V0cHV0IGlzIGZhc3RlciBidXQgb25seSBzdXBwb3J0ZWQgd2hlbiAtLW91dHB1dCBpcyBub3QgbWlucmFuaywgbWF4cmFuaywgb3IgZ3JhcGguIgVxdWVyeTAAOg9URVJNSU5BTF9PVVRQVVRKBVFVRVJZUAAK0AEKCGphdmFjb3B0EAAaJEFkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIGphdmFjLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCtsCChJsb2dfdG9wX25fcGFja2FnZXMQABpSQ29uZmlndXJlcyBudW1iZXIgb2YgcGFja2FnZXMgaW5jbHVkZWQgaW4gdG9wLXBhY2thZ2UgSU5GTyBsb2dnaW5nLCA8PSAwIGRpc2FibGVzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoQQkFaRUxfTU9OSVRPUklOR0oMVU5ET0NVTUVOVEVEUAEK0gIKHnJlbW90ZV9sb2NhbF9mYWxsYmFja19zdHJhdGVneRAAGkxEZXByZWNhdGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2JhemVsYnVpbGQvYmF6ZWwvaXNzdWVzLzc0ODAgZm9yIGRldGFpbHMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgZSRU1PVEVQAQq1AgoSaW5jcmVtZW50YWxfZGV4aW5nEAEaPkRvZXMgbW9zdCBvZiB0aGUgd29yayBmb3IgZGV4aW5nIHNlcGFyYXRlbHkgZm9yIGVhY2ggSmFyIGZpbGUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFM6FExPQURJTkdfQU5EX0FOQUxZU0lTOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUoXQlVJTERfVElNRV9PUFRJTUlaQVRJT05QAAreAwoic2tpcF9pbmNvbXBhdGlibGVfZXhwbGljaXRfdGFyZ2V0cxABGoUCU2tpcCBpbmNvbXBhdGlibGUgdGFyZ2V0cyB0aGF0IGFyZSBleHBsaWNpdGx5IGxpc3RlZCBvbiB0aGUgY29tbWFuZCBsaW5lLiBCeSBkZWZhdWx0LCBidWlsZGluZyBzdWNoIHRhcmdldHMgcmVzdWx0cyBpbiBhbiBlcnJvciBidXQgdGhleSBhcmUgc2lsZW50bHkgc2tpcHBlZCB3aGVuIHRoaXMgb3B0aW9uIGlzIGVuYWJsZWQuIFNlZTogaHR0cHM6Ly9iYXplbC5idWlsZC9leHRlbmRpbmcvcGxhdGZvcm1zI3NraXBwaW5nLWluY29tcGF0aWJsZS10YXJnZXRzIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0oSRVhFQ1VUSU9OX1NUUkFURUdZUAAKbgoJc3RhcnRfYXBwEAAaLVdoZXRoZXIgdG8gc3RhcnQgdGhlIGFwcCBhZnRlciBpbnN0YWxsaW5nIGl0LiIObW9iaWxlLWluc3RhbGwwADoJRVhFQ1VUSU9OShFPVVRQVVRfUEFSQU1FVEVSU1AACugECitpbmNvbXBhdGlibGVfZGlzYWJsZV90YXJnZXRfcHJvdmlkZXJfZmllbGRzEAEapgJJZiBzZXQgdG8gdHJ1ZSwgZGlzYWJsZSB0aGUgYWJpbGl0eSB0byB1dGlsaXplIHRoZSBkZWZhdWx0IHByb3ZpZGVyIHZpYSBmaWVsZCBzeW50YXguIFVzZSBwcm92aWRlci1rZXkgc3ludGF4IGluc3RlYWQuIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mIHVzaW5nIGBjdHguYXR0ci5kZXAuZmlsZXNgIHRvIGFjY2VzcyBgZmlsZXNgLCB1dGlsaXplIGBjdHguYXR0ci5kZXBbRGVmYXVsdEluZm9dLmZpbGVzIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYmF6ZWxidWlsZC9iYXplbC9pc3N1ZXMvOTAxNCBmb3IgZGV0YWlscy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShJTVEFSTEFSS19TRU1BTlRJQ1NQAAqXAwoXcmVtb3RlX3ZlcmlmeV9kb3dubG9hZHMQARqXAUlmIHNldCB0byB0cnVlLCBCYXplbCB3aWxsIGNvbXB1dGUgdGhlIGhhc2ggc3VtIG9mIGFsbCByZW1vdGUgZG93bmxvYWRzIGFuZCAgZGlzY2FyZCB0aGUgcmVtb3RlbHkgY2FjaGVkIHZhbHVlcyBpZiB0aGV5IGRvbid0IG1hdGNoIHRoZSBleHBlY3RlZCB2YWx1ZS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KBlJFTU9URVAACqcCCiBjY19wcm90b19saWJyYXJ5X3NvdXJjZV9zdWZmaXhlcxAAGkJTZXRzIHRoZSBzdWZmaXhlcyBvZiBzb3VyY2UgZmlsZXMgdGhhdCBhIGNjX3Byb3RvX2xpYnJhcnkgY3JlYXRlcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUUzoUTE9BRElOR19BTkRfQU5BTFlTSVNKEE9VVFBVVF9TRUxFQ1RJT05QAQrRAgoKc2F2ZV90ZW1wcxABGpcBSWYgc2V0LCB0ZW1wb3Jhcnkgb3V0cHV0cyBmcm9tIGdjYyB3aWxsIGJlIHNhdmVkLiAgVGhlc2UgaW5jbHVkZSAucyBmaWxlcyAoYXNzZW1ibGVyIGNvZGUpLCAuaSBmaWxlcyAocHJlcHJvY2Vzc2VkIEMpIGFuZCAuaWkgZmlsZXMgKHByZXByb2Nlc3NlZCBDKyspLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTShBPVVRQVVRfU0VMRUNUSU9OUAAKggMKEGNoZWNrX3VwX3RvX2RhdGUQARrGAURvbid0IHBlcmZvcm0gdGhlIGJ1aWxkLCBqdXN0IGNoZWNrIGlmIGl0IGlzIHVwLXRvLWRhdGUuICBJZiBhbGwgdGFyZ2V0cyBhcmUgdXAtdG8tZGF0ZSwgdGhlIGJ1aWxkIGNvbXBsZXRlcyBzdWNjZXNzZnVsbHkuICBJZiBhbnkgc3RlcCBuZWVkcyB0byBiZSBleGVjdXRlZCBhbiBlcnJvciBpcyByZXBvcnRlZCBhbmQgdGhlIGJ1aWxkIGZhaWxzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OShJFWEVDVVRJT05fU1RSQVRFR1lQAAqbAQoOcG9ydGFibGVfcGF0aHMQARpXSWYgdHJ1ZSwgaW5jbHVkZXMgcGF0aHMgdG8gcmVwbGFjZSBpbiBFeGVjUmVxdWVzdCB0byBtYWtlIHRoZSByZXN1bHRpbmcgcGF0aHMgcG9ydGFibGUuIgNydW4wADoPQUZGRUNUU19PVVRQVVRTShRCQVpFTF9DTElFTlRfT1BUSU9OU1AACt4CChBidWlsZF9yZXF1ZXN0X2lkEAAaMVVuaXF1ZSBzdHJpbmcgaWRlbnRpZmllciBmb3IgdGhlIGJ1aWxkIGJlaW5nIHJ1bi4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6EEJBWkVMX01PTklUT1JJTkc6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05CBkhJRERFTkoMVU5ET0NVTUVOVEVEUAEK7gIKFGNzX2Zkb19hYnNvbHV0ZV9wYXRoEAAaqQFVc2UgQ1NGRE8gcHJvZmlsZSBpbmZvcm1hdGlvbiB0byBvcHRpbWl6ZSBjb21waWxhdGlvbi4gU3BlY2lmeSB0aGUgYWJzb2x1dGUgcGF0aCBuYW1lIG9mIHRoZSB6aXAgZmlsZSBjb250YWluaW5nIHRoZSBwcm9maWxlIGZpbGUsIGEgcmF3IG9yIGFuIGluZGV4ZWQgTExWTSBwcm9maWxlIGZpbGUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAEK7QIKJGV4cGVyaW1lbnRhbF9zYW5kYm94X21lbW9yeV9saW1pdF9tYhAAGp0BSWYgPiAwLCBlYWNoIExpbnV4IHNhbmRib3ggd2lsbCBiZSBsaW1pdGVkIHRvIHRoZSBnaXZlbiBhbW91bnQgb2YgbWVtb3J5IChpbiBNQikuIFJlcXVpcmVzIGNncm91cHMgdjEgb3IgdjIgYW5kIHBlcm1pc3Npb25zIGZvciB0aGUgdXNlcnMgdG8gdGhlIGNncm91cHMgZGlyLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OShJFWEVDVVRJT05fU1RSQVRFR1lQAQrMAQodZXhwZXJpbWVudGFsX2V4cGxpY2l0X2FzcGVjdHMQARp2YXF1ZXJ5LCBjcXVlcnk6IHdoZXRoZXIgdG8gaW5jbHVkZSBhc3BlY3QtZ2VuZXJhdGVkIGFjdGlvbnMgaW4gdGhlIG91dHB1dC4gcXVlcnk6IG5vLW9wIChhc3BlY3RzIGFyZSBhbHdheXMgZm9sbG93ZWQpLiIGYXF1ZXJ5IgZjcXVlcnkiBXF1ZXJ5MAA6D1RFUk1JTkFMX09VVFBVVEoFUVVFUllQAAraAgoRc3RyaWN0X3Byb3RvX2RlcHMQABptVW5sZXNzIE9GRiwgY2hlY2tzIHRoYXQgYSBwcm90b19saWJyYXJ5IHRhcmdldCBleHBsaWNpdGx5IGRlY2xhcmVzIGFsbCBkaXJlY3RseSB1c2VkIHRhcmdldHMgYXMgZGVwZW5kZW5jaWVzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQlVJTERfRklMRV9TRU1BTlRJQ1M6EUVBR0VSTkVTU19UT19FWElUQhNJTkNPTVBBVElCTEVfQ0hBTkdFShBJTlBVVF9TVFJJQ1RORVNTUAEKiwMKHWV4cGVyaW1lbnRhbF9yZXBvX3JlbW90ZV9leGVjEAEaSUlmIHNldCB0byB0cnVlLCByZXBvc2l0b3J5X3J1bGUgZ2FpbnMgc29tZSByZW1vdGUgZXhlY3V0aW9uIGNhcGFiaWxpdGllcy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTOhRMT0FESU5HX0FORF9BTkFMWVNJU0IMRVhQRVJJTUVOVEFMShJTVEFSTEFSS19TRU1BTlRJQ1NQAAqfAQoNc2t5a2V5X2ZpbHRlchAAGl5SZWdleCBmaWx0ZXIgb2YgU2t5S2V5IG5hbWVzIHRvIG91dHB1dC4gT25seSB1c2VkIHdpdGggLS1za3lmcmFtZT1kZXBzLCByZGVwcywgZnVuY3Rpb25fZ3JhcGguIgRkdW1wMAA6EEJBWkVMX01PTklUT1JJTkdKEE9VVFBVVF9TRUxFQ1RJT05QAQrWAwolb25lX3ZlcnNpb25fZW5mb3JjZW1lbnRfb25famF2YV90ZXN0cxABGvwBV2hlbiBlbmFibGVkLCBhbmQgd2l0aCBleHBlcmltZW50YWxfb25lX3ZlcnNpb25fZW5mb3JjZW1lbnQgc2V0IHRvIGEgbm9uLU5PTkUgdmFsdWUsIGVuZm9yY2Ugb25lIHZlcnNpb24gb24gamF2YV90ZXN0IHRhcmdldHMuIFRoaXMgZmxhZyBjYW4gYmUgZGlzYWJsZWQgdG8gaW1wcm92ZSBpbmNyZW1lbnRhbCB0ZXN0IHBlcmZvcm1hbmNlIGF0IHRoZSBleHBlbnNlIG9mIG1pc3NpbmcgcG90ZW50aWFsIG9uZSB2ZXJzaW9uIHZpb2xhdGlvbnMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0oQSU5QVVRfU1RSSUNUTkVTU1AACtECCidpbmNvbXBhdGlibGVfb2JqY19hbHdheXNsaW5rX2J5X2RlZmF1bHQQARpfSWYgdHJ1ZSwgbWFrZSB0aGUgZGVmYXVsdCB2YWx1ZSB0cnVlIGZvciBhbHdheXNsaW5rIGF0dHJpYnV0ZXMgaW4gb2JqY19saWJyYXJ5IGFuZCBvYmpjX2ltcG9ydC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShJTVEFSTEFSS19TRU1BTlRJQ1NQAArtAQomaW5jb21wYXRpYmxlX2xvYWRfcHJvdG9fcnVsZXNfZnJvbV9iemwQARoRRGVwcmVjYXRlZCBuby1vcC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QQhNJTkNPTVBBVElCTEVfQ0hBTkdFSgxVTkRPQ1VNRU5URURQAAraAgoUc3RhcmxhcmtfY3B1X3Byb2ZpbGUQABpUV3JpdGVzIGludG8gdGhlIHNwZWNpZmllZCBmaWxlIGEgcHByb2YgcHJvZmlsZSBvZiBDUFUgdXNhZ2UgYnkgYWxsIFN0YXJsYXJrIHRocmVhZHMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhBCQVpFTF9NT05JVE9SSU5HSgdMT0dHSU5HUAEK3QIKE3dhdGNob3Nfc2RrX3ZlcnNpb24QABqZAVNwZWNpZmllcyB0aGUgdmVyc2lvbiBvZiB0aGUgd2F0Y2hPUyBTREsgdG8gdXNlIHRvIGJ1aWxkIHdhdGNoT1MgYXBwbGljYXRpb25zLiBJZiB1bnNwZWNpZmllZCwgdXNlcyB0aGUgZGVmYXVsdCB3YXRjaE9TIFNESyB2ZXJzaW9uIGZyb20gJ3hjb2RlX3ZlcnNpb24nLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEVKCVRPT0xDSEFJTlABCpkCCg1vdXRwdXRfZmlsdGVyEAAaZk9ubHkgc2hvd3Mgd2FybmluZ3MgYW5kIGFjdGlvbiBvdXRwdXRzIGZvciBydWxlcyB3aXRoIGEgbmFtZSBtYXRjaGluZyB0aGUgcHJvdmlkZWQgcmVndWxhciBleHByZXNzaW9uLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAEKsgQKIWJ1aWxkX2V2ZW50X2pzb25fZmlsZV91cGxvYWRfbW9kZRAAGp0CU3BlY2lmaWVzIHdoZXRoZXIgdGhlIEJ1aWxkIEV2ZW50IFNlcnZpY2UgdXBsb2FkIGZvciAtLWJ1aWxkX2V2ZW50X2pzb25fZmlsZSBzaG91bGQgYmxvY2sgdGhlIGJ1aWxkIGNvbXBsZXRpb24gb3Igc2hvdWxkIGVuZCB0aGUgaW52b2NhdGlvbiBpbW1lZGlhdGVseSBhbmQgZmluaXNoIHRoZSB1cGxvYWQgaW4gdGhlIGJhY2tncm91bmQuIEVpdGhlciAnd2FpdF9mb3JfdXBsb2FkX2NvbXBsZXRlJyAoZGVmYXVsdCksICdub3dhaXRfZm9yX3VwbG9hZF9jb21wbGV0ZScsIG9yICdmdWxseV9hc3luYycuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhFFQUdFUk5FU1NfVE9fRVhJVEoHTE9HR0lOR1ABCscCChJkZXN1Z2FyX2phdmE4X2xpYnMQARpJV2hldGhlciB0byBpbmNsdWRlIHN1cHBvcnRlZCBKYXZhIDggbGlicmFyaWVzIGluIGFwcHMgZm9yIGxlZ2FjeSBkZXZpY2VzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJUzoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEVCDEVYUEVSSU1FTlRBTEoQSU5QVVRfU1RSSUNUTkVTU1AACuwBChZzYW5kYm94X2FkZF9tb3VudF9wYWlyEAAaLUFkZCBhZGRpdGlvbmFsIHBhdGggcGFpciB0byBtb3VudCBpbiBzYW5kYm94LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToJRVhFQ1VUSU9OShBJTlBVVF9TVFJJQ1RORVNTUAEKqQMKC3NjcmlwdF9wYXRoEAAa3wJJZiBzZXQsIHdyaXRlIGEgc2hlbGwgc2NyaXB0IHRvIHRoZSBnaXZlbiBmaWxlIHdoaWNoIGludm9rZXMgdGhlIHRhcmdldC4gSWYgdGhpcyBvcHRpb24gaXMgc2V0LCB0aGUgdGFyZ2V0IGlzIG5vdCBydW4gZnJvbSAle3Byb2R1Y3R9LiBVc2UgJyV7cHJvZHVjdH0gcnVuIC0tc2NyaXB0X3BhdGg9Zm9vIC8vZm9vICYmIC4vZm9vJyB0byBpbnZva2UgdGFyZ2V0ICcvL2ZvbycgVGhpcyBkaWZmZXJzIGZyb20gJyV7cHJvZHVjdH0gcnVuIC8vZm9vJyBpbiB0aGF0IHRoZSAle3Byb2R1Y3R9IGxvY2sgaXMgcmVsZWFzZWQgYW5kIHRoZSBleGVjdXRhYmxlIGlzIGNvbm5lY3RlZCB0byB0aGUgdGVybWluYWwncyBzdGRpbi4iA3J1bjAAOg9BRkZFQ1RTX09VVFBVVFM6CUVYRUNVVElPTkoRT1VUUFVUX1BBUkFNRVRFUlNQAQrvAwoScmVtb3RlX2NhY2hlX2FzeW5jEAEa9AFJZiB0cnVlLCB1cGxvYWRpbmcgb2YgYWN0aW9uIHJlc3VsdHMgdG8gYSBkaXNrIG9yIHJlbW90ZSBjYWNoZSB3aWxsIGhhcHBlbiBpbiB0aGUgYmFja2dyb3VuZCBpbnN0ZWFkIG9mIGJsb2NraW5nIHRoZSBjb21wbGV0aW9uIG9mIGFuIGFjdGlvbi4gU29tZSBhY3Rpb25zIGFyZSBpbmNvbXBhdGlibGUgd2l0aCBiYWNrZ3JvdW5kIHVwbG9hZHMsIGFuZCBtYXkgc3RpbGwgYmxvY2sgZXZlbiB3aGVuIHRoaXMgZmxhZyBpcyBzZXQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgZSRU1PVEVQAArWAQowaW5jb21wYXRpYmxlX2VuYWJsZV9hbmRyb2lkX3Rvb2xjaGFpbl9yZXNvbHV0aW9uEAEaBU5vLW9wIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgVOT19PUEoMVU5ET0NVTUVOVEVEUAAKxAIKNGV4cGVyaW1lbnRhbF91c2VfY3BwX2NvbXBpbGVfYWN0aW9uX2FyZ3NfcGFyYW1zX2ZpbGUQARpKSWYgZW5hYmxlZCwgd3JpdGUgQ3BwQ29tcGlsZUFjdGlvbiBleHBvc2VkIGFjdGlvbi5hcmdzIHRvIHBhcmFtZXRlcnMgZmlsZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05CDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAK4AYKNnNreWZyYW1lX2hpZ2hfd2F0ZXJfbWFya19taW5vcl9nY19kcm9wc19wZXJfaW52b2NhdGlvbhAAGpQERmxhZyBmb3IgYWR2YW5jZWQgY29uZmlndXJhdGlvbiBvZiBCYXplbCdzIGludGVybmFsIFNreWZyYW1lIGVuZ2luZS4gSWYgQmF6ZWwgZGV0ZWN0cyBpdHMgcmV0YWluZWQgaGVhcCBwZXJjZW50YWdlIHVzYWdlIGV4Y2VlZHMgdGhlIHRocmVzaG9sZCBzZXQgYnkgLS1za3lmcmFtZV9oaWdoX3dhdGVyX21hcmtfdGhyZXNob2xkLCB3aGVuIGEgbWlub3IgR0MgZXZlbnQgb2NjdXJzLCBpdCB3aWxsIGRyb3AgdW5uZWNlc3NhcnkgdGVtcG9yYXJ5IFNreWZyYW1lIHN0YXRlLCB1cCB0byB0aGlzIG1hbnkgdGltZXMgcGVyIGludm9jYXRpb24uIERlZmF1bHRzIHRvIDEwLiBaZXJvIG1lYW5zIHRoYXQgbWlub3IgR0MgZXZlbnRzIHdpbGwgbmV2ZXIgdHJpZ2dlciBkcm9wcy4gSWYgdGhlIGxpbWl0IGlzIHJlYWNoZWQsIFNreWZyYW1lIHN0YXRlIHdpbGwgbm8gbG9uZ2VyIGJlIGRyb3BwZWQgd2hlbiBhIG1pbm9yIEdDIGV2ZW50IG9jY3VycyBhbmQgdGhhdCByZXRhaW5lZCBoZWFwIHBlcmNlbnRhZ2UgdGhyZXNob2xkIGlzIGV4Y2VlZGVkLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlNKF0JVSUxEX1RJTUVfT1BUSU1JWkFUSU9OUAEKoAIKFXRlc3RfcnVubmVyX2ZhaWxfZmFzdBABGmdGb3J3YXJkcyBmYWlsIGZhc3Qgb3B0aW9uIHRvIHRoZSB0ZXN0IHJ1bm5lci4gVGhlIHRlc3QgcnVubmVyIHNob3VsZCBzdG9wIGV4ZWN1dGlvbiB1cG9uIGZpcnN0IGZhaWx1cmUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAAK1wIKDHNsaW1fcHJvZmlsZRABGllTbGltcyBkb3duIHRoZSBzaXplIG9mIHRoZSBKU09OIHByb2ZpbGUgYnkgbWVyZ2luZyBldmVudHMgaWYgdGhlIHByb2ZpbGUgZ2V0cyAgdG9vIGxhcmdlLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoQQkFaRUxfTU9OSVRPUklOR0oHTE9HR0lOR1AACvABChtleHBlcmltZW50YWxfamF2YV9jbGFzc3BhdGgQABoxRW5hYmxlcyByZWR1Y2VkIGNsYXNzcGF0aHMgZm9yIEphdmEgY29tcGlsYXRpb25zLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCscDCgt4YmluYXJ5X2ZkbxAAGosCVXNlIFhiaW5hcnlGRE8gcHJvZmlsZSBpbmZvcm1hdGlvbiB0byBvcHRpbWl6ZSBjb21waWxhdGlvbi4gU3BlY2lmeSB0aGUgbmFtZSBvZiBkZWZhdWx0IGNyb3NzIGJpbmFyeSBwcm9maWxlLiBXaGVuIHRoZSBvcHRpb24gaXMgdXNlZCB0b2dldGhlciB3aXRoIC0tZmRvX2luc3RydW1lbnQvLS1mZG9fb3B0aW1pemUvLS1mZG9fcHJvZmlsZSwgdGhvc2Ugb3B0aW9ucyB3aWxsIGFsd2F5cyBwcmV2YWlsIGFzIGlmIHhiaW5hcnlfZmRvIGlzIG5ldmVyIHNwZWNpZmllZC4gIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAEKkgIKG3NlcmlhbGl6ZWRfZnJvbnRpZXJfcHJvZmlsZRAAGkdEdW1wIGEgcHJvZmlsZSBvZiBzZXJpYWxpemVkIGZyb250aWVyIGJ5dGVzLiBTcGVjaWZpZXMgdGhlIG91dHB1dCBwYXRoLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoQQkFaRUxfTU9OSVRPUklOR0oQT1VUUFVUX1NFTEVDVElPTlABCusCCg5jaGVja19saWNlbnNlcxABGqgBQ2hlY2sgdGhhdCBsaWNlbnNpbmcgY29uc3RyYWludHMgaW1wb3NlZCBieSBkZXBlbmRlbnQgcGFja2FnZXMgZG8gbm90IGNvbmZsaWN0IHdpdGggZGlzdHJpYnV0aW9uIG1vZGVzIG9mIHRoZSB0YXJnZXRzIGJlaW5nIGJ1aWx0LiBCeSBkZWZhdWx0LCBsaWNlbnNlcyBhcmUgbm90IGNoZWNrZWQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRCVUlMRF9GSUxFX1NFTUFOVElDU0oQSU5QVVRfU1RSSUNUTkVTU1AACqkCChVob3N0X21hY29zX21pbmltdW1fb3MQABpcTWluaW11bSBjb21wYXRpYmxlIG1hY09TIHZlcnNpb24gZm9yIGhvc3QgdGFyZ2V0cy4gSWYgdW5zcGVjaWZpZWQsIHVzZXMgJ21hY29zX3Nka192ZXJzaW9uJy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFShFPVVRQVVRfUEFSQU1FVEVSU1ABCtoCChFleHRyYWN0X2RhdGFfdGltZRAAGjlUaGUgdGltZSBpbiBtcyBzcGVudCBvbiBleHRyYWN0aW5nIHRoZSBuZXcgYmF6ZWwgdmVyc2lvbi4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6D0FGRkVDVFNfT1VUUFVUUzoQQkFaRUxfTU9OSVRPUklOR0IGSElEREVOSgxVTkRPQ1VNRU5URURQAQqaAgomaW5jb21wYXRpYmxlX211bHRpX3JlbGVhc2VfZGVwbG95X2phcnMQARo8V2hlbiBlbmFibGVkLCBqYXZhX2JpbmFyeSBjcmVhdGVzIE11bHRpLVJlbGVhc2UgZGVwbG95IGphcnMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOQhNJTkNPTVBBVElCTEVfQ0hBTkdFSgxVTkRPQ1VNRU5URURQAAqABAopaW5jb21wYXRpYmxlX2xvY2F0aW9uc19wcmVmZXJzX2V4ZWN1dGFibGUQARrAAVdoZXRoZXIgYSB0YXJnZXQgdGhhdCBwcm92aWRlcyBhbiBleGVjdXRhYmxlIGV4cGFuZHMgdG8gdGhlIGV4ZWN1dGFibGUgcmF0aGVyIHRoYW4gdGhlIGZpbGVzIGluIDxjb2RlPkRlZmF1bHRJbmZvLmZpbGVzPC9jb2RlPiB1bmRlciAkKGxvY2F0aW9ucyAuLi4pIGV4cGFuc2lvbiBpZiB0aGUgbnVtYmVyIG9mIGZpbGVzIGlzIG5vdCAxLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKElNUQVJMQVJLX1NFTUFOVElDU1AACqIDChFhbmRyb2lkX3BsYXRmb3JtcxAAGroBU2V0cyB0aGUgcGxhdGZvcm1zIHRoYXQgYW5kcm9pZF9iaW5hcnkgdGFyZ2V0cyB1c2UuIElmIG11bHRpcGxlIHBsYXRmb3JtcyBhcmUgc3BlY2lmaWVkLCB0aGVuIHRoZSBiaW5hcnkgaXMgYSBmYXQgQVBLcywgd2hpY2ggY29udGFpbnMgbmF0aXZlIGJpbmFyaWVzIGZvciBlYWNoIHNwZWNpZmllZCB0YXJnZXQgcGxhdGZvcm0uIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg5DSEFOR0VTX0lOUFVUUzoUTE9BRElOR19BTkRfQU5BTFlTSVM6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFSglUT09MQ0hBSU5QAQr0AgomZXhwZXJpbWVudGFsX2VuYWJsZV9maXJzdF9jbGFzc19tYWNyb3MQARpNSWYgc2V0IHRvIHRydWUsIGVuYWJsZXMgdGhlIGBtYWNybygpYCBjb25zdHJ1Y3QgZm9yIGRlZmluaW5nIHN5bWJvbGljIG1hY3Jvcy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTShJTVEFSTEFSS19TRU1BTlRJQ1NQAAqyAgodZXhwZXJpbWVudGFsX3dyaXRhYmxlX291dHB1dHMQARpPSWYgdHJ1ZSwgdGhlIGZpbGUgcGVybWlzc2lvbnMgb2YgYWN0aW9uIG91dHB1dHMgYXJlIHNldCB0byAwNzU1IGluc3RlYWQgb2YgMDU1NSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADocQkFaRUxfSU5URVJOQUxfQ09ORklHVVJBVElPTkIMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAArZAQomZXhwZXJpbWVudGFsX3NreWZyYW1lX3ByZXBhcmVfYW5hbHlzaXMQARoSRGVwcmVjYXRlZC4gTm8tb3AuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgVOT19PUEoMVU5ET0NVTUVOVEVEUAAK5wIKI2luY29tcGF0aWJsZV9tYWNvc19zZXRfaW5zdGFsbF9uYW1lEAEaf1doZXRoZXIgdG8gZXhwbGljaXRseSBzZXQgYC1pbnN0YWxsX25hbWVgIHdoZW4gY3JlYXRpbmcgZHluYW1pYyBsaWJyYXJpZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYmF6ZWxidWlsZC9iYXplbC9pc3N1ZXMvMTIzNzAiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQhNJTkNPTVBBVElCTEVfQ0hBTkdFSgxVTkRPQ1VNRU5URURQAAr4AwopZXhwZXJpbWVudGFsX3JlbW90ZV9jYWNoZV9sZWFzZV9leHRlbnNpb24QARrmAUlmIHNldCB0byB0cnVlLCBCYXplbCB3aWxsIGV4dGVuZCB0aGUgbGVhc2UgZm9yIG91dHB1dHMgb2YgcmVtb3RlIGFjdGlvbnMgZHVyaW5nIHRoZSBidWlsZCBieSBzZW5kaW5nIGBGaW5kTWlzc2luZ0Jsb2JzYCBjYWxscyBwZXJpb2RpY2FsbHkgdG8gcmVtb3RlIGNhY2hlLiBUaGUgZnJlcXVlbmN5IGlzIGJhc2VkIG9uIHRoZSB2YWx1ZSBvZiBgLS1leHBlcmltZW50YWxfcmVtb3RlX2NhY2hlX3R0bGAuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgZSRU1PVEVQAArqAgoScHJvdG9fcHJvZmlsZV9wYXRoEAAalQFUaGUgcHJvZmlsZSB0byBwYXNzIHRvIHRoZSBwcm90byBjb21waWxlciBhcyBwcm9maWxlX3BhdGguIElmIHVuc2V0LCBidXQgIC0tcHJvdG9fcHJvZmlsZSBpcyB0cnVlICh0aGUgZGVmYXVsdCksIGluZmVycyB0aGUgcGF0aCBmcm9tIC0tZmRvX29wdGltaXplLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0oNVU5DQVRFR09SSVpFRFABCscCCihwZXJzaXN0ZW50X211bHRpcGxleF9hbmRyb2lkX2RleF9kZXN1Z2FyEAAaT0VuYWJsZSBwZXJzaXN0ZW50IG11bHRpcGxleGVkIEFuZHJvaWQgZGV4IGFuZCBkZXN1Z2FyIGFjdGlvbnMgYnkgdXNpbmcgd29ya2Vycy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVAACpoDChhyZW1vdGVfZG93bmxvYWRfdG9wbGV2ZWwQABqGAU9ubHkgZG93bmxvYWRzIHJlbW90ZSBvdXRwdXRzIG9mIHRvcCBsZXZlbCB0YXJnZXRzIHRvIHRoZSBsb2NhbCBtYWNoaW5lLiBUaGlzIGZsYWcgaXMgYW4gYWxpYXMgZm9yIC0tcmVtb3RlX2Rvd25sb2FkX291dHB1dHM9dG9wbGV2ZWwuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAAKjAIKEHVzZV9hY3Rpb25fY2FjaGUQARofV2hldGhlciB0byB1c2UgdGhlIGFjdGlvbiBjYWNoZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADocQkFaRUxfSU5URVJOQUxfQ09ORklHVVJBVElPTjojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlNKDFVORE9DVU1FTlRFRFAACuUCCiBpbmNvbXBhdGlibGVfbm9fcGFja2FnZV9kaXN0cmlicxABGjVJZiBzZXQgdG8gdHJ1ZSwgZGlzYWJsZXMgdGhlIGBwYWNrYWdlKGRpc3RyaWJzPS4uLilgLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUQlVJTERfRklMRV9TRU1BTlRJQ1NCE0lOQ09NUEFUSUJMRV9DSEFOR0VKDFVORE9DVU1FTlRFRFAACoEGCgtzaG93X3Jlc3VsdBAAGs8EU2hvdyB0aGUgcmVzdWx0cyBvZiB0aGUgYnVpbGQuICBGb3IgZWFjaCB0YXJnZXQsIHN0YXRlIHdoZXRoZXIgb3Igbm90IGl0IHdhcyBicm91Z2h0IHVwLXRvLWRhdGUsIGFuZCBpZiBzbywgYSBsaXN0IG9mIG91dHB1dCBmaWxlcyB0aGF0IHdlcmUgYnVpbHQuICBUaGUgcHJpbnRlZCBmaWxlcyBhcmUgY29udmVuaWVudCBzdHJpbmdzIGZvciBjb3B5K3Bhc3RpbmcgdG8gdGhlIHNoZWxsLCB0byBleGVjdXRlIHRoZW0uClRoaXMgb3B0aW9uIHJlcXVpcmVzIGFuIGludGVnZXIgYXJndW1lbnQsIHdoaWNoIGlzIHRoZSB0aHJlc2hvbGQgbnVtYmVyIG9mIHRhcmdldHMgYWJvdmUgd2hpY2ggcmVzdWx0IGluZm9ybWF0aW9uIGlzIG5vdCBwcmludGVkLiBUaHVzIHplcm8gY2F1c2VzIHN1cHByZXNzaW9uIG9mIHRoZSBtZXNzYWdlIGFuZCBNQVhfSU5UIGNhdXNlcyBwcmludGluZyBvZiB0aGUgcmVzdWx0IHRvIG9jY3VyIGFsd2F5cy4gVGhlIGRlZmF1bHQgaXMgb25lLgpJZiBub3RoaW5nIHdhcyBidWlsdCBmb3IgYSB0YXJnZXQgaXRzIHJlc3VsdHMgbWF5IGJlIG9taXR0ZWQgdG8ga2VlcCB0aGUgb3V0cHV0IHVuZGVyIHRoZSB0aHJlc2hvbGQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKB0xPR0dJTkdQAQqJBAo1ZXhwZXJpbWVudGFsX3JlbW90ZV9vdXRwdXRfc2VydmljZV9vdXRwdXRfcGF0aF9wcmVmaXgQABrrAVRoZSBwYXRoIHVuZGVyIHdoaWNoIHRoZSBjb250ZW50cyBvZiBvdXRwdXQgZGlyZWN0b3JpZXMgbWFuYWdlZCBieSB0aGUgLS1leHBlcmltZW50YWxfcmVtb3RlX291dHB1dF9zZXJ2aWNlIGFyZSBwbGFjZWQuIFRoZSBhY3R1YWwgb3V0cHV0IGRpcmVjdG9yeSB1c2VkIGJ5IGEgYnVpbGQgd2lsbCBiZSBhIGRlc2NlbmRhbnQgb2YgdGhpcyBwYXRoIGFuZCBkZXRlcm1pbmVkIGJ5IHRoZSBvdXRwdXQgc2VydmljZS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KBlJFTU9URVABCpcBCgZkZXZpY2UQABpOVGhlIGFkYiBkZXZpY2Ugc2VyaWFsIG51bWJlci4gSWYgbm90IHNwZWNpZmllZCwgdGhlIGZpcnN0IGRldmljZSB3aWxsIGJlIHVzZWQuIg5tb2JpbGUtaW5zdGFsbDAAOhRBQ1RJT05fQ09NTUFORF9MSU5FU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQrqAQoaaWZmX2hlYXBfc2l6ZV9ncmVhdGVyX3RoYW4QABp+SWZmIG5vbi16ZXJvLCB0aGVuIHNodXRkb3duIHdpbGwgb25seSBzaHV0IGRvd24gdGhlIHNlcnZlciBpZiB0aGUgdG90YWwgbWVtb3J5IChpbiBNQikgY29uc3VtZWQgYnkgdGhlIEpWTSBleGNlZWRzIHRoaXMgdmFsdWUuIghzaHV0ZG93bjAAOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURToRRUFHRVJORVNTX1RPX0VYSVRKEE9VVFBVVF9TRUxFQ1RJT05QAQqAAgoRZGVmZXJfcGFyYW1fZmlsZXMQARpOVGhpcyBvcHRpb24gaXMgZGVwcmVjYXRlZCBhbmQgaGFzIG5vIGVmZmVjdCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgVOT19PUEoMVU5ET0NVTUVOVEVEUAAKiAIKE2FwcGxlX2dlbmVyYXRlX2RzeW0QARowV2hldGhlciB0byBnZW5lcmF0ZSBkZWJ1ZyBzeW1ib2woLmRTWU0pIGZpbGUocykuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFM6FEFDVElPTl9DT01NQU5EX0xJTkVTShBPVVRQVVRfU0VMRUNUSU9OUAAK0gIKCmNsaWVudF9jd2QQABpLQSBzeXN0ZW0tZ2VuZXJhdGVkIHBhcmFtZXRlciB3aGljaCBzcGVjaWZpZXMgdGhlIGNsaWVudCdzIHdvcmtpbmcgZGlyZWN0b3J5Ig9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg5DSEFOR0VTX0lOUFVUU0IGSElEREVOSgxVTkRPQ1VNRU5URURQAQqEBAoPYmVzX3VwbG9hZF9tb2RlEAAagQJTcGVjaWZpZXMgd2hldGhlciB0aGUgQnVpbGQgRXZlbnQgU2VydmljZSB1cGxvYWQgc2hvdWxkIGJsb2NrIHRoZSBidWlsZCBjb21wbGV0aW9uIG9yIHNob3VsZCBlbmQgdGhlIGludm9jYXRpb24gaW1tZWRpYXRlbHkgYW5kIGZpbmlzaCB0aGUgdXBsb2FkIGluIHRoZSBiYWNrZ3JvdW5kLiBFaXRoZXIgJ3dhaXRfZm9yX3VwbG9hZF9jb21wbGV0ZScgKGRlZmF1bHQpLCAnbm93YWl0X2Zvcl91cGxvYWRfY29tcGxldGUnLCBvciAnZnVsbHlfYXN5bmMnLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoRRUFHRVJORVNTX1RPX0VYSVRKB0xPR0dJTkdQAQpwCgRsb25nEAAaP1Nob3cgZnVsbCBkZXNjcmlwdGlvbiBvZiBlYWNoIG9wdGlvbiwgaW5zdGVhZCBvZiBqdXN0IGl0cyBuYW1lLiIEaGVscCoBbDAAOg9URVJNSU5BTF9PVVRQVVRKB0xPR0dJTkdQAArNAQobZXhwZXJpbWVudGFsX3Nob3dfYXJ0aWZhY3RzEAEaEURlcHJlY2F0ZWQgbm8tb3AuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgVOT19PUEoMVU5ET0NVTUVOVEVEUAAKrAIKDWNhdGFseXN0X2NwdXMQABpRQ29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgYXJjaGl0ZWN0dXJlcyBmb3Igd2hpY2ggdG8gYnVpbGQgQXBwbGUgQ2F0YWx5c3QgYmluYXJpZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURToUTE9BRElOR19BTkRfQU5BTFlTSVNKEU9VVFBVVF9QQVJBTUVURVJTUAEKjgMKM2V4cGVyaW1lbnRhbF9idWlsZF9ldmVudF91cGxvYWRfcmV0cnlfbWluaW11bV9kZWxheRAAGl1Jbml0aWFsLCBtaW5pbXVtIGRlbGF5IGZvciBleHBvbmVudGlhbCBiYWNrb2ZmIHJldHJpZXMgd2hlbiBCRVAgdXBsb2FkIGZhaWxzLiAoZXhwb25lbnQ6IDEuNikiD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05KB0xPR0dJTkdQAQrSAwowZXhwZXJpbWVudGFsX2FxdWVyeV9kdW1wX2FmdGVyX2J1aWxkX291dHB1dF9maWxlEAAa9gFTcGVjaWZ5IHRoZSBvdXRwdXQgZmlsZSBmb3IgdGhlIGFxdWVyeSBkdW1wIGFmdGVyIGEgYnVpbGQuIFVzZSBpbiBjb25qdW5jdGlvbiB3aXRoIC0tZXhwZXJpbWVudGFsX2FxdWVyeV9kdW1wX2FmdGVyX2J1aWxkX2Zvcm1hdC4gVGhlIHBhdGggcHJvdmlkZWQgaXMgcmVsYXRpdmUgdG8gQmF6ZWwncyBvdXRwdXQgYmFzZSwgdW5sZXNzIGl0J3MgYW4gYWJzb2x1dGUgcGF0aC4gVXNpbmcgdGhpcyB3aWxsIGRpc2FibGUgU2t5bWVsZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0oMVU5ET0NVTUVOVEVEUAEKmAIKK2V4cGVyaW1lbnRhbF9yZW1vdGVfYW5hbHlzaXNfY2FjaGVfZGVhZGxpbmUQABo1RGVhZGxpbmUgdG8gdXNlIGZvciByZW1vdGUgYW5hbHlzaXMgY2FjaGUgb3BlcmF0aW9ucy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05KDFVORE9DVU1FTlRFRFABCpoDCiRleHBlcmltZW50YWxfd29ya2VyX3N0cmljdF9mbGFnZmlsZXMQARrKAUlmIGVuYWJsZWQsIGFjdGlvbnMgYXJndW1lbnRzIGZvciB3b3JrZXJzIHRoYXQgZG8gbm90IGZvbGxvdyB0aGUgd29ya2VyIHNwZWNpZmljYXRpb24gd2lsbCBjYXVzZSBhbiBlcnJvci4gV29ya2VyIGFyZ3VtZW50cyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgQGZsYWdmaWxlIGFyZ3VtZW50IGFzIHRoZSBsYXN0IG9mIGl0cyBsaXN0IG9mIGFyZ3VtZW50cy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkoSRVhFQ1VUSU9OX1NUUkFURUdZUAAKqAQKJWV4cGVyaW1lbnRhbF9pbm1lbW9yeV9zYW5kYm94X3N0YXNoZXMQARqyAklmIHNldCB0byB0cnVlLCB0aGUgY29udGVudHMgb2Ygc3Rhc2hlZCBzYW5kYm94ZXMgZm9yIHJldXNlX3NhbmRib3hfZGlyZWN0b3JpZXMgd2lsbCBiZSB0cmFja2VkIGluIG1lbW9yeS4gVGhpcyByZWR1Y2VzIHRoZSBhbW91bnQgb2YgSS9PIG5lZWRlZCBkdXJpbmcgcmV1c2UuIERlcGVuZGluZyBvbiB0aGUgYnVpbGQgdGhpcyBmbGFnIG1heSBpbXByb3ZlIHdhbGwgdGltZS4gRGVwZW5kaW5nIG9uIHRoZSBidWlsZCBhcyB3ZWxsIHRoaXMgZmxhZyBtYXkgdXNlIGEgc2lnbmlmaWNhbnQgYW1vdW50IG9mIGFkZGl0aW9uYWwgbWVtb3J5LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADojSE9TVF9NQUNISU5FX1JFU09VUkNFX09QVElNSVpBVElPTlM6CUVYRUNVVElPTkoSRVhFQ1VUSU9OX1NUUkFURUdZUAAKoQMKIGNyZWRlbnRpYWxfaGVscGVyX2NhY2hlX2R1cmF0aW9uEAAakQFUaGUgZGVmYXVsdCBkdXJhdGlvbiBmb3Igd2hpY2ggY3JlZGVudGlhbHMgc3VwcGxpZWQgYnkgYSBjcmVkZW50aWFsIGhlbHBlciBhcmUgY2FjaGVkIGlmIHRoZSBoZWxwZXIgZG9lcyBub3QgcHJvdmlkZSB3aGVuIHRoZSBjcmVkZW50aWFscyBleHBpcmUuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEK6gIKC3N1YmNvbW1hbmRzEAEatQFEaXNwbGF5IHRoZSBzdWJjb21tYW5kcyBleGVjdXRlZCBkdXJpbmcgYSBidWlsZC4gUmVsYXRlZCBmbGFnczogLS1leGVjdXRpb25fbG9nX2pzb25fZmlsZSwgLS1leGVjdXRpb25fbG9nX2JpbmFyeV9maWxlIChmb3IgbG9nZ2luZyBzdWJjb21tYW5kcyB0byBhIGZpbGUgaW4gYSB0b29sLWZyaWVuZGx5IGZvcm1hdCkuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcioBczAAOg9URVJNSU5BTF9PVVRQVVRKB0xPR0dJTkdQAAq7AgotZXhwZXJpbWVudGFsX2NvcnJlY3RfcnVuZmlsZXNfbWlkZGxlbWFuX3BhdGhzEAEaVUlmIHNldCwgdGhlIHBhdGggb2YgcnVuZmlsZXMgbWlkZGxlbWVuIHJlcHJlc2VudHMgdGhlIHJlYWwgcGF0aCBvZiB0aGUgcnVuZmlsZXMgdHJlZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0IMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAArmAgoLaG9zdF9qdm1vcHQQABq2AUFkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBKYXZhIFZNIHdoZW4gYnVpbGRpbmcgdG9vbHMgdGhhdCBhcmUgZXhlY3V0ZWQgZHVyaW5nICB0aGUgYnVpbGQuIFRoZXNlIG9wdGlvbnMgd2lsbCBnZXQgYWRkZWQgdG8gdGhlIFZNIHN0YXJ0dXAgb3B0aW9ucyBvZiBlYWNoICBqYXZhX2JpbmFyeSB0YXJnZXQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEKrQMKJ2V4cGVyaW1lbnRhbF9pbm1lbW9yeV9kb3RpbmNsdWRlc19maWxlcxABGp0BSWYgZW5hYmxlZCwgc2VhcmNoaW5nIGZvciAnI2luY2x1ZGUnIGxpbmVzIGluIGdlbmVyYXRlZCBoZWFkZXIgZmlsZXMgd2lsbCBub3QgdG91Y2ggbG9jYWwgZGlzay4gVGhpcyBtYWtlcyBpbmNsdWRlIHNjYW5uaW5nIG9mIEMrKyBmaWxlcyBsZXNzIGRpc2staW50ZW5zaXZlLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADocQkFaRUxfSU5URVJOQUxfQ09ORklHVVJBVElPTjoJRVhFQ1VUSU9OOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OU0oMVU5ET0NVTUVOVEVEUAAKnQIKCHN0cmlwb3B0EAAaT0FkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIHN0cmlwIHdoZW4gZ2VuZXJhdGluZyBhICc8bmFtZT4uc3RyaXBwZWQnIGJpbmFyeS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6FEFDVElPTl9DT01NQU5EX0xJTkVTOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAEK3QIKL2luY29tcGF0aWJsZV9kaXNhbGxvd19zZGtfZnJhbWV3b3Jrc19hdHRyaWJ1dGVzEAEaY0lmIHRydWUsIGRpc2FsbG93IHNka19mcmFtZXdvcmtzIGFuZCB3ZWFrX3Nka19mcmFtZXdvcmtzIGF0dHJpYnV0ZXMgaW4gb2JqY19saWJyYXJ5IGFuZG9iamNfaW1wb3J0LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQlVJTERfRklMRV9TRU1BTlRJQ1NCE0lOQ09NUEFUSUJMRV9DSEFOR0VKElNUQVJMQVJLX1NFTUFOVElDU1AACq4GCipleHBlcmltZW50YWxfcmVtb3RlX2NhY2hlX2V2aWN0aW9uX3JldHJpZXMQABrkBFRoZSBtYXhpbXVtIG51bWJlciBvZiBhdHRlbXB0cyB0byByZXRyeSBpZiB0aGUgYnVpbGQgZW5jb3VudGVyZWQgYSB0cmFuc2llbnQgcmVtb3RlIGNhY2hlIGVycm9yIHRoYXQgd291bGQgb3RoZXJ3aXNlIGZhaWwgdGhlIGJ1aWxkLiBBcHBsaWVzIGZvciBleGFtcGxlIHdoZW4gYXJ0aWZhY3RzIGFyZSBldmljdGVkIGZyb20gdGhlIHJlbW90ZSBjYWNoZSwgb3IgaW4gY2VydGFpbiBjYWNoZSBmYWlsdXJlIGNvbmRpdGlvbnMuIEEgbm9uLXplcm8gdmFsdWUgd2lsbCBpbXBsaWNpdGx5IHNldCAtLWluY29tcGF0aWJsZV9yZW1vdGVfdXNlX25ld19leGl0X2NvZGVfZm9yX2xvc3RfaW5wdXRzIHRvIHRydWUuIEEgbmV3IGludm9jYXRpb24gaWQgd2lsbCBiZSBnZW5lcmF0ZWQgZm9yIGVhY2ggYXR0ZW1wdC4gSWYgeW91IGdlbmVyYXRlIGludm9jYXRpb24gaWQgYW5kIHByb3ZpZGUgaXQgdG8gQmF6ZWwgd2l0aCAtLWludm9jYXRpb25faWQsIHlvdSBzaG91bGQgbm90IHVzZSB0aGlzIGZsYWcuIEluc3RlYWQsIHNldCBmbGFnIC0taW5jb21wYXRpYmxlX3JlbW90ZV91c2VfbmV3X2V4aXRfY29kZV9mb3JfbG9zdF9pbnB1dHMgYW5kIGNoZWNrIGZvciB0aGUgZXhpdCBjb2RlIDM5LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OSgZSRU1PVEVQAQqSBwoSaG9zdF9wZXJfZmlsZV9jb3B0EAAauQVBZGRpdGlvbmFsIG9wdGlvbnMgdG8gc2VsZWN0aXZlbHkgcGFzcyB0byB0aGUgQy9DKysgY29tcGlsZXIgd2hlbiBjb21waWxpbmcgY2VydGFpbiBmaWxlcyBpbiB0aGUgZXhlYyBjb25maWd1cmF0aW9ucy4gVGhpcyBvcHRpb24gY2FuIGJlIHBhc3NlZCBtdWx0aXBsZSB0aW1lcy4gU3ludGF4OiByZWdleF9maWx0ZXJAb3B0aW9uXzEsb3B0aW9uXzIsLi4uLG9wdGlvbl9uLiBXaGVyZSByZWdleF9maWx0ZXIgc3RhbmRzIGZvciBhIGxpc3Qgb2YgaW5jbHVkZSBhbmQgZXhjbHVkZSByZWd1bGFyIGV4cHJlc3Npb24gcGF0dGVybnMgKEFsc28gc2VlIC0taW5zdHJ1bWVudGF0aW9uX2ZpbHRlcikuIG9wdGlvbl8xIHRvIG9wdGlvbl9uIHN0YW5kIGZvciBhcmJpdHJhcnkgY29tbWFuZCBsaW5lIG9wdGlvbnMuIElmIGFuIG9wdGlvbiBjb250YWlucyBhIGNvbW1hIGl0IGhhcyB0byBiZSBxdW90ZWQgd2l0aCBhIGJhY2tzbGFzaC4gT3B0aW9ucyBjYW4gY29udGFpbiBALiBPbmx5IHRoZSBmaXJzdCBAIGlzIHVzZWQgdG8gc3BsaXQgdGhlIHN0cmluZy4gRXhhbXBsZTogLS1ob3N0X3Blcl9maWxlX2NvcHQ9Ly9mb28vLipcLmNjLC0vL2Zvby9iYXJcLmNjQC1PMCBhZGRzIHRoZSAtTzAgY29tbWFuZCBsaW5lIG9wdGlvbiB0byB0aGUgZ2NjIGNvbW1hbmQgbGluZSBvZiBhbGwgY2MgZmlsZXMgaW4gLy9mb28vIGV4Y2VwdCBiYXIuY2MuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOhRBQ1RJT05fQ09NTUFORF9MSU5FUzoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1ABCqoCChVwcm90bzpmbGF0dGVuX3NlbGVjdHMQARrWAUlmIGVuYWJsZWQsIGNvbmZpZ3VyYWJsZSBhdHRyaWJ1dGVzIGNyZWF0ZWQgYnkgc2VsZWN0KCkgYXJlIGZsYXR0ZW5lZC4gRm9yIGxpc3QgdHlwZXMgdGhlIGZsYXR0ZW5lZCByZXByZXNlbnRhdGlvbiBpcyBhIGxpc3QgY29udGFpbmluZyBlYWNoIHZhbHVlIG9mIHRoZSBzZWxlY3QgbWFwIGV4YWN0bHkgb25jZS4gU2NhbGFyIHR5cGVzIGFyZSBmbGF0dGVuZWQgdG8gbnVsbC4iBmFxdWVyeSIGY3F1ZXJ5IgVxdWVyeTAAOhRCVUlMRF9GSUxFX1NFTUFOVElDU0oFUVVFUllQAArLAwonYnVpbGRfZXZlbnRfYmluYXJ5X2ZpbGVfcGF0aF9jb252ZXJzaW9uEAEasgFDb252ZXJ0IHBhdGhzIGluIHRoZSBiaW5hcnkgZmlsZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgYnVpbGQgZXZlbnQgcHJvdG9jb2wgdG8gbW9yZSBnbG9iYWxseSB2YWxpZCBVUklzIHdoZW5ldmVyIHBvc3NpYmxlOyBpZiBkaXNhYmxlZCwgdGhlIGZpbGU6Ly8gdXJpIHNjaGVtZSB3aWxsIGFsd2F5cyBiZSB1c2VkIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg9BRkZFQ1RTX09VVFBVVFNKB0xPR0dJTkdQAArCAQoOYmxvY2tfZm9yX2xvY2sQARp4V2hlbiAtLW5vYmxvY2tfZm9yX2xvY2sgaXMgcGFzc2VkLCBCYXplbCBkb2VzIG5vdCB3YWl0IGZvciBhIHJ1bm5pbmcgY29tbWFuZCB0byBjb21wbGV0ZSwgYnV0IGluc3RlYWQgZXhpdHMgaW1tZWRpYXRlbHkuIgdzdGFydHVwMAA6EUVBR0VSTkVTU19UT19FWElUShRCQVpFTF9DTElFTlRfT1BUSU9OU1AACocGCg9sb2NhbF9yZXNvdXJjZXMQABqtBFNldCB0aGUgbnVtYmVyIG9mIHJlc291cmNlcyBhdmFpbGFibGUgdG8gQmF6ZWwuIFRha2VzIGluIGFuIGFzc2lnbm1lbnQgdG8gYSBmbG9hdCBvciBIT1NUX1JBTS9IT1NUX0NQVVMsIG9wdGlvbmFsbHkgZm9sbG93ZWQgYnkgWy18Kl08ZmxvYXQ+IChlZy4gbWVtb3J5PUhPU1RfUkFNKi41IHRvIHVzZSBoYWxmIHRoZSBhdmFpbGFibGUgUkFNKS4gQ2FuIGJlIHVzZWQgbXVsdGlwbGUgdGltZXMgdG8gc3BlY2lmeSBtdWx0aXBsZSB0eXBlcyBvZiByZXNvdXJjZXMuIEJhemVsIHdpbGwgbGltaXQgY29uY3VycmVudGx5IHJ1bm5pbmcgYWN0aW9ucyBiYXNlZCBvbiB0aGUgYXZhaWxhYmxlIHJlc291cmNlcyBhbmQgdGhlIHJlc291cmNlcyByZXF1aXJlZC4gVGVzdHMgY2FuIGRlY2xhcmUgdGhlIGFtb3VudCBvZiByZXNvdXJjZXMgdGhleSBuZWVkIGJ5IHVzaW5nIGEgdGFnIG9mIHRoZSAicmVzb3VyY2VzOjxyZXNvdXJjZSBuYW1lPjo8YW1vdW50PiIgZm9ybWF0LiBPdmVycmlkZXMgcmVzb3VyY2VzIHNwZWNpZmllZCBieSAtLWxvY2FsX3tjcHV8cmFtfGV4dHJhfV9yZXNvdXJjZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OU0oXQlVJTERfVElNRV9PUFRJTUlaQVRJT05QAQrLAgopZXhwZXJpbWVudGFsX2V4ZWN1dGlvbl9ncmFwaF9sb2dfZGVwX3R5cGUQABp/U2VsZWN0cyB3aGF0IGtpbmQgb2YgZGVwZW5kZW5jeSBpbmZvcm1hdGlvbiBpcyByZXBvcnRlZCBpbiB0aGUgYWN0aW9uIGR1bXAuIElmICdhbGwnLCBldmVyeSBpbnRlci1hY3Rpb24gZWRnZSB3aWxsIGJlIHJlcG9ydGVkLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoMVU5ET0NVTUVOVEVEUAEK9QMKJWV4cGVyaW1lbnRhbF9keW5hbWljX3Nsb3dfcmVtb3RlX3RpbWUQABr/AUlmID4wLCB0aGUgdGltZSBhIGR5bmFtaWNhbGx5IHJ1biBhY3Rpb24gbXVzdCBydW4gcmVtb3RlLW9ubHkgYmVmb3JlIHdlIHByaW9yaXRpemUgaXRzIGxvY2FsIGV4ZWN1dGlvbiB0byBhdm9pZCByZW1vdGUgdGltZW91dHMuIFRoaXMgbWF5IGhpZGUgc29tZSBwcm9ibGVtcyBvbiB0aGUgcmVtb3RlIGV4ZWN1dGlvbiBzeXN0ZW0uIERvIG5vdCB0dXJuIHRoaXMgb24gd2l0aG91dCBtb25pdG9yaW5nIG9mIHJlbW90ZSBleGVjdXRpb24gaXNzdWVzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OU0oSRVhFQ1VUSU9OX1NUUkFURUdZUAEK8gIKDm1lbW9yeV9wcm9maWxlEAAacklmIHNldCwgd3JpdGUgbWVtb3J5IHVzYWdlIGRhdGEgdG8gdGhlIHNwZWNpZmllZCBmaWxlIGF0IHBoYXNlIGVuZHMgYW5kIHN0YWJsZSBoZWFwIHRvIG1hc3RlciBsb2cgYXQgZW5kIG9mIGJ1aWxkLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoQQkFaRUxfTU9OSVRPUklOR0oHTE9HR0lOR1ABCqgCChxpbmNvbXBhdGlibGVfbmV3X2FjdGlvbnNfYXBpEAEaBU5vLW9wIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgVOT19PUEITSU5DT01QQVRJQkxFX0NIQU5HRUoSU1RBUkxBUktfU0VNQU5USUNTUAAKxgMKLGluY29tcGF0aWJsZV9wYWNrYWdlX2dyb3VwX2hhc19wdWJsaWNfc3ludGF4EAEagwFJbiBwYWNrYWdlX2dyb3VwJ3MgYHBhY2thZ2VzYCBhdHRyaWJ1dGUsIGFsbG93cyB3cml0aW5nICJwdWJsaWMiIG9yICJwcml2YXRlIiB0byByZWZlciB0byBhbGwgcGFja2FnZXMgb3Igbm8gcGFja2FnZXMgcmVzcGVjdGl2ZWx5LiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUQlVJTERfRklMRV9TRU1BTlRJQ1NCE0lOQ09NUEFUSUJMRV9DSEFOR0VKElNUQVJMQVJLX1NFTUFOVElDU1AACogDCilpbmNvbXBhdGlibGVfZGlzYWJsZV9uYXRpdmVfYW5kcm9pZF9ydWxlcxABGpgBSWYgZW5hYmxlZCwgZGlyZWN0IHVzYWdlIG9mIHRoZSBuYXRpdmUgQW5kcm9pZCBydWxlcyBpcyBkaXNhYmxlZC4gUGxlYXNlIHVzZSB0aGUgU3RhcmxhcmsgQW5kcm9pZCBydWxlcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9iYXplbGJ1aWxkL3J1bGVzX2FuZHJvaWQiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6EUVBR0VSTkVTU19UT19FWElUQhNJTkNPTVBBVElCTEVfQ0hBTkdFShBJTlBVVF9TVFJJQ1RORVNTUAAKjgIKGWV4cGVyaW1lbnRhbF9mc3ZjX3RocmVhZHMQABpCVGhlIG51bWJlciBvZiB0aHJlYWRzIHRoYXQgYXJlIHVzZWQgYnkgdGhlIEZpbGVTeXN0ZW1WYWx1ZUNoZWNrZXIuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05CDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAEKqAIKI2V4cGVyaW1lbnRhbF9jY19pbXBsZW1lbnRhdGlvbl9kZXBzEAEaR0lmIGVuYWJsZWQsIGNjX2xpYnJhcnkgdGFyZ2V0cyBjYW4gdXNlIGF0dHJpYnV0ZSBgaW1wbGVtZW50YXRpb25fZGVwc2AuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0IMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAArpAgoHZGlzdGRpchAAGldBZGRpdGlvbmFsIHBsYWNlcyB0byBzZWFyY2ggZm9yIGFyY2hpdmVzIGJlZm9yZSBhY2Nlc3NpbmcgdGhlIG5ldHdvcmsgdG8gZG93bmxvYWQgdGhlbS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAE6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05KFEJBWkVMX0NMSUVOVF9PUFRJT05TUAEKwgQKKGluY29tcGF0aWJsZV9kZWZhdWx0X3RvX2V4cGxpY2l0X2luaXRfcHkQARrXAlRoaXMgZmxhZyBjaGFuZ2VzIHRoZSBkZWZhdWx0IGJlaGF2aW9yIHNvIHRoYXQgX19pbml0X18ucHkgZmlsZXMgYXJlIG5vIGxvbmdlciBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQgaW4gdGhlIHJ1bmZpbGVzIG9mIFB5dGhvbiB0YXJnZXRzLiBQcmVjaXNlbHksIHdoZW4gYSBweV9iaW5hcnkgb3IgcHlfdGVzdCB0YXJnZXQgaGFzIGxlZ2FjeV9jcmVhdGVfaW5pdCBzZXQgdG8gImF1dG8iICh0aGUgZGVmYXVsdCksIGl0IGlzIHRyZWF0ZWQgYXMgZmFsc2UgaWYgYW5kIG9ubHkgaWYgdGhpcyBmbGFnIGlzIHNldC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iYXplbGJ1aWxkL2JhemVsL2lzc3Vlcy8xMDA3Ni4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoOR0VORVJJQ19JTlBVVFNQAAq0AwoIdGVzdF9hcmcQABqHAlNwZWNpZmllcyBhZGRpdGlvbmFsIG9wdGlvbnMgYW5kIGFyZ3VtZW50cyB0aGF0IHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIHRlc3QgZXhlY3V0YWJsZS4gQ2FuIGJlIHVzZWQgbXVsdGlwbGUgdGltZXMgdG8gc3BlY2lmeSBzZXZlcmFsIGFyZ3VtZW50cy4gSWYgbXVsdGlwbGUgdGVzdHMgYXJlIGV4ZWN1dGVkLCBlYWNoIG9mIHRoZW0gd2lsbCByZWNlaXZlIGlkZW50aWNhbCBhcmd1bWVudHMuIFVzZWQgb25seSBieSB0aGUgJ2JhemVsIHRlc3QnIGNvbW1hbmQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEK1QYKEnByb3BlbGxlcl9vcHRpbWl6ZRAAGvwEVXNlIFByb3BlbGxlciBwcm9maWxlIGluZm9ybWF0aW9uIHRvIG9wdGltaXplIHRoZSBidWlsZCB0YXJnZXQuQSBwcm9wZWxsZXIgcHJvZmlsZSBtdXN0IGNvbnNpc3Qgb2YgYXQgbGVhc3Qgb25lIG9mIHR3byBmaWxlcywgYSBjYyBwcm9maWxlIGFuZCBhIGxkIHByb2ZpbGUuICBUaGlzIGZsYWcgYWNjZXB0cyBhIGJ1aWxkIGxhYmVsIHdoaWNoIG11c3QgcmVmZXIgdG8gdGhlIHByb3BlbGxlciBwcm9maWxlIGlucHV0IGZpbGVzLiBGb3IgZXhhbXBsZSwgdGhlIEJVSUxEIGZpbGUgdGhhdCBkZWZpbmVzIHRoZSBsYWJlbCwgaW4gYS9iL0JVSUxEOnByb3BlbGxlcl9vcHRpbWl6ZSggICAgbmFtZSA9ICJwcm9wZWxsZXJfcHJvZmlsZSIsICAgIGNjX3Byb2ZpbGUgPSAicHJvcGVsbGVyX2NjX3Byb2ZpbGUudHh0IiwgICAgbGRfcHJvZmlsZSA9ICJwcm9wZWxsZXJfbGRfcHJvZmlsZS50eHQiLClBbiBleHBvcnRzX2ZpbGVzIGRpcmVjdGl2ZSBtYXkgaGF2ZSB0byBiZSBhZGRlZCB0byB0aGUgY29ycmVzcG9uZGluZyBwYWNrYWdlIHRvIG1ha2UgdGhlc2UgZmlsZXMgdmlzaWJsZSB0byBCYXplbC4gVGhlIG9wdGlvbiBtdXN0IGJlIHVzZWQgYXM6IC0tcHJvcGVsbGVyX29wdGltaXplPS8vYS9iOnByb3BlbGxlcl9wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRBQ1RJT05fQ09NTUFORF9MSU5FUzoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1ABCt4CChdleHBsaWNpdF9qYXZhX3Rlc3RfZGVwcxABGqIBRXhwbGljaXRseSBzcGVjaWZ5IGEgZGVwZW5kZW5jeSB0byBKVW5pdCBvciBIYW1jcmVzdCBpbiBhIGphdmFfdGVzdCBpbnN0ZWFkIG9mICBhY2NpZGVudGFsbHkgb2J0YWluaW5nIGZyb20gdGhlIFRlc3RSdW5uZXIncyBkZXBzLiBPbmx5IHdvcmtzIGZvciBiYXplbCByaWdodCBub3cuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAAKlgcKFW1vZGlmeV9leGVjdXRpb25faW5mbxAAGq4FQWRkIG9yIHJlbW92ZSBrZXlzIGZyb20gYW4gYWN0aW9uJ3MgZXhlY3V0aW9uIGluZm8gYmFzZWQgb24gYWN0aW9uIG1uZW1vbmljLiAgQXBwbGllcyBvbmx5IHRvIGFjdGlvbnMgd2hpY2ggc3VwcG9ydCBleGVjdXRpb24gaW5mby4gTWFueSBjb21tb24gYWN0aW9ucyBzdXBwb3J0IGV4ZWN1dGlvbiBpbmZvLCBlLmcuIEdlbnJ1bGUsIENwcENvbXBpbGUsIEphdmFjLCBTdGFybGFya0FjdGlvbiwgVGVzdFJ1bm5lci4gV2hlbiBzcGVjaWZ5aW5nIG11bHRpcGxlIHZhbHVlcywgb3JkZXIgbWF0dGVycyBiZWNhdXNlIG1hbnkgcmVnZXhlcyBtYXkgYXBwbHkgdG8gdGhlIHNhbWUgbW5lbW9uaWMuCgpTeW50YXg6ICJyZWdleD1bKy1da2V5LHJlZ2V4PVsrLV1rZXksLi4uIi4KCkV4YW1wbGVzOgogICcuKj0reCwuKj0teSwuKj0reicgYWRkcyAneCcgYW5kICd6JyB0bywgYW5kIHJlbW92ZXMgJ3knIGZyb20sIHRoZSBleGVjdXRpb24gaW5mbyBmb3IgYWxsIGFjdGlvbnMuCiAgJ0dlbnJ1bGU9K3JlcXVpcmVzLXgnIGFkZHMgJ3JlcXVpcmVzLXgnIHRvIHRoZSBleGVjdXRpb24gaW5mbyBmb3IgYWxsIEdlbnJ1bGUgYWN0aW9ucy4KICAnKD8hR2VucnVsZSkuKj0tcmVxdWlyZXMteCcgcmVtb3ZlcyAncmVxdWlyZXMteCcgZnJvbSB0aGUgZXhlY3V0aW9uIGluZm8gZm9yIGFsbCBub24tR2VucnVsZSBhY3Rpb25zLgoiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6CUVYRUNVVElPTjoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0oSRVhFQ1VUSU9OX1NUUkFURUdZUAEKfgoFcnVsZXMQARpFRHVtcCBydWxlcywgaW5jbHVkaW5nIGNvdW50cyBhbmQgbWVtb3J5IHVzYWdlIChpZiBtZW1vcnkgaXMgdHJhY2tlZCkuIgRkdW1wMAA6EEJBWkVMX01PTklUT1JJTkdKEE9VVFBVVF9TRUxFQ1RJT05QAAphCg5oZWxwX3ZlcmJvc2l0eRAAGilTZWxlY3QgdGhlIHZlcmJvc2l0eSBvZiB0aGUgaGVscCBjb21tYW5kLiIEaGVscDAAOg9URVJNSU5BTF9PVVRQVVRKB0xPR0dJTkdQAQqLAgoUc2VwYXJhdGVfYXNwZWN0X2RlcHMQARoFTm8tb3AiD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6BU5PX09QShJTVEFSTEFSS19TRU1BTlRJQ1NQAArLAgoNc3Rhcmxhcms6ZmlsZRAAGpMCVGhlIG5hbWUgb2YgYSBmaWxlIHRoYXQgZGVmaW5lcyBhIFN0YXJsYXJrIGZ1bmN0aW9uIGNhbGxlZCAnZm9ybWF0Jywgb2Ygb25lIGFyZ3VtZW50LCB0aGF0IGlzIGFwcGxpZWQgdG8gZWFjaCBjb25maWd1cmVkIHRhcmdldCB0byBmb3JtYXQgaXQgYXMgYSBzdHJpbmcuIEl0IGlzIGFuIGVycm9yIHRvIHNwZWNpZnkgYm90aCAtLXN0YXJsYXJrOmV4cHIgYW5kIC0tc3Rhcmxhcms6ZmlsZS4gU2VlIGhlbHAgZm9yIC0tb3V0cHV0PXN0YXJsYXJrIGZvciBhZGRpdGlvbmFsIGRldGFpbC4iBmNxdWVyeTAAOg9URVJNSU5BTF9PVVRQVVRKBVFVRVJZUAEKpwIKCWhvc3RfY29wdBAAGlhBZGRpdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgQyBjb21waWxlciBmb3IgdG9vbHMgYnVpbHQgaW4gdGhlIGV4ZWMgY29uZmlndXJhdGlvbnMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOhRBQ1RJT05fQ09NTUFORF9MSU5FUzoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1ABCvwDCidpbmNvbXBhdGlibGVfZGlzYWxsb3dfY3R4X3Jlc29sdmVfdG9vbHMQARq+AUlmIHNldCB0byB0cnVlLCBjYWxsaW5nIHRoZSBkZXByZWNhdGVkIGN0eC5yZXNvbHZlX3Rvb2xzIEFQSSBhbHdheXMgZmFpbHMuIFVzZXMgb2YgdGhpcyBBUEkgc2hvdWxkIGJlIHJlcGxhY2VkIGJ5IGFuIGV4ZWN1dGFibGUgb3IgdG9vbHMgYXJndW1lbnQgdG8gY3R4LmFjdGlvbnMucnVuIG9yIGN0eC5hY3Rpb25zLnJ1bl9zaGVsbC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShJTVEFSTEFSS19TRU1BTlRJQ1NQAArHBAo4ZXhwZXJpbWVudGFsX3NreWZyYW1lX2NwdV9oZWF2eV9za3lrZXlzX3RocmVhZF9wb29sX3NpemUQABqyAklmIHNldCB0byBhIHBvc2l0aXZlIHZhbHVlIChlLmcuICJIT1NUX0NQVVMqMS41IiksIFNreWZyYW1lIHdpbGwgcnVuIHRoZSBsb2FkaW5nL2FuYWx5c2lzIHBoYXNlIHdpdGggMiBzZXBhcmF0ZSB0aHJlYWQgcG9vbHM6IDEgd2l0aCA8dmFsdWU+IHRocmVhZHMgKGlkZWFsbHkgY2xvc2UgdG8gSE9TVF9DUFVTKSByZXNlcnZlZCBmb3IgQ1BVLWhlYXZ5IFNreUtleXMsIGFuZCAxICJzdGFuZGFyZCIgdGhyZWFkIHBvb2wgKHdob3NlIHNpemUgaXMgY29udHJvbGxlZCBieSAtLWxvYWRpbmdfcGhhc2VfdGhyZWFkcykgZm9yIHRoZSByZXN0LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05CDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAEK7AQKGWV4cGVyaW1lbnRhbF9vdXRwdXRfcGF0aHMQABrgAldoaWNoIG1vZGVsIHRvIHVzZSBmb3Igd2hlcmUgaW4gdGhlIG91dHB1dCB0cmVlIHJ1bGVzIHdyaXRlIHRoZWlyIG91dHB1dHMsIHBhcnRpY3VsYXJseSBmb3IgbXVsdGktcGxhdGZvcm0gLyBtdWx0aS1jb25maWd1cmF0aW9uIGJ1aWxkcy4gVGhpcyBpcyBoaWdobHkgZXhwZXJpbWVudGFsLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2JhemVsYnVpbGQvYmF6ZWwvaXNzdWVzLzY1MjYgZm9yIGRldGFpbHMuIFN0YXJsYXJrIGFjdGlvbnMgY2Fub3B0IGludG8gcGF0aCBtYXBwaW5nIGJ5IGFkZGluZyB0aGUga2V5ICdzdXBwb3J0cy1wYXRoLW1hcHBpbmcnIHRvIHRoZSAnZXhlY3V0aW9uX3JlcXVpcmVtZW50cycgZGljdC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OOg9BRkZFQ1RTX09VVFBVVFM6CUVYRUNVVElPTkoRT1VUUFVUX1BBUkFNRVRFUlNQAQrCAgodZXhwZXJpbWVudGFsX3dvcmtlcl9hbGxvd2xpc3QQABpVSWYgbm9uLWVtcHR5LCBvbmx5IGFsbG93IHVzaW5nIHBlcnNpc3RlbnQgd29ya2VycyB3aXRoIHRoZSBnaXZlbiB3b3JrZXIga2V5IG1uZW1vbmljLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OU0oSRVhFQ1VUSU9OX1NUUkFURUdZUAEKvgEKG2luY2x1ZGVfZmlsZV93cml0ZV9jb250ZW50cxABGnlJbmNsdWRlIHRoZSBmaWxlIGNvbnRlbnRzIGZvciB0aGUgRmlsZVdyaXRlLCBTb3VyY2VTeW1saW5rTWFuaWZlc3QsIGFuZCBSZXBvTWFwcGluZ01hbmlmZXN0IGFjdGlvbnMgKHBvdGVudGlhbGx5IGxhcmdlKS4gIgZhcXVlcnkwADoPVEVSTUlOQUxfT1VUUFVUSgVRVUVSWVAACsACCg5yZXN0YXJ0X3JlYXNvbhAAGiJUaGUgcmVhc29uIGZvciB0aGUgc2VydmVyIHJlc3RhcnQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOg9BRkZFQ1RTX09VVFBVVFM6EEJBWkVMX01PTklUT1JJTkdCBkhJRERFTkoMVU5ET0NVTUVOVEVEUAEKzQUKHmV4cGVyaW1lbnRhbF9kb3dubG9hZGVyX2NvbmZpZxAAGsYDU3BlY2lmeSBhIGZpbGUgdG8gY29uZmlndXJlIHRoZSByZW1vdGUgZG93bmxvYWRlciB3aXRoLiBUaGlzIGZpbGUgY29uc2lzdHMgb2YgbGluZXMsIGVhY2ggb2Ygd2hpY2ggc3RhcnRzIHdpdGggYSBkaXJlY3RpdmUgKGBhbGxvd2AsIGBibG9ja2Agb3IgYHJld3JpdGVgKSBmb2xsb3dlZCBieSBlaXRoZXIgYSBob3N0IG5hbWUgKGZvciBgYWxsb3dgIGFuZCBgYmxvY2tgKSBvciB0d28gcGF0dGVybnMsIG9uZSB0byBtYXRjaCBhZ2FpbnN0LCBhbmQgb25lIHRvIHVzZSBhcyBhIHN1YnN0aXR1dGUgVVJMLCB3aXRoIGJhY2stcmVmZXJlbmNlcyBzdGFydGluZyBmcm9tIGAkMWAuIEl0IGlzIHBvc3NpYmxlIGZvciBtdWx0aXBsZSBgcmV3cml0ZWAgZGlyZWN0aXZlcyBmb3IgdGhlIHNhbWUgVVJMIHRvIGJlIGdpdmUsIGFuZCBpbiB0aGlzIGNhc2UgbXVsdGlwbGUgVVJMcyB3aWxsIGJlIHJldHVybmVkLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoGUkVNT1RFUAEK9gIKHmV4cGVyaW1lbnRhbF9kb2NrZXJfcHJpdmlsZWdlZBABGq4BSWYgZW5hYmxlZCwgQmF6ZWwgd2lsbCBwYXNzIHRoZSAtLXByaXZpbGVnZWQgZmxhZyB0byAnZG9ja2VyIHJ1bicgd2hlbiBydW5uaW5nIGFjdGlvbnMuIFRoaXMgbWlnaHQgYmUgcmVxdWlyZWQgYnkgeW91ciBidWlsZCwgYnV0IGl0IG1pZ2h0IGFsc28gcmVzdWx0IGluIHJlZHVjZWQgaGVybWV0aWNpdHkuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KEElOUFVUX1NUUklDVE5FU1NQAAqIBQoWY29tcGlsZV9vbmVfZGVwZW5kZW5jeRABGs0DQ29tcGlsZSBhIHNpbmdsZSBkZXBlbmRlbmN5IG9mIHRoZSBhcmd1bWVudCBmaWxlcy4gVGhpcyBpcyB1c2VmdWwgZm9yIHN5bnRheCBjaGVja2luZyBzb3VyY2UgZmlsZXMgaW4gSURFcywgZm9yIGV4YW1wbGUsIGJ5IHJlYnVpbGRpbmcgYSBzaW5nbGUgdGFyZ2V0IHRoYXQgZGVwZW5kcyBvbiB0aGUgc291cmNlIGZpbGUgdG8gZGV0ZWN0IGVycm9ycyBhcyBlYXJseSBhcyBwb3NzaWJsZSBpbiB0aGUgZWRpdC9idWlsZC90ZXN0IGN5Y2xlLiBUaGlzIGFyZ3VtZW50IGFmZmVjdHMgdGhlIHdheSBhbGwgbm9uLWZsYWcgYXJndW1lbnRzIGFyZSBpbnRlcnByZXRlZDsgaW5zdGVhZCBvZiBiZWluZyB0YXJnZXRzIHRvIGJ1aWxkIHRoZXkgYXJlIHNvdXJjZSBmaWxlbmFtZXMuICBGb3IgZWFjaCBzb3VyY2UgZmlsZW5hbWUgYW4gYXJiaXRyYXJ5IHRhcmdldCB0aGF0IGRlcGVuZHMgb24gaXQgd2lsbCBiZSBidWlsdC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAAqLAwogaHR0cF9jb25uZWN0b3JfcmV0cnlfbWF4X3RpbWVvdXQQABpgVGhlIG1heGltdW0gdGltZW91dCBmb3IgaHR0cCBkb3dubG9hZCByZXRyaWVzLiBXaXRoIGEgdmFsdWUgb2YgMCwgbm8gdGltZW91dCBtYXhpbXVtIGlzIGRlZmluZWQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OShRCQVpFTF9DTElFTlRfT1BUSU9OU1ABCosCCippbmNvbXBhdGlibGVfcmVtb3ZlX29sZF9weXRob25fdmVyc2lvbl9hcGkQARocTm8tb3AsIHdpbGwgYmUgcmVtb3ZlZCBzb29uLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKDFVORE9DVU1FTlRFRFAACsECCiNleHBlcmltZW50YWxfYW5kcm9pZF9kYXRhYmluZGluZ192MhABGjFVc2UgYW5kcm9pZCBkYXRhYmluZGluZyB2Mi4gVGhpcyBmbGFnIGlzIGEgbm8tb3AuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFM6FExPQURJTkdfQU5EX0FOQUxZU0lTOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUIMRVhQRVJJTUVOVEFMShFPVVRQVVRfUEFSQU1FVEVSU1AACpEECgxyZW1vdGVfY2FjaGUQABqcAkEgVVJJIG9mIGEgY2FjaGluZyBlbmRwb2ludC4gVGhlIHN1cHBvcnRlZCBzY2hlbWFzIGFyZSBodHRwLCBodHRwcywgZ3JwYywgZ3JwY3MgKGdycGMgd2l0aCBUTFMgZW5hYmxlZCkgYW5kIHVuaXggKGxvY2FsIFVOSVggc29ja2V0cykuIElmIG5vIHNjaGVtYSBpcyBwcm92aWRlZCBCYXplbCB3aWxsIGRlZmF1bHQgdG8gZ3JwY3MuIFNwZWNpZnkgZ3JwYzovLywgaHR0cDovLyBvciB1bml4OiBzY2hlbWEgdG8gZGlzYWJsZSBUTFMuIFNlZSBodHRwczovL2JhemVsLmJ1aWxkL3JlbW90ZS9jYWNoaW5nIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgZSRU1PVEVQAQqsAgoccHJvdG9fdG9vbGNoYWluX2Zvcl9qYXZhbGl0ZRAAGk5MYWJlbCBvZiBwcm90b19sYW5nX3Rvb2xjaGFpbigpIHdoaWNoIGRlc2NyaWJlcyBob3cgdG8gY29tcGlsZSBKYXZhTGl0ZSBwcm90b3MiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUUzoUTE9BRElOR19BTkRfQU5BTFlTSVNKDVVOQ0FURUdPUklaRURQAQrrAgoXbWF0ZXJpYWxpemVfcGFyYW1fZmlsZXMQARqzAVdyaXRlcyBpbnRlcm1lZGlhdGUgcGFyYW1ldGVyIGZpbGVzIHRvIG91dHB1dCB0cmVlIGV2ZW4gd2hlbiB1c2luZyByZW1vdGUgYWN0aW9uIGV4ZWN1dGlvbi4gVXNlZnVsIHdoZW4gZGVidWdnaW5nIGFjdGlvbnMuIFRoaXMgaXMgaW1wbGllZCBieSAtLXN1YmNvbW1hbmRzIGFuZCAtLXZlcmJvc2VfZmFpbHVyZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT05KB0xPR0dJTkdQAAqRBAoVaWdub3JlX2Rldl9kZXBlbmRlbmN5EAEahgJJZiB0cnVlLCBCYXplbCBpZ25vcmVzIGBiYXplbF9kZXBgIGFuZCBgdXNlX2V4dGVuc2lvbmAgZGVjbGFyZWQgYXMgYGRldl9kZXBlbmRlbmN5YCBpbiB0aGUgTU9EVUxFLmJhemVsIG9mIHRoZSByb290IG1vZHVsZS4gTm90ZSB0aGF0LCB0aG9zZSBkZXYgZGVwZW5kZW5jaWVzIGFyZSBhbHdheXMgaWdub3JlZCBpbiB0aGUgTU9EVUxFLmJhemVsIGlmIGl0J3Mgbm90IHRoZSByb290IG1vZHVsZSByZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZiB0aGlzIGZsYWcuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0oGQlpMTU9EUAAKhgIKEmFwa19zaWduaW5nX21ldGhvZBAAGiJJbXBsZW1lbnRhdGlvbiB0byB1c2UgdG8gc2lnbiBBUEtzIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRBQ1RJT05fQ09NTUFORF9MSU5FUzoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0oHU0lHTklOR1ABCq8CCg5pb3NfbWluaW11bV9vcxAAGmlNaW5pbXVtIGNvbXBhdGlibGUgaU9TIHZlcnNpb24gZm9yIHRhcmdldCBzaW11bGF0b3JzIGFuZCBkZXZpY2VzLiBJZiB1bnNwZWNpZmllZCwgdXNlcyAnaW9zX3Nka192ZXJzaW9uJy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFShFPVVRQVVRfUEFSQU1FVEVSU1ABCu4ECitleHBlcmltZW50YWxfcHl0aG9uX2ltcG9ydF9hbGxfcmVwb3NpdG9yaWVzEAEahANJZiB0cnVlLCB0aGUgcm9vdHMgb2YgcmVwb3NpdG9yaWVzIGluIHRoZSBydW5maWxlcyB0cmVlIGFyZSBhZGRlZCB0byBQWVRIT05QQVRILCBzbyB0aGF0IGltcG9ydHMgbGlrZSBgaW1wb3J0IG15dG9wbGV2ZWxwYWNrYWdlLnBhY2thZ2UubW9kdWxlYCBhcmUgdmFsaWQuIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIGZsYWcgaXMgdHJ1ZSwgdGhlIHJ1bmZpbGVzIHJvb3QgaXRzZWxmIGlzIGFsc28gYWRkZWQgdG8gdGhlIFBZVEhPTlBBVEgsIHNvIGBpbXBvcnQgbXlyZXBvbmFtZS5teXRvcGxldmVscGFja2FnZS5wYWNrYWdlLm1vZHVsZWAgaXMgdmFsaWQuIFRoZSBsYXR0ZXIgZm9ybSBpcyBsZXNzIGxpa2VseSB0byBleHBlcmllbmNlIGltcG9ydCBuYW1lIGNvbGxpc2lvbnMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0IMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAAraAgonZXhwZXJpbWVudGFsX2ZldGNoX2FsbF9jb3ZlcmFnZV9vdXRwdXRzEAEaY0lmIHRydWUsIHRoZW4gQmF6ZWwgZmV0Y2hlcyB0aGUgZW50aXJlIGNvdmVyYWdlIGRhdGEgZGlyZWN0b3J5IGZvciBlYWNoIHRlc3QgZHVyaW5nIGEgY292ZXJhZ2UgcnVuLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0IMRVhQRVJJTUVOVEFMSg1VTkNBVEVHT1JJWkVEUAAKrwMKImV4cGVyaW1lbnRhbF9keW5hbWljX2V4Y2x1ZGVfdG9vbHMQARq8AVdoZW4gc2V0LCB0YXJnZXRzIHRoYXQgYXJlIGJ1aWxkICJmb3IgdG9vbCIgYXJlIG5vdCBzdWJqZWN0IHRvIGR5bmFtaWMgZXhlY3V0aW9uLiBTdWNoIHRhcmdldHMgYXJlIGV4dHJlbWVseSB1bmxpa2VseSB0byBiZSBidWlsdCBpbmNyZW1lbnRhbGx5IGFuZCB0aHVzIG5vdCB3b3J0aCBzcGVuZGluZyBsb2NhbCBjeWNsZXMgb24uIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOglFWEVDVVRJT046I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TShJFWEVDVVRJT05fU1RSQVRFR1lQAAqtAgoNc3RhcnRfZW5kX2xpYhABGkdVc2UgdGhlIC0tc3RhcnQtbGliLy0tZW5kLWxpYiBsZCBvcHRpb25zIGlmIHN1cHBvcnRlZCBieSB0aGUgdG9vbGNoYWluLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6DkNIQU5HRVNfSU5QVVRTOg9BRkZFQ1RTX09VVFBVVFNCBkhJRERFTkoMVU5ET0NVTUVOVEVEUAAK/wIKKmV4cGVyaW1lbnRhbF9lbmFibGVfYW5kcm9pZF9taWdyYXRpb25fYXBpcxABGlRJZiBzZXQgdG8gdHJ1ZSwgZW5hYmxlcyB0aGUgQVBJcyByZXF1aXJlZCB0byBzdXBwb3J0IHRoZSBBbmRyb2lkIFN0YXJsYXJrIG1pZ3JhdGlvbi4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTShJTVEFSTEFSS19TRU1BTlRJQ1NQAAq3AgodcHl0aG9uX25hdGl2ZV9ydWxlc19hbGxvd2xpc3QQABpmQW4gYWxsb3dsaXN0IChwYWNrYWdlX2dyb3VwIHRhcmdldCkgdG8gdXNlIHdoZW4gZW5mb3JjaW5nIC0taW5jb21wYXRpYmxlX3B5dGhvbl9kaXNhbGxvd19uYXRpdmVfcnVsZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0oQSU5QVVRfU1RSSUNUTkVTU1ABCqwCCg9wbGF0Zm9ybV9zdWZmaXgQABo+U3BlY2lmaWVzIGEgc3VmZml4IHRvIGJlIGFkZGVkIHRvIHRoZSBjb25maWd1cmF0aW9uIGRpcmVjdG9yeS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFOg9BRkZFQ1RTX09VVFBVVFM6FExPQURJTkdfQU5EX0FOQUxZU0lTShFPVVRQVVRfUEFSQU1FVEVSU1ABCukBCgxmb3JjZV9weXRob24QABocTm8tb3AsIHdpbGwgYmUgcmVtb3ZlZCBzb29uLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6D0FGRkVDVFNfT1VUUFVUU0oMVU5ET0NVTUVOVEVEUAEKmgMKHGV4cGVyaW1lbnRhbF93aW5kb3dzX3dhdGNoZnMQARqOAUlmIHRydWUsIGV4cGVyaW1lbnRhbCBXaW5kb3dzIHN1cHBvcnQgZm9yIC0td2F0Y2hmcyBpcyBlbmFibGVkLiBPdGhlcndpc2UgLS13YXRjaGZzaXMgYSBub24tb3Agb24gV2luZG93cy4gTWFrZSBzdXJlIHRvIGFsc28gZW5hYmxlIC0td2F0Y2hmcy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAArsAQolaW5jb21wYXRpYmxlX2xvYWRfamF2YV9ydWxlc19mcm9tX2J6bBABGhFEZXByZWNhdGVkIG5vLW9wLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoFTk9fT1BCE0lOQ09NUEFUSUJMRV9DSEFOR0VKDFVORE9DVU1FTlRFRFAACr4BChR2ZXJib3NlX3Rlc3Rfc3VtbWFyeRABGl9JZiB0cnVlLCBwcmludCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uICh0aW1pbmcsIG51bWJlciBvZiBmYWlsZWQgcnVucywgZXRjKSBpbiB0aGUgdGVzdCBzdW1tYXJ5LiIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKB0xPR0dJTkdQAAr/AwowaW5jb21wYXRpYmxlX3RvcF9sZXZlbF9hc3BlY3RzX3JlcXVpcmVfcHJvdmlkZXJzEAEauAFJZiBzZXQgdG8gdHJ1ZSwgdGhlIHRvcCBsZXZlbCBhc3BlY3Qgd2lsbCBob25vciBpdHMgcmVxdWlyZWQgcHJvdmlkZXJzIGFuZCBvbmx5IHJ1biBvbiB0b3AgbGV2ZWwgdGFyZ2V0cyB3aG9zZSBydWxlcycgYWR2ZXJ0aXNlZCBwcm92aWRlcnMgc2F0aXNmeSB0aGUgcmVxdWlyZWQgcHJvdmlkZXJzIG9mIHRoZSBhc3BlY3QuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoSU1RBUkxBUktfU0VNQU5USUNTUAAK4AEKE2luY2x1ZGVfcGFyYW1fZmlsZXMQARqiAUluY2x1ZGUgdGhlIGNvbnRlbnQgb2YgdGhlIHBhcmFtIGZpbGVzIHVzZWQgaW4gdGhlIGNvbW1hbmQgKHBvdGVudGlhbGx5IGxhcmdlKS4gTm90ZTogRW5hYmxpbmcgdGhpcyBmbGFnIHdpbGwgYXV0b21hdGljYWxseSBlbmFibGUgdGhlIC0taW5jbHVkZV9jb21tYW5kbGluZSBmbGFnLiIGYXF1ZXJ5MAA6D1RFUk1JTkFMX09VVFBVVEoFUVVFUllQAArIBQosZXhwZXJpbWVudGFsX2FkZF9leGVjX2NvbnN0cmFpbnRzX3RvX3RhcmdldHMQABruA0xpc3Qgb2YgY29tbWEtc2VwYXJhdGVkIHJlZ3VsYXIgZXhwcmVzc2lvbnMsIGVhY2ggb3B0aW9uYWxseSBwcmVmaXhlZCBieSAtIChuZWdhdGl2ZSBleHByZXNzaW9uKSwgYXNzaWduZWQgKD0pIHRvIGEgbGlzdCBvZiBjb21tYS1zZXBhcmF0ZWQgY29uc3RyYWludCB2YWx1ZSB0YXJnZXRzLiBJZiBhIHRhcmdldCBtYXRjaGVzIG5vIG5lZ2F0aXZlIGV4cHJlc3Npb24gYW5kIGF0IGxlYXN0IG9uZSBwb3NpdGl2ZSBleHByZXNzaW9uIGl0cyB0b29sY2hhaW4gcmVzb2x1dGlvbiB3aWxsIGJlIHBlcmZvcm1lZCBhcyBpZiBpdCBoYWQgZGVjbGFyZWQgdGhlIGNvbnN0cmFpbnQgdmFsdWVzIGFzIGV4ZWN1dGlvbiBjb25zdHJhaW50cy4gRXhhbXBsZTogLy9kZW1vLC10ZXN0PUBwbGF0Zm9ybXMvL2NwdXM6eDg2XzY0IHdpbGwgYWRkICd4ODZfNjQnIHRvIGFueSB0YXJnZXQgdW5kZXIgLy9kZW1vIGV4Y2VwdCBmb3IgdGhvc2Ugd2hvc2UgbmFtZSBjb250YWlucyAndGVzdCcuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOhRMT0FESU5HX0FORF9BTkFMWVNJU0oJVE9PTENIQUlOUAEK3gMKCHJlZ2lzdHJ5EAAa5gFTcGVjaWZpZXMgdGhlIHJlZ2lzdHJpZXMgdG8gdXNlIHRvIGxvY2F0ZSBCYXplbCBtb2R1bGUgZGVwZW5kZW5jaWVzLiBUaGUgb3JkZXIgaXMgaW1wb3J0YW50OiBtb2R1bGVzIHdpbGwgYmUgbG9va2VkIHVwIGluIGVhcmxpZXIgcmVnaXN0cmllcyBmaXJzdCwgYW5kIG9ubHkgZmFsbCBiYWNrIHRvIGxhdGVyIHJlZ2lzdHJpZXMgd2hlbiB0aGV5J3JlIG1pc3NpbmcgZnJvbSB0aGUgZWFybGllciBvbmVzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wAToOQ0hBTkdFU19JTlBVVFNKBkJaTE1PRFABCqgBChRjb25uZWN0X3RpbWVvdXRfc2VjcxAAGk1UaGUgYW1vdW50IG9mIHRpbWUgdGhlIGNsaWVudCB3YWl0cyBmb3IgZWFjaCBhdHRlbXB0IHRvIGNvbm5lY3QgdG8gdGhlIHNlcnZlciIHc3RhcnR1cDAAOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OShRCQVpFTF9DTElFTlRfT1BUSU9OU1ABCrQDChZ0ZXN0X3NoYXJkaW5nX3N0cmF0ZWd5EAAa+QFTcGVjaWZ5IHN0cmF0ZWd5IGZvciB0ZXN0IHNoYXJkaW5nOiAnZXhwbGljaXQnIHRvIG9ubHkgdXNlIHNoYXJkaW5nIGlmIHRoZSAnc2hhcmRfY291bnQnIEJVSUxEIGF0dHJpYnV0ZSBpcyBwcmVzZW50LiAnZGlzYWJsZWQnIHRvIG5ldmVyIHVzZSB0ZXN0IHNoYXJkaW5nLiAnZm9yY2VkPWsnIHRvIGVuZm9yY2UgJ2snIHNoYXJkcyBmb3IgdGVzdGluZyByZWdhcmRsZXNzIG9mIHRoZSAnc2hhcmRfY291bnQnIEJVSUxEIGF0dHJpYnV0ZS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQqyAgonaW50ZXJuYWxfcGVyc2lzdGVudF9hbmRyb2lkX2RleF9kZXN1Z2FyEAEaQVRyYWNraW5nIGZsYWcgZm9yIHdoZW4gZGV4aW5nIGFuZCBkZXN1Z2FyaW5nIHdvcmtlcnMgYXJlIGVuYWJsZWQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OUzoJRVhFQ1VUSU9OSgxVTkRPQ1VNRU5URURQAArmAgoOZmRvX2luc3RydW1lbnQQABqnAUdlbmVyYXRlIGJpbmFyaWVzIHdpdGggRkRPIGluc3RydW1lbnRhdGlvbi4gV2l0aCBDbGFuZy9MTFZNIGNvbXBpbGVyLCBpdCBhbHNvIGFjY2VwdHMgdGhlIGRpcmVjdG9yeSBuYW1lIHVuZGVyIHdoaWNoIHRoZSByYXcgcHJvZmlsZSBmaWxlKHMpIHdpbGwgYmUgZHVtcGVkIGF0IHJ1bnRpbWUuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAEKqAIKImV4cGVyaW1lbnRhbF91c2VfdmFsaWRhdGlvbl9hc3BlY3QQARpMV2hldGhlciB0byBydW4gdmFsaWRhdGlvbiBhY3Rpb25zIHVzaW5nIGFzcGVjdCAoZm9yIHBhcmFsbGVsaXNtIHdpdGggdGVzdHMpLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OOg9BRkZFQ1RTX09VVFBVVFNKEE9VVFBVVF9TRUxFQ1RJT05QAAqlAQoabG9jYWxfc3RhcnR1cF90aW1lb3V0X3NlY3MQABpEVGhlIG1heGltdW0gYW1vdW50IG9mIHRpbWUgdGhlIGNsaWVudCB3YWl0cyB0byBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIiB3N0YXJ0dXAwADocQkFaRUxfSU5URVJOQUxfQ09ORklHVVJBVElPTkoUQkFaRUxfQ0xJRU5UX09QVElPTlNQAQqQAQoTaW5jbHVkZV9jb21tYW5kbGluZRABGlNJbmNsdWRlcyB0aGUgY29udGVudCBvZiB0aGUgYWN0aW9uIGNvbW1hbmQgbGluZXMgaW4gdGhlIG91dHB1dCAocG90ZW50aWFsbHkgbGFyZ2UpLiIGYXF1ZXJ5MAA6D1RFUk1JTkFMX09VVFBVVEoFUVVFUllQAApSCgxydWxlX2NsYXNzZXMQARoSRHVtcCBydWxlIGNsYXNzZXMuIgRkdW1wMAA6EEJBWkVMX01PTklUT1JJTkdKEE9VVFBVVF9TRUxFQ1RJT05QAAqjBQouaW5jb21wYXRpYmxlX2ZpeF9wYWNrYWdlX2dyb3VwX3JlcG9yb290X3N5bnRheBABGt4CSW4gcGFja2FnZV9ncm91cCdzIGBwYWNrYWdlc2AgYXR0cmlidXRlLCBjaGFuZ2VzIHRoZSBtZWFuaW5nIG9mIHRoZSB2YWx1ZSAiLy8uLi4iIHRvIHJlZmVyIHRvIGFsbCBwYWNrYWdlcyBpbiB0aGUgY3VycmVudCByZXBvc2l0b3J5IGluc3RlYWQgb2YgYWxsIHBhY2thZ2VzIGluIGFueSByZXBvc2l0b3J5LiBZb3UgY2FuIHVzZSB0aGUgc3BlY2lhbCB2YWx1ZSAicHVibGljIiBpbiBwbGFjZSBvZiAiLy8uLi4iIHRvIG9idGFpbiB0aGUgb2xkIGJlaGF2aW9yLiBUaGlzIGZsYWcgcmVxdWlyZXMgdGhhdCAtLWluY29tcGF0aWJsZV9wYWNrYWdlX2dyb3VwX2hhc19wdWJsaWNfc3ludGF4IGFsc28gYmUgZW5hYmxlZC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShJTVEFSTEFSS19TRU1BTlRJQ1NQAArMAQoMY2xpZW50X2RlYnVnEAEadElmIHRydWUsIGxvZyBkZWJ1ZyBpbmZvcm1hdGlvbiBmcm9tIHRoZSBjbGllbnQgdG8gc3RkZXJyLiBDaGFuZ2luZyB0aGlzIG9wdGlvbiB3aWxsIG5vdCBjYXVzZSB0aGUgc2VydmVyIHRvIHJlc3RhcnQuIgdzdGFydHVwMAA6D0FGRkVDVFNfT1VUUFVUUzoQQkFaRUxfTU9OSVRPUklOR0oUQkFaRUxfQ0xJRU5UX09QVElPTlNQAAqLAgoIb2JqY2NvcHQQABpOQWRkaXRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gZ2NjIHdoZW4gY29tcGlsaW5nIE9iamVjdGl2ZS1DL0MrKyBzb3VyY2UgZmlsZXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOhRBQ1RJT05fQ09NTUFORF9MSU5FU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQr7AQoHbGlua29wdBAAGi5BZGRpdGlvbmFsIG9wdGlvbiB0byBwYXNzIHRvIGdjYyB3aGVuIGxpbmtpbmcuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOhRBQ1RJT05fQ09NTUFORF9MSU5FUzoPQUZGRUNUU19PVVRQVVRTShFPVVRQVVRfUEFSQU1FVEVSU1ABCskCChhzaG93X3Byb2dyZXNzX3JhdGVfbGltaXQQABpCTWluaW11bSBudW1iZXIgb2Ygc2Vjb25kcyBiZXR3ZWVuIHByb2dyZXNzIG1lc3NhZ2VzIGluIHRoZSBvdXRwdXQuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEKkAIKImludGVybmFsX3N0YXJsYXJrX2ZsYWdfdGVzdF9jYW5hcnkQARoAIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgxVTkRPQ1VNRU5URURQAAqaAwoTY2Fub25pY2FsaXplX3BvbGljeRABGrQCT3V0cHV0IHRoZSBjYW5vbmljYWwgcG9saWN5LCBhZnRlciBleHBhbnNpb24gYW5kIGZpbHRlcmluZy4gVG8ga2VlcCB0aGUgb3V0cHV0IGNsZWFuLCB0aGUgY2Fub25pY2FsaXplZCBjb21tYW5kIGFyZ3VtZW50cyB3aWxsIE5PVCBiZSBzaG93biB3aGVuIHRoaXMgb3B0aW9uIGlzIHNldCB0byB0cnVlLiBOb3RlIHRoYXQgdGhlIGNvbW1hbmQgc3BlY2lmaWVkIGJ5IC0tZm9yX2NvbW1hbmQgYWZmZWN0cyB0aGUgZmlsdGVyZWQgcG9saWN5LCBhbmQgaWYgbm9uZSBpcyBzcGVjaWZpZWQsIHRoZSBkZWZhdWx0IGNvbW1hbmQgaXMgJ2J1aWxkJy4iEmNhbm9uaWNhbGl6ZS1mbGFnczAAOg9BRkZFQ1RTX09VVFBVVFM6D1RFUk1JTkFMX09VVFBVVEoQT1VUUFVUX1NFTEVDVElPTlAACpkDCiRleHBlcmltZW50YWxfb25lX3ZlcnNpb25fZW5mb3JjZW1lbnQQABrAAVdoZW4gZW5hYmxlZCwgZW5mb3JjZSB0aGF0IGEgamF2YV9iaW5hcnkgcnVsZSBjYW4ndCBjb250YWluIG1vcmUgdGhhbiBvbmUgdmVyc2lvbiBvZiB0aGUgc2FtZSBjbGFzcyBmaWxlIG9uIHRoZSBjbGFzc3BhdGguIFRoaXMgZW5mb3JjZW1lbnQgY2FuIGJyZWFrIHRoZSBidWlsZCwgb3IgY2FuIGp1c3QgcmVzdWx0IGluIHdhcm5pbmdzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVNKEElOUFVUX1NUUklDVE5FU1NQAQrBAgotZXhwZXJpbWVudGFsX2FuZHJvaWRfcmVzb3VyY2VfcGF0aF9zaG9ydGVuaW5nEAEaRUVuYWJsZXMgc2hvcnRlbmluZyBvZiByZXNvdXJjZSBmaWxlIHBhdGhzIHdpdGhpbiBhbmRyb2lkX2JpbmFyeSBBUEtzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0IMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAArUAwoYcHJvZ3Jlc3NfcmVwb3J0X2ludGVydmFsEAAalQJUaGUgbnVtYmVyIG9mIHNlY29uZHMgdG8gd2FpdCBiZXR3ZWVuIHJlcG9ydHMgb24gc3RpbGwgcnVubmluZyBqb2JzLiBUaGUgZGVmYXVsdCB2YWx1ZSAwIG1lYW5zIHRoZSBmaXJzdCByZXBvcnQgd2lsbCBiZSBwcmludGVkIGFmdGVyIDEwIHNlY29uZHMsIHRoZW4gMzAgc2Vjb25kcyBhbmQgYWZ0ZXIgdGhhdCBwcm9ncmVzcyBpcyByZXBvcnRlZCBvbmNlIGV2ZXJ5IG1pbnV0ZS4gV2hlbiAtLWN1cnNlcyBpcyBlbmFibGVkLCBwcm9ncmVzcyBpcyByZXBvcnRlZCBldmVyeSBzZWNvbmQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKB0xPR0dJTkdQAQr+BAoTYmVzX3N5c3RlbV9rZXl3b3JkcxAAGvkCU3BlY2lmaWVzIGEgbGlzdCBvZiBub3RpZmljYXRpb24ga2V5d29yZHMgdG8gYmUgaW5jbHVkZWQgZGlyZWN0bHksIHdpdGhvdXQgdGhlICJ1c2VyX2tleXdvcmQ9IiBwcmVmaXggaW5jbHVkZWQgZm9yIGtleXdvcmRzIHN1cHBsaWVkIHZpYSAtLWJlc19rZXl3b3Jkcy4gSW50ZW5kZWQgZm9yIEJ1aWxkIHNlcnZpY2Ugb3BlcmF0b3JzIHRoYXQgc2V0IC0tYmVzX2xpZmVjeWNsZV9ldmVudHM9ZmFsc2UgYW5kIGluY2x1ZGUga2V5d29yZHMgd2hlbiBjYWxsaW5nIFB1Ymxpc2hMaWZlY3ljbGVFdmVudC4gQnVpbGQgc2VydmljZSBvcGVyYXRvcnMgdXNpbmcgdGhpcyBmbGFnIHNob3VsZCBwcmV2ZW50IHVzZXJzIGZyb20gb3ZlcnJpZGluZyB0aGUgZmxhZyB2YWx1ZS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAE6D0FGRkVDVFNfT1VUUFVUU0oHTE9HR0lOR1ABCpMCCjJpbmNvbXBhdGlibGVfbWFrZV90aGlubHRvX2NvbW1hbmRfbGluZXNfc3RhbmRhbG9uZRABGi5UaGlzIGZsYWcgaXMgYSBub29wIGFuZCBzY2hlZHVsZWQgZm9yIHJlbW92YWwuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgVOT19PUEITSU5DT01QQVRJQkxFX0NIQU5HRUoJVE9PTENIQUlOUAAK/QIKK2V4cGVyaW1lbnRhbF9leGVjdXRpb25fZ3JhcGhfbG9nX3F1ZXVlX3NpemUQABquAVRoZSBzaXplIG9mIHRoZSBhY3Rpb24gZHVtcCBxdWV1ZSwgd2hlcmUgYWN0aW9ucyBhcmUga2VwdCBiZWZvcmUgd3JpdGluZy4gTGFyZ2VyIHNpemVzIHdpbGwgaW5jcmVhc2UgcGVhayBtZW1vcnkgdXNhZ2UsIGJ1dCBzaG91bGQgZGVjcmVhc2UgcXVldWUgYmxvY2tpbmcuIC0xIG1lYW5zIHVuYm91bmRlZCIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoMVU5ET0NVTUVOVEVEUAEK2gIKDWltcGxpY2l0X2RlcHMQARqOAklmIGVuYWJsZWQsIGltcGxpY2l0IGRlcGVuZGVuY2llcyB3aWxsIGJlIGluY2x1ZGVkIGluIHRoZSBkZXBlbmRlbmN5IGdyYXBoIG92ZXIgd2hpY2ggdGhlIHF1ZXJ5IG9wZXJhdGVzLiBBbiBpbXBsaWNpdCBkZXBlbmRlbmN5IGlzIG9uZSB0aGF0IGlzIG5vdCBleHBsaWNpdGx5IHNwZWNpZmllZCBpbiB0aGUgQlVJTEQgZmlsZSBidXQgYWRkZWQgYnkgYmF6ZWwuIEZvciBjcXVlcnksIHRoaXMgb3B0aW9uIGNvbnRyb2xzIGZpbHRlcmluZyByZXNvbHZlZCB0b29sY2hhaW5zLiIGYXF1ZXJ5IgZjcXVlcnkiBXF1ZXJ5MAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTSgVRVUVSWVAACpQDCiRleHBlcmltZW50YWxfY2FuY2VsX2NvbmN1cnJlbnRfdGVzdHMQARqfAUlmIHRydWUsIHRoZW4gQmxhemUgd2lsbCBjYW5jZWwgY29uY3VycmVudGx5IHJ1bm5pbmcgdGVzdHMgb24gdGhlIGZpcnN0IHN1Y2Nlc3NmdWwgcnVuLiBUaGlzIGlzIG9ubHkgdXNlZnVsIGluIGNvbWJpbmF0aW9uIHdpdGggLS1ydW5zX3Blcl90ZXN0X2RldGVjdHNfZmxha2VzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0IMRVhQRVJJTUVOVEFMSg1VTkNBVEVHT1JJWkVEUAAKtQIKHmRleG9wdHNfc3VwcG9ydGVkX2luX2RleG1lcmdlchAAGlFkeCBmbGFncyBzdXBwb3J0ZWQgaW4gdG9vbCB0aGF0IG1lcmdlcyBkZXggYXJjaGl2ZXMgaW50byBmaW5hbCBjbGFzc2VzLmRleCBmaWxlcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FEFDVElPTl9DT01NQU5EX0xJTkVTOhRMT0FESU5HX0FORF9BTkFMWVNJU0oMVU5ET0NVTUVOVEVEUAEKhAIKNGV4cGVyaW1lbnRhbF9hbGxvd19hbmRyb2lkX2xpYnJhcnlfZGVwc193aXRob3V0X3NyY3MQARotTm8tb3AuIEtlcHQgaGVyZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSgxVTkRPQ1VNRU5URURQAAqqAgojaW5jb21wYXRpYmxlX3VzZV9wbHVzX2luX3JlcG9fbmFtZXMQARoGTm8tb3AuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0oSU1RBUkxBUktfU0VNQU5USUNTUAAKxQMKFmtlZXBfc3RhdGVfYWZ0ZXJfYnVpbGQQARqlAUlmIGZhbHNlLCBCbGF6ZSB3aWxsIGRpc2NhcmQgdGhlIGlubWVtb3J5IHN0YXRlIGZyb20gdGhpcyBidWlsZCB3aGVuIHRoZSBidWlsZCBmaW5pc2hlcy4gU3Vic2VxdWVudCBidWlsZHMgd2lsbCBub3QgaGF2ZSBhbnkgaW5jcmVtZW50YWxpdHkgd2l0aCByZXNwZWN0IHRvIHRoaXMgb25lLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEVKF0JVSUxEX1RJTUVfT1BUSU1JWkFUSU9OUAAKkwUKEGRlbGV0ZWRfcGFja2FnZXMQABrMA0EgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgbmFtZXMgb2YgcGFja2FnZXMgd2hpY2ggdGhlIGJ1aWxkIHN5c3RlbSB3aWxsIGNvbnNpZGVyIG5vbi1leGlzdGVudCwgZXZlbiBpZiB0aGV5IGFyZSB2aXNpYmxlIHNvbWV3aGVyZSBvbiB0aGUgcGFja2FnZSBwYXRoLgpVc2UgdGhpcyBvcHRpb24gd2hlbiBkZWxldGluZyBhIHN1YnBhY2thZ2UgJ3gveScgb2YgYW4gZXhpc3RpbmcgcGFja2FnZSAneCcuICBGb3IgZXhhbXBsZSwgYWZ0ZXIgZGVsZXRpbmcgeC95L0JVSUxEIGluIHlvdXIgY2xpZW50LCB0aGUgYnVpbGQgc3lzdGVtIG1heSBjb21wbGFpbiBpZiBpdCBlbmNvdW50ZXJzIGEgbGFiZWwgJy8veDp5L3onIGlmIHRoYXQgaXMgc3RpbGwgcHJvdmlkZWQgYnkgYW5vdGhlciBwYWNrYWdlX3BhdGggZW50cnkuICBTcGVjaWZ5aW5nIC0tZGVsZXRlZF9wYWNrYWdlcyB4L3kgYXZvaWRzIHRoaXMgcHJvYmxlbS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIEc3luYyIEdGVzdCIGdmVuZG9yMAE6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAQrcBgo1c2t5ZnJhbWVfaGlnaF93YXRlcl9tYXJrX2Z1bGxfZ2NfZHJvcHNfcGVyX2ludm9jYXRpb24QABqRBEZsYWcgZm9yIGFkdmFuY2VkIGNvbmZpZ3VyYXRpb24gb2YgQmF6ZWwncyBpbnRlcm5hbCBTa3lmcmFtZSBlbmdpbmUuIElmIEJhemVsIGRldGVjdHMgaXRzIHJldGFpbmVkIGhlYXAgcGVyY2VudGFnZSB1c2FnZSBleGNlZWRzIHRoZSB0aHJlc2hvbGQgc2V0IGJ5IC0tc2t5ZnJhbWVfaGlnaF93YXRlcl9tYXJrX3RocmVzaG9sZCwgd2hlbiBhIGZ1bGwgR0MgZXZlbnQgb2NjdXJzLCBpdCB3aWxsIGRyb3AgdW5uZWNlc3NhcnkgdGVtcG9yYXJ5IFNreWZyYW1lIHN0YXRlLCB1cCB0byB0aGlzIG1hbnkgdGltZXMgcGVyIGludm9jYXRpb24uIERlZmF1bHRzIHRvIDEwLiBaZXJvIG1lYW5zIHRoYXQgZnVsbCBHQyBldmVudHMgd2lsbCBuZXZlciB0cmlnZ2VyIGRyb3BzLiBJZiB0aGUgbGltaXQgaXMgcmVhY2hlZCwgU2t5ZnJhbWUgc3RhdGUgd2lsbCBubyBsb25nZXIgYmUgZHJvcHBlZCB3aGVuIGEgZnVsbCBHQyBldmVudCBvY2N1cnMgYW5kIHRoYXQgcmV0YWluZWQgaGVhcCBwZXJjZW50YWdlIHRocmVzaG9sZCBpcyBleGNlZWRlZC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TShdCVUlMRF9USU1FX09QVElNSVpBVElPTlABCq0CCg9zdHJpY3RfZmlsZXNldHMQARpXSWYgdGhpcyBvcHRpb24gaXMgZW5hYmxlZCwgZmlsZXNldHMgY3Jvc3NpbmcgcGFja2FnZSBib3VuZGFyaWVzIGFyZSByZXBvcnRlZCBhcyBlcnJvcnMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRCVUlMRF9GSUxFX1NFTUFOVElDUzoRRUFHRVJORVNTX1RPX0VYSVRKEElOUFVUX1NUUklDVE5FU1NQAAqKAgoiZXhwZXJpbWVudGFsX3JlbW90ZV9hbmFseXNpc19jYWNoZRAAGjBUaGUgVVJMIGZvciB0aGUgcmVtb3RlIGFuYWx5c2lzIGNhY2hpbmcgYmFja2VuZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05KDFVORE9DVU1FTlRFRFABCuMDChB0ZXN0X3RhZ19maWx0ZXJzEAAargJTcGVjaWZpZXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiB0ZXN0IHRhZ3MuIEVhY2ggdGFnIGNhbiBiZSBvcHRpb25hbGx5IHByZWNlZGVkIHdpdGggJy0nIHRvIHNwZWNpZnkgZXhjbHVkZWQgdGFncy4gT25seSB0aG9zZSB0ZXN0IHRhcmdldHMgd2lsbCBiZSBmb3VuZCB0aGF0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGluY2x1ZGVkIHRhZyBhbmQgZG8gbm90IGNvbnRhaW4gYW55IGV4Y2x1ZGVkIHRhZ3MuIFRoaXMgb3B0aW9uIGFmZmVjdHMgLS1idWlsZF90ZXN0c19vbmx5IGJlaGF2aW9yIGFuZCB0aGUgdGVzdCBjb21tYW5kLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCv4DChB1aV9ldmVudF9maWx0ZXJzEAAa/AFTcGVjaWZpZXMgd2hpY2ggZXZlbnRzIHRvIHNob3cgaW4gdGhlIFVJLiBJdCBpcyBwb3NzaWJsZSB0byBhZGQgb3IgcmVtb3ZlIGV2ZW50cyB0byB0aGUgZGVmYXVsdCBvbmVzIHVzaW5nIGxlYWRpbmcgKy8tLCBvciBvdmVycmlkZSB0aGUgZGVmYXVsdCBzZXQgY29tcGxldGVseSB3aXRoIGRpcmVjdCBhc3NpZ25tZW50LiBUaGUgc2V0IG9mIHN1cHBvcnRlZCBldmVudCBraW5kcyBpbmNsdWRlIElORk8sIERFQlVHLCBFUlJPUiBhbmQgbW9yZS4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAE6D1RFUk1JTkFMX09VVFBVVEoHTE9HR0lOR1ABCvECCi9leHBlcmltZW50YWxfcmVzb2x2ZWRfZmlsZV9pbnN0ZWFkX29mX3dvcmtzcGFjZRAAGktJZiBub24tZW1wdHkgcmVhZCB0aGUgc3BlY2lmaWVkIHJlc29sdmVkIGZpbGUgaW5zdGVhZCBvZiB0aGUgV09SS1NQQUNFIGZpbGUiD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6DkNIQU5HRVNfSU5QVVRTSg5HRU5FUklDX0lOUFVUU1ABCpICChBjaGVja192aXNpYmlsaXR5EAEaTklmIGRpc2FibGVkLCB2aXNpYmlsaXR5IGVycm9ycyBpbiB0YXJnZXQgZGVwZW5kZW5jaWVzIGFyZSBkZW1vdGVkIHRvIHdhcm5pbmdzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQlVJTERfRklMRV9TRU1BTlRJQ1NKEElOUFVUX1NUUklDVE5FU1NQAAqTAwoFZW1hY3MQARqfAUEgc3lzdGVtLWdlbmVyYXRlZCBwYXJhbWV0ZXIgd2hpY2ggaXMgdHJ1ZSBpZmYgRU1BQ1M9dCBvciBJTlNJREVfRU1BQ1MgaXMgc2V0IGluIHRoZSBlbnZpcm9ubWVudCBvZiB0aGUgY2xpZW50LiAgVGhpcyBvcHRpb24gY29udHJvbHMgY2VydGFpbiBkaXNwbGF5IGZlYXR1cmVzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoMVU5ET0NVTUVOVEVEUAAKjAIKHGRpc2FsbG93X3N0cmljdF9kZXBzX2Zvcl9qcGwQARotTm8tb3AsIGtlcHQgb25seSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRCVUlMRF9GSUxFX1NFTUFOVElDUzoRRUFHRVJORVNTX1RPX0VYSVRKDFVORE9DVU1FTlRFRFAACqICCh9leHBlcmltZW50YWxfc2t5Zm9jdXNfZHVtcF9rZXlzEAAaXUZvciBkZWJ1Z2dpbmcgU2t5Zm9jdXMuIER1bXAgdGhlIGZvY3VzZWQgU2t5S2V5cyAocm9vdHMsIGxlYWZzLCBmb2N1c2VkIGRlcHMsIGZvY3VzZWQgcmRlcHMpLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPVEVSTUlOQUxfT1VUUFVUSgdMT0dHSU5HUAEKwAIKDW1heF9pZGxlX3NlY3MQABrdAVRoZSBudW1iZXIgb2Ygc2Vjb25kcyB0aGUgYnVpbGQgc2VydmVyIHdpbGwgd2FpdCBpZGxpbmcgYmVmb3JlIHNodXR0aW5nIGRvd24uIFplcm8gbWVhbnMgdGhhdCB0aGUgc2VydmVyIHdpbGwgbmV2ZXIgc2h1dGRvd24uIFRoaXMgaXMgb25seSByZWFkIG9uIHNlcnZlci1zdGFydHVwLCBjaGFuZ2luZyB0aGlzIG9wdGlvbiB3aWxsIG5vdCBjYXVzZSB0aGUgc2VydmVyIHRvIHJlc3RhcnQuIgdzdGFydHVwMAA6EUVBR0VSTkVTU19UT19FWElUOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUoUQkFaRUxfQ0xJRU5UX09QVElPTlNQAQrlAgobZXhwZXJpbWVudGFsX2J1aWx0aW5zX2R1bW15EAEaQUVuYWJsZXMgYW4gaW50ZXJuYWwgZHVtbXkgc3ltYm9sIHVzZWQgdG8gdGVzdCBidWlsdGlucyBpbmplY3Rpb24uIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRCVUlMRF9GSUxFX1NFTUFOVElDU0IMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAAqKAgoHbG9nZ2luZxAAGhJUaGUgbG9nZ2luZyBsZXZlbC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6D0FGRkVDVFNfT1VUUFVUU0oHTE9HR0lOR1ABCpwBCgVmb3JjZRABGm5JZ25vcmUgZXhpc3RpbmcgcmVwb3NpdG9yeSBpZiBhbnkgYW5kIGZvcmNlIGZldGNoIHRoZSByZXBvc2l0b3J5IGFnYWluLiBPbmx5IHdvcmtzIHdoZW4gLS1lbmFibGVfYnpsbW9kIGlzIG9uLiIFZmV0Y2gwADoOQ0hBTkdFU19JTlBVVFNKBkJaTE1PRFAACtsCChViZXNfb3V0ZXJyX2NodW5rX3NpemUQABpVU3BlY2lmaWVzIHRoZSBtYXhpbWFsIHNpemUgb2Ygc3Rkb3V0IG9yIHN0ZGVyciB0byBiZSBzZW50IHRvIEJFUCBpbiBhIHNpbmdsZSBtZXNzYWdlLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAEK0AIKNmV4cGVyaW1lbnRhbF9wcm90b19kZXNjcmlwdG9yX3NldHNfaW5jbHVkZV9zb3VyY2VfaW5mbxABGkdSdW4gZXh0cmEgYWN0aW9ucyBmb3IgYWx0ZXJuYXRpdmUgSmF2YSBhcGkgdmVyc2lvbnMgaW4gYSBwcm90b19saWJyYXJ5LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0IMRVhQRVJJTUVOVEFMShBPVVRQVVRfU0VMRUNUSU9OUAAK0wUKB2JhemVscmMQABqSBVRoZSBsb2NhdGlvbiBvZiB0aGUgdXNlciAuYmF6ZWxyYyBmaWxlIGNvbnRhaW5pbmcgZGVmYXVsdCB2YWx1ZXMgb2YgQmF6ZWwgb3B0aW9ucy4gL2Rldi9udWxsIGluZGljYXRlcyB0aGF0IGFsbCBmdXJ0aGVyIGAtLWJhemVscmNgcyB3aWxsIGJlIGlnbm9yZWQsIHdoaWNoIGlzIHVzZWZ1bCB0byBkaXNhYmxlIHRoZSBzZWFyY2ggZm9yIGEgdXNlciByYyBmaWxlLCBlLmcuIGluIHJlbGVhc2UgYnVpbGRzLgpUaGlzIG9wdGlvbiBjYW4gYWxzbyBiZSBzcGVjaWZpZWQgbXVsdGlwbGUgdGltZXMuCkUuZy4gd2l0aCBgLS1iYXplbHJjPXgucmMgLS1iYXplbHJjPXkucmMgLS1iYXplbHJjPS9kZXYvbnVsbCAtLWJhemVscmM9ei5yY2AsCiAgMSkgeC5yYyBhbmQgeS5yYyBhcmUgcmVhZC4KICAyKSB6LnJjIGlzIGlnbm9yZWQgZHVlIHRvIHRoZSBwcmlvciAvZGV2L251bGwuCklmIHVuc3BlY2lmaWVkLCBCYXplbCB1c2VzIHRoZSBmaXJzdCAuYmF6ZWxyYyBmaWxlIGl0IGZpbmRzIGluIHRoZSBmb2xsb3dpbmcgdHdvIGxvY2F0aW9uczogdGhlIHdvcmtzcGFjZSBkaXJlY3RvcnksIHRoZW4gdGhlIHVzZXIncyBob21lIGRpcmVjdG9yeS4KTm90ZTogY29tbWFuZCBsaW5lIG9wdGlvbnMgd2lsbCBhbHdheXMgc3VwZXJzZWRlIGFueSBvcHRpb24gaW4gYmF6ZWxyYy4iB3N0YXJ0dXAwAToOQ0hBTkdFU19JTlBVVFNKFEJBWkVMX0NMSUVOVF9PUFRJT05TUAEK6AMKF3RyaW1fdGVzdF9jb25maWd1cmF0aW9uEAEa/AFXaGVuIGVuYWJsZWQsIHRlc3QtcmVsYXRlZCBvcHRpb25zIHdpbGwgYmUgY2xlYXJlZCBiZWxvdyB0aGUgdG9wIGxldmVsIG9mIHRoZSBidWlsZC4gV2hlbiB0aGlzIGZsYWcgaXMgYWN0aXZlLCB0ZXN0cyBjYW5ub3QgYmUgYnVpbHQgYXMgZGVwZW5kZW5jaWVzIG9mIG5vbi10ZXN0IHJ1bGVzLCBidXQgY2hhbmdlcyB0byB0ZXN0LXJlbGF0ZWQgb3B0aW9ucyB3aWxsIG5vdCBjYXVzZSBub24tdGVzdCBydWxlcyB0byBiZSByZS1hbmFseXplZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURUoXQlVJTERfVElNRV9PUFRJTUlaQVRJT05QAAqpAgofZXhwZXJpbWVudGFsX3NhdmVfZmVhdHVyZV9zdGF0ZRABGk1TYXZlIHRoZSBzdGF0ZSBvZiBlbmFibGVkIGFuZCByZXF1ZXN0ZWQgZmVhdXRyZXMgYXMgYW4gb3V0cHV0IG9mIGNvbXBpbGF0aW9uLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTQgxFWFBFUklNRU5UQUxKEE9VVFBVVF9TRUxFQ1RJT05QAAqvAwosZXhwZXJpbWVudGFsX2NjX3NreWxhcmtfYXBpX2VuYWJsZWRfcGFja2FnZXMQABp6UGFzc2VzIGxpc3Qgb2YgcGFja2FnZXMgdGhhdCBjYW4gdXNlIHRoZSBDKysgU3RhcmxhcmsgQVBJLiBEb24ndCBlbmFibGUgdGhpcyBmbGFnIHlldCwgd2Ugd2lsbCBiZSBtYWtpbmcgYnJlYWtpbmcgY2hhbmdlcy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFABCtECChB0dm9zX3Nka192ZXJzaW9uEAAakAFTcGVjaWZpZXMgdGhlIHZlcnNpb24gb2YgdGhlIHR2T1MgU0RLIHRvIHVzZSB0byBidWlsZCB0dk9TIGFwcGxpY2F0aW9ucy4gSWYgdW5zcGVjaWZpZWQsIHVzZXMgdGhlIGRlZmF1bHQgdHZPUyBTREsgdmVyc2lvbiBmcm9tICd4Y29kZV92ZXJzaW9uJy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFSglUT09MQ0hBSU5QAQqCAgoOd29ya2VyX3ZlcmJvc2UQARpLSWYgZW5hYmxlZCwgcHJpbnRzIHZlcmJvc2UgbWVzc2FnZXMgd2hlbiB3b3JrZXJzIGFyZSBzdGFydGVkLCBzaHV0ZG93biwgLi4uIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOShJFWEVDVVRJT05fU1RSQVRFR1lQAAqaAgosaW5jb21wYXRpYmxlX2Rpc2FsbG93X2phdmFfaW1wb3J0X2VtcHR5X2phcnMQARo2V2hlbiBlbmFibGVkLCBlbXB0eSBqYXZhX2ltcG9ydC5qYXJzIGlzIG5vdCBzdXBwb3J0ZWQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOQhNJTkNPTVBBVElCTEVfQ0hBTkdFSgxVTkRPQ1VNRU5URURQAAqBAgohZXhwZXJpbWVudGFsX2ltcG9ydF9kZXBzX2NoZWNraW5nEAAaLE5vLW9wLCBrZXB0IG9ubHkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0oQSU5QVVRfU1RSSUNUTkVTU1ABCsMCChdvYmpjX2RlYnVnX3dpdGhfR0xJQkNYWBABGndJZiBzZXQsIGFuZCBjb21waWxhdGlvbiBtb2RlIGlzIHNldCB0byAnZGJnJywgZGVmaW5lIEdMSUJDWFhfREVCVUcsICBHTElCQ1hYX0RFQlVHX1BFREFOVElDIGFuZCBHTElCQ1BQX0NPTkNFUFRfQ0hFQ0tTLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQUNUSU9OX0NPTU1BTkRfTElORVNKEU9VVFBVVF9QQVJBTUVURVJTUAAK5AIKKGV4cGVyaW1lbnRhbF9za3lmb2N1c19kdW1wX3Bvc3RfZ2Nfc3RhdHMQARqVAUZvciBkZWJ1Z2dpbmcgU2t5Zm9jdXMuIElmIGVuYWJsZWQsIHRyaWdnZXIgbWFudWFsIEdDIGJlZm9yZS9hZnRlciBmb2N1c2luZyB0byByZXBvcnQgaGVhcCBzaXplcyByZWR1Y3Rpb25zLiBUaGlzIHdpbGwgaW5jcmVhc2UgdGhlIFNreWZvY3VzIGxhdGVuY3kuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9URVJNSU5BTF9PVVRQVVRKB0xPR0dJTkdQAAqpAgoQY29tcGlsYXRpb25fbW9kZRAAGlBTcGVjaWZ5IHRoZSBtb2RlIHRoZSBiaW5hcnkgd2lsbCBiZSBidWlsdCBpbi4gVmFsdWVzOiAnZmFzdGJ1aWxkJywgJ2RiZycsICdvcHQnLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IqAWMwADoPQUZGRUNUU19PVVRQVVRTOhRBQ1RJT05fQ09NTUFORF9MSU5FU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQqrAgolaW5jb21wYXRpYmxlX21lcmdlX2dlbmZpbGVzX2RpcmVjdG9yeRABGkFJZiB0cnVlLCB0aGUgZ2VuZmlsZXMgZGlyZWN0b3J5IGlzIGZvbGRlZCBpbnRvIHRoZSBiaW4gZGlyZWN0b3J5LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShFPVVRQVVRfUEFSQU1FVEVSU1AACpYCCixleHBlcmltZW50YWxfYWxsb3dfcnVudGltZV9kZXBzX29uX25ldmVybGluaxABGixOby1vcCwga2VwdCBvbmx5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQlVJTERfRklMRV9TRU1BTlRJQ1NCDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAKzgIKD2FwcGxlX3NwbGl0X2NwdRAAGoYBRG9uJ3Qgc2V0IHRoaXMgdmFsdWUgZnJvbSB0aGUgY29tbWFuZCBsaW5lIC0gaXQgaXMgZGVyaXZlZCBmcm9tIG90aGVyIGZsYWdzIGFuZCBjb25maWd1cmF0aW9uIHRyYW5zaXRpb25zIGRlcml2ZWQgZnJvbSBydWxlIGF0dHJpYnV0ZXMiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05KDFVORE9DVU1FTlRFRFABCqwCCg12aXNpb25vc19jcHVzEAAaUUNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGFyY2hpdGVjdHVyZXMgZm9yIHdoaWNoIHRvIGJ1aWxkIEFwcGxlIHZpc2lvbk9TIGJpbmFyaWVzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEU6FExPQURJTkdfQU5EX0FOQUxZU0lTShFPVVRQVVRfUEFSQU1FVEVSU1ABCuwBCgRjb3B0EAAaIkFkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIGdjYy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6FEFDVElPTl9DT01NQU5EX0xJTkVTOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAEK5gEKCnF1ZXJ5X2ZpbGUQABqjAUlmIHNldCwgcXVlcnkgd2lsbCByZWFkIHRoZSBxdWVyeSBmcm9tIHRoZSBmaWxlIG5hbWVkIGhlcmUsIHJhdGhlciB0aGFuIG9uIHRoZSBjb21tYW5kIGxpbmUuIEl0IGlzIGFuIGVycm9yIHRvIHNwZWNpZnkgYSBmaWxlIGhlcmUgYXMgd2VsbCBhcyBhIGNvbW1hbmQtbGluZSBxdWVyeS4iBmFxdWVyeSIGY3F1ZXJ5IgVxdWVyeTAAOg5DSEFOR0VTX0lOUFVUU0oFUVVFUllQAQqcBQocZXhwZXJpbWVudGFsX2NvbW1hbmRfcHJvZmlsZRAAGpYDUmVjb3JkcyBhIEphdmEgRmxpZ2h0IFJlY29yZGVyIHByb2ZpbGUgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgY29tbWFuZC4gT25lIG9mIHRoZSBzdXBwb3J0ZWQgcHJvZmlsaW5nIGV2ZW50IHR5cGVzIChjcHUsIHdhbGwsIGFsbG9jIG9yIGxvY2spIG11c3QgYmUgZ2l2ZW4gYXMgYW4gYXJndW1lbnQuIFRoZSBwcm9maWxlIGlzIHdyaXR0ZW4gdG8gYSBmaWxlIG5hbWVkIGFmdGVyIHRoZSBldmVudCB0eXBlIHVuZGVyIHRoZSBvdXRwdXQgYmFzZSBkaXJlY3RvcnkuIFRoZSBzeW50YXggYW5kIHNlbWFudGljcyBvZiB0aGlzIGZsYWcgbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUgdG8gc3VwcG9ydCBhZGRpdGlvbmFsIHByb2ZpbGUgdHlwZXMgb3Igb3V0cHV0IGZvcm1hdHM7IHVzZSBhdCB5b3VyIG93biByaXNrLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoHTE9HR0lOR1ABCs4BCidleHBlcmltZW50YWxfcG9zdF9wcm9maWxlX3N0YXJ0ZWRfZXZlbnQQARoGTm8tb3AuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgVOT19PUEoMVU5ET0NVTUVOVEVEUAAKmAMKImluY29tcGF0aWJsZV91c2VfcHl0aG9uX3Rvb2xjaGFpbnMQARquAUlmIHNldCB0byB0cnVlLCBleGVjdXRhYmxlIG5hdGl2ZSBQeXRob24gcnVsZXMgd2lsbCB1c2UgdGhlIFB5dGhvbiBydW50aW1lIHNwZWNpZmllZCBieSB0aGUgUHl0aG9uIHRvb2xjaGFpbiwgcmF0aGVyIHRoYW4gdGhlIHJ1bnRpbWUgZ2l2ZW4gYnkgbGVnYWN5IGZsYWdzIGxpa2UgLS1weXRob25fdG9wLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKDkdFTkVSSUNfSU5QVVRTUAAKzwIKC2luY3JlbWVudGFsEAEagQJXaGV0aGVyIHRvIGRvIGFuIGluY3JlbWVudGFsIGluc3RhbGwuIElmIHRydWUsIHRyeSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBhZGRpdGlvbmFsIHdvcmsgYnkgcmVhZGluZyB0aGUgc3RhdGUgb2YgdGhlIGRldmljZSB0aGUgY29kZSBpcyB0byBiZSBpbnN0YWxsZWQgb24gYW5kIHVzaW5nIHRoYXQgaW5mb3JtYXRpb24gdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd29yay4gSWYgZmFsc2UgKHRoZSBkZWZhdWx0KSwgYWx3YXlzIGRvIGEgZnVsbCBpbnN0YWxsLiIObW9iaWxlLWluc3RhbGwwADoUTE9BRElOR19BTkRfQU5BTFlTSVNKEE9VVFBVVF9TRUxFQ1RJT05QAAqIAgoRaW52b2NhdGlvbl9wb2xpY3kQABqxAUEgYmFzZTY0LWVuY29kZWQtYmluYXJ5LXNlcmlhbGl6ZWQgb3IgdGV4dC1mb3JtYXRlZCBpbnZvY2F0aW9uX3BvbGljeS5JbnZvY2F0aW9uUG9saWN5IHByb3RvLiBVbmxpa2Ugb3RoZXIgb3B0aW9ucywgaXQgaXMgYW4gZXJyb3IgdG8gc3BlY2lmeSAtLWludm9jYXRpb25fcG9saWN5IG11bHRpcGxlIHRpbWVzLiIHc3RhcnR1cCISY2Fub25pY2FsaXplLWZsYWdzMAA6DkNIQU5HRVNfSU5QVVRTSgxVTkRPQ1VNRU5URURQAQqUAwosaW5jb21wYXRpYmxlX2NoZWNrX3Rlc3Rvbmx5X2Zvcl9vdXRwdXRfZmlsZXMQARqeAUlmIGVuYWJsZWQsIGNoZWNrIHRlc3Rvbmx5IGZvciBwcmVyZXF1aXNpdGUgdGFyZ2V0cyB0aGF0IGFyZSBvdXRwdXQgZmlsZXMgYnkgbG9va2luZyB1cCB0aGUgdGVzdG9ubHkgb2YgdGhlIGdlbmVyYXRpbmcgcnVsZS4gVGhpcyBtYXRjaGVzIHZpc2liaWxpdHkgY2hlY2tpbmcuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRCVUlMRF9GSUxFX1NFTUFOVElDU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoQSU5QVVRfU1RSSUNUTkVTU1AACtkCChNlbmZvcmNlX2NvbnN0cmFpbnRzEAEakQFDaGVja3MgdGhlIGVudmlyb25tZW50cyBlYWNoIHRhcmdldCBpcyBjb21wYXRpYmxlIHdpdGggYW5kIHJlcG9ydHMgZXJyb3JzIGlmIGFueSB0YXJnZXQgaGFzIGRlcGVuZGVuY2llcyB0aGF0IGRvbid0IHN1cHBvcnQgdGhlIHNhbWUgZW52aXJvbm1lbnRzIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRCVUlMRF9GSUxFX1NFTUFOVElDU0oQSU5QVVRfU1RSSUNUTkVTU1AACt0CCgVkZXB0aBAAGqoCTWF4aW11bSBkaXNwbGF5IGRlcHRoIG9mIHRoZSBkZXBlbmRlbmN5IHRyZWUuIEEgZGVwdGggb2YgMSBkaXNwbGF5cyB0aGUgZGlyZWN0IGRlcGVuZGVuY2llcywgZm9yIGV4YW1wbGUuIEZvciB0cmVlLCBwYXRoIGFuZCBhbGxfcGF0aHMgaXQgZGVmYXVsdHMgdG8gSW50ZWdlci5NQVhfVkFMVUUsIHdoaWxlIGZvciBkZXBzIGFuZCBleHBsYWluIGl0IGRlZmF1bHRzIHRvIDEgKG9ubHkgZGlzcGxheXMgZGlyZWN0IGRlcHMgb2YgdGhlIHJvb3QgYmVzaWRlcyB0aGUgdGFyZ2V0IGxlYXZlcyBhbmQgdGhlaXIgcGFyZW50cykuCiIDbW9kMAA6D1RFUk1JTkFMX09VVFBVVEoLTU9EX0NPTU1BTkRQAQqHAgojaW5jb21wYXRpYmxlX2Rpc2FsbG93X3Jlc291cmNlX2phcnMQARosTm8tb3AsIGtlcHQgb25seSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05CE0lOQ09NUEFUSUJMRV9DSEFOR0VKDFVORE9DVU1FTlRFRFAACvECCiJleHBlcmltZW50YWxfc3RyaWN0X2ZpbGVzZXRfb3V0cHV0EAEalQFJZiB0aGlzIG9wdGlvbiBpcyBlbmFibGVkLCBmaWxlc2V0cyB3aWxsIHRyZWF0IGFsbCBvdXRwdXQgYXJ0aWZhY3RzIGFzIHJlZ3VsYXIgZmlsZXMuIFRoZXkgd2lsbCBub3QgdHJhdmVyc2UgZGlyZWN0b3JpZXMgb3IgYmUgc2Vuc2l0aXZlIHRvIHN5bWxpbmtzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoJRVhFQ1VUSU9OQgxFWFBFUklNRU5UQUxKEkVYRUNVVElPTl9TVFJBVEVHWVAACvMCCixleHBlcmltZW50YWxfY3B1X2xvYWRfc2NoZWR1bGluZ193aW5kb3dfc2l6ZRAAGqEBVGhlIHNpemUgb2Ygd2luZG93IGR1cmluZyBleHBlcmltZW50YWwgc2NoZWR1bGluZyBvZiBhY3Rpb24gYmFzZWQgb24gQ1BVIGxvYWQuIE1ha2Ugc2Vuc2UgdG8gZGVmaW5lIG9ubHkgd2hlbiBmbGFnIC0tZXhwZXJpbWVudGFsX2NwdV9sb2FkX3NjaGVkdWxpbmcgaXMgZW5hYmxlZC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6CUVYRUNVVElPTkoMVU5ET0NVTUVOVEVEUAEK0AQKE2xvY2FsX3JhbV9yZXNvdXJjZXMQABryAkV4cGxpY2l0bHkgc2V0IHRoZSB0b3RhbCBhbW91bnQgb2YgbG9jYWwgaG9zdCBSQU0gKGluIE1CKSBhdmFpbGFibGUgdG8gQmF6ZWwgdG8gc3BlbmQgb24gYnVpbGQgYWN0aW9ucyBleGVjdXRlZCBsb2NhbGx5LiBUYWtlcyBhbiBpbnRlZ2VyLCBvciAiSE9TVF9SQU0iLCBvcHRpb25hbGx5IGZvbGxvd2VkIGJ5IFstfCpdPGZsb2F0PiAoZWcuIEhPU1RfUkFNKi41IHRvIHVzZSBoYWxmIHRoZSBhdmFpbGFibGUgUkFNKS4gQnkgZGVmYXVsdCwgKCJIT1NUX1JBTSouNjciKSwgQmF6ZWwgd2lsbCBxdWVyeSBzeXN0ZW0gY29uZmlndXJhdGlvbiB0byBlc3RpbWF0ZSB0aGUgYW1vdW50IG9mIFJBTSBhdmFpbGFibGUgYW5kIHdpbGwgdXNlIDY3JSBvZiBpdC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TShdCVUlMRF9USU1FX09QVElNSVpBVElPTlABCtIECi5pbmNvbXBhdGlibGVfdW5hbWJpZ3VvdXNfbGFiZWxfc3RyaW5naWZpY2F0aW9uEAEajQJXaGVuIHRydWUsIEJhemVsIHdpbGwgc3RyaW5naWZ5IHRoZSBsYWJlbCBALy9mb286YmFyIHRvIEAvL2ZvbzpiYXIsIGluc3RlYWQgb2YgLy9mb286YmFyLiBUaGlzIG9ubHkgYWZmZWN0cyB0aGUgYmVoYXZpb3Igb2Ygc3RyKCksIHRoZSAlIG9wZXJhdG9yLCBhbmQgc28gb247IHRoZSBiZWhhdmlvciBvZiByZXByKCkgaXMgdW5jaGFuZ2VkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2JhemVsYnVpbGQvYmF6ZWwvaXNzdWVzLzE1OTE2IGZvciBtb3JlIGluZm9ybWF0aW9uLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUTE9BRElOR19BTkRfQU5BTFlTSVNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKElNUQVJMQVJLX1NFTUFOVElDU1AACuoBChVzaG93X2NvbmZpZ19mcmFnbWVudHMQABqqAVNob3dzIHRoZSBjb25maWd1cmF0aW9uIGZyYWdtZW50cyByZXF1aXJlZCBieSBhIHJ1bGUgYW5kIGl0cyB0cmFuc2l0aXZlIGRlcGVuZGVuY2llcy4gVGhpcyBjYW4gYmUgdXNlZnVsIGZvciBldmFsdWF0aW5nIGhvdyBtdWNoIGEgY29uZmlndXJlZCB0YXJnZXQgZ3JhcGggY2FuIGJlIHRyaW1tZWQuIgZjcXVlcnkwADoPQUZGRUNUU19PVVRQVVRTSgVRVUVSWVABCq0FChVsb2NhbF9leHRyYV9yZXNvdXJjZXMQABrNA1NldCB0aGUgbnVtYmVyIG9mIGV4dHJhIHJlc291cmNlcyBhdmFpbGFibGUgdG8gQmF6ZWwuIFRha2VzIGluIGEgc3RyaW5nLWZsb2F0IHBhaXIuIENhbiBiZSB1c2VkIG11bHRpcGxlIHRpbWVzIHRvIHNwZWNpZnkgbXVsdGlwbGUgdHlwZXMgb2YgZXh0cmEgcmVzb3VyY2VzLiBCYXplbCB3aWxsIGxpbWl0IGNvbmN1cnJlbnRseSBydW5uaW5nIGFjdGlvbnMgYmFzZWQgb24gdGhlIGF2YWlsYWJsZSBleHRyYSByZXNvdXJjZXMgYW5kIHRoZSBleHRyYSByZXNvdXJjZXMgcmVxdWlyZWQuIFRlc3RzIGNhbiBkZWNsYXJlIHRoZSBhbW91bnQgb2YgZXh0cmEgcmVzb3VyY2VzIHRoZXkgbmVlZCBieSB1c2luZyBhIHRhZyBvZiB0aGUgInJlc291cmNlczo8cmVzb3VjZW5hbWU+OjxhbW91bnQ+IiBmb3JtYXQuIEF2YWlsYWJsZSBDUFUsIFJBTSBhbmQgcmVzb3VyY2VzIGNhbm5vdCBiZSBzZXQgd2l0aCB0aGlzIGZsYWcuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OU0oXQlVJTERfVElNRV9PUFRJTUlaQVRJT05QAQq0AwoVaW9zX3NpZ25pbmdfY2VydF9uYW1lEAAa8wFDZXJ0aWZpY2F0ZSBuYW1lIHRvIHVzZSBmb3IgaU9TIHNpZ25pbmcuIElmIG5vdCBzZXQgd2lsbCBmYWxsIGJhY2sgdG8gcHJvdmlzaW9uaW5nIHByb2ZpbGUuIE1heSBiZSB0aGUgY2VydGlmaWNhdGUncyBrZXljaGFpbiBpZGVudGl0eSBwcmVmZXJlbmNlIG9yIChzdWJzdHJpbmcpIG9mIHRoZSBjZXJ0aWZpY2F0ZSdzIGNvbW1vbiBuYW1lLCBhcyBwZXIgY29kZXNpZ24ncyBtYW4gcGFnZSAoU0lHTklORyBJREVOVElUSUVTKS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FEFDVElPTl9DT01NQU5EX0xJTkVTSgdTSUdOSU5HUAEKmQMKHnJlbW90ZV9kZWZhdWx0X2V4ZWNfcHJvcGVydGllcxAAGooBU2V0IHRoZSBkZWZhdWx0IGV4ZWMgcHJvcGVydGllcyB0byBiZSB1c2VkIGFzIHRoZSByZW1vdGUgZXhlY3V0aW9uIHBsYXRmb3JtIGlmIGFuIGV4ZWN1dGlvbiBwbGF0Zm9ybSBkb2VzIG5vdCBhbHJlYWR5IHNldCBleGVjX3Byb3BlcnRpZXMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjABOg9BRkZFQ1RTX09VVFBVVFNKBlJFTU9URVABCtwBCilleHBlcmltZW50YWxfZ2VucXVlcnlfdXNlX2dyYXBobGVzc19xdWVyeRABGhJEZXByZWNhdGVkLiBOby1vcC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6BU5PX09QSgxVTkRPQ1VNRU5URURQAAqpAwosaW5jb21wYXRpYmxlX2Rpc2FibGVfb2JqY19saWJyYXJ5X3RyYW5zaXRpb24QARpnRGlzYWJsZSBvYmpjX2xpYnJhcnkncyBjdXN0b20gdHJhbnNpdGlvbiBhbmQgaW5oZXJpdCBmcm9tIHRoZSB0b3AgbGV2ZWwgdGFyZ2V0IGluc3RlYWQgKE5vLW9wIGluIEJhemVsKSIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoUQlVJTERfRklMRV9TRU1BTlRJQ1NCE0lOQ09NUEFUSUJMRV9DSEFOR0VKElNUQVJMQVJLX1NFTUFOVElDU1AACswCCjZleHBlcmltZW50YWxfY29sbGVjdF9jb2RlX2NvdmVyYWdlX2Zvcl9nZW5lcmF0ZWRfZmlsZXMQARpYSWYgc3BlY2lmaWVkLCBCYXplbCB3aWxsIGFsc28gZ2VuZXJhdGUgY29sbGVjdCBjb3ZlcmFnZSBpbmZvcm1hdGlvbiBmb3IgZ2VuZXJhdGVkIGZpbGVzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoPQUZGRUNUU19PVVRQVVRTQgxFWFBFUklNRU5UQUxKEU9VVFBVVF9QQVJBTUVURVJTUAAKnAMKOWV4cGVyaW1lbnRhbF9pbmNyZW1lbnRhbF9kZXhpbmdfYWZ0ZXJfcHJvZ3VhcmRfYnlfZGVmYXVsdBABGqQBV2hldGhlciB0byB1c2UgaW5jcmVtZW50YWwgZGV4aW5nIGZvciBwcm9ndWFyZGVkIEFuZHJvaWQgYmluYXJpZXMgYnkgZGVmYXVsdC4gIFVzZSBpbmNyZW1lbnRhbF9kZXhpbmcgYXR0cmlidXRlIHRvIG92ZXJyaWRlIGRlZmF1bHQgZm9yIGEgcGFydGljdWxhciBhbmRyb2lkX2JpbmFyeS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFAACqwCCitleHBlcmltZW50YWxfdXNlX3J0eHRfZnJvbV9tZXJnZWRfcmVzb3VyY2VzEAEaSVVzZSBSLnR4dCBmcm9tIHRoZSBtZXJnaW5nIGFjdGlvbiwgaW5zdGVhZCBvZiBmcm9tIHRoZSB2YWxpZGF0aW9uIGFjdGlvbi4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6DkNIQU5HRVNfSU5QVVRTQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFAACtYBCgRvbmx5EAAanQFJZiB0aGlzIG9wdGlvbiBpcyBnaXZlbiwgb25seSBzeW5jIHRoZSByZXBvc2l0b3JpZXMgc3BlY2lmaWVkIHdpdGggdGhpcyBvcHRpb24uIFN0aWxsIGNvbnNpZGVyIGFsbCAob3IgYWxsIGNvbmZpZ3VyZS1saWtlLCBvZiAtLWNvbmZpZ3VyZSBpcyBnaXZlbikgb3V0ZGF0ZWQuIgRzeW5jMAE6DkNIQU5HRVNfSU5QVVRTShJFWEVDVVRJT05fU1RSQVRFR1lQAQrkBAoPcmVtb3RlX2dycGNfbG9nEAAa7AJJZiBzcGVjaWZpZWQsIGEgcGF0aCB0byBhIGZpbGUgdG8gbG9nIGdSUEMgY2FsbCByZWxhdGVkIGRldGFpbHMuIFRoaXMgbG9nIGNvbnNpc3RzIG9mIGEgc2VxdWVuY2Ugb2Ygc2VyaWFsaXplZCBjb20uZ29vZ2xlLmRldnRvb2xzLmJ1aWxkLmxpYi5yZW1vdGUubG9nZ2luZy5SZW1vdGVFeGVjdXRpb25Mb2cuTG9nRW50cnkgcHJvdG9idWZzIHdpdGggZWFjaCBtZXNzYWdlIHByZWZpeGVkIGJ5IGEgdmFyaW50IGRlbm90aW5nIHRoZSBzaXplIG9mIHRoZSBmb2xsb3dpbmcgc2VyaWFsaXplZCBwcm90b2J1ZiBtZXNzYWdlLCBhcyBwZXJmb3JtZWQgYnkgdGhlIG1ldGhvZCBMb2dFbnRyeS53cml0ZURlbGltaXRlZFRvKE91dHB1dFN0cmVhbSkuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgZSRU1PVEVQAQrQAQoEZnJvbRAAGp4BVGhlIG1vZHVsZShzKSBzdGFydGluZyBmcm9tIHdoaWNoIHRoZSBkZXBlbmRlbmN5IGdyYXBoIHF1ZXJ5IHdpbGwgYmUgZGlzcGxheWVkLiBDaGVjayBlYWNoIHF1ZXJ54oCZcyBkZXNjcmlwdGlvbiBmb3IgdGhlIGV4YWN0IHNlbWFudGljcy4gRGVmYXVsdHMgdG8gPHJvb3Q+LgoiA21vZDAAOg9URVJNSU5BTF9PVVRQVVRKC01PRF9DT01NQU5EUAEKxQEKI2V4cGVyaW1lbnRhbF9pbmNsdWRlX2RlZmF1bHRfdmFsdWVzEAEaUFdoZXRoZXIgU3Rhcmxhcmsgb3B0aW9ucyBzZXQgdG8gdGhlaXIgZGVmYXVsdCB2YWx1ZXMgYXJlIGluY2x1ZGVkIGluIHRoZSBvdXRwdXQuIhJjYW5vbmljYWxpemUtZmxhZ3MwADoPQUZGRUNUU19PVVRQVVRTOg9URVJNSU5BTF9PVVRQVVRKEE9VVFBVVF9TRUxFQ1RJT05QAAqVBQo0ZXhwZXJpbWVudGFsX3JlbW90ZV9kb3dubG9hZGVyX3Byb3BhZ2F0ZV9jcmVkZW50aWFscxABGvgCV2hldGhlciB0byBwcm9wYWdhdGUgY3JlZGVudGlhbHMgZnJvbSBuZXRyYyBhbmQgY3JlZGVudGlhbCBoZWxwZXIgdG8gdGhlIHJlbW90ZSBkb3dubG9hZGVyIHNlcnZlci4gVGhlIHNlcnZlciBpbXBsZW1lbnRhdGlvbiBuZWVkcyB0byBzdXBwb3J0IHRoZSBuZXcgYGh0dHBfaGVhZGVyX3VybDo8dXJsLWluZGV4Pjo8aGVhZGVyLWtleT5gIHF1YWxpZmllciB3aGVyZSB0aGUgYDx1cmwtaW5kZXg+YCBpcyBhIDAtYmFzZWQgcG9zaXRpb24gb2YgdGhlIFVSTCBpbnNpZGUgdGhlIEZldGNoQmxvYlJlcXVlc3QncyBgdXJpc2AgZmllbGQuIFRoZSBVUkwtc3BlY2lmaWMgaGVhZGVycyBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhlIGdsb2JhbCBoZWFkZXJzLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoGUkVNT1RFUAAK9gIKEnNhbmRib3hfdG1wZnNfcGF0aBAAGpMBRm9yIHNhbmRib3hlZCBhY3Rpb25zLCBtb3VudCBhbiBlbXB0eSwgd3JpdGFibGUgZGlyZWN0b3J5IGF0IHRoaXMgYWJzb2x1dGUgcGF0aCAoaWYgc3VwcG9ydGVkIGJ5IHRoZSBzYW5kYm94aW5nIGltcGxlbWVudGF0aW9uLCBpZ25vcmVkIG90aGVyd2lzZSkuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjABOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OUzoJRVhFQ1VUSU9OShJFWEVDVVRJT05fU1RSQVRFR1lQAQqVAwoNaG9zdF9mZWF0dXJlcxAAGscBVGhlIGdpdmVuIGZlYXR1cmVzIHdpbGwgYmUgZW5hYmxlZCBvciBkaXNhYmxlZCBieSBkZWZhdWx0IGZvciB0YXJnZXRzIGJ1aWx0IGluIHRoZSBleGVjIGNvbmZpZ3VyYXRpb24uIFNwZWNpZnlpbmcgLTxmZWF0dXJlPiB3aWxsIGRpc2FibGUgdGhlIGZlYXR1cmUuIE5lZ2F0aXZlIGZlYXR1cmVzIGFsd2F5cyBvdmVycmlkZSBwb3NpdGl2ZSBvbmVzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwAToOQ0hBTkdFU19JTlBVVFM6D0FGRkVDVFNfT1VUUFVUU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQqDBAonZXhwZXJpbWVudGFsX2VuYWJsZV9leGVjdXRpb25fZ3JhcGhfbG9nEAEasAJFbmFibGluZyB0aGlzIGZsYWcgbWFrZXMgQmxhemUgd3JpdGUgYSBmaWxlIG9mIGFsbCBhY3Rpb25zIGV4ZWN1dGVkIGR1cmluZyBhIGJ1aWxkLiBOb3RlIHRoYXQgdGhpcyBkdW1wIG1heSB1c2UgYSBkaWZmZXJlbnQgZ3JhbnVsYXJpdHkgb2YgYWN0aW9ucyB0aGFuIG90aGVyIEFQSXMsIGFuZCBtYXkgYWxzbyBjb250YWluIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYXMgbmVjZXNzYXJ5IHRvIHJlY29uc3RydWN0IHRoZSBmdWxsIGRlcGVuZGVuY3kgZ3JhcGggaW4gY29tYmluYXRpb24gd2l0aCBvdGhlciBzb3VyY2VzIG9mIGRhdGEuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKDFVORE9DVU1FTlRFRFAACoUCChd3aW5kb3dzX2VuYWJsZV9zeW1saW5rcxABGqYBSWYgdHJ1ZSwgcmVhbCBzeW1ib2xpYyBsaW5rcyB3aWxsIGJlIGNyZWF0ZWQgb24gV2luZG93cyBpbnN0ZWFkIG9mIGZpbGUgY29weWluZy4gUmVxdWlyZXMgV2luZG93cyBkZXZlbG9wZXIgbW9kZSB0byBiZSBlbmFibGVkIGFuZCBXaW5kb3dzIDEwIHZlcnNpb24gMTcwMyBvciBncmVhdGVyLiIHc3RhcnR1cDAAOhxCQVpFTF9JTlRFUk5BTF9DT05GSUdVUkFUSU9OShRCQVpFTF9DTElFTlRfT1BUSU9OU1AACq0CChRyZW1vdGVfYWNjZXB0X2NhY2hlZBABGjFXaGV0aGVyIHRvIGFjY2VwdCByZW1vdGVseSBjYWNoZWQgYWN0aW9uIHJlc3VsdHMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgZSRU1PVEVQAAq/AwosaW5jb21wYXRpYmxlX2Rpc2FsbG93X3N0cnVjdF9wcm92aWRlcl9zeW50YXgQARp9SWYgc2V0IHRvIHRydWUsIHJ1bGUgaW1wbGVtZW50YXRpb24gZnVuY3Rpb25zIG1heSBub3QgcmV0dXJuIGEgc3RydWN0LiBUaGV5IG11c3QgaW5zdGVhZCByZXR1cm4gYSBsaXN0IG9mIHByb3ZpZGVyIGluc3RhbmNlcy4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FEJVSUxEX0ZJTEVfU0VNQU5USUNTQhNJTkNPTVBBVElCTEVfQ0hBTkdFShJTVEFSTEFSS19TRU1BTlRJQ1NQAAqiAgoMcHJvZHVjdF9uYW1lEAAasAFUaGUgbmFtZSBvZiB0aGUgYnVpbGQgc3lzdGVtLiBJdCBpcyB1c2VkIGFzIHBhcnQgb2YgdGhlIG5hbWUgb2YgdGhlIGdlbmVyYXRlZCBkaXJlY3RvcmllcyAoZS5nLiBwcm9kdWN0TmFtZS1iaW4gZm9yIGJpbmFyaWVzKSBhcyB3ZWxsIGFzIGZvciBwcmludGluZyBlcnJvciBtZXNzYWdlcyBhbmQgbG9nZ2luZyIHc3RhcnR1cDAAOhdMT1NFU19JTkNSRU1FTlRBTF9TVEFURToPQUZGRUNUU19PVVRQVVRTOhBCQVpFTF9NT05JVE9SSU5HQgZISURERU5KDFVORE9DVU1FTlRFRFABCpUGChNncnBjX2tlZXBhbGl2ZV90aW1lEAAakgRDb25maWd1cmVzIGtlZXAtYWxpdmUgcGluZ3MgZm9yIG91dGdvaW5nIGdSUEMgY29ubmVjdGlvbnMuIElmIHRoaXMgaXMgc2V0LCB0aGVuIEJhemVsIHNlbmRzIHBpbmdzIGFmdGVyIHRoaXMgbXVjaCB0aW1lIG9mIG5vIHJlYWQgb3BlcmF0aW9ucyBvbiB0aGUgY29ubmVjdGlvbiwgYnV0IG9ubHkgaWYgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIHBlbmRpbmcgZ1JQQyBjYWxsLiBUaW1lcyBhcmUgdHJlYXRlZCBhcyBzZWNvbmQgZ3JhbnVsYXJpdHk7IGl0IGlzIGFuIGVycm9yIHRvIHNldCBhIHZhbHVlIGxlc3MgdGhhbiBvbmUgc2Vjb25kLiBCeSBkZWZhdWx0LCBrZWVwLWFsaXZlIHBpbmdzIGFyZSBkaXNhYmxlZC4gWW91IHNob3VsZCBjb29yZGluYXRlIHdpdGggdGhlIHNlcnZpY2Ugb3duZXIgYmVmb3JlIGVuYWJsaW5nIHRoaXMgc2V0dGluZy4gRm9yIGV4YW1wbGUgdG8gc2V0IGEgdmFsdWUgb2YgMzAgc2Vjb25kcyB0byB0aGlzIGZsYWcsIGl0IHNob3VsZCBiZSBkb25lIGFzIHRoaXMgLS1ncnBjX2tlZXBhbGl2ZV90aW1lPTMwcyIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCrcCCh9leHBlcmltZW50YWxfY2hlY2tfZGVzdWdhcl9kZXBzEAEaQ1doZXRoZXIgdG8gZG91YmxlLWNoZWNrIGNvcnJlY3QgZGVzdWdhcmluZyBhdCBBbmRyb2lkIGJpbmFyeSBsZXZlbC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6EUVBR0VSTkVTU19UT19FWElUOhRMT0FESU5HX0FORF9BTkFMWVNJU0IMRVhQRVJJTUVOVEFMShBJTlBVVF9TVFJJQ1RORVNTUAAK1gQKEXRlc3RfbGFuZ19maWx0ZXJzEAAaoANTcGVjaWZpZXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiB0ZXN0IGxhbmd1YWdlcy4gRWFjaCBsYW5ndWFnZSBjYW4gYmUgb3B0aW9uYWxseSBwcmVjZWRlZCB3aXRoICctJyB0byBzcGVjaWZ5IGV4Y2x1ZGVkIGxhbmd1YWdlcy4gT25seSB0aG9zZSB0ZXN0IHRhcmdldHMgd2lsbCBiZSBmb3VuZCB0aGF0IGFyZSB3cml0dGVuIGluIHRoZSBzcGVjaWZpZWQgbGFuZ3VhZ2VzLiBUaGUgbmFtZSB1c2VkIGZvciBlYWNoIGxhbmd1YWdlIHNob3VsZCBiZSB0aGUgc2FtZSBhcyB0aGUgbGFuZ3VhZ2UgcHJlZml4IGluIHRoZSAqX3Rlc3QgcnVsZSwgZS5nLiBvbmUgb2YgJ2NjJywgJ2phdmEnLCAncHknLCBldGMuIFRoaXMgb3B0aW9uIGFmZmVjdHMgLS1idWlsZF90ZXN0c19vbmx5IGJlaGF2aW9yIGFuZCB0aGUgdGVzdCBjb21tYW5kLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCqkDCgxiZXNfa2V5d29yZHMQABqrAVNwZWNpZmllcyBhIGxpc3Qgb2Ygbm90aWZpY2F0aW9uIGtleXdvcmRzIHRvIGJlIGFkZGVkIHRoZSBkZWZhdWx0IHNldCBvZiBrZXl3b3JkcyBwdWJsaXNoZWQgdG8gQkVTICgiY29tbWFuZF9uYW1lPTxjb21tYW5kX25hbWU+ICIsICJwcm90b2NvbF9uYW1lPUJFUCIpLiBEZWZhdWx0cyB0byBub25lLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wAToPQUZGRUNUU19PVVRQVVRTSgdMT0dHSU5HUAEKpgIKEWhvc3RfZm9yY2VfcHl0aG9uEAAaT092ZXJyaWRlcyB0aGUgUHl0aG9uIHZlcnNpb24gZm9yIHRoZSBleGVjIGNvbmZpZ3VyYXRpb24uIENhbiBiZSAiUFkyIiBvciAiUFkzIi4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAEK+wIKIWV4cGVyaW1lbnRhbF9mb3JjZV9nY19hZnRlcl9idWlsZBABGldJZiB0cnVlIGNhbGxzIFN5c3RlbS5nYygpIGFmdGVyIGEgYnVpbGQgdG8gdHJ5IGFuZCBnZXQgYSBwb3N0LWdjIHBlYWsgaGVhcCBtZWFzdXJlbWVudC4iD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6HEJBWkVMX0lOVEVSTkFMX0NPTkZJR1VSQVRJT05KDFVORE9DVU1FTlRFRFAACrcDCgdmaXNzaW9uEAAa1AFTcGVjaWZpZXMgd2hpY2ggY29tcGlsYXRpb24gbW9kZXMgdXNlIGZpc3Npb24gZm9yIEMrKyBjb21waWxhdGlvbnMgYW5kIGxpbmtzLiAgTWF5IGJlIGFueSBjb21iaW5hdGlvbiBvZiB7J2Zhc3RidWlsZCcsICdkYmcnLCAnb3B0J30gb3IgdGhlIHNwZWNpYWwgdmFsdWVzICd5ZXMnICB0byBlbmFibGUgYWxsIG1vZGVzIGFuZCAnbm8nIHRvIGRpc2FibGUgYWxsIG1vZGVzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6FEFDVElPTl9DT01NQU5EX0xJTkVTOg9BRkZFQ1RTX09VVFBVVFNKEE9VVFBVVF9TRUxFQ1RJT05QAQr3AQoSaG9zdF9qYXZhX2xhdW5jaGVyEAAaQVRoZSBKYXZhIGxhdW5jaGVyIHVzZWQgYnkgdG9vbHMgdGhhdCBhcmUgZXhlY3V0ZWQgZHVyaW5nIGEgYnVpbGQuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOSg1VTkNBVEVHT1JJWkVEUAEKgwIKJmV4cGVyaW1lbnRhbF9qYXZhX2hlYWRlcl9pbnB1dF9wcnVuaW5nEAEaLE5vLW9wLCBrZXB0IG9ubHkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOgdVTktOT1dOQgxFWFBFUklNRU5UQUxKDFVORE9DVU1FTlRFRFAACsECCiNleHBlcmltZW50YWxfdXNlX3NlbWFwaG9yZV9mb3Jfam9icxABGk5JZiBzZXQgdG8gdHJ1ZSwgYWRkaXRpb25hbGx5IHVzZSBzZW1hcGhvcmUgdG8gbGltaXQgbnVtYmVyIG9mIGNvbmN1cnJlbnQgam9icy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TOglFWEVDVVRJT05KEkVYRUNVVElPTl9TVFJBVEVHWVAACrcEChJjYWNoZV90ZXN0X3Jlc3VsdHMQARr9AklmIHNldCB0byAnYXV0bycsIEJhemVsIHJlcnVucyBhIHRlc3QgaWYgYW5kIG9ubHkgaWY6ICgxKSBCYXplbCBkZXRlY3RzIGNoYW5nZXMgaW4gdGhlIHRlc3Qgb3IgaXRzIGRlcGVuZGVuY2llcywgKDIpIHRoZSB0ZXN0IGlzIG1hcmtlZCBhcyBleHRlcm5hbCwgKDMpIG11bHRpcGxlIHRlc3QgcnVucyB3ZXJlIHJlcXVlc3RlZCB3aXRoIC0tcnVuc19wZXJfdGVzdCwgb3IoNCkgdGhlIHRlc3QgcHJldmlvdXNseSBmYWlsZWQuIElmIHNldCB0byAneWVzJywgQmF6ZWwgY2FjaGVzIGFsbCB0ZXN0IHJlc3VsdHMgZXhjZXB0IGZvciB0ZXN0cyBtYXJrZWQgYXMgZXh0ZXJuYWwuIElmIHNldCB0byAnbm8nLCBCYXplbCBkb2VzIG5vdCBjYWNoZSBhbnkgdGVzdCByZXN1bHRzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IqAXQwADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFAACuoCCjFleHBlcmltZW50YWxfcHJvZmlsZV9pbmNsdWRlX3RhcmdldF9jb25maWd1cmF0aW9uEAEaR0luY2x1ZGVzIHRhcmdldCBjb25maWd1cmF0aW9uIGhhc2ggaW4gYWN0aW9uIGV2ZW50cycgSlNPTiBwcm9maWxlIGRhdGEuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhBCQVpFTF9NT05JVE9SSU5HSgdMT0dHSU5HUAAKzAIKCmNsaWVudF9lbnYQABpFQSBzeXN0ZW0tZ2VuZXJhdGVkIHBhcmFtZXRlciB3aGljaCBzcGVjaWZpZXMgdGhlIGNsaWVudCdzIGVudmlyb25tZW50Ig9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjABOg5DSEFOR0VTX0lOUFVUU0IGSElEREVOSgxVTkRPQ1VNRU5URURQAQq7AQoRc3RyaWN0X3Rlc3Rfc3VpdGUQARppSWYgdHJ1ZSwgdGhlIHRlc3RzKCkgZXhwcmVzc2lvbiBnaXZlcyBhbiBlcnJvciBpZiBpdCBlbmNvdW50ZXJzIGEgdGVzdF9zdWl0ZSBjb250YWluaW5nIG5vbi10ZXN0IHRhcmdldHMuIgVxdWVyeTAAOhRCVUlMRF9GSUxFX1NFTUFOVElDUzoRRUFHRVJORVNTX1RPX0VYSVRKBVFVRVJZUAAK3wIKHWV4cGVyaW1lbnRhbF9wbGF0Zm9ybV9jY190ZXN0EAEagwFJZiBlbmFibGVkLCBhIFN0YXJsYXJrIHZlcnNpb24gb2YgY2NfdGVzdCBjYW4gYmUgdXNlZCB3aGljaCB3aWxsIHVzZSBwbGF0Zm9ybS1iYXNlZCB0b29sY2hhaW4oKSByZXNvbHV0aW9uIHRvIGNob29zZSBhIHRlc3QgcnVubmVyLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVNCDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAKqgEKJnByb3RvOmluY2x1ZGVfc3ludGhldGljX2F0dHJpYnV0ZV9oYXNoEAEaS1doZXRoZXIgb3Igbm90IHRvIGNhbGN1bGF0ZSBhbmQgcG9wdWxhdGUgdGhlICRpbnRlcm5hbF9hdHRyX2hhc2ggYXR0cmlidXRlLiIGYXF1ZXJ5IgZjcXVlcnkiBXF1ZXJ5MAA6D1RFUk1JTkFMX09VVFBVVEoFUVVFUllQAAqmAgoKbWFjb3NfY3B1cxAAGk5Db21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBhcmNoaXRlY3R1cmVzIGZvciB3aGljaCB0byBidWlsZCBBcHBsZSBtYWNPUyBiaW5hcmllcy4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAE6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFOhRMT0FESU5HX0FORF9BTkFMWVNJU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQr4BAoiZXhwZXJpbWVudGFsX2Rpc2tfY2FjaGVfZ2NfbWF4X2FnZRAAGuYCSWYgc2V0IHRvIGEgcG9zaXRpdmUgdmFsdWUsIHRoZSBkaXNrIGNhY2hlIHdpbGwgYmUgcGVyaW9kaWNhbGx5IGdhcmJhZ2UgY29sbGVjdGVkIHRvIHJlbW92ZSBlbnRyaWVzIG9sZGVyIHRoYW4gdGhpcyBhZ2UuIElmIHNldCBpbiBjb25qdW5jdGlvbiB3aXRoIC0tZXhwZXJpbWVudGFsX2Rpc2tfY2FjaGVfZ2NfbWF4X3NpemUsIGJvdGggY3JpdGVyaWEgYXJlIGFwcGxpZWQuIEdhcmJhZ2UgY29sbGVjdGlvbiBvY2N1cnJzIGluIHRoZSBiYWNrZ3JvdW5kIG9uY2UgdGhlIHNlcnZlciBoYXMgYmVjb21lIGlkbGUsIGFzIGRldGVybWluZWQgYnkgdGhlIC0tZXhwZXJpbWVudGFsX2Rpc2tfY2FjaGVfZ2NfaWRsZV9kZWxheSBmbGFnLiIPYW5hbHl6ZS1wcm9maWxlIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBGR1bXAiBWZldGNoIgRoZWxwIgRpbmZvIgdsaWNlbnNlIg5tb2JpbGUtaW5zdGFsbCIDbW9kIgxwcmludF9hY3Rpb24iBXF1ZXJ5IgNydW4iCHNodXRkb3duIgRzeW5jIgR0ZXN0IgZ2ZW5kb3IiB3ZlcnNpb24wADoHVU5LTk9XTkoNVU5DQVRFR09SSVpFRFABCoMCChBhbmRyb2lkX2NvbXBpbGVyEAAaHFRoZSBBbmRyb2lkIHRhcmdldCBjb21waWxlci4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUUzoUTE9BRElOR19BTkRfQU5BTFlTSVM6F0xPU0VTX0lOQ1JFTUVOVEFMX1NUQVRFSglUT09MQ0hBSU5QAQrxAQoUcHJvdG86ZGVmYXVsdF92YWx1ZXMQARqjAUlmIHRydWUsIGF0dHJpYnV0ZXMgd2hvc2UgdmFsdWUgaXMgbm90IGV4cGxpY2l0bHkgc3BlY2lmaWVkIGluIHRoZSBCVUlMRCBmaWxlIGFyZSBpbmNsdWRlZDsgb3RoZXJ3aXNlIHRoZXkgYXJlIG9taXR0ZWQuIFRoaXMgb3B0aW9uIGlzIGFwcGxpY2FibGUgdG8gLS1vdXRwdXQ9cHJvdG8iBmFxdWVyeSIGY3F1ZXJ5IgVxdWVyeTAAOg9URVJNSU5BTF9PVVRQVVRKBVFVRVJZUAAKggIKEGJ1aWxkX3B5dGhvbl96aXAQARpCQnVpbGQgcHl0aG9uIGV4ZWN1dGFibGUgemlwOyBvbiBvbiBXaW5kb3dzLCBvZmYgb24gb3RoZXIgcGxhdGZvcm1zIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNKEU9VVFBVVF9QQVJBTUVURVJTUAAKsgMKMWluY29tcGF0aWJsZV9qYXZhX2luZm9fbWVyZ2VfcnVudGltZV9tb2R1bGVfZmxhZ3MQARp+SWYgc2V0IHRvIHRydWUsIHRoZSBKYXZhSW5mbyBjb25zdHJ1Y3RvciB3aWxsIG1lcmdlIGFkZF9leHBvcnRzIGFuZCBhZGRfb3BlbnMgb2YgcnVudGltZV9kZXBzIGluIGFkZGl0aW9uIHRvIGRlcHMgYW5kIGV4cG9ydHMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOQhNJTkNPTVBBVElCTEVfQ0hBTkdFSgxVTkRPQ1VNRU5URURQAArqAwosaW5jb21wYXRpYmxlX3N0b3BfZXhwb3J0aW5nX2xhbmd1YWdlX21vZHVsZXMQARqnAUlmIGVuYWJsZWQsIGNlcnRhaW4gbGFuZ3VhZ2Utc3BlY2lmaWMgbW9kdWxlcyAoc3VjaCBhcyBgY2NfY29tbW9uYCkgYXJlIHVuYXZhaWxhYmxlIGluIHVzZXIgLmJ6bCBmaWxlcyBhbmQgbWF5IG9ubHkgYmUgY2FsbGVkIGZyb20gdGhlaXIgcmVzcGVjdGl2ZSBydWxlcyByZXBvc2l0b3JpZXMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoSU1RBUkxBUktfU0VNQU5USUNTUAAKzQIKNGV4cGVyaW1lbnRhbF91c2VfZXZlbnRfYmFzZWRfYnVpbGRfY29tcGxldGlvbl9zdGF0dXMQARoFTm8tb3AiD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTOglFWEVDVVRJT05CDEVYUEVSSU1FTlRBTEoMVU5ET0NVTUVOVEVEUAAKoQIKGmZhdGFsX2V2ZW50X2J1c19leGNlcHRpb25zEAEauQFXaGV0aGVyIG9yIG5vdCB0byBleGl0IGlmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gYnkgYW4gaW50ZXJuYWwgRXZlbnRCdXMgaGFuZGxlci4gTm8tb3AgaWYgLS1mYXRhbF9hc3luY19leGNlcHRpb25zX2V4Y2x1c2lvbnMgaXMgYXZhaWxhYmxlOyB0aGF0IGZsYWcncyBiZWhhdmlvciBpcyBwcmVmZXJlbnRpYWxseSB1c2VkLiIHc3RhcnR1cDAAOhFFQUdFUk5FU1NfVE9fRVhJVDoXTE9TRVNfSU5DUkVNRU5UQUxfU1RBVEVKDFVORE9DVU1FTlRFRFAACv8CCidpbmNvbXBhdGlibGVfZmFpbF9vbl91bmtub3duX2F0dHJpYnV0ZXMQARpCSWYgZW5hYmxlZCwgdGFyZ2V0cyB0aGF0IGhhdmUgdW5rbm93biBhdHRyaWJ1dGVzIHNldCB0byBOb25lIGZhaWwuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOhRMT0FESU5HX0FORF9BTkFMWVNJU0ITSU5DT01QQVRJQkxFX0NIQU5HRUoSU1RBUkxBUktfU0VNQU5USUNTUAAK7AEKDGlvc19tZW1sZWFrcxABGjVFbmFibGUgY2hlY2tpbmcgZm9yIG1lbW9yeSBsZWFrcyBpbiBpb3NfdGVzdCB0YXJnZXRzLiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUQUNUSU9OX0NPTU1BTkRfTElORVNKB1RFU1RJTkdQAAr6Ago9ZXhwZXJpbWVudGFsX29taXRfcmVzb3VyY2VzX2luZm9fcHJvdmlkZXJfZnJvbV9hbmRyb2lkX2JpbmFyeRABGoMBT21pdCBBbmRyb2lkUmVzb3VyY2VzSW5mbyBwcm92aWRlciBmcm9tIGFuZHJvaWRfYmluYXJ5IHJ1bGVzLiBQcm9wYWdhdGluZyByZXNvdXJjZXMgb3V0IHRvIG90aGVyIGJpbmFyaWVzIGlzIHVzdWFsbHkgdW5pbnRlbnRpb25hbC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6D0FGRkVDVFNfT1VUUFVUU0IMRVhQRVJJTUVOVEFMSgxVTkRPQ1VNRU5URURQAAqJAgoFYXN5bmMQARq7AUlmIHRydWUsIG91dHB1dCBjbGVhbmluZyBpcyBhc3luY2hyb25vdXMuIFdoZW4gdGhpcyBjb21tYW5kIGNvbXBsZXRlcywgaXQgd2lsbCBiZSBzYWZlIHRvIGV4ZWN1dGUgbmV3IGNvbW1hbmRzIGluIHRoZSBzYW1lIGNsaWVudCwgZXZlbiB0aG91Z2ggdGhlIGRlbGV0aW9uIG1heSBjb250aW51ZSBpbiB0aGUgYmFja2dyb3VuZC4iBWNsZWFuMAA6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TShBPVVRQVVRfU0VMRUNUSU9OUAAK4wUKKmV4cGVyaW1lbnRhbF9idWlsZF9ldmVudF9vdXRwdXRfZ3JvdXBfbW9kZRAAGscDU3BlY2lmeSBob3cgYW4gb3V0cHV0IGdyb3VwJ3MgZmlsZXMgd2lsbCBiZSByZXByZXNlbnRlZCBpbiBUYXJnZXRDb21wbGV0ZS9Bc3BlY3RDb21wbGV0ZSBCRVAgZXZlbnRzLiBWYWx1ZXMgYXJlIGFuIGFzc2lnbm1lbnQgb2YgYW4gb3V0cHV0IGdyb3VwIG5hbWUgdG8gb25lIG9mICdOQU1FRF9TRVRfT0ZfRklMRVNfT05MWScsICdJTkxJTkVfT05MWScsIG9yICdCT1RIJy4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgJ05BTUVEX1NFVF9PRl9GSUxFU19PTkxZJy4gSWYgYW4gb3V0cHV0IGdyb3VwIGlzIHJlcGVhdGVkLCB0aGUgZmluYWwgdmFsdWUgdG8gYXBwZWFyIGlzIHVzZWQuIFRoZSBkZWZhdWx0IHZhbHVlIHNldHMgdGhlIG1vZGUgZm9yIGNvdmVyYWdlIGFydGlmYWN0cyB0byBCT1RIOiAtLWV4cGVyaW1lbnRhbF9idWlsZF9ldmVudF9vdXRwdXRfZ3JvdXBfbW9kZT1iYXNlbGluZS5sY292PWJvdGgiD2FuYWx5emUtcHJvZmlsZSIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgRkdW1wIgVmZXRjaCIEaGVscCIEaW5mbyIHbGljZW5zZSIObW9iaWxlLWluc3RhbGwiA21vZCIMcHJpbnRfYWN0aW9uIgVxdWVyeSIDcnVuIghzaHV0ZG93biIEc3luYyIEdGVzdCIGdmVuZG9yIgd2ZXJzaW9uMAE6D0FGRkVDVFNfT1VUUFVUU0oHTE9HR0lOR1ABCooDCihpbmNvbXBhdGlibGVfcmVtb3ZlX2xlZ2FjeV93aG9sZV9hcmNoaXZlEAEanwFJZiB0cnVlLCBCYXplbCB3aWxsIG5vdCBsaW5rIGxpYnJhcnkgZGVwZW5kZW5jaWVzIGFzIHdob2xlIGFyY2hpdmUgYnkgZGVmYXVsdCAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iYXplbGJ1aWxkL2JhemVsL2lzc3Vlcy83MzYyIGZvciBtaWdyYXRpb24gaW5zdHJ1Y3Rpb25zKS4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6FExPQURJTkdfQU5EX0FOQUxZU0lTQhNJTkNPTVBBVElCTEVfQ0hBTkdFSglUT09MQ0hBSU5QAAqOAgojZXhwZXJpbWVudGFsX29iamNfZmFzdGJ1aWxkX29wdGlvbnMQABo2VXNlcyB0aGVzZSBzdHJpbmdzIGFzIG9iamMgZmFzdGJ1aWxkIGNvbXBpbGVyIG9wdGlvbnMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOhRBQ1RJT05fQ09NTUFORF9MSU5FU0oRT1VUUFVUX1BBUkFNRVRFUlNQAQr6AgocZXhwZXJpbWVudGFsX2VuYWJsZV9za3lmb2N1cxABGpMBSWYgdHJ1ZSwgZW5hYmxlIHRoZSB1c2Ugb2YgLS1leHBlcmltZW50YWxfd29ya2luZ19zZXQgdG8gcmVkdWNlIEJhemVsJ3MgbWVtb3J5IGZvb3RwcmludCBmb3IgaW5jcmVtZW50YWwgYnVpbGRzLiBUaGlzIGZlYXR1cmUgaXMga25vd24gYXMgU2t5Zm9jdXMuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOiNIT1NUX01BQ0hJTkVfUkVTT1VSQ0VfT1BUSU1JWkFUSU9OU0oXQlVJTERfVElNRV9PUFRJTUlaQVRJT05QAAr/AQoJamF2YV9kZXBzEAEaUkdlbmVyYXRlIGRlcGVuZGVuY3kgaW5mb3JtYXRpb24gKGZvciBub3csIGNvbXBpbGUtdGltZSBjbGFzc3BhdGgpIHBlciBKYXZhIHRhcmdldC4iBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIFZmV0Y2giBGluZm8iDm1vYmlsZS1pbnN0YWxsIgxwcmludF9hY3Rpb24iA3J1biIEdGVzdCIGdmVuZG9yMAA6B1VOS05PV05KDVVOQ0FURUdPUklaRURQAArBAgopZXhwZXJpbWVudGFsX2FuZHJvaWRfdXNlX3BhcmFsbGVsX2RleDJvYXQQARo6VXNlIGRleDJvYXQgaW4gcGFyYWxsZWwgdG8gcG9zc2libHkgc3BlZWQgdXAgYW5kcm9pZF90ZXN0LiIGYXF1ZXJ5IgVidWlsZCISY2Fub25pY2FsaXplLWZsYWdzIgVjbGVhbiIGY29uZmlnIghjb3ZlcmFnZSIGY3F1ZXJ5IgVmZXRjaCIEaW5mbyIObW9iaWxlLWluc3RhbGwiDHByaW50X2FjdGlvbiIDcnVuIgR0ZXN0IgZ2ZW5kb3IwADoUTE9BRElOR19BTkRfQU5BTFlTSVM6I0hPU1RfTUFDSElORV9SRVNPVVJDRV9PUFRJTUlaQVRJT05TQgxFWFBFUklNRU5UQUxKB1RFU1RJTkdQAAqrAwoZY292ZXJhZ2VfcmVwb3J0X2dlbmVyYXRvchAAGsMBTG9jYXRpb24gb2YgdGhlIGJpbmFyeSB0aGF0IGlzIHVzZWQgdG8gZ2VuZXJhdGUgY292ZXJhZ2UgcmVwb3J0cy4gVGhpcyBtdXN0IGN1cnJlbnRseSBiZSBhIGZpbGVncm91cCB0aGF0IGNvbnRhaW5zIGEgc2luZ2xlIGZpbGUsIHRoZSBiaW5hcnkuIERlZmF1bHRzIHRvICcvL3Rvb2xzL3Rlc3Q6Y292ZXJhZ2VfcmVwb3J0X2dlbmVyYXRvcicuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg5DSEFOR0VTX0lOUFVUUzoPQUZGRUNUU19PVVRQVVRTOhRMT0FESU5HX0FORF9BTkFMWVNJU0oJVE9PTENIQUlOUAEK+QQKJWluY29tcGF0aWJsZV9weTJfb3V0cHV0c19hcmVfc3VmZml4ZWQQARqRA0lmIHRydWUsIHRhcmdldHMgYnVpbHQgaW4gdGhlIFB5dGhvbiAyIGNvbmZpZ3VyYXRpb24gd2lsbCBhcHBlYXIgdW5kZXIgYW4gb3V0cHV0IHJvb3QgdGhhdCBpbmNsdWRlcyB0aGUgc3VmZml4ICctcHkyJywgd2hpbGUgdGFyZ2V0cyBidWlsdCBmb3IgUHl0aG9uIDMgd2lsbCBhcHBlYXIgaW4gYSByb290IHdpdGggbm8gUHl0aG9uLXJlbGF0ZWQgc3VmZml4LiBUaGlzIG1lYW5zIHRoYXQgdGhlIGBiYXplbC1iaW5gIGNvbnZlbmllbmNlIHN5bWxpbmsgd2lsbCBwb2ludCB0byBQeXRob24gMyB0YXJnZXRzIHJhdGhlciB0aGFuIFB5dGhvbiAyLiBJZiB5b3UgZW5hYmxlIHRoaXMgb3B0aW9uIGl0IGlzIGFsc28gcmVjb21tZW5kZWQgdG8gZW5hYmxlIGAtLWluY29tcGF0aWJsZV9weTNfaXNfZGVmYXVsdGAuIgZhcXVlcnkiBWJ1aWxkIhJjYW5vbmljYWxpemUtZmxhZ3MiBWNsZWFuIgZjb25maWciCGNvdmVyYWdlIgZjcXVlcnkiBWZldGNoIgRpbmZvIg5tb2JpbGUtaW5zdGFsbCIMcHJpbnRfYWN0aW9uIgNydW4iBHRlc3QiBnZlbmRvcjAAOg9BRkZFQ1RTX09VVFBVVFNCE0lOQ09NUEFUSUJMRV9DSEFOR0VKDkdFTkVSSUNfSU5QVVRTUAAKwwIKJ2V4cGVyaW1lbnRhbF9yZW1vdGVfZXhlY3V0aW9uX2tlZXBhbGl2ZRABGjRXaGV0aGVyIHRvIHVzZSBrZWVwYWxpdmUgZm9yIHJlbW90ZSBleGVjdXRpb24gY2FsbHMuIg9hbmFseXplLXByb2ZpbGUiBmFxdWVyeSIFYnVpbGQiEmNhbm9uaWNhbGl6ZS1mbGFncyIFY2xlYW4iBmNvbmZpZyIIY292ZXJhZ2UiBmNxdWVyeSIEZHVtcCIFZmV0Y2giBGhlbHAiBGluZm8iB2xpY2Vuc2UiDm1vYmlsZS1pbnN0YWxsIgNtb2QiDHByaW50X2FjdGlvbiIFcXVlcnkiA3J1biIIc2h1dGRvd24iBHN5bmMiBHRlc3QiBnZlbmRvciIHdmVyc2lvbjAAOgdVTktOT1dOSgZSRU1PVEVQAA==