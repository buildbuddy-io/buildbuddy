module(name = "buildbuddy")

## Overrides

# abseil-cpp 20240722.0 in BCR does not have feature parity with its github analog
bazel_dep(name = "abseil-cpp", repo_name = "com_google_absl")
archive_override(
    module_name = "abseil-cpp",
    integrity = "sha256-9Q5awxGoE4Laf6dblzEOS5AGR0+VYKxG9UqZZ/B9SuM=",
    strip_prefix = "abseil-cpp-20240722.0",
    urls = ["https://github.com/abseil/abseil-cpp/releases/download/20240722.0/abseil-cpp-20240722.0.tar.gz"],
)

bazel_dep(name = "gazelle",version = "0.44.0", repo_name = "bazel_gazelle")
single_version_override(
    module_name = "gazelle",
    patch_strip = 1,
    patches = [
        "@@//buildpatches:gazelle.patch",
    ],
    version = "0.44.0",
)

bazel_dep(name = "googleapis")
single_version_override(
    module_name = "googleapis",
    patch_strip = 1,
    patches = [
        "@@//buildpatches:bzlmod_googleapis.patch",
    ],
    version = "0.0.0-20241220-5e258e33",
)

# Note that this is 'rules_nodejs-core'
# Keep in sync with build_bazel_rules_nodejs in WORKSPACE.bzlmod
bazel_dep(name = "rules_nodejs", version = "5.8.5")
single_version_override(
    module_name = "rules_nodejs",
    patch_strip = 1,
    patches = [
        "@@//buildpatches:build_bazel_rules_nodejs.patch",
    ],
    version = "5.8.5",
)

# dependencies of rules_webtesting module
# TODO(sluongng): remove this once rules_scala is released on Central Registry
archive_override(
    module_name = "rules_scala",
    integrity = "sha256-+Sc7oo2LlLxL12lg0TdBgGsr83CUTKZnMrrZL6tGMm0=",
    strip_prefix = "rules_scala-219e63983e8e483e66ebf70372969ba227382001",
    urls = [
        "https://github.com/mbland/rules_scala/archive/219e63983e8e483e66ebf70372969ba227382001.tar.gz",
    ],
)

bazel_dep(name = "rules_webtesting")
archive_override(
    module_name = "rules_webtesting",
    integrity = "sha256-wJV/ZIAEYtzoEynx+f6NYA1ilAIrK6ppbUuaeI0+j3Y=",
    patch_strip = 1,
    patches = [
        "@@//buildpatches:rules_webtesting.patch",
    ],
    strip_prefix = "rules_webtesting-7a1c88f61e35ee5ce0892ae24e2aa2a3106cbfed",
    urls = [
        "https://github.com/bazelbuild/rules_webtesting/archive/7a1c88f61e35ee5ce0892ae24e2aa2a3106cbfed.tar.gz",
    ],
)

bazel_dep(name = "toolchains_buildbuddy")
archive_override(
    module_name = "toolchains_buildbuddy",
    integrity = "sha256-e6gcgLHmJHvxCNNbCSQ4OrX8FbGn8TiS7XSVphM1ZU8=",
    strip_prefix = "buildbuddy-toolchain-badf8034b2952ec613970a27f24fb140be7eaf73",
    urls = ["https://github.com/buildbuddy-io/buildbuddy-toolchain/archive/badf8034b2952ec613970a27f24fb140be7eaf73.tar.gz"],
)

bazel_dep(name = "rules_docker", repo_name = "io_bazel_rules_docker")
archive_override(
    module_name = "rules_docker",
    integrity = "sha256-IWwvS6cUMRgusMhq2fvBtkrV3wNylTgxp9IlF7KVk2I=",
    strip_prefix = "rules_docker-fd17b1c56380f4f661a9c4649cd95809a132d9e3",
    # This is BuildBuddy fork of rules_docker with bzlmod support.
    # Diff: https://github.com/bazelbuild/rules_docker/compare/master...buildbuddy-io:rules_docker:master
    urls = ["https://github.com/buildbuddy-io/rules_docker/archive/fd17b1c56380f4f661a9c4649cd95809a132d9e3.tar.gz"],
)

bazel_dep(name = "rules_k8s", repo_name = "io_bazel_rules_k8s")
archive_override(
    module_name = "rules_k8s",
    integrity = "sha256-3Mlx7XOFKElr7S+RjozqWqb7LPUf1pg48W0RV5XT4cc=",
    strip_prefix = "rules_k8s-a40e8ad10fe00afd8bd149e558e5572793ca5873",
    # This is our own fork of rules_k8s with bzlmod support.
    # Diff: https://github.com/bazelbuild/rules_k8s/compare/master...buildbuddy-io:rules_k8s:master
    urls = ["https://github.com/buildbuddy-io/rules_k8s/archive/a40e8ad10fe00afd8bd149e558e5572793ca5873.tar.gz"],
)

## Regular bazel_deps

bazel_dep(name = "aspect_bazel_lib", version = "2.14.0")
bazel_dep(name = "aspect_rules_esbuild", version = "0.21.0")
bazel_dep(name = "aspect_rules_jasmine", version = "2.0.0")
bazel_dep(name = "aspect_rules_js", version = "2.1.3")
bazel_dep(name = "aspect_rules_swc", version = "2.3.0")
bazel_dep(name = "aspect_rules_ts", version = "3.6.3")
bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "protobuf", version = "29.3", repo_name = "com_google_protobuf")
bazel_dep(name = "rules_cc", version = "0.0.17")
bazel_dep(name = "rules_go", version = "0.55.1", repo_name = "io_bazel_rules_go")
bazel_dep(name = "rules_oci", version = "2.0.0")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "toolchains_musl", version = "0.1.15")
bazel_dep(name = "zlib", version = "1.3.1.bcr.3")

## Included extensions

go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

dev_go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps", dev_dependency = True)
dev_go_deps.config(check_direct_dependencies = "error")
dev_go_deps.from_file(go_mod = "//:go.mod")

# Non-Go repos referenced by Go repos
inject_repo(
    dev_go_deps,
    "googleapis",
    "zlib",
    # Bazelisk depends on aspect_rules_js
    "aspect_rules_js",
)

# Go repos with patches
dev_go_deps.module_override(
    patch_strip = 1,
    patches = [
        "@io_bazel_rules_go//third_party:com_github_gogo_protobuf-gazelle.patch",
    ],
    path = "github.com/gogo/protobuf",
)
dev_go_deps.gazelle_override(
    build_file_generation = "off",
    path = "github.com/gogo/protobuf",
)
dev_go_deps.module_override(
    patch_strip = 1,
    patches = [
        "@buildbuddy//buildpatches:cloudflare_circl.patch",
    ],
    path = "github.com/cloudflare/circl",
)
dev_go_deps.module_override(
    patch_strip = 1,
    patches = [
        "@buildbuddy//buildpatches:vtprotobuf.patch",
    ],
    path = "github.com/planetscale/vtprotobuf",
)
dev_go_deps.module_override(
    patch_strip = 1,
    patches = [
        "@buildbuddy//buildpatches:bzlmod_com_github_awslabs_soci_snapshotter.patch",
    ],
    path = "github.com/awslabs/soci-snapshotter",
)
dev_go_deps.module_override(
    patch_strip = 1,
    patches = ["@@//buildpatches:buildifier.patch"],
    path = "github.com/bazelbuild/buildtools",
)
dev_go_deps.module_override(
    patch_strip = 1,
    patches = [
        "@@//buildpatches:com_github_firecracker_microvm_firecracker_go_sdk_jailer.patch",
        "@@//buildpatches:com_github_firecracker_microvm_firecracker_go_sdk_cgroup.patch",
    ],
    path = "github.com/firecracker-microvm/firecracker-go-sdk",
)
dev_go_deps.module_override(
    patch_strip = 1,
    patches = ["@@//buildpatches:com_github_mattn_go_sqlite3.patch"],
    path = "github.com/mattn/go-sqlite3",
)
dev_go_deps.module_override(
    patch_strip = 1,
    patches = [
        # Remove panic() from serverHandlerTransport.Drain
        # gRPC GracefulStop stops accepting new requests and lets any existing
        # requests finish. For "grpc-over-http" requests, gRPC does not control
        # the connection lifetime so they choose to panic in Drain if there are
        # inflight "grpc-over-http" requests. Since we also shutdown the HTTP
        # server gracefully, it's safe for us to allow gRPC to wait for all
        # ongoing requests to finish.
        "@@//buildpatches:org_golang_google_grpc_remove_drain_panic.patch",
    ],
    path = "google.golang.org/grpc",
)
dev_go_deps.module_override(
    patch_strip = 1,
    patches = [
        "@@//buildpatches:io_kythe.patch",
    ],
    path = "kythe.io",
)
dev_go_deps.module_override(
    patches = [
        "@@//buildpatches:com_github_containerd_ttrpc.patch",
    ],
    path = "github.com/containerd/ttrpc",
)

# Go repos with custom directives
dev_go_deps.gazelle_override(
    directives = [
        "gazelle:go_proto_compilers @io_bazel_rules_go//proto:go_proto,@@//proto:vtprotobuf_compiler",
    ],
    path = "github.com/prometheus/client_model",
)
dev_go_deps.gazelle_override(
    directives = [
        "gazelle:go_grpc_compilers @io_bazel_rules_go//proto:go_proto,@io_bazel_rules_go//proto:go_grpc_v2",
    ],
    path = "github.com/awslabs/soci-snapshotter",
)
dev_go_deps.gazelle_override(
    directives = [
        "gazelle:go_grpc_compilers @io_bazel_rules_go//proto:go_proto,@io_bazel_rules_go//proto:go_grpc_v2",
    ],
    path = "github.com/buildbuddy-io/tensorflow-proto",
)
dev_go_deps.gazelle_override(
    directives = [
        "gazelle:resolve go github.com/jhump/protoreflect/internal/testprotos @com_github_jhump_protoreflect//internal/testprotos",
        "gazelle:proto disable",
    ],
    path = "github.com/jhump/protoreflect",
)
dev_go_deps.gazelle_override(
    directives = ["gazelle:resolve go cel.dev/expr @dev_cel_expr//proto/cel/expr:expr_go_proto"],
    path = "github.com/cncf/xds/go",
)
dev_go_deps.gazelle_override(
    directives = [
        "gazelle:proto file",
        "gazelle:resolve proto proto/status.proto @googleapis//google/rpc:status_proto",
        "gazelle:resolve proto go proto/status.proto @org_golang_google_genproto_googleapis_rpc//status",
    ],
    path = "github.com/containerd/ttrpc",
)
dev_go_deps.gazelle_override(
    # Force a Gazelle run to ensure build targets in Bazelisk follow
    # Gazelle naming conventions.
    build_file_generation = "on",
    path = "github.com/bazelbuild/bazelisk",
)
dev_go_deps.gazelle_override(
    # Force Gazelle to wipe out the existing build files before regenerate them.
    build_file_generation = "clean",
    directives = [
        "gazelle:proto file",
        "gazelle:proto_strip_import_prefix /proto/cel/expr",
        "gazelle:proto_import_prefix cel/expr",
        "gazelle:resolve proto google/rpc/status.proto @googleapis//google/rpc:status_proto",
        "gazelle:resolve proto go google/rpc/status.proto @org_golang_google_genproto_googleapis_rpc//status",
    ],
    path = "cel.dev/expr",
)
dev_go_deps.gazelle_override(
    directives = [
        "gazelle:resolve go github.com/prometheus/client_model/go @com_github_prometheus_client_model//io/prometheus/client:go",
    ],
    path = "github.com/bojand/ghz",
)
dev_go_deps.gazelle_override(
    directives = [
        "gazelle:resolve go github.com/prometheus/client_model/go @com_github_prometheus_client_model//io/prometheus/client:go",
    ],
    path = "github.com/prometheus/client_golang",
)
dev_go_deps.gazelle_override(
    directives = [
        "gazelle:resolve go github.com/prometheus/client_model/go @com_github_prometheus_client_model//io/prometheus/client:go",
    ],
    path = "github.com/prometheus/common",
)
dev_go_deps.gazelle_override(
    directives = [
        "gazelle:resolve go github.com/prometheus/client_model/go @com_github_prometheus_client_model//io/prometheus/client:go",
    ],
    path = "go.opentelemetry.io/otel/exporters/prometheus",
)
use_repo(
    go_deps,
    "co_honnef_go_tools",
    "com_github_alecaivazis_survey_v2",
    "com_github_armon_circbuf",
    "com_github_aws_aws_sdk_go",
    "com_github_aws_aws_sdk_go_v2",
    "com_github_aws_aws_sdk_go_v2_config",
    "com_github_aws_aws_sdk_go_v2_credentials",
    "com_github_aws_aws_sdk_go_v2_feature_rds_auth",
    "com_github_aws_aws_sdk_go_v2_feature_s3_manager",
    "com_github_aws_aws_sdk_go_v2_service_s3",
    "com_github_aws_aws_sdk_go_v2_service_sts",
    "com_github_aws_smithy_go",
    "com_github_awslabs_soci_snapshotter",
    "com_github_azure_azure_storage_blob_go",
    "com_github_bazelbuild_bazelisk",
    "com_github_bazelbuild_buildtools",
    "com_github_bduffany_godemon",
    "com_github_bits_and_blooms_bloom_v3",
    "com_github_bojand_ghz",
    "com_github_bradfitz_gomemcache",
    "com_github_buildbuddy_io_tensorflow_proto",
    "com_github_buildkite_terminal_to_html_v3",
    "com_github_cavaliergopher_cpio",
    "com_github_cespare_xxhash_v2",
    "com_github_clickhouse_clickhouse_go_v2",
    "com_github_cockroachdb_pebble",
    "com_github_containerd_containerd",
    "com_github_coreos_go_oidc_v3",
    "com_github_creack_pty",
    "com_github_crewjam_saml",
    "com_github_distribution_reference",
    "com_github_docker_docker",
    "com_github_docker_go_units",
    "com_github_dop251_goja",
    "com_github_elastic_gosigar",
    "com_github_firecracker_microvm_firecracker_go_sdk",
    "com_github_gabriel_vasile_mimetype",
    "com_github_go_enry_go_enry_v2",
    "com_github_go_faker_faker_v4",
    "com_github_go_git_go_git_v5",
    "com_github_go_redis_redis_extra_redisotel_v8",
    "com_github_go_redis_redis_v8",
    "com_github_go_sql_driver_mysql",
    "com_github_gobwas_glob",
    "com_github_golang_jwt_jwt_v4",
    "com_github_google_go_cmp",
    "com_github_google_go_containerregistry",
    "com_github_google_go_github_v59",
    "com_github_google_shlex",
    "com_github_google_uuid",
    "com_github_googlecloudplatform_cloudsql_proxy",
    "com_github_gorilla_mux",
    "com_github_groob_plist",
    "com_github_grpc_ecosystem_go_grpc_middleware_providers_prometheus",
    "com_github_hanwen_go_fuse_v2",
    "com_github_hashicorp_golang_lru",
    "com_github_hashicorp_memberlist",
    "com_github_hashicorp_serf",
    "com_github_jackc_pgerrcode",
    "com_github_jackc_pgx_v5",
    "com_github_jhump_protoreflect",
    "com_github_jonboulle_clockwork",
    "com_github_jotfs_fastcdc_go",
    "com_github_jsimonetti_rtnetlink",
    "com_github_klauspost_compress",
    "com_github_klauspost_cpuid_v2",
    "com_github_lestrrat_go_jwx",
    "com_github_lni_dragonboat_v4",
    "com_github_lni_goutils",
    "com_github_logrusorgru_aurora",
    "com_github_manifoldco_promptui",
    "com_github_masterminds_semver_v3",
    "com_github_mattn_go_isatty",
    "com_github_mattn_go_shellwords",
    "com_github_mattn_go_sqlite3",
    "com_github_mdlayher_vsock",
    "com_github_miekg_dns",
    "com_github_mitchellh_go_ps",
    "com_github_mwitkow_grpc_proxy",
    "com_github_ncruces_go_sqlite3",
    "com_github_nishanths_exhaustive",
    "com_github_open_feature_go_sdk",
    "com_github_open_feature_go_sdk_contrib_providers_flagd",
    "com_github_opencontainers_go_digest",
    "com_github_opencontainers_image_spec",
    "com_github_opencontainers_runtime_spec",
    "com_github_otiai10_copy",
    "com_github_pkg_errors",
    "com_github_planetscale_vtprotobuf",
    "com_github_pmezard_go_difflib",
    "com_github_prometheus_client_golang",
    "com_github_prometheus_client_model",
    "com_github_prometheus_common",
    "com_github_prometheus_procfs",
    "com_github_rantav_go_grpc_channelz",
    "com_github_roaringbitmap_roaring",
    "com_github_rs_zerolog",
    "com_github_shirou_gopsutil_v3",
    "com_github_shurcool_githubv4",
    "com_github_sirupsen_logrus",
    "com_github_smacker_go_tree_sitter",
    "com_github_stretchr_testify",
    "com_github_tebeka_selenium",
    "com_github_throttled_throttled_v2",
    "com_github_tink_crypto_tink_go_awskms_v2",
    "com_github_tink_crypto_tink_go_gcpkms_v2",
    "com_github_tink_crypto_tink_go_v2",
    "com_github_tklauser_go_sysconf",
    "com_github_victoriametrics_metrics",
    "com_github_vishvananda_netlink",
    "com_github_xiam_s_expr",
    "com_github_zeebo_blake3",
    "com_gitlab_arm_research_smarter_smarter_device_manager",
    "com_google_cloud_go_compute",
    "com_google_cloud_go_compute_metadata",
    "com_google_cloud_go_logging",
    "com_google_cloud_go_longrunning",
    "com_google_cloud_go_secretmanager",
    "com_google_cloud_go_storage",
    "in_gopkg_yaml_v2",
    "in_gopkg_yaml_v3",
    "io_gorm_driver_clickhouse",
    "io_gorm_driver_mysql",
    "io_gorm_driver_postgres",
    "io_gorm_driver_sqlite",
    "io_gorm_gorm",
    "io_kythe",
    "io_opentelemetry_go_contrib_detectors_gcp",
    "io_opentelemetry_go_contrib_instrumentation_google_golang_org_grpc_otelgrpc",
    "io_opentelemetry_go_contrib_instrumentation_net_http_otelhttp",
    "io_opentelemetry_go_otel",
    "io_opentelemetry_go_otel_exporters_jaeger",
    "io_opentelemetry_go_otel_exporters_prometheus",
    "io_opentelemetry_go_otel_metric",
    "io_opentelemetry_go_otel_sdk",
    "io_opentelemetry_go_otel_sdk_metric",
    "io_opentelemetry_go_otel_trace",
    "org_golang_google_api",
    "org_golang_google_genproto",
    "org_golang_google_genproto_googleapis_api",
    "org_golang_google_genproto_googleapis_bytestream",
    "org_golang_google_genproto_googleapis_rpc",
    "org_golang_google_grpc",
    "org_golang_google_protobuf",
    "org_golang_x_crypto",
    "org_golang_x_exp",
    "org_golang_x_mod",
    "org_golang_x_net",
    "org_golang_x_oauth2",
    "org_golang_x_sync",
    "org_golang_x_sys",
    "org_golang_x_text",
    "org_golang_x_time",
    "org_golang_x_tools",
    "org_uber_go_atomic",
)

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "buildbuddy_go_oci_image_base",
    digest = "sha256:388145607c79313a1e49b783a7ee71e4ef3df31d87c45adb46bfb9b257b643d1",
    image = "gcr.io/distroless/cc-debian12",
    platforms = ["linux/amd64"],
)
oci.pull(
    name = "bazel_oci_image_base",
    digest = "sha256:8bb82ccf73085b71159ce05d2cc6030cbaa927b403c04774f0b22f37ab4fd78a",
    image = "gcr.io/distroless/java17-debian12",
    platforms = ["linux/amd64"],
)
oci.pull(
    name = "busybox",
    digest = "sha256:c230832bd3b0be59a6c47ed64294f9ce71e91b327957920b6929a0caa8353140",
    image = "mirror.gcr.io/library/busybox:1.36.1",
    platforms = ["linux/amd64"],
)
use_repo(
    oci,
    "bazel_oci_image_base",
    "bazel_oci_image_base_linux_amd64",
    "buildbuddy_go_oci_image_base",
    "buildbuddy_go_oci_image_base_linux_amd64",
    "busybox",
    "busybox_linux_amd64",
)

install_static_dependencies_ext = use_extension(":deps.bzl", "install_static_dependencies_ext")
use_repo(
    install_static_dependencies_ext,
    "com_github_bazelbuild_bazelisk-bazelisk-darwin-amd64",
    "com_github_bazelbuild_bazelisk-bazelisk-darwin-arm64",
    "com_github_bazelbuild_bazelisk-bazelisk-linux-amd64",
    "com_github_bazelbuild_bazelisk-bazelisk-linux-arm64",
    "com_github_buildbuddy_io_podman_static_podman-linux-amd64",
    "com_github_buildbuddy_io_podman_static_podman-linux-arm64",
    "com_github_buildbuddy_io_protoc_gen_protobufjs",
    "com_github_buildbuddy_io_soci_snapshotter-static-linux-amd64",
    "com_github_containerd_containerd-linux-amd64",
    "com_github_containerd_containerd-linux-arm64",
    "com_github_containerd_stargz_snapshotter-v0.11.4-linux-amd64",
    "com_github_containers_crun_crun-linux-amd64",
    "com_github_containers_crun_crun-linux-arm64",
    "com_github_firecracker_microvm_firecracker",
    "com_github_firecracker_microvm_firecracker_arm64",
    "com_github_googlecloudplatform_docker-credential-gcr-linux-amd64",
    "com_github_googlecloudplatform_docker-credential-gcr-linux-arm64",
    "com_github_krallin_tini_tini-linux-amd64",
    "com_github_krallin_tini_tini-linux-arm64",
    "com_github_opencontainers_runc_runc-linux-amd64",
    "com_github_opencontainers_runc_runc-linux-arm64",
    "com_github_redis_redis-redis-server-v6.2.1-linux-arm64",
    "com_github_redis_redis-redis-server-v6.2.1-linux-x86_64",
    "com_github_redis_redis-redis-server-v6.2.6-darwin-arm64",
    "com_github_redis_redis-redis-server-v6.2.6-darwin-x86_64",
    "com_github_rootless_containers_rootlesskit-linux-amd64",
    "com_github_rootless_containers_rootlesskit-linux-arm64",
    "io_bazel_bazel-5.3.2-darwin-arm64",
    "io_bazel_bazel-5.3.2-darwin-x86_64",
    "io_bazel_bazel-5.3.2-linux-arm64",
    "io_bazel_bazel-5.3.2-linux-x86_64",
    "io_bazel_bazel-6.5.0-darwin-arm64",
    "io_bazel_bazel-6.5.0-darwin-x86_64",
    "io_bazel_bazel-6.5.0-linux-arm64",
    "io_bazel_bazel-6.5.0-linux-x86_64",
    "io_bazel_bazel-7.1.0-darwin-arm64",
    "io_bazel_bazel-7.1.0-darwin-x86_64",
    "io_bazel_bazel-7.1.0-linux-arm64",
    "io_bazel_bazel-7.1.0-linux-x86_64",
    "io_bazel_bazel-8.1.1-darwin-arm64",
    "io_bazel_bazel-8.1.1-darwin-x86_64",
    "io_bazel_bazel-8.1.1-linux-arm64",
    "io_bazel_bazel-8.1.1-linux-x86_64",
    "net_busybox_busybox-linux-amd64",
    "net_busybox_busybox-linux-arm64",
    "org_kernel_git_linux_kernel-vmlinux",
    "org_kernel_git_linux_kernel-vmlinux-6.1",
    "org_kernel_git_linux_kernel-vmlinux-arm64",
    "org_llvm_llvm_clang-format_linux-x86_64",
    "org_llvm_llvm_clang-format_macos-x86_64",
)

## Other extensions

container_pull = use_repo_rule("@io_bazel_rules_docker//container:pull.bzl", "container_pull")

container_pull(
    name = "buildbuddy_go_image_base",
    digest = "sha256:54b60abf4fff72d703e028d1c412a727776a6a191a00d7598214ef67b496ef95",
    registry = "gcr.io",
    repository = "distroless/cc-debian12",
)

container_pull(
    name = "bazel_image_base",
    digest = "sha256:ab0c5fbe16bc01c03eb081a5724ba618110cbd24940ab123a8dbee0382a4c175",
    registry = "gcr.io",
    repository = "distroless/java11-debian11",
)

dockerfile_image = use_repo_rule("@io_bazel_rules_docker//contrib:dockerfile_build.bzl", "dockerfile_image")

dockerfile_image(
    name = "default_execution_image",
    dockerfile = "//dockerfiles/default_execution_image:Dockerfile",
    visibility = ["//visibility:public"],
)

dockerfile_image(
    name = "executor_image",
    dockerfile = "//dockerfiles/executor_image:Dockerfile",
    visibility = ["//visibility:public"],
)

dockerfile_image(
    name = "nonroot_user_image",
    dockerfile = "//dockerfiles/test_images/nonroot_user_image:Dockerfile",
    visibility = ["//visibility:public"],
)

dockerfile_image(
    name = "rbe-ubuntu20-04_image",
    dockerfile = "//dockerfiles/rbe-ubuntu20-04:Dockerfile",
)

dockerfile_image(
    name = "rbe-ubuntu20-04-webtest_image",
    dockerfile = "//dockerfiles/rbe-ubuntu20-04-webtest:Dockerfile",
)

dockerfile_image(
    name = "rbe-ubuntu22-04_image",
    dockerfile = "//dockerfiles/rbe-ubuntu22-04:Dockerfile",
)

dockerfile_image(
    name = "ci_runner_image",
    dockerfile = "//enterprise/dockerfiles/ci_runner_image:Dockerfile",
    visibility = ["//visibility:public"],
)

dockerfile_image(
    name = "rbe-ubuntu20-04-workflows_image",
    dockerfile = "//enterprise/dockerfiles/rbe-ubuntu20-04-workflows:Dockerfile",
    visibility = ["//visibility:public"],
)

dockerfile_image(
    name = "run_script_image",
    dockerfile = "//dockerfiles/run_script:Dockerfile",
    visibility = ["//visibility:public"],
)

browser_repositories = use_extension("@rules_webtesting//web:extension.bzl", "browser_repositories_extension")
browser_repositories.install(version = "0.3.4")
use_repo(
    browser_repositories,
    "org_chromium_chromedriver_linux_x64",
    "org_chromium_chromedriver_macos_arm64",
    "org_chromium_chromedriver_macos_x64",
    "org_chromium_chromedriver_windows_x64",
    "org_chromium_chromium_linux_x64",
    "org_chromium_chromium_macos_arm64",
    "org_chromium_chromium_macos_x64",
    "org_chromium_chromium_windows_x64",
)

buildbuddy = use_extension("@toolchains_buildbuddy//:extensions.bzl", "buildbuddy")
buildbuddy.platform(buildbuddy_container_image = "UBUNTU20_04_IMAGE")
buildbuddy.msvc_toolchain(
    # This is the MSVC available on Github Action win22 image
    # https://github.com/actions/runner-images/blob/win22/20250623.1/images/windows/Windows2022-Readme.md
    msvc_edition = "Enterprise",
    msvc_release = "2022",
    # From 'Microsoft Visual C++ 2022 Minimum Runtime' for x64 architecture
    # https://github.com/actions/runner-images/blob/win22/20250623.1/images/windows/Windows2022-Readme.md#microsoft-visual-c
    msvc_version = "14.44.35207",
    # From 'Installed Windows SDKs'
    # https://github.com/actions/runner-images/blob/win22/20250623.1/images/windows/Windows2022-Readme.md#installed-windows-sdks
    windows_kits_release = "10",
    windows_kits_version = "10.0.22621.0",
)

# Explicitly register the toolchains in the order which we want to use.
#
# Note: Both rules_cc and toolschains_buildbuddy modules automatically register
# their respective toolchains automatically. Bazel will prioritize which ever bazel_dep
# was declared first. By explicitly registering the toolchains here, we can control
# the prioritization order.
#
# If none of the toolchains listed here matched against
# the target+exec platform combintation, Bazel will pick one from the toolchains that
# were automatically registered toolchains by these dependencies modules.
#
# Reference: https://bazel.build/external/migration#register-toolchains
register_toolchains(
    # CC toolchains
    "@toolchains_buildbuddy//toolchains/cc:ubuntu_gcc_x86_64",
    "@toolchains_buildbuddy//toolchains/cc:ubuntu_gcc_arm64",
    "@toolchains_buildbuddy//toolchains/cc:windows_msvc_x86_64",
)

go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.24.5")
go_sdk.nogo(nogo = "//:vet")
use_repo(
    go_sdk,
    "go_toolchains",
    "io_bazel_rules_nogo",
)

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(
    name = "nodejs",
    node_version = "18.20.3",
)

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    patch_args = {
        "@protobufjs/inquire": [
            "-p1",
            "--binary",
        ],
    },
    patches = {
        "@protobufjs/inquire": [
            # Patch out use of eval to satisfy a strict CSP.
            # https://github.com/protobufjs/protobuf.js/issues/593
            "//buildpatches:protobuf.js_inquire.patch",
        ],
    },
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext")
rules_ts_ext.deps(
    # TODO: Remove after the next aspect_rules_ts update.
    ts_integrity = "sha512-aJn6wq13/afZp/jT9QZmwEjDqqvSGp1VT5GVg+f/t6/oVyrgXM6BY1h9BRh/O5p3PlUPAe+WuiEZOmb/49RqoQ==",
    ts_version_from = "//:package.json",
)

# TODO: Remove this after the next aspect_rules_ts update.
# https://github.com/aspect-build/rules_ts/pull/786
use_repo(rules_ts_ext, "npm_typescript")

toolchains_musl = use_extension("@toolchains_musl//:toolchains_musl.bzl", "toolchains_musl", dev_dependency = True)
toolchains_musl.config(
    extra_target_compatible_with = ["//toolchains:musl_on"],
)

## Repo rules

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "com_github_sluongng_nogo_analyzer",
    sha256 = "a74a5e44751d292d17bd879e5aa8b40baa94b5dc2f043df1e3acbb3e23ead073",
    strip_prefix = "nogo-analyzer-0.0.2",
    urls = [
        "https://github.com/sluongng/nogo-analyzer/archive/refs/tags/v0.0.2.tar.gz",
    ],
)

http_archive(
    name = "cloudprober",
    build_file_content = "exports_files([\"cloudprober\"])",
    sha256 = "0a824a6e224d9810514f4a2f4a13f09488672ad483bb0e978c16d8a6b3372625",
    strip_prefix = "cloudprober-v0.11.2-ubuntu-x86_64",
    urls = ["https://github.com/google/cloudprober/releases/download/v0.11.2/cloudprober-v0.11.2-ubuntu-x86_64.zip"],
)
