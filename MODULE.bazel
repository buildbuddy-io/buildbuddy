module(name = "buildbuddy")

## Overrides

# abseil-cpp 20240722.0 in BCR does not have feature parity with its github analog
bazel_dep(name = "abseil-cpp", repo_name = "com_google_absl")
archive_override(
    module_name = "abseil-cpp",
    integrity = "sha256-9Q5awxGoE4Laf6dblzEOS5AGR0+VYKxG9UqZZ/B9SuM=",
    strip_prefix = "abseil-cpp-20240722.0",
    urls = ["https://github.com/abseil/abseil-cpp/releases/download/20240722.0/abseil-cpp-20240722.0.tar.gz"],
)

bazel_dep(name = "gazelle", repo_name = "bazel_gazelle")
single_version_override(
    module_name = "gazelle",
    patch_strip = 1,
    patches = [
        "@@//buildpatches:gazelle.patch",
    ],
    version = "0.42.0",
)

bazel_dep(name = "googleapis")
single_version_override(
    module_name = "googleapis",
    patch_strip = 1,
    patches = [
        "@@//buildpatches:bzlmod_googleapis.patch",
    ],
    version = "0.0.0-20241220-5e258e33",
)

# Note that this is 'rules_nodejs-core'
# Keep in sync with build_bazel_rules_nodejs in WORKSPACE.bzlmod
bazel_dep(name = "rules_nodejs")
single_version_override(
    module_name = "rules_nodejs",
    patch_strip = 1,
    patches = [
        "@@//buildpatches:build_bazel_rules_nodejs.patch",
    ],
    version = "5.8.5",
)

# dependencies of rules_webtesting module
# TODO(sluongng): remove this once rules_scala is released on Central Registry
archive_override(
    module_name = "rules_scala",
    integrity = "sha256-+Sc7oo2LlLxL12lg0TdBgGsr83CUTKZnMrrZL6tGMm0=",
    strip_prefix = "rules_scala-219e63983e8e483e66ebf70372969ba227382001",
    urls = [
        "https://github.com/mbland/rules_scala/archive/219e63983e8e483e66ebf70372969ba227382001.tar.gz",
    ],
)

bazel_dep(name = "rules_webtesting")
archive_override(
    module_name = "rules_webtesting",
    integrity = "sha256-wJV/ZIAEYtzoEynx+f6NYA1ilAIrK6ppbUuaeI0+j3Y=",
    patch_strip = 1,
    patches = [
        "@@//buildpatches:rules_webtesting.patch",
    ],
    strip_prefix = "rules_webtesting-7a1c88f61e35ee5ce0892ae24e2aa2a3106cbfed",
    urls = [
        "https://github.com/bazelbuild/rules_webtesting/archive/7a1c88f61e35ee5ce0892ae24e2aa2a3106cbfed.tar.gz",
    ],
)

bazel_dep(name = "toolchains_buildbuddy")
archive_override(
    module_name = "toolchains_buildbuddy",
    integrity = "sha256-e6gcgLHmJHvxCNNbCSQ4OrX8FbGn8TiS7XSVphM1ZU8=",
    strip_prefix = "buildbuddy-toolchain-badf8034b2952ec613970a27f24fb140be7eaf73",
    urls = ["https://github.com/buildbuddy-io/buildbuddy-toolchain/archive/badf8034b2952ec613970a27f24fb140be7eaf73.tar.gz"],
)

bazel_dep(name = "rules_go", version = "0.53.0", repo_name = "io_bazel_rules_go")
single_version_override(
    module_name = "rules_go",
    patch_strip = 1,
    patches = [
        # https://github.com/bazel-contrib/rules_go/pull/4264
        # TODO(sluongng): remove when v0.54.0 is released
        "@@//buildpatches:rules_go.patch",
    ],
    version = "0.53.0",
)

bazel_dep(name = "rules_docker", repo_name = "io_bazel_rules_docker")
archive_override(
    module_name = "rules_docker",
    integrity = "sha256-gkhS3fjnyrsv3IKgUea/9IMJKcUdtJjYu96P3uqXdU8=",
    strip_prefix = "rules_docker-5f9338ad695a205bb98d3348e61079441852c92a",
    # This is BuildBuddy fork of rules_docker with bzlmod support.
    # Diff: https://github.com/bazelbuild/rules_docker/compare/master...buildbuddy-io:rules_docker:sluongng/bzlmod-enable
    urls = ["https://github.com/buildbuddy-io/rules_docker/archive/5f9338ad695a205bb98d3348e61079441852c92a.tar.gz"],
)

bazel_dep(name = "rules_k8s", repo_name = "io_bazel_rules_k8s")
archive_override(
    module_name = "rules_k8s",
    integrity = "sha256-+1ABfkrF/d9yT0nWnds+Yx3g246FsgTur45yYVu8UkM=",
    strip_prefix = "rules_k8s-5fd4eda0161dc4967e515015cbe84256b5785b80",
    # This is our own fork of rules_k8s with bzlmod support.
    # Diff: https://github.com/bazelbuild/rules_k8s/compare/master...buildbuddy-io:rules_k8s:buildbuddy-fork
    urls = ["https://github.com/buildbuddy-io/rules_k8s/archive/5fd4eda0161dc4967e515015cbe84256b5785b80.tar.gz"],
)

## Regular bazel_deps

bazel_dep(name = "aspect_bazel_lib", version = "2.14.0")
bazel_dep(name = "aspect_rules_esbuild", version = "0.21.0")
bazel_dep(name = "aspect_rules_jasmine", version = "2.0.0")
bazel_dep(name = "aspect_rules_js", version = "2.1.3")
bazel_dep(name = "aspect_rules_swc", version = "2.3.0")
bazel_dep(name = "aspect_rules_ts", version = "3.5.1")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "protobuf", version = "29.3", repo_name = "com_google_protobuf")
bazel_dep(name = "rules_cc", version = "0.0.17")
bazel_dep(name = "rules_oci", version = "2.0.0")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "toolchains_musl", version = "0.1.15")
bazel_dep(name = "zlib", version = "1.3.1.bcr.3")

## Included extensions

include("//:go_deps.MODULE.bazel")

include("//:oci.MODULE.bazel")

include("//:static_deps.MODULE.bazel")

## Other extensions

container_pull = use_repo_rule("@io_bazel_rules_docker//container:pull.bzl", "container_pull")

container_pull(
    name = "buildbuddy_go_image_base",
    digest = "sha256:dc7acdb6300eaa99ae93621b0f033237ae1284fdd5ab323b4d90ba8359c55854",
    registry = "gcr.io",
    repository = "distroless/cc-debian12",
)

container_pull(
    name = "bazel_image_base",
    digest = "sha256:ab0c5fbe16bc01c03eb081a5724ba618110cbd24940ab123a8dbee0382a4c175",
    registry = "gcr.io",
    repository = "distroless/java11-debian11",
)

dockerfile_image = use_repo_rule("@io_bazel_rules_docker//contrib:dockerfile_build.bzl", "dockerfile_image")

dockerfile_image(
    name = "default_execution_image",
    dockerfile = "//dockerfiles/default_execution_image:Dockerfile",
    visibility = ["//visibility:public"],
)

dockerfile_image(
    name = "executor_image",
    dockerfile = "//dockerfiles/executor_image:Dockerfile",
    visibility = ["//visibility:public"],
)

dockerfile_image(
    name = "nonroot_user_image",
    dockerfile = "//dockerfiles/test_images/nonroot_user_image:Dockerfile",
    visibility = ["//visibility:public"],
)

dockerfile_image(
    name = "rbe-ubuntu20-04_image",
    dockerfile = "//dockerfiles/rbe-ubuntu20-04:Dockerfile",
)

dockerfile_image(
    name = "rbe-ubuntu20-04-webtest_image",
    dockerfile = "//dockerfiles/rbe-ubuntu20-04-webtest:Dockerfile",
)

dockerfile_image(
    name = "rbe-ubuntu22-04_image",
    dockerfile = "//dockerfiles/rbe-ubuntu22-04:Dockerfile",
)

dockerfile_image(
    name = "ci_runner_image",
    dockerfile = "//enterprise/dockerfiles/ci_runner_image:Dockerfile",
    visibility = ["//visibility:public"],
)

dockerfile_image(
    name = "rbe-ubuntu20-04-workflows_image",
    dockerfile = "//enterprise/dockerfiles/rbe-ubuntu20-04-workflows:Dockerfile",
    visibility = ["//visibility:public"],
)

dockerfile_image(
    name = "run_script_image",
    dockerfile = "//dockerfiles/run_script:Dockerfile",
    visibility = ["//visibility:public"],
)

browser_repositories = use_extension("@rules_webtesting//web:extension.bzl", "browser_repositories_extension")
browser_repositories.install(version = "0.3.4")
use_repo(
    browser_repositories,
    "org_chromium_chromedriver_linux_x64",
    "org_chromium_chromedriver_macos_arm64",
    "org_chromium_chromedriver_macos_x64",
    "org_chromium_chromedriver_windows_x64",
    "org_chromium_chromium_linux_x64",
    "org_chromium_chromium_macos_arm64",
    "org_chromium_chromium_macos_x64",
    "org_chromium_chromium_windows_x64",
)

buildbuddy = use_extension("@toolchains_buildbuddy//:extensions.bzl", "buildbuddy")
buildbuddy.platform(buildbuddy_container_image = "UBUNTU20_04_IMAGE")
buildbuddy.msvc_toolchain(
    # This is the MSVC available on Github Action win22 image
    # https://github.com/actions/runner-images/blob/win22/20250303.1/images/windows/Windows2022-Readme.md
    msvc_edition = "Enterprise",
    msvc_release = "2022",
    # From 'Microsoft Visual C++ 2022 Minimum Runtime' for x64 architecture
    # https://github.com/actions/runner-images/blob/win22/20250303.1/images/windows/Windows2022-Readme.md#microsoft-visual-c
    msvc_version = "14.43.34808",
)

# Explicitly register the toolchains in the order which we want to use.
#
# Note: Both rules_cc and toolschains_buildbuddy modules automatically register
# their respective toolchains automatically. Bazel will prioritize which ever bazel_dep
# was declared first. By explicitly registering the toolchains here, we can control
# the prioritization order.
#
# If none of the toolchains listed here matched against
# the target+exec platform combintation, Bazel will pick one from the toolchains that
# were automatically registered toolchains by these dependencies modules.
#
# Reference: https://bazel.build/external/migration#register-toolchains
register_toolchains(
    # CC toolchains
    "@toolchains_buildbuddy//toolchains/cc:ubuntu_gcc_x86_64",
    "@toolchains_buildbuddy//toolchains/cc:ubuntu_gcc_arm64",
    "@toolchains_buildbuddy//toolchains/cc:windows_msvc_x86_64",
)

go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.24.2")
go_sdk.nogo(nogo = "@//:vet")
use_repo(
    go_sdk,
    "go_toolchains",
    "io_bazel_rules_nogo",
)

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(
    name = "nodejs",
    node_version = "18.20.3",
)

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    patch_args = {
        "@protobufjs/inquire": [
            "-p1",
            "--binary",
        ],
    },
    patches = {
        "@protobufjs/inquire": [
            # Patch out use of eval to satisfy a strict CSP.
            # https://github.com/protobufjs/protobuf.js/issues/593
            "//buildpatches:protobuf.js_inquire.patch",
        ],
    },
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext")
rules_ts_ext.deps(
    # TODO: Remove after the next aspect_rules_ts update.
    ts_integrity = "sha512-aJn6wq13/afZp/jT9QZmwEjDqqvSGp1VT5GVg+f/t6/oVyrgXM6BY1h9BRh/O5p3PlUPAe+WuiEZOmb/49RqoQ==",
    ts_version_from = "//:package.json",
)

# TODO: Remove this after the next aspect_rules_ts update.
# https://github.com/aspect-build/rules_ts/pull/786
use_repo(rules_ts_ext, "npm_typescript")

toolchains_musl = use_extension("@toolchains_musl//:toolchains_musl.bzl", "toolchains_musl", dev_dependency = True)
toolchains_musl.config(
    extra_target_compatible_with = ["//toolchains:musl_on"],
)

## Repo rules

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "com_github_sluongng_nogo_analyzer",
    sha256 = "a74a5e44751d292d17bd879e5aa8b40baa94b5dc2f043df1e3acbb3e23ead073",
    strip_prefix = "nogo-analyzer-0.0.2",
    urls = [
        "https://github.com/sluongng/nogo-analyzer/archive/refs/tags/v0.0.2.tar.gz",
    ],
)

http_archive(
    name = "cloudprober",
    build_file_content = "exports_files([\"cloudprober\"])",
    sha256 = "0a824a6e224d9810514f4a2f4a13f09488672ad483bb0e978c16d8a6b3372625",
    strip_prefix = "cloudprober-v0.11.2-ubuntu-x86_64",
    urls = ["https://github.com/google/cloudprober/releases/download/v0.11.2/cloudprober-v0.11.2-ubuntu-x86_64.zip"],
)
