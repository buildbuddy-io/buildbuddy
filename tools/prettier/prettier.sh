#!/bin/bash
# Runs prettier on all files that differ from the main branch.

set -e

: "${PRETTIER_PATH:=}"

# File patterns to format using prettier, using git's file pattern syntax.
GIT_FILE_PATTERNS=(
  '*.css'
  '*.html'
  '*.js'
  '*.json'
  '*.jsx'
  '*.md'
  '*.ts'
  '*.tsx'
  '*.xml'
  '*.yaml'
)

# Replacement for GNU realpath (not available on Mac)
realpath() {
  [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

# paths_to_format returns the files that have changed relative to the base
# branch.
#
# The base branch for the diff is determined as follows:
#
# For CI run on PR branches, we use the merge commit that is generated by
# GitHub, and do a shallow fetch with --depth=2.
# In this case, the diff base is HEAD^1:
#
#                         o <- HEAD (merge commit)
#                        /|
#     master, HEAD^1 -> o o <- pr-branch, HEAD^2
#
# Note: GitHub always generates an explicit commit for the merge even if the
# branches have not diverged yet and a fast-forward would be possible instead.
#
# For CI run on push events, we only push master via merging PRs, and we squash
# commits. So HEAD^1 works in this case, too:
#
#     o <- master, HEAD (squashed commit, after merging PR)
#     |
#     o <- HEAD^1 (master branch just before merging the PR)

# For local development, we use `git merge-base HEAD master` as the diff base
# commit, on the assumption that the current branch is intended to be merged
# into the master branch. The merge-base command returns the latest common
# commit between two commits:
#
#     o <- master
#     |
#     o  o <- HEAD, pr-branch
#     | /
#     o <- $(git merge-base HEAD master)
#     |
#
function paths_to_format() {
  if [[ "$CI" == true ]]; then
    DIFF_BASE='HEAD^1'
  else
    DIFF_BASE=$(git merge-base HEAD master)
  fi
  git diff --name-only --diff-filter=AMRCT "$DIFF_BASE" -- "${GIT_FILE_PATTERNS[@]}"
}

mapfile -t paths < <(paths_to_format)

if [[ -z "${paths[*]}" ]]; then
  exit 0
fi

# Run bazel quietly; see: https://github.com/bazelbuild/bazel/issues/4867#issuecomment-796208829
if [[ "$PRETTIER_PATH" ]]; then
  PRETTIER_COMMAND=("$PRETTIER_PATH")
else
  tmp="$(mktemp -d)"
  trap 'rm -rf "$tmp"' EXIT
  bazel run @npm//prettier/bin:prettier --script_path="$tmp/run.sh" &>"$tmp/build.log" || {
    cat "$tmp/build.log" >&2
    exit 1
  }
  chmod +x "$tmp/run.sh"
  PRETTIER_COMMAND=("$tmp/run.sh" --bazel_node_working_dir="$PWD")
fi

"${PRETTIER_COMMAND[@]}" "${paths[@]}" "$@"
