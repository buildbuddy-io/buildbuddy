"use strict";(self.webpackChunkbuildbuddy_docs_website=self.webpackChunkbuildbuddy_docs_website||[]).push([[8130],{77735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"welcoming-dan-stowell","metadata":{"permalink":"/blog/welcoming-dan-stowell","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/welcoming-dan-stowell.md","source":"@site/blog/welcoming-dan-stowell.md","title":"Welcoming Dan Stowell","description":"At BuildBuddy, our mission is to bring the world\'s best developer tools to every company. In order to achieve this mission, we need to build a team that has experience leading and scaling the fastest growing\xa0developer tools companies in the world. That\'s why we\'re so excited to share that Dan Stowell is joining BuildBuddy\'s engineering team.","date":"2025-03-18T12:00:00.000Z","tags":[{"inline":true,"label":"company","permalink":"/blog/tags/company"},{"inline":true,"label":"team","permalink":"/blog/tags/team"}],"readingTime":0.56,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"welcoming-dan-stowell","title":"Welcoming Dan Stowell","authors":"siggi","date":"2025-03-18:12:00:00","image":"/img/welcome_dan.png","tags":["company","team"]},"unlisted":false,"nextItem":{"title":"Unusual Builds with Bytes","permalink":"/blog/unusual-builds-w-bytes"}},"content":"At BuildBuddy, our mission is to bring the world\'s best developer tools to every company. In order to achieve this mission, we need to build a team that has experience leading and scaling the fastest growing\xa0developer tools companies in the world. That\'s why we\'re so excited to share that [**Dan Stowell**](https://www.linkedin.com/in/dstowell/) is joining BuildBuddy\'s engineering team.\\n\\nDan joins us from Vercel, where he was a Director of Engineering. Prior to Vercel, Dan was the Head of Engineering at Replit and a Principal Engineer at Spotify.\\n\\n![](../static/img/blog/welcome_dan.png)\\n\\nWe look forward to working alongside Dan to build the future of developer tools.\\n\\nWelcome to BuildBuddy, Dan!\\n\\n\x3c!-- truncate --\x3e"},{"id":"unusual-builds-w-bytes","metadata":{"permalink":"/blog/unusual-builds-w-bytes","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/unusual-builds-w-bytes.md","source":"@site/blog/unusual-builds-w-bytes.md","title":"Unusual Builds with Bytes","description":"Fixing a download bug in Bazel Build without Bytes (BwoB)","date":"2025-03-10T12:00:00.000Z","tags":[{"inline":true,"label":"bazel","permalink":"/blog/tags/bazel"},{"inline":true,"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":10.11,"hasTruncateMarker":true,"authors":[{"name":"Son Luong Ngoc","title":"Solution Engineer @ BuildBuddy","url":"https://github.com/sluongng/","imageURL":"https://avatars.githubusercontent.com/u/26684313?v=4","key":"son","page":null}],"frontMatter":{"slug":"unusual-builds-w-bytes","title":"Unusual Builds with Bytes","description":"Fixing a download bug in Bazel Build without Bytes (BwoB)","authors":"son","date":"2025-03-10:12:00:00","image":"/img/blog/unusual.png","tags":["bazel","engineering"]},"unlisted":false,"prevItem":{"title":"Welcoming Dan Stowell","permalink":"/blog/welcoming-dan-stowell"},"nextItem":{"title":"Troubleshooting Bazel with Git Bisect","permalink":"/blog/bisect-bazel"}},"content":"We discovered a bug in Bazel that was causing builds with `--remote_download_minimal` to download all output artifacts.\\n\\nA fix has been submitted upstream to the Bazel repository and will be included in the Bazel 9.x release. It will also be cherry-picked back to versions 8.2.0 and 7.6.0.\\n\\nUsers on older versions of Bazel can work around this issue by setting `--experimental_remote_cache_ttl` to a large value, such as `10000d`, with some caveats.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Introduction\\n\\nAt BuildBuddy, we not only operate a Bazel Remote Cache and Remote Build Execution service, but we can also operate Bazel, the client-side, for you.\\nThis is done through two offerings:\\n\\n- [BuildBuddy Workflows](/docs/workflows-setup), which operates as a typical CI system that integrates directly with GitHub.\\n- [BuildBuddy Remote Bazel](/docs/remote-bazel), which is a Bazel-in-the-cloud service that allows you to run Bazel builds remotely.\\n\\nBoth of these are built on top of Firecracker MicroVMs, which allows us to take snapshots of the JVM containing Bazel\'s in-process Analysis Cache and restore it in a new VM in milliseconds.\\nThe snapshots are typically chunked and stored in our Remote Cache, which allows us to share the cache across multiple machines.\\nThis provides a fast and consistent build environment for every build.\\n\\nTo keep typical builds speedy, we strongly encourage our users to use this in conjunction with our Remote Cache and Remote Build Execution features.\\nThis allows us to shift most of the compute demands to a fleet of workers (BuildBuddy Executors) instead of performing them on the MicroVMs.\\nCoupled with Bazel\'s Build without Bytes feature through the `--remote_download_minimal` flag, we also skip downloading the output artifacts back to the MicroVM.\\n\\n<figure>\\n![](../static/img/blog/build-without-bytes.svg)\\n<figcaption>Build without Bytes helps skip the unnecessary downloads</figcaption>\\n</figure>\\n\\nThe smaller the MicroVMs, the faster we can snapshot, cache, and restore them.\\nFor this reason, we have invested significant effort in tracking and reducing resource usage on the MicroVMs.\\n\\n## The Symptoms\\n\\nIn recent months, we started to notice that in some of our CI builds, the MicroVMs were downloading a lot of data.\\nThis could reach hundreds of gigabytes according to statistics tracked by our Remote Cache server.\\n\\nAs we heavily utilize the `--remote_download_minimal` flag, the MicroVMs are typically sized with small disks.\\nWith hundreds of gigabytes of data being downloaded, the MicroVMs were running out of disk space, causing builds to fail.\\n\\nDespite being able to restore different MicroVM states from our snapshots, we could not consistently reproduce the issue.\\nAfter closer inspection of the cache statistics, we narrowed it down to a few key observations:\\n\\n1. **There was little to no discrimination between the output artifacts being downloaded.**\\n\\n   Specifically, a large portion of what was being downloaded were our `go_test` binaries, which are never used because the test actions are always executed remotely in our CI setup.\\n\\n2. **Most of the download requests included `prefetcher` metadata.**\\n\\n   Almost all gRPC requests made by Bazel include special metadata.\\n\\n   ```proto title=\\"remote_execution.proto\\"\\n   // An optional Metadata to attach to any RPC request to tell the server about an\\n   // external context of the request. The server may use this for logging or other\\n   // purposes. To use it, the client attaches the header to the call using the\\n   // canonical proto serialization:\\n   //\\n   // * name: `build.bazel.remote.execution.v2.requestmetadata-bin`\\n   // * contents: the base64 encoded binary `RequestMetadata` message.\\n   // ...\\n   message RequestMetadata {\\n    ...\\n\\n    // An identifier that ties multiple requests to the same action.\\n    // For example, multiple requests to the CAS, Action Cache, and Execution\\n    // API are used in order to compile foo.cc.\\n    string action_id = 2;\\n\\n    // An identifier that ties multiple actions together to a final result.\\n    // For example, multiple actions are required to build and run foo_test.\\n    string tool_invocation_id = 3;\\n\\n    ...\\n\\n    // A brief description of the kind of action, for example, CppCompile or GoLink.\\n    // There is no standard agreed set of values for this, and they are expected to vary between different client tools.\\n    string action_mnemonic = 5;\\n\\n    // An identifier for the target which produced this action.\\n    // No guarantees are made around how many actions may relate to a single target.\\n    string target_id = 6;\\n\\n    ...\\n   }\\n   ```\\n\\n   Here is an example of what this typically looks like in a normal request:\\n\\n   ```json\\n   {\\n     \\"action_id\\": \\"bd7fc99ea67ef952abe64d72dba270f04afe6424a1703ed12b3c935e13110597\\",\\n     \\"tool_invocation_id\\": \\"a3b93bf2-8b16-4a72-b52f-636bc4db47a0\\",\\n     \\"action_mnemonic\\": \\"GoLink\\",\\n     \\"target_id\\": \\"//some/package/path:mypackage_test\\"\\n   }\\n   ```\\n\\n   However, there is a special class of request in Bazel called `prefetcher` requests.\\n\\n   ```json\\n   {\\n     \\"action_id\\": \\"prefetcher\\",\\n     \\"tool_invocation_id\\": \\"8c2a7238-ce49-4149-8bfb-e7a6020294c2\\",\\n     \\"action_mnemonic\\": \\"GoLink\\",\\n     \\"target_id\\": \\"//some/package/path:mypackage_test\\"\\n   }\\n   ```\\n\\n   These are typically observed when an action is about to be executed locally, but some of its inputs were produced by a parent action that was executed remotely.\\n   In such cases, Bazel would typically issue \\"prefetch\\" download requests right after the parent action finishes so that the parent action\'s outputs can be downloaded to the local machine before the child action starts.\\n   These requests are often annotated with the `prefetcher` action ID and the target ID of either the parent action or the child action.\\n\\n   We know that in a typical `go_test` rule, there are a few actions involved:\\n\\n   ```text\\n   GoCompilePkg\\n   GoCompilePkgExternal\\n   => GoLink\\n     => TestRunner\\n   ```\\n\\n   and in this case, we can see that all four actions were executed remotely, eliminating the need for any local download.\\n\\n## The Investigation\\n\\nWhile the original intention of the `prefetcher` requests was to [support locally executed actions](https://github.com/bazelbuild/bazel/commit/ea4ad30d4e49b83b62df0e10b5abe2faadea7582), we found that over time, Bazel has been using this action ID for other purposes.\\nFor example, if a user were to specify a `--remote_download_regex=` pattern to download specific artifacts, those download requests would also be annotated with the `prefetcher` action ID.\\n\\nAs we dug deeper into the issue, we tried to improve the traceability of prefetch downloads in Bazel with [bazebuild/bazel#25040](https://github.com/bazelbuild/bazel/pull/25040), which was backported to Bazel 8.1.0 and 7.5.0.\\nThis change breaks down the `prefetcher` action ID into `input` downloads and `output` downloads, allowing us to narrow down the code paths that were triggering the unwanted downloads.\\nIn the case of input downloads, the target ID would be the consuming/child action\'s label, while in the case of output downloads, the producing/parent action label would be used.\\n\\nOnce we had [upgraded to a Bazel version](/blog/bisect-bazel) with this change, we were able to see that the unwanted downloads were coming from the `output` downloads.\\n\\n## The Bug\\n\\nWe discovered another code path in Bazel that can trigger unexpected downloads: when a blob\'s TTL expires.\\n\\n> So... What is a blob\'s TTL? \ud83e\udd14\\n\\nAs an artifact-oriented build system, Bazel relies heavily on artifacts existing in its output path to determine if a build is up-to-date.\\nIf an artifact exists and matches the expected result, then Bazel will skip the action that produces the artifact.\\nHowever, in a remote build with minimal download, Bazel does not have the artifact locally to validate against and must establish some trust that the artifact was created and stored in the Remote Cache.\\n\\nIntroduced in [bazebuild/bazel#17639](https://github.com/bazelbuild/bazel/pull/17639), this \\"trust\\" is added to Bazel by storing locally the expected Time To Live (TTL) of the artifact that is cached remotely.\\nWhen Bazel executes an action remotely, instead of downloading the outputs referenced inside the ActionResult, it instead just stores the references inside its in-process analysis cache (aka. Skyframe) with an expected TTL that is determined by the flag `--experimental_remote_cache_ttl` (default: 3 hours).\\nWhen the TTL expires, instead of checking if the output artifacts are up-to-date remotely, Bazel downloads the entire artifact to disk.\\nThe problem is exacerbated when the Bazel JVM process is long-lived.\\n\\n> Using BuildBuddy Workflows, a typical Bazel JVM process is kept alive for hours, if not days, as we snapshot and restore it together with the Firecracker MicroVM across multiple builds.\\n\\nWe were able to validate this by setting the flag `--experimental_remote_cache_ttl=0s` to eagerly trigger the downloads.\\n\\n```bash\\n# Initial build\\n$ bazel clean && bazel test //cli/... --config=remote-minimal --disk_cache= --experimental_remote_cache_ttl=1d\\n$ du -h $(bazel info output_base)/execroot | sort -h\\n...\\n1.8M\\t/private/var/tmp/_bazel_fmeum/412888b82b4f18156bc415025cb8faa1/execroot\\n\\n# Subsequent build\\n$ bazel clean && bazel test //cli/... --config=remote-minimal --disk_cache= --experimental_remote_cache_ttl=1d\\n$ du -h $(bazel info output_base)/execroot | sort -h\\n...\\n1.8M\\t/private/var/tmp/_bazel_fmeum/412888b82b4f18156bc415025cb8faa1/execroot\\n\\n# Subsequent build with TTL expired\\n$ bazel clean && bazel test //cli/... --config=remote-minimal --disk_cache= --experimental_remote_cache_ttl=0\\n$ du -h $(bazel info output_base)/execroot | sort -h\\n...\\n640M\\t/private/var/tmp/_bazel_fmeum/412888b82b4f18156bc415025cb8faa1/execroot\\n```\\n\\nWe fixed this issue in [bazebuild/bazel#25398](https://github.com/bazelbuild/bazel/pull/25398) by enhancing the logic that validates Bazel\'s blob metadata and reinforcing it with additional tests.\\n\\nIt\'s worth noting that there is also a [draft PR](https://github.com/bazelbuild/bazel/pull/23066) by a Bazel community member, [David Sanderson](https://github.com/dws), which allows binding the TTL to the lifetime of the Bazel JVM process.\\nThis could have provided a more robust workaround by avoiding the need to hardcode a long TTL value.\\nHowever, it was incomplete and never reviewed.\\n\\n## The Workaround\\n\\nAs Bazel 8.2.0 and 7.6.0 have not been released yet, users on older versions of Bazel can work around this issue by setting the `--experimental_remote_cache_ttl` flag to a very long value (i.e., `10000d` for 27 years) to effectively disable the TTL feature.\\n\\n> This effectively disables the TTL mechanism for practical purposes, though we certainly don\'t recommend running Bazel continuously for decades! \ud83d\ude05\\n\\nHowever, there are some caveats to this workaround:\\nIt is possible for the local blob metadata to become out of sync with the Remote Cache.\\nIn particular, at BuildBuddy, we employ an LRU eviction scheme to keep the Remote Cache size under control.\\nWith a longer TTL set by Bazel, Bazel will also trust that our Remote Cache will keep the cache data around for that long, which we do not guarantee.\\nSo, it is possible that the Remote Cache will evict the blob data before the TTL expires, which can cause Bazel to make incorrect assumptions and result in errors such as:\\n\\n```bash title=\\"bazel-error.log\\"\\nremote cache evicted: ...\\n    com.google.devtools.build.lib.remote.common.BulkTransferException: 3 errors during bulk transfer:\\n        com.google.devtools.build.lib.remote.common.CacheNotFoundException: Missing digest: d0387e622e30ab61e39b1b91e54ea50f9915789dde7b950fafb0863db4a32ef8/17096\\n        com.google.devtools.build.lib.remote.common.CacheNotFoundException: Missing digest: 9718647251c8d479142d459416079ff5cd9f45031a47aa346d8a6e719e374ffa/28630\\n        com.google.devtools.build.lib.remote.common.CacheNotFoundException: Missing digest: 785e0ead607a37bd9a12179051e6efe53d7fb3eb05cc291e49ad6965ee2b613d/11504\\n```\\n\\nI have documented this problem in detail in our [Troubleshooting RBE Failures docs](https://www.buildbuddy.io/docs/troubleshooting-rbe#cachenotfoundexception-missing-digest).\\nThe TLDR is that you can use a couple of flags together with the TTL flag to mitigate this issue:\\n\\n```bash title=\\".bazelrc\\"\\n# Set a long TTL to avoid excessive downloads.\\n# Not needed after Bazel 8.2.0.\\n# Reference: https://github.com/bazelbuild/bazel/pull/25398\\ncommon --experimental_remote_cache_ttl=10000d\\n\\n# If the Remote Cache evicts the blob data before the TTL expires,\\n# Bazel will reset itself, dropping all the in-memory metadata before\\n# retrying the entire build. The value controls how many times Bazel\\n# would retry before giving up.\\n#\\n# Default changed from 0 to 5 since Bazel 8.0.0.\\ncommon --experimental_remote_cache_eviction_retries=5\\n```\\n\\nWe are also improving the reliability of eviction retry via [bazebuild/bazel#25358](https://github.com/bazelbuild/bazel/pull/25358) and [bazebuild/bazel#25448](https://github.com/bazelbuild/bazel/pull/25448) for future Bazel releases.\\nAs a longer-term strategy, we are researching ways to add support for Action Rewinding to Bazel so that missing artifacts can be recreated seamlessly within a single build by re-running the actions that produced them.\\n\\n## Conclusion\\n\\nThanks to BuildBuddy\'s unique advantage of operating Bazel for our users, we were able to discover a bug in Bazel\'s `--remote_download_minimal` flag that was causing excessive cache downloads, which is typically tricky to detect and reproduce in traditional CI systems.\\nSince then, we have submitted a fix upstream to the Bazel repository, dogfooded the workaround in our own CI, and notified major BuildBuddy Workflows users to apply the same change.\\nSome of our advanced Bazel users were able to cherry-pick the fix into their internal fork of Bazel to benefit from the fix earlier, while most were able to apply the workaround to reduce excessive resource consumption and speed up their builds. \ud83d\ude80\\n\\nMajor thanks to our teammate Maggie for her help in spelunking the elusive Firecracker MicroVM snapshots and our Bazel expert Fabian for his help in navigating the Bazel codebase and submitting the fix upstream."},{"id":"bisect-bazel","metadata":{"permalink":"/blog/bisect-bazel","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/bisect-bazel.md","source":"@site/blog/bisect-bazel.md","title":"Troubleshooting Bazel with Git Bisect","description":"A guide to using Git bisect to troubleshoot Bazel issues","date":"2025-02-18T12:00:00.000Z","tags":[{"inline":true,"label":"bazel","permalink":"/blog/tags/bazel"},{"inline":true,"label":"git","permalink":"/blog/tags/git"},{"inline":true,"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":13.77,"hasTruncateMarker":true,"authors":[{"name":"Son Luong Ngoc","title":"Solution Engineer @ BuildBuddy","url":"https://github.com/sluongng/","imageURL":"https://avatars.githubusercontent.com/u/26684313?v=4","key":"son","page":null}],"frontMatter":{"slug":"bisect-bazel","title":"Troubleshooting Bazel with Git Bisect","description":"A guide to using Git bisect to troubleshoot Bazel issues","authors":"son","date":"2025-02-18:12:00:00","image":"/img/blog/troubleshooting.png","tags":["bazel","git","engineering"]},"unlisted":false,"prevItem":{"title":"Unusual Builds with Bytes","permalink":"/blog/unusual-builds-w-bytes"},"nextItem":{"title":"Welcoming Vanja Pejovic","permalink":"/blog/welcoming-vanja-pejovic"}},"content":"Upgrading Bazel and the related dependencies can sometimes lead to unexpected issues.\\nThese issues can range from build failures to runtime errors, and generally, they can be hard to troubleshoot.\\n\\nSo today, we will discuss how to narrow down the root cause of build failures after a dependency upgrade using `git bisect`.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Build failed after upgrading Bazel\\n\\nIf you are like me, you would enjoy having the latest and greatest tools in your project.\\nAnd the tool I use the most is Bazel, so as the recent `8.1.0` release came out, I decided to upgrade our BuildBuddy repository to use it.\\n\\n```bash\\n$ echo \'8.1.0\' > .bazelversion\\n\\n$ bazel test --config=remote-minimal //...\\n...\\nERROR: /root/workspace/output-base/external/bazel_tools/tools/build_defs/repo/http.bzl:137:45: An error occurred during the fetch of repository \'rules_cc+\':\\n   Traceback (most recent call last):\\n        File \\"/root/workspace/output-base/external/bazel_tools/tools/build_defs/repo/http.bzl\\", line 137, column 45, in _http_archive_impl\\n                download_info = ctx.download_and_extract(\\nError in download_and_extract: com.google.devtools.build.lib.remote.common.CacheNotFoundException: Missing digest: abc605dd850f813bb37004b77db20106a19311a96b2da1c92b789da529d28fe1/178823\\n...\\n```\\n\\nWhoops! It seems like the build failed after upgrading Bazel to `8.1.0`.\\nFlipping back to `8.0.1` made the problem go away, which means the issue was introduced in Bazel `8.1.0`.\\n\\nWhat should we do next?\\n\\n#### Auto-bisect with bazelisk\\n\\nLuckily, the Bazel team has provided us with a magic flag inside `bazelisk` that can help us with this.\\n\\n[--bisect](https://github.com/bazelbuild/bazelisk?tab=readme-ov-file#--bisect) flag automatically lists the commits between the two Bazel releases and helps us bisect them.\\nIt works like this:\\n\\n```bash\\nalias bazel=bazelisk\\n\\n# Usage:\\n#   bazelisk --bisect=<good commit hash>..<bad commit hash> test //foo:bar_test\\n$ BAZELISK_CLEAN=1 bazelisk --bisect=8.0.1..8.1.0 test --config=remote-minimal //...\\n```\\n\\n**Explanation**: The last-known good release for us was `8.0.1`, and the bad release was `8.1.0`. Bazelisk will grab the list of commits between 2 versions from the Github API and start a bisect. For each bisect commit, it will grab a pre-built Bazel binary of that version from a Google Cloud Storage bucket and run the test command accordingly. The `.bazelversion` file will be ignored in these runs.\\n\\nBecause the issue was related to external dependencies download, we set `BAZELISK_CLEAN=1` for the whole Bazelisk bisect process.\\nThis will add `bazel clean --expunge` in between each test run, effectively cleaning Bazel\'s output base and shutting down the Bazel JVM process, to make sure we reproduce the issue in a mint environment.\\nYou can check out other environment variables that Bazelisk supports [here](https://github.com/bazelbuild/bazelisk/blob/740e1b91b5b2e86730b6bb12aaf211fc19f388a5/README.md?plain=1#L162)\\n\\nSince we know that the issue was caused by the external download of `@rules_cc`, we can narrow down the test command to a `bazel query` that would still trigger the same download. This should help speed up each bisect run and reduce the chance of flakiness.\\n\\n```bash\\n$ BAZELISK_CLEAN=1 bazelisk --bisect=8.0.1..8.1.0 query --config=remote-minimal @rules_cc//:all\\n```\\n\\nAnd here is the result:\\n\\n```bash\\n--- Getting the list of commits between 8.0.1 and 8.1.0\\nFound 95 commits between (24cba660a7231786405ac40335c2e7e5bd4d6859, 8.1.0]\\n--- Verifying if the given good Bazel commit (24cba660a7231786405ac40335c2e7e5bd4d6859) is actually good\\n--- Start bisecting\\n--- Testing with Bazel built at c5cf63199b3964b4a188da73a6c24599468131e9, 95 commits remaining...\\n--- Succeeded at c5cf63199b3964b4a188da73a6c24599468131e9\\n--- Testing with Bazel built at 040769767613287a0f1b5ceed41b9d7729126983, 47 commits remaining...\\n\\n2025/02/18 10:56:29 Using unreleased version at commit 040769767613287a0f1b5ceed41b9d7729126983\\n2025/02/18 10:56:29 Downloading https://storage.googleapis.com/bazel-builds/artifacts/macos_arm64/040769767613287a0f1b5ceed41b9d7729126983/bazel...\\n2025/02/18 10:56:29 Skipping basic authentication for storage.googleapis.com because no credentials found in /Users/sluongng/.netrc\\n2025/02/18 10:56:29 could not run Bazel: could not download Bazel: failed to download bazel: failed to download bazel: HTTP GET https://storage.googleapis.com/bazel-builds/artifacts/macos_arm64/040769767613287a0f1b5ceed41b9d7729126983/bazel failed with error 404\\n```\\n\\nHere, Bazelisk was able to identify `8.0.1` to be `24cba660a` and verified that it was indeed a good commit. It then started bisecting the commits between `24cba660a` and `8.1.0`. The first bisect commit `c5cf63199b` was good. However, the second bisect commit `0407697676` failed to download the Bazel binary from the Google Cloud Storage (GCS) bucket. This is a different failure than the original issue we are investigating, so how do we proceed?\\n\\n#### Manual bisect with git-bisect\\n\\nIf Bazelisk had a flag to help us mark a few known commits as \\"SKIP\\", it would have been perfect here, but unfortunately, it doesn\'t. But I know for a fact that `git bisect` does have this feature, so let\'s switch to manual bisecting.\\n\\n```bash\\n# My personal working directory\\n$ cd ~/work/bazelbuild/\\n\\n# Clone the Bazel repository\\n$ git clone https://github.com/bazelbuild/bazel.git\\n$ cd bazel\\n\\n# Start bisecting\\n$ git bisect start --no-checkout --first-parent 8.1.0 8.0.1\\nBisecting: 47 revisions left to test after this (roughly 6 steps)\\n[8afe16e0396be93cc5d9bc2108aab2e45dfcb2bd] [8.1.0] Fix docs link rewriting for rules_android (#25018)\\n```\\n\\nNote that thanks to the pre-built binaries from the GCS bucket managed by the Bazel team, we don\'t need to build Bazel ourselves. Because of this, we can use the `--no-checkout` flag to speed up the bisect process. When `--no-checkout` is used, the current bisect commit could be found in `.git/BISECT_HEAD` file.\\n`--first-parent` forces the bisect to only follow the first parent of the commit, which is usually all the merge commits in the `master/main` branch of each repo.\\nThankfully, the `bazel.git` repo history is very linear so `--first-parent` is not really needed here, but I will keep the flag in to help the readers (including my future self) copy pasting easier.\\n\\n```bash\\n$ cat .git/BISECT_HEAD\\n8afe16e0396be93cc5d9bc2108aab2e45dfcb2bd\\n```\\n\\nSo how do we tell Bazelisk to use a pre-built binary from the GCS bucket that belongs to this commit? Luckily, we can set the environment variable `USE_BAZEL_VERSION` for this exact reason.\\n\\n```bash\\n$ USE_BAZEL_VERSION=7.1.0 bazel version\\nversion\\nBazelisk version: 1.25.0\\nExtracting Bazel installation...\\nBuild label: 7.1.0\\nBuild target: @@//src/main/java/com/google/devtools/build/lib/bazel:BazelServer\\nBuild time: Mon Mar 11 17:55:51 2024 (1710179751)\\nBuild timestamp: 1710179751\\nBuild timestamp as int: 1710179751\\n```\\n\\nWith this, we can manually alternate between the 2 directories `~/work/bazelbuild/bazel` and `~/work/buildbuddy-io/buildbuddy` to run the test command and mark the commit as good or bad.\\n\\n```bash\\n# Copy the new bisect commit to the clipboard\\n$ export USE_BAZEL_VERSION=$(cat .git/BISECT_HEAD)\\n\\n# Verify the commit\\n$ cd ~/work/buildbuddy-io/buildbuddy\\n$ bazel ... query ...\\n...\\n\\n$ cd ~/work/bazelbuild/bazel\\n# $ git bisect good\\n# $ git bisect bad\\n# $ git bisect skip\\n\\n# Repeat\\n```\\n\\nHowever, that would not make for a really good blog post.\\nSo let\'s be a bit more fancy and create a script to help us automate this bisect process using `git bisect run`.\\n\\n```bash\\n$ cat test-buildbuddy.sh\\n#!/bin/bash\\n\\nexport USE_BAZEL_VERSION=\'8.0.1\'\\n# export USE_BAZEL_VERSION=$(cat .git/BISECT_HEAD)\\n\\nfunction cleanup()\\n{\\n  (\\n    cd ~/work/buildbuddy-io/buildbuddy\\n    bazel clean --expunge\\n  )\\n}\\ntrap cleanup EXIT\\n\\n(\\n  cd ~/work/buildbuddy-io/buildbuddy\\n  STDERROUT=$(bazel 2>&1 query --repository_cache=\'\' --config=remote-minimal @bazel_features//:all)\\n  BAZEL_EXIT_CODE=$?\\n  # If stderr contains \'could not download Bazel\' then return with code 125\\n  # to skip the current commit during bisect.\\n  if [[ $BAZEL_EXIT_CODE -ne 0 && $STDERROUT == *\\"could not download Bazel\\"* ]]; then\\n    echo \\"Bazel download failed. Skipping commit $USE_BAZEL_VERSION.\\"\\n    exit 125\\n  fi\\n  if [[ $BAZEL_EXIT_CODE -ne 0 ]]; then\\n    echo \\"Bazel query failed with exit code $BAZEL_EXIT_CODE.\\"\\n  fi\\n  exit $BAZEL_EXIT_CODE\\n)\\n\\n```\\n\\n**Explanation**:\\n\\nFirst, we want to export the `USE_BAZEL_VERSION` environment variable to the commit hash that we are currently bisecting. This will tell Bazelisk to use the pre-built binary from the GCS bucket that belongs to this commit. However, we won\'t use BISECT_HEAD just yet since we want to verify that this script works first. Knowing that `8.0.1` was the last known good commit, we can set the `USE_BAZEL_VERSION` to do a sanity check.\\n\\nNext, since we are not using Bazelisk bisect feature, the automatic cleanup feature of `BAZELISK_CLEAN` won\'t work.\\nInstead, we will manually clean the workspace after each test run with `bazel clean --expunge` to achieve similar result.\\n\\nAfter that, we want to make sure that we handle the download issue as some commits might be missing from the GCS bucket.\\n`git bisect run` allows us to skip the current commit by returning with an exit code of `125`.\\n\\n> The special exit code 125 should be used when the current source code cannot be tested.\\n> If the script exits with this code, the current revision will be skipped\\n\\nSo we check if the Bazel query failed with the error message `could not download Bazel` and return with the exit code `125` to skip the current commit.\\nOtherwise, we return with the exit code of the Bazel query command.\\n\\nNow let\'s verify that our script works on `8.0.1`:\\n\\n```bash\\n$ ./test-buildbuddy.sh\\nStarting local Bazel server (no_version) and connecting to it...\\n...\\n@rules_cc//:empty_lib\\n@rules_cc//:link_extra_lib\\n@rules_cc//:link_extra_libs\\nLoading: 1 packages loaded\\n```\\n\\nNow let\'s edit the script to use the `USE_BAZEL_VERSION` from the `BISECT_HEAD` file for the bisect run and run the bisect:\\n\\n```bash\\n$ cat test-buildbuddy.sh\\n#!/bin/bash\\n\\n# export USE_BAZEL_VERSION=\'8.0.1\'\\nexport USE_BAZEL_VERSION=$(cat .git/BISECT_HEAD)\\n...\\n\\n$ git bisect run ./test-buildbuddy.sh\\nrunning \'./run.sh\'\\nBisecting: 23 revisions left to test after this (roughly 5 steps)\\n[11e85a4dc73f93ef25809e7d5f0409aaca7d42f1] [8.1.0] Respect comprehension variable shadowing in Starlark debugger output (#25139)\\nrunning \'./run.sh\'\\nBazel download failed. Skipping commit 11e85a4dc73f93ef25809e7d5f0409aaca7d42f1.\\n2025/02/18 13:18:12 Using unreleased version at commit 11e85a4dc73f93ef25809e7d5f0409aaca7d42f1\\n2025/02/18 13:18:12 Downloading https://storage.googleapis.com/bazel-builds/artifacts/macos_arm64/11e85a4dc73f93ef25809e7d5f0409aaca7d42f1/bazel...\\n2025/02/18 13:18:12 Skipping basic authentication for storage.googleapis.com because no credentials found in /Users/sluongng/.netrc\\n2025/02/18 13:18:12 could not download Bazel: failed to download bazel: failed to download bazel: HTTP GET https://storage.googleapis.com/bazel-builds/artifacts/macos_arm64/11e85a4dc73f93ef25809e7d5f0409aaca7d42f1/bazel failed with error 404\\nBisecting: 23 revisions left to test after this (roughly 5 steps)\\n[12a3fc001b6629b52f5b24dce6018884222a0608] [8.1.0] See and use more than 64 CPUs on Windows (#25140)\\nrunning \'./run.sh\'\\nBisecting: 10 revisions left to test after this (roughly 4 steps)\\n[af6307bc6832d66cce772c5170961b4ff4521e48] [8.1.0] Configure `--run_under` target for the test exec platform (#25184)\\nrunning \'./run.sh\'\\nBisecting: 4 revisions left to test after this (roughly 3 steps)\\n[14219c4698e112a03ebe62eed7cb324f625f13c8] [8.1.0] Use digest function matching the checksum in gRPC remote downloader (#25225)\\nrunning \'./run.sh\'\\nBazel query failed with exit code 1.\\nBisecting: 2 revisions left to test after this (roughly 2 steps)\\n[5f3a083d5649715dc0bed811ef41f53b91539d1d] [8.1.0] Update to use coverage_output_generator-v2.8 (#25202)\\nrunning \'./run.sh\'\\nBisecting: 1 revision left to test after this (roughly 1 step)\\n[a40a0cd9947dd73ec07f2394d108eb7e98745161] [8.1.0] Add version selector buttons to repo rule docs (#25211)\\nrunning \'./run.sh\'\\nBisecting: 0 revisions left to test after this (roughly 0 steps)\\n[aa4531d5a2116f85b80a753c53528032ed3cda71] [8.1.0] Don\'t suggest updates to private repo rule attributes (#25213)\\nrunning \'./run.sh\'\\n14219c4698e112a03ebe62eed7cb324f625f13c8 is the first bad commit\\ncommit 14219c4698e112a03ebe62eed7cb324f625f13c8\\nAuthor: bazel.build machine account <ci.bazel@gmail.com>\\nDate:   Fri Feb 7 12:07:48 2025 +0100\\n\\n    [8.1.0] Use digest function matching the checksum in gRPC remote downloader (#25225)\\n\\n    Fixes https://bazelbuild.slack.com/archives/CA31HN1T3/p1738763759125489\\n\\n    Closes #25206.\\n\\n    PiperOrigin-RevId: 724267755\\n    Change-Id: Ia23bdae310231bd0ee5763311b948f3465aa8ed0\\n\\n    Commit\\n    https://github.com/bazelbuild/bazel/commit/ef45e02bfb4af1124bb9ad1ef94f36c70c82ce48\\n\\n    Co-authored-by: Fabian Meumertzheim <fabian@meumertzhe.im>\\n\\n .../remote/downloader/GrpcRemoteDownloader.java    | 23 ++++++++++++++--------\\n .../downloader/GrpcRemoteDownloaderTest.java       | 23 +++++++++++++---------\\n 2 files changed, 29 insertions(+), 17 deletions(-)\\nbisect found first bad commit\\n```\\n\\nAnd voil\xe0! We have found the commit that introduced the issue.\\nIt was `14219c4698e112a03ebe62eed7cb324f625f13c8`, which was introduced in Bazel `8.1.0`.\\n\\nWe won\'t be diving into the details of this specific issue in this blog post,\\nbut if you are interested, you can read more about it via [the revert PR #25320](https://github.com/bazelbuild/bazel/pull/25320).\\nWe expect this to be fixed in the upcoming Bazel 8.1.1 release.\\n\\n## Build failed after upgrading a dependency\\n\\nThis bisect technique can also be used to troubleshoot issues that arise after upgrading a Bazel dependency.\\nFor example, recently we attempted upgrading `@rules_go` in our repository from `v0.51.0` to `v0.53.0`, and the build failed.\\n\\n```bash\\n$ bazel build server\\n...\\nERROR: /private/var/tmp/_bazel_sluongng/06e573a93bc2d6a9cad4ad41f00b4310/external/bazel_gazelle/internal/go_repository_cache.bzl:30:17: An error occurred during the fetch of repository \'bazel_gazelle_go_repository_cache\':\\n   Traceback (most recent call last):\\n\\tFile \\"/private/var/tmp/_bazel_sluongng/06e573a93bc2d6a9cad4ad41f00b4310/external/bazel_gazelle/internal/go_repository_cache.bzl\\", line 30, column 17, in _go_repository_cache_impl\\n\\t\\tfail(\'gazelle found more than one suitable Go SDK ({}). Specify which one to use with gazelle_dependencies(go_sdk = \\"go_sdk\\").\'.format(\\", \\".join(matches)))\\nError in fail: gazelle found more than one suitable Go SDK (go_host_compatible_sdk_label, go_sdk_darwin_arm64). Specify which one to use with gazelle_dependencies(go_sdk = \\"go_sdk\\").\\nERROR: no such package \'@@org_golang_google_grpc//reflection\': gazelle found more than one suitable Go SDK (go_host_compatible_sdk_label, go_sdk_darwin_arm64). Specify which one to use with gazelle_dependencies(go_sdk = \\"go_sdk\\").\\nERROR: /Users/sluongng/work/buildbuddy-io/buildbuddy/cli/cmd/sidecar/BUILD:3:11: //cli/cmd/sidecar:sidecar depends on @@org_golang_google_grpc//reflection:reflection in repository @@org_golang_google_grpc which failed to fetch. no such package \'@@org_golang_google_grpc//reflection\': gazelle found more than one suitable Go SDK (go_host_compatible_sdk_label, go_sdk_darwin_arm64). Specify which one to use with gazelle_dependencies(go_sdk = \\"go_sdk\\").\\nERROR: Analysis of target \'//cli:cli\' failed; build aborted: Analysis failed\\n...\\n```\\n\\nThis time, we can use the same bisect technique to identify the commit that introduced the issue.\\nTo make the `git bisect` a bit less tedious, let\'s use a local copy of `@rules_go` instead of the one managed by Bazel.\\n\\n```bash\\n$ cd ~/work/bazelbuild\\n$ git clone https://github.com/bazel-contrib/rules_go.git\\n$ cd rules_go\\n$ git checkout v0.51.0\\n```\\n\\nWith this, we can add the following lines to our `.bazelrc` to tell Bazel to use our local copy instead of the one managed by Bazel.\\n\\n```bash\\n$ cd ~/work/buildbuddy-io/buildbuddy\\n$ tail -n 5 .bazelrc\\n## BZLMOD\\ncommon --override_module=rules_go=/Users/sluongng/work/bazelbuild/rules_go\\n\\n## WORKSPACE\\ncommon --override_repository=io_bazel_rules_go=/Users/sluongng/work/bazelbuild/rules_go\\n```\\n\\n**Pro tips:** These flags are really handy, so I would recommend keeping them in your `.bazelrc` file as comments for future use.\\n\\nNow we can start the bisect process in the `@rules_go` repository.\\n\\n```bash\\n$ cd ~/work/bazelbuild/rules_go\\n$ cat test-rules-go.sh\\n#!/bin/bash\\n\\n(\\n  cd ~/work/buildbuddy-io/buildbuddy\\n  bazel build server\\n)\\n$ chmod +x test-rules-go.sh\\n```\\n\\nSince we are relying on our local copy of `@rules_go`, we do not need to handle the download issue like the previous script.\\nWe are also not expecting the build to fail because of external factors, so no need for setting `BAZELISK_CLEAN` or handling our own cleanup.\\nThis also means that we are reusing the same Bazel JVM process for each bisect run, taking advantage of the hot analysis cache to keep our builds blazingly fast.\\n\\nNow let\'s start the bisect process:\\n\\n```bash\\n$ cd ~/work/bazelbuild/rules_go\\n$ git bisect start --first-parent v0.53.0 v0.51.0\\n```\\n\\nNote here that we do NOT want to use the `--no-checkout` flag as the working copy of the repo is used for the bisect run and therefore, needs to be updated.\\n\\n```bash\\n$ git bisect run ./test-rules-go.sh\\nrunning \'./test-rules-go.sh\'\\nBisecting: 8 revisions left to test after this (roughly 3 steps)\\n[4f5202adf56521b3048536d04eef12690557fa7c] Mention `dev_dependency` in `go_sdk.host` error (#4246)\\nrunning \'./test-rules-go.sh\'\\nBisecting: 4 revisions left to test after this (roughly 2 steps)\\n[66477c1b41b2449c8102f4338d011f07e4df04b6] Update documentation reference (#4237)\\nrunning \'./test-rules-go.sh\'\\nBisecting: 1 revision left to test after this (roughly 1 step)\\n[5eb06119c49b97f16aa79d53cdcd99f95b1000bf] Allow .so files to have more extensions (#4232)\\nrunning \'./test-rules-go.sh\'\\nBisecting: 0 revisions left to test after this (roughly 0 steps)\\n[d25e4e75f0ce8e419593a5c633f852ff1c08e292] Use same Go SDK as Gazelle for `go_bazel_test` (#4231)\\nrunning \'./test-rules-go.sh\'\\nd25e4e75f0ce8e419593a5c633f852ff1c08e292 is the first bad commit\\ncommit d25e4e75f0ce8e419593a5c633f852ff1c08e292\\nAuthor: Fabian Meumertzheim <fabian@meumertzhe.im>\\nDate:   Thu Jan 16 08:13:09 2025 +0100\\n\\n    Use same Go SDK as Gazelle for `go_bazel_test` (#4231)\\n\\n    **What type of PR is this?**\\n\\n    Bug fix\\n\\n    **What does this PR do? Why is it needed?**\\n\\n    **Which issues(s) does this PR fix?**\\n\\n    Fixes #4228\\n\\n    **Other notes for review**\\n\\n MODULE.bazel                       |  2 +-\\n go/private/repositories.bzl        | 11 +++++++++++\\n go/tools/bazel_testing/BUILD.bazel |  9 ++++++---\\n 3 files changed, 18 insertions(+), 4 deletions(-)\\nbisect found first bad commit\\n```\\n\\nAnd there you have it! The issue was introduced in commit `d25e4e75f0ce8e419593a5c633f852ff1c08e292` in the `@rules_go` repository, which was introduced in `v0.53.0`.\\nThis was also fixed swiftly by Fabian in rules_go\'s [PR #4264](https://github.com/bazel-contrib/rules_go/pull/4264).\\n\\n## Conclusion\\n\\nUsing `git bisect` to troubleshoot build failures after upgrading Bazel or its dependencies can be a powerful tool.\\nThis helps us narrow down the root cause of the issue to the exact commit that introduced it.\\n\\nThis makes the error much more actionable.\\nFor example, when we were able to identify the issue to be in rules_go@v0.53.0, we were able to upgrade to v0.52.0 instead and reported the fix to the upstream open-source project.\\nIn other cases, we can proceed with the upgrade but with a specific revert of the commit that introduced the issue patched into the external dependencies.\\n\\nI hope this guide was helpful to you and that you can use it to troubleshoot your external dependency upgrades in the future."},{"id":"welcoming-vanja-pejovic","metadata":{"permalink":"/blog/welcoming-vanja-pejovic","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/welcoming-vanja-pejovic.md","source":"@site/blog/welcoming-vanja-pejovic.md","title":"Welcoming Vanja Pejovic","description":"At BuildBuddy, our mission is to bring the world\'s best developer tools to every company. A core part of that mission involves building systems and infrastructure that can handle the scale of the world\'s largest enterprises. That\'s why we\'re so excited to share that Vanja Pejovic is joining BuildBuddy\'s engineering team.","date":"2024-09-18T12:00:00.000Z","tags":[{"inline":true,"label":"company","permalink":"/blog/tags/company"},{"inline":true,"label":"team","permalink":"/blog/tags/team"}],"readingTime":0.55,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"welcoming-vanja-pejovic","title":"Welcoming Vanja Pejovic","authors":"siggi","date":"2024-09-18:12:00:00","image":"/img/welcome_vanja.png","tags":["company","team"]},"unlisted":false,"prevItem":{"title":"Troubleshooting Bazel with Git Bisect","permalink":"/blog/bisect-bazel"},"nextItem":{"title":"Welcoming Fabian Meumertzheim","permalink":"/blog/welcoming-fabian-meumertzheim"}},"content":"At BuildBuddy, our mission is to bring the world\'s best developer tools to every company. A core part of that mission involves building systems and infrastructure that can handle the scale of the world\'s largest enterprises. That\'s why we\'re so excited to share that [**Vanja Pejovic**](https://www.linkedin.com/in/vanja-pejovic/) is joining BuildBuddy\'s engineering team.\\n\\nVanja joins us from Google, where he spent over 12 years as a Software Engineer. He brings with him his experience working on Google\'s internal RBE (remote build execution) system, Forge.\\n\\n![](../static/img/blog/welcome_vanja.png)\\n\\nWe look forward to working alongside Vanja to build the future of developer tools.\\n\\nWelcome to BuildBuddy, Vanja!\\n\\n\x3c!-- truncate --\x3e"},{"id":"welcoming-fabian-meumertzheim","metadata":{"permalink":"/blog/welcoming-fabian-meumertzheim","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/welcoming-fabian-meumertzheim.md","source":"@site/blog/welcoming-fabian-meumertzheim.md","title":"Welcoming Fabian Meumertzheim","description":"At BuildBuddy, our mission is to bring the world\'s best developer tools to every company. A core part of that mission involves building around the open source Bazel ecosystem to give every engineer fast, reproducible, and correct builds.","date":"2024-04-11T12:00:00.000Z","tags":[{"inline":true,"label":"company","permalink":"/blog/tags/company"},{"inline":true,"label":"team","permalink":"/blog/tags/team"}],"readingTime":1.18,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"welcoming-fabian-meumertzheim","title":"Welcoming Fabian Meumertzheim","authors":"siggi","date":"2024-04-11:12:00:00","image":"/img/welcome_fabian.png","tags":["company","team"]},"unlisted":false,"prevItem":{"title":"Welcoming Vanja Pejovic","permalink":"/blog/welcoming-vanja-pejovic"},"nextItem":{"title":"Why is my Bazel build so slow?","permalink":"/blog/debugging-slow-bazel-builds"}},"content":"At BuildBuddy, our mission is to bring the world\'s best developer tools to every company. A core part of that mission involves building around the open source Bazel ecosystem to give every engineer fast, reproducible, and correct builds.\\n\\nThat\'s why we\'re so excited to share that [**Fabian Meumertzheim**](https://github.com/fmeum) has joined BuildBuddy as a Staff Software Engineer. His contributions to Bazel have already greatly benefited BuildBuddy users, and Fabian will continue to focus on open source Bazel contributions in his role with us.\\n\\nFabian is a maintainer of Bazel\'s [rules_go](https://github.com/bazelbuild/bazel-central-registry/blob/2836c4967bd3368309ebe1205552c0f8abe7d797/modules/rules_go/metadata.json#L7), [gazelle](https://github.com/bazelbuild/bazel-central-registry/blob/2836c4967bd3368309ebe1205552c0f8abe7d797/modules/gazelle/metadata.json#L7), [rules_jni](https://github.com/bazelbuild/bazel-central-registry/blob/2836c4967bd3368309ebe1205552c0f8abe7d797/modules/rules_jni/metadata.json#L7), and [with_cfg](https://github.com/bazelbuild/bazel-central-registry/blob/2836c4967bd3368309ebe1205552c0f8abe7d797/modules/with_cfg.bzl/metadata.json#L7). He\'s also a regular contributor to the [Bazel Slack](https://slack.bazel.build/), and has been the most prolific [Bazel contributor](https://github.com/bazelbuild/bazel/graphs/contributors?from=2022-02-01&to=2024-02-01&type=c) over the past couple of years that\'s not currently employed by Google.\\n\\nFabian joins us from [Code Intelligence](https://www.code-intelligence.com/), where he worked on building tools for [fuzz testing](https://en.wikipedia.org/wiki/Fuzzing).\\n\\n![](../static/img/blog/welcome_fabian.png)\\n\\nWe look forward to working alongside Fabian to build the future of developer tools.\\n\\nWelcome to BuildBuddy, Fabian!\\n\\n\x3c!--truncate--\x3e"},{"id":"debugging-slow-bazel-builds","metadata":{"permalink":"/blog/debugging-slow-bazel-builds","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/why-was-my-bazel-build-so-slow.md","source":"@site/blog/why-was-my-bazel-build-so-slow.md","title":"Why is my Bazel build so slow?","description":"The promise of Bazel is the promise of fast builds. So what do you do if your build was slow? Curse out the developer that convinced your company to migrate to Bazel? Of course not! You\u2019d never do that, right? \ud83d\ude42","date":"2024-04-02T12:00:00.000Z","tags":[{"inline":true,"label":"debugging","permalink":"/blog/tags/debugging"},{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":14.66,"hasTruncateMarker":true,"authors":[{"name":"Maggie Lou","title":"Software Engineer @ BuildBuddy","url":"https://www.linkedin.com/in/maggie-lou-4a3bb110a/","imageURL":"https://avatars.githubusercontent.com/u/13951661","key":"maggie","page":null}],"frontMatter":{"slug":"debugging-slow-bazel-builds","title":"Why is my Bazel build so slow?","authors":"maggie","date":"2024-04-02T12:00:00.000Z","image":"/img/slow.webp","tags":["debugging","product","engineering"]},"unlisted":false,"prevItem":{"title":"Welcoming Fabian Meumertzheim","permalink":"/blog/welcoming-fabian-meumertzheim"},"nextItem":{"title":"How to migrate an iOS app to Bazel","permalink":"/blog/how-to-migrate-an-ios-app-to-bazel"}},"content":"The promise of Bazel is the promise of fast builds. So what do you do if your build was slow? Curse out the developer that convinced your company to migrate to Bazel? Of course not! You\u2019d never do that, right? \ud83d\ude42\\n\\nBuildBuddy is here to help. Bazel provides a lot of helpful information to debug slow builds, but it can be overwhelming to know where to look.\\n\\n\x3c!-- truncate --\x3e\\n\\nMaybe you ran two builds and you\u2019re surprised the second build ran so slowly, when you\u2019d expected it to be cached. Or maybe you ran one build, and you just want to understand where all the time was spent. Here are some good places to start, with some real-world examples of why our own builds were slow.\\n\\nThis post frequently references the BuildBuddy UI. While most of these steps are\\npossible without it, it will be a lot more work to find and parse the info from the build event stream yourself.\\nIf you\u2019re not already using it, you can stream build events to our servers for free by\\nadding the following flags to your builds (more setup docs [here](https://www.buildbuddy.io/docs/cloud)):\\n\\n`--bes_results_url=https://app.buildbuddy.io/invocation/`\\n\\n`--bes_backend=grpcs://remote.buildbuddy.io`\\n\\nOnce you\u2019ve added these flags, you\u2019ll see a line like `Streaming build results to: https://app.buildbuddy.io/invocation/XXX` in your build logs. If you follow that link to our UI, you\u2019ll have access to many of the features discussed below.\\n\\n## 1) Am I using the right set of flags?\\n\\n\u2b50 Bazel is very configurable with a huge selection of flags, so a good gut check is to verify which flags have been applied to your build. Here are a couple you may want to add (or verify have been set) to speed up your builds:\\n\\n- `--nolegacy_important_outputs`\\n  - This flag can significantly reduce the payload size of the uploaded build event stream by eliminating duplicate file references.\\n- `--remote_build_event_upload=minimal`\\n  - This flag can significantly reduce network bandwidth by not uploading blobs tagged with no-cache to the cache.\\n- `--remote_download_outputs`\\n  - This flag can significantly reduce network bandwidth by not downloading intermediary build artifacts from the cache.\\n- `--experimental_remote_cache_async`\\n  - This flag can improve remote cache performance by enabling cache I/O in the background.\\n- `--noremote_upload_local_results`\\n  - This flag can reduce uploads by not uploading locally executed action outputs to the remote cache. This will reduce the cache hit rate for future runs, but can be desirable if upload speed is constrained (due to a poor network connection, for example).\\n- `--remote_cache_compression`\\n  - This flag can improve remote cache throughput by compressing cache blobs.\\n- `--digest_function=BLAKE3`\\n  - This flag can improve the performance of digest calculation of large files by using a faster hashing algorithm. This is available for Bazel 6.4+.\\n- `--jobs`\\n  - This flag can improve execution throughput by allowing more actions to execute in parallel. We recommend starting with `--jobs=50` and working your way up from there.\\n\\nTo set these flags on every build by default, you can set them in a [.bazelrc file](https://bazel.build/run/bazelrc). We check our .bazelrc into git, so that all our developers use standardized build options.\\n\\n```txt title=\\".bazelrc\\"\\n# Example of a .bazelrc that will configure every Bazel build to use these flags\\ncommon --nolegacy_important_outputs\\ncommon --remote_build_event_upload=minimal\\n...\\n```\\n\\n\u2b50 The details on the top of our UI are helpful for a quick sanity check here. If I\u2019m comparing two builds, my first step will often be to compare the details on the top of the invocation pages and verify they\u2019re exactly the same.\\n\\nFor example, once I was inspecting a slow build, and realized I\u2019d forgotten to set `--remote_download_minimal`. The build was downloading a lot more artifacts from the cache than usual, which explained the performance hit.\\n\\n![](../static/img/blog/ui-details.webp)\\n\\n_The top invocation does not have \u2013remote_download_minimal enabled, which could negatively impact performance._\\n\\n## 2) Did my build use a warm Bazel instance?\\n\\nTo dive deeper into your build, the timing profile holds a wealth of information about where Bazel spent time during the invocation.\\n\\n![](../static/img/blog/timing-profile-overview.webp)\\n\\n\u2b50 There\u2019s a lot of information here, but a good starting point is to look into the [analysis phase](https://bazel.build/reference/glossary#analysis-phase) because a cold Bazel instance can frequently explain a slow build.\\n\\nThe first time you run a Bazel build, it will start a local Bazel server. That server will initialize and load dependencies, as well as build the dependency graph for your project. Especially for larger projects, this can take on the order of minutes.\\n\\nSubsequent builds can reuse that same local Bazel server, as long as it has not been killed. They will be much faster because they can reuse much of the computation done during that first, slower build.\\n\\nThe timing profile contains sections with names like `skyframe evaluator 0` and `skyframe evaluator execution-0`.\\nThe `evaluator` sections represent the time spent evaluating the build graph and\\ndetermining the tasks that need to be executed, while the `evaluator execution`\\nsections represent time actually spent executing actions (the total number of these\\nsections is determined by the `--jobs` option).\\n\\nTo understand where time was spent during analysis, we want to focus on the `evaluator` sections (you may need to scroll to the bottom of the timing profile to see them).\\n\\n![](../static/img/blog/timing-profile-analysis.webp)\\n\\nIn this sample build, you can see that a lot of time and compute were spent during the analysis phase. You can hover over each event in the timing profile to get more information.\\n\\n![](../static/img/blog/timing-profile-npm.webp)\\n\\nFor example, we can see that a decent amount of time is spent on actions related to npm installation.\\n\\n![](../static/img/blog/timing-profile-gazelle.webp)\\n\\nWe also see a good number of actions related to setting up gazelle.\\n\\nYou may also see actions labeled with `package creation` - which refers to pulling external dependencies specified in your WORKSPACE file - or `MerkleTree.build` - which refers to building the dependency graph.\\n\\nThe more actions of this type that you see, the more likely your build did not hit a warm Bazel instance and spent a lot of time in the analysis phase. To understand why, you may want to consider:\\n\\n- Has the analysis cache been initialized on your machine?\\n  - Even if you\u2019re using a remote cache and remote execution, the analysis phase is run on the machine that kicked off the build - i.e. if you\u2019re running a build on your laptop, the analysis phase is running on your laptop, regardless of where remote execution is occurring. Have you run a Bazel build for this repository on this machine yet?\\n- Was the in-memory state on your machine lost?\\n  - The analysis cache is held completely in memory in the Bazel server process, so if your machine loses its in-memory state, the cache will be lost. For example, this could happen if your machine restarts, or if you manually invalidated the analysis cache by running `bazel clean`.\\n- Did Bazel discard its analysis cache due to a configuration change?\\n  - To avoid corruption, Bazel will discard the analysis cache if a build has a different build option or configuration from previous builds. When this happens, you\u2019ll see a log line like `WARNING: Build option --compilation_mode has changed, discarding analysis cache`.\\n  - For example if you use the flag `--compilation_mode fastbuild` on a series of builds and `--compilation_mode opt` on a later build, you will notice that the later build is slower because the server will have discarded the analysis cache and must restart the analysis phase from scratch.\\n\\nIf you\u2019re using Bazel in CI, you may be frustrated by the lack of good options to save the analysis cache between runs on remote CI runners. Our CI solution, [BuildBuddy Workflows](https://www.buildbuddy.io/blog/meet-buildbuddy-workflows/), preserves the analysis cache by cloning CI runners to guarantee that the in-memory state is not lost. Check out our [BazelCon](https://www.youtube.com/watch?v=YycEXBlv7ZA&list=PLxNYxgaZ8Rsefrwb_ySGRi_bvQejpO_Tj&index=10) talk for more technical details.\\n\\n\u2b50 If your build was slow due to fetching external dependencies, you may want to investigate the [repository cache](https://sluongng.hashnode.dev/bazel-caching-explained-pt-3-repository-cache). During a clean build, Bazel will fetch the external dependencies referenced in your WORKSPACE file and store the downloaded blobs in the repository cache. If the dependencies have not changed between builds, Bazel will not need to re-download them.\\n\\nThe repository cache is configured by default and its location can be set with `--repository_cache`. It is not wiped with `bazel clean`, but will get wiped with `bazel clean --expunge`.\\n\\n\u2b50 You may also want to consider how many threads are working on analysis / dependency fetching. Allocating more CPUs to the build and parallelizing it further may result in performance gains.\\n\\nIn the example images included above, you can see that only two threads are working on analysis. Bazel tries to determine an appropriate number of threads based on the available CPU cores on your machine, but you can manually set it with the `--jobs` flag.\\n\\n## 3) Does Bazel have enough memory?\\n\\nFamously, Bazel loves memory. This section is short and sweet, but describes a common problem we\u2019ve seen with our customers.\\n\\n\u2b50 If Bazel doesn\u2019t have enough memory, it will evict parts of the analysis cache. As described in the previous section, this can significantly slow down builds. If you notice a lot of `MerkleTree.build` actions even when you\u2019re reusing a warm Bazel instance or see heavy garbage collection activity in the timing profile, you may want to increase the amount of RAM available to Bazel by increasing the JVM heap size with `--host_jvm_args`. For example, to increase the JVM heap size to 6GB, you would set `--host_jvm_args=-Xmx6g`.\\n\\nThe `--host_jvm` is considered a startup option, and should appear before the Bazel command (non-startup options, like the `--jobs` flag, go after the bazel command). Ex. `bazel --host_jvm_args=-Xmx6g build --jobs=50`.\\n\\n![](../static/img/blog/garbage-collection.webp)\\n_The timing profile for this sample build showed heavy garbage collection activity. Increasing the heap size for future builds helped reduce memory pressure and bring down build times._\\n\\n## 4) Are your builds successfully sharing cached artifacts?\\n\\nOne of Bazel\u2019s popular selling points is that it caches build outputs. For example, if Bazel compiles source code for one build, it will save the compiled binaries in the cache. Future builds can directly download these compiled binaries, instead of having to recompile the code to generate them.\\n\\nTaking advantage of this caching behavior unlocks many of Bazel\u2019s performance benefits. If your builds are not successfully sharing cached artifacts, this could explain your slow build times.\\n\\nBuilding targets happens during the execution phase. To inspect this phase in more detail, you can find an execution-related thread in the timing profile (i.e. one with a name like `skyframe evaluator execution-X`).\\n\\n![](../static/img/blog/timing-profile-execution.webp)\\n\\nThe top row has information about which actions were run - for example `Compiling absl/container/internal/raw_hash_set.cc`.\\n\\nThe bottom rows contain more detailed breakdowns on what actions are being executed. In the example above, we see multiple `download outputs` sections. That indicates this build has a lot of remote cache hits, because it\u2019s able to download the outputs from the cache, as opposed to having to execute the action itself to generate those outputs.\\n\\nIn the following example however, you can see multiple `upload missing input` and `execute remotely` actions. This indicates the cache does not have the necessary inputs, so the build must first upload them. Of course this adds time to the build, especially depending on the size of the input files.\\n\\n![](../static/img/blog/timing-profile-execution-not-cached.webp)\\n\\nIf this is the first time you\u2019ve built this target, it makes sense that you\u2019d need to upload its inputs to the remote execution environment and execute it. But this may be surprising if you\u2019ve run multiple builds already, and you\u2019d expected this target to be cached.\\n\\n\u2b50 To get more information on why a target was not cached, check out the Cache tab in the UI.\\n\\n![](../static/img/blog/cache-tab-overview.webp)\\n\\nThe top of the page contains helpful summary details about the build. In this example, the build uploaded and downloaded ~30GB of data, and had a large number of action cache misses. These could all explain why it took a while to run.\\n\\nFor more details on why a specific action wasn\u2019t cached, you can look in the `Cache requests` table at the bottom of the Cache tab. This is especially helpful if you\u2019re comparing two builds, and you want to understand why an action from the first build wasn\u2019t reusable by the second build.\\n\\nFirst, look for an action in your second build you\u2019d expected to be cached from the first build. You can filter for `AC Misses` in the table and then arbitrarily pick one.\\n\\n![](../static/img/blog/cache-requests-table.webp)\\n\\nIf you click on the row in the table, it will bring you to the `Action details` page. For an action to be cacheable between two builds, most of the information on this page - like inputs, arguments, environment variables, and platform properties - must match.\\n\\n![](../static/img/blog/action-details-1.webp)\\n![](../static/img/blog/action-details-2.webp)\\n\\nFor example, these actions have different digests, so are not shareable between builds. In trying to understand why, we might first check whether they have the same inputs. The inputs are color-coded to make comparing them easier, and we can see that they are in fact the same across builds. Accordingly, the input root digest is the same between the two builds, as we\u2019d expect.\\n\\nIn this case, the difference in digest was due to a difference in platform properties. These actions were built on different container images.\\n\\nIf you notice something similar with your builds, you may want to check the configuration of each build.\\n\\n- Is there a difference in the .bazelrc that might be applying different configuration to your builds?\\n- Did your BUILD file change between runs?\\n\\nThese changes could all increase future build times.\\n\\nFor more examples of how you can use the cache requests card to debug slow builds, check out this [blog post](https://www.buildbuddy.io/blog/bazel-remote-cache-debugging/).\\n\\n## 5) Was there a change in my project that could explain increasing build times?\\n\\nSometimes, increased build times are a result of deeper, more structural problems at the project level. These problems can\u2019t be fixed by changing a configuration flag; they point to a problem in the code, such that no matter how you configure your builds, your code will not get built efficiently.\\n\\nThe BuildBuddy trends page can help highlight longer term changes in build times. The trends page contains graphs about every build streamed to BuildBuddy (yes, you really can query every single build). There are graphs on the number of builds, build time percentiles, and cache hits, for example.\\n\\n![](../static/img/blog/trends-page-overview.webp)\\n\\nIn this example, you can see that there are some spiky P99 build times (even P90 build times). Between the weeks of August 30 and September 13, for example, p99 build times increased from ~20min to ~40min.\\n\\n\u2b50 The `drilldown` tab is helpful in finding similarities between slow builds. You can highlight a cluster of slow builds, and the page will update to show you common dimensions between those builds.\\n\\n![](../static/img/blog/trends-heatmap.webp)\\n\\nIn the example above, we highlighted a series of slow builds in green in the top right corner of the heat map. In the `Drilldown dimensions` tab, characteristics of the highlighted builds are shown in green, while characteristics of non-highlighted builds (i.e. the builds that were faster) are shown in purple.\\n\\nYou might notice that there\u2019s a big disparity between the two groups of builds in the `pattern` section.\\n\\n![](../static/img/blog/trends-drilldown-pattern.webp)\\n\\n75% of the slow builds matched the pattern for `Baremetal tests`, even though only 13.8% of builds matched that pattern in the baseline.\\n\\nIf you click on that large green bar in the pattern graph, the drilldown page will add a new filter for only that pattern. It will also list all invocations matching that pattern, making it easy to click through the slow builds to look for common themes.\\n\\n![](../static/img/blog/drilldown-selected-invocations.webp)\\n\\nAfter we clicked through a couple of these invocations, it became obvious that the problem was a flaky test. This caused our CI workflows to rerun the test target multiple times, which significantly slowed them down.\\n\\nIf you notice a similar slowdown in your builds, you should try to understand the root cause.\\n\\n- Did some change make your project less hermetic?\\n  - If an action contains a timestamp or some other random value (like a build ID), it will reduce cache hits and increase execution time.\\n- Does your project have a build bottleneck?\\n  - If many targets depend on a component that is frequently changed, every time that component is changed, it will invalidate a lot of the build graph and a lot of targets will have to be rebuilt. If this describes your repo, you may want to refactor that central component to have a more stable external API.\\n\\nWatch our BazelCon presentation demoing the Drilldowns tab [here](https://www.youtube.com/watch?v=37C5zvQHnZI).\\n\\n## Happy debugging!\\n\\nWhile these steps may seem basic to more sophisticated Bazel users, we hope they\u2019re a helpful starting point to debug slow builds. And of course, if you need help understanding a more complex problem (or just want to give us feedback on this post), we\u2019re always happy to help. Send us a message on our Slack channel or email us at hello@buildbuddy.io."},{"id":"how-to-migrate-an-ios-app-to-bazel","metadata":{"permalink":"/blog/how-to-migrate-an-ios-app-to-bazel","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/how-to-migrate-an-ios-app-to-bazel.md","source":"@site/blog/how-to-migrate-an-ios-app-to-bazel.md","title":"How to migrate an iOS app to Bazel","description":"Wondering how to migrate your Apple-based project to Bazel? Whether it\'s iOS, macOS, watchOS, tvOS, or visionOS, this guide is for you.","date":"2024-03-13T08:00:00.000Z","tags":[{"inline":true,"label":"bazel","permalink":"/blog/tags/bazel"}],"readingTime":40.58,"hasTruncateMarker":true,"authors":[{"name":"Brentley Jones","title":"Developer Evangelist @ BuildBuddy","url":"https://brentleyjones.com","imageURL":"https://avatars.githubusercontent.com/u/158658?v=4","key":"brentley","page":null}],"frontMatter":{"slug":"how-to-migrate-an-ios-app-to-bazel","title":"How to migrate an iOS app to Bazel","description":"Wondering how to migrate your Apple-based project to Bazel? Whether it\'s iOS, macOS, watchOS, tvOS, or visionOS, this guide is for you.","authors":"brentley","date":"2024-03-13:08:00:00","image":"/img/ios_bazel.png","tags":["bazel"]},"unlisted":false,"prevItem":{"title":"Why is my Bazel build so slow?","permalink":"/blog/debugging-slow-bazel-builds"},"nextItem":{"title":"How Bazel 7.0 Makes Your Builds Faster","permalink":"/blog/how-bazel-7-0-makes-your-builds-faster"}},"content":"Do you have an iOS app,\\nor really any Apple-based project,\\nthat you want to migrate to Bazel?\\nWith this guide I\'ll show you how to migrate your project,\\nusing the [Mastodon iOS][mastodon-ios] project as an example.\\n\\nWe will use iOS based rules in the example migration,\\nbut similar rules exist in [**rules_apple**][rules_apple] for the other Apple platforms,\\nincluding\\nmacOS,\\nwatchOS,\\ntvOS,\\nand visionOS.\\n\\nThe completed migration is available in [my fork of mastodon-ios][fork-branch].\\nYou can follow along with the changes made in the following sections by checking out [this commit][commit-start] first.\\nAt the end of some sections there will be a link to a new commit that includes the changes mentioned up to that point.\\n\\n[commit-start]: https://github.com/brentleyjones/mastodon-ios/commit/c15c418cfc94f0ac2ccab9a10e7a4f08a2f402c4\\n[fork-branch]: https://github.com/brentleyjones/mastodon-ios/tree/bj/migrate-to-bazel\\n[mastodon-ios]: https://github.com/mastodon/mastodon-ios\\n[rules_apple]: https://github.com/bazelbuild/rules_apple\\n\\n\x3c!-- truncate --\x3e\\n\\nIf Bazel is completely new to you,\\nI recommend reading the official [quick start guide][bazel-quick-start].\\nThat will explain some foundational things that I don\'t cover in this guide.\\n\\n[bazel-quick-start]: https://bazel.build/run/build\\n\\n## Table of contents\\n\\n<nav className=\\"toc\\">\\n\\n- [Bootstrapping Bazel](#bootstrapping-bazel)\\n- [Defining targets](#defining-targets)\\n  - [Rules](#rules)\\n  - [Translating the Xcode project](#translating-the-xcode-project)\\n- [Integrating with Xcode](#integrating-with-xcode)\\n- [Leveraging remote caching and remote execution](#leveraging-remote-caching-and-remote-execution)\\n  - [Disk cache](#disk-cache)\\n  - [Remote cache](#remote-cache)\\n  - [Debugging cache hits](#debugging-cache-hits)\\n  - [**rules_xcodeproj** cache warming](#rules_xcodeproj-cache-warming)\\n  - [Build event service](#build-event-service)\\n  - [Remote execution](#remote-execution)\\n- [Optimizing](#optimizing)\\n  - [Optimal Bazel settings](#optimal-bazel-settings)\\n  - [Modularization](#modularization)\\n- [Next steps](#next-steps)\\n\\n</nav>\\n\\n## Bootstrapping Bazel\\n\\nBefore we can start to define the structure of our project,\\nwe need to get some foundational Bazel setup out of the way.\\n\\n### Bazelisk\\n\\nThere are two main ways to run Bazel: directly or via [Bazelisk][bazelisk].\\n\\nFor this migration I\'m going to use Bazelisk.\\nI recommend using Bazelisk for multiple reasons:\\n\\n- One installed binary supports multiple Bazel versions\\n- The project\'s supported Bazel version can be managed with a `.bazelversion` file\\n- The `tools/bazel` wrapper script is automatically run if it exists\\n- The Bazel community has largely settled on [using Bazelisk as a best practice][bazelisk-best-practice]\\n\\nIf you don\'t already have Bazelisk installed,\\nI recommend installing it with Homebrew:\\n\\n```shellsession\\n$ brew install bazelisk\\n```\\n\\nThis will install Bazelisk as `bazel`.\\nBecause of this,\\nwhen you see `bazel` in future examples,\\nit\'s actually running Bazelisk\\n(which then runs Bazel).\\n\\nBy the way,\\nbecause we are going to be using newer features of Bazel,\\nmake sure your installed version of Bazelisk is at least v1.19.0.\\n\\n[bazelisk]: https://github.com/bazelbuild/bazelisk\\n[bazelisk-best-practice]: https://bazel.build/install/bazelisk\\n\\n### `.bazelversion`\\n\\nNow that we have Bazelisk installed,\\nwe need to tell it which version of Bazel we want it to download and run for us.\\nWe can do that by creating a `.bazelversion` file at the root of the project:\\n\\n```shellsession\\n$ echo \'7.0.2\' > .bazelversion\\n```\\n\\n### `MODULE.bazel`\\n\\nSince Bazel can be run in subdirectories of a project,\\nit uses the existence of a [repository boundary marker file][repository] to designate the root of the project\\n(which Bazel calls a [workspace][workspace]).\\nWe\'re going to use a `MODULE.bazel` file for this,\\nsince we will eventually have [Bazel module dependencies][bazel-external-overview-bzlmod] to declare.\\nWe can start with an empty file to begin with:\\n\\n```shellsession\\n$ touch MODULE.bazel\\n```\\n\\n[bazel-external-overview-bzlmod]: https://bazel.build/external/overview#bzlmod\\n[repository]: https://bazel.build/external/overview#repository\\n[workspace]: https://bazel.build/external/overview#workspace\\n\\n### Verifying\\n\\nAt this point we can verify that we have Bazel and Bazelisk configured properly by running `bazel info release`:\\n\\n```shellsession\\n$ bazel info release\\nrelease 7.0.2\\n```\\n\\nAt [this commit][commit-bootstrap] we have Bazel bootstrapped for the Mastodon iOS project.\\n\\n[commit-bootstrap]: https://github.com/brentleyjones/mastodon-ios/commit/7b55ceeaa71b7b2b4159c525b29dc4166c661896\\n\\n## Defining targets\\n\\nNow that we have the Bazel project bootstrapped,\\nwe can start adding [targets][targets] to it.\\n\\nBazel targets are defined by instances of [rules][rules] in [packages][packages].\\nPackages are defined by [`BUILD`][build-files] files.\\nFirst I\'ll go over the rules we will use,\\nand then I\'ll show how we use them to define our targets.\\n\\n[build-files]: https://bazel.build/concepts/build-files\\n[packages]: https://bazel.build/concepts/build-ref#packages\\n[rules]: https://bazel.build/extending/rules\\n[targets]: https://bazel.build/concepts/build-ref#targets\\n\\n### Rules\\n\\nI\'m not going to cover every rule that you could use in an Apple-based project,\\nbut I will cover some of the more popular/interesting ones,\\neven if they won\'t all be used in this migration.\\n\\n#### `swift_library`\\n\\nA [`swift_library`][swift_library] target defines a single Swift static library.\\n\\nWhen built directly\\n(ideally though an [`ios_build_test`][ios_build_test] to ensure it\'s in the correct configuration),\\n`swift_library` produces `.swiftmodule` and `.swiftdoc` files.\\nIf the [`swift.enable_library_evolution`][swift-enable_library_evolution-feature] and [`swift.emit_swiftinterface`][swift-emit_swiftinterface-feature] features are enabled,\\nit also produces a `.swiftinterface` file.\\nWhen depended on by an executable producing target,\\nsuch as [`ios_application`](#ios_application),\\nit also produces a `.a` file.\\n\\n[ios_build_test]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-ios.md#ios_build_test\\n[swift-enable_library_evolution-feature]: https://github.com/bazelbuild/rules_swift/blob/1.16.0/swift/internal/feature_names.bzl#L244-L246\\n[swift-emit_swiftinterface-feature]: https://github.com/bazelbuild/rules_swift/blob/1.16.0/swift/internal/feature_names.bzl#L252-L254\\n[swift_library]: https://github.com/bazelbuild/rules_swift/blob/1.16.0/doc/rules.md#swift_library\\n\\n#### `objc_library`\\n\\nAn [`objc_library`][objc_library] target defines a single Objective-C static library.\\nUse it instead of [`cc_library`](#cc_library) when compiling Objective-C or Objective-C++ code.\\n\\nWhen depended on by an executable producing target,\\nsuch as an [`ios_application`](#ios_application) target,\\n`objc_library` produces a `.a` file.\\n\\n:::note\\n\\nIf `srcs` is empty,\\nan `objc_library` target acts as a collection of\\nheaders,\\ndefines,\\ninclude paths,\\nor linkopts,\\nwhich are propagated to dependent targets.\\n\\n:::\\n\\n[objc_library]: https://bazel.build/reference/be/objective-c#objc_library\\n\\n#### `cc_library`\\n\\nA [`cc_library`][cc_library] target defines a single C or C++ static library.\\nUse it when compiling C or C++ code.\\nWhile you can use `objc_library` to compile C or C++ code,\\nusing `cc_library` is more efficient,\\nand is more clear in your intent.\\n\\nWhen depended on by an executable producing target,\\nsuch as an [`ios_application`](#ios_application) target,\\n`cc_library` produces a `.a` file.\\n\\n:::note\\n\\nIf `srcs` is empty,\\na `cc_library` target acts as a collection of\\nheaders,\\ndefines,\\ninclude paths,\\nor linkopts,\\nwhich are propagated to dependent targets.\\n\\n:::\\n\\n[cc_library]: https://bazel.build/reference/be/c-cpp#cc_library\\n\\n#### `experimental_mixed_language_library`\\n\\nAn [`experimental_mixed_language_library`][experimental_mixed_language_library] target defines an Objective-C and Swift mixed-language static library.\\nUse it for compiling mixed-language modules.\\n\\n`experimental_mixed_language_library` is actually a [macro][macro] that creates\\na [`swift_library`](#swift_library),\\nan [`objc_library`](#objc_library),\\nand some [modulemaps][modulemaps] to tie them together.\\n\\n:::note\\n\\nDue to poor build performance,\\nit is not recommended to have mixed-language modules.\\nIt\'s recommended to only use this macro as a migration stopgap until you are able to demix them.\\n\\n:::\\n\\n[experimental_mixed_language_library]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-apple.md#experimental_mixed_language_library\\n[macro]: https://bazel.build/versions/7.0.0/extending/macros\\n[modulemaps]: https://clang.llvm.org/docs/Modules.html#module-maps\\n\\n#### `apple_intent_library`\\n\\nAn [`apple_intent_library`][apple_intent_library] target generates source files for an `.intentdefinition` file.\\nUse it if you have `.intentdefinition` resources.\\n\\n:::note\\n\\nThe [`swift_intent_library`][swift_intent_library] and [`objc_intent_library`][objc_intent_library] macros wrap `apple_intent_library` with [`swift_library`](#swift_library) and [`objc_library`](#objc_library) targets respectively.\\nUse them instead of `apple_intent_library` directly if possible.\\n\\n[objc_intent_library]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-resources.md#objc_intent_library\\n[swift_intent_library]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-resources.md#swift_intent_library\\n\\n:::\\n\\n[apple_intent_library]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-resources.md#apple_intent_library\\n\\n#### `apple_resource_bundle`\\n\\nAn [`apple_resource_bundle`][apple_resource_bundle] target generates a resource bundle.\\nUse it if you require certain resources to be placed in a named `.bundle`,\\ninstead of directly placed in your top level bundle\\n(e.g. an `.app`, `.framework` , or `.xctest`).\\n\\n:::note\\n\\n`apple_resource_bundle` targets need to be listed in `data` attributes,\\nnot `deps` attributes.\\n\\n:::\\n\\n[apple_resource_bundle]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-resources.md#apple_resource_bundle\\n\\n#### `ios_application`\\n\\nAn [`ios_application`][ios_application] target generates an application bundle.\\n\\nUnlike Xcode,\\nBazel separates compilation and bundling targets.\\nThis means that an `ios_application` target\\n(which is a bundling target)\\ndoesn\'t list its source files,\\nand instead requires that its primary module be a single static library dependency,\\nsuch as a [swift_library](#swift_library) or an [objc_library](#objc_library)\\n(which is a compilation target).\\n\\n[ios_application]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-ios.md#ios_application\\n\\n#### `ios_app_clip`\\n\\nAn [`ios_app_clip`][ios_app_clip] target generates an app clip bundle.\\n\\n`ios_app_clip` is used nearly identically to [`ios_application`](#ios_application)\\n(since app clips are on-demand applications),\\nexcept that it also needs to be listed in a parent `ios_application`\'s `app_clips` attribute.\\n\\n[ios_app_clip]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-ios.md#ios_app_clip\\n\\n#### `ios_extension`\\n\\nAn [`ios_extension`][ios_extension] target generates an application extension bundle.\\n\\nSimilar to [`ios_application`](#ios_application),\\n`ios_extension` defines a bundling target,\\nwhich means that it doesn\'t list its source files,\\nand instead requires that its primary module be a single static library dependency,\\nsuch as a [swift_library](#swift_library) or an [objc_library](#objc_library)\\n(which is a compilation target).\\n\\n:::note\\n\\nExtensions are listed in the [`extensions`][extensions-attr] attribute of the containing application instead of the `deps` attribute.\\n\\n[extensions-attr]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-ios.md#ios_application-extensions\\n\\n:::\\n\\n[ios_extension]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-ios.md#ios_extension\\n\\n#### `ios_framework`\\n\\nAn [`ios_framework`][ios_framework] target causes the [static library](#swift_library) targets it depends on to be linked and bundled into a dynamic framework bundle,\\ninstead of the top-level bundle target they would have ultimately been linked into\\n(e.g. an `.app`, `.framework` , or `.xctest`).\\nThese libraries still need to be depended on by your top-level bundle target.\\nSee the [frameworks][frameworks] **rules_apple** documentation for more information on how to use this rule.\\n\\nSince library dependencies have to be listed in `deps` attributes,\\nregardless if you use dynamic frameworks or not,\\nconditionally setting `frameworks` on your top-level bundle targets can be an easy way to switch between dynamic and static linking.\\nThis can enable workflows such as using dynamic frameworks for dev builds,\\nwhich has faster incremental linking,\\nand using static linking for release builds,\\nwhich has faster startup time.[^mergable_libraries]\\n\\n[^mergable_libraries]: When **rules_apple** gains support for [mergable_libraries] this type of workflow will be a lot easier to support.\\n\\n:::note\\n\\n`ios_framework` is not intended to be used for distribution\\n(i.e. consumed by Xcode).\\nUse [`ios_dynamic_framework`][ios_dynamic_framework] for that.\\n\\n[ios_dynamic_framework]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-ios.md#ios_dynamic_framework\\n\\n:::\\n\\n[frameworks]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/frameworks.md\\n[ios_framework]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-ios.md#ios_framework\\n[mergable_libraries]: https://github.com/bazelbuild/rules_apple/issues/1988\\n\\n#### `ios_unit_test`\\n\\nAn [`ios_unit_test`][ios_unit_test] target generates a unit testing bundle.\\n\\nSimilar to [`ios_application`](#ios_application),\\n`ios_unit_test` defines a bundling target,\\nwhich means that it doesn\'t list its source files,\\nand instead requires that its primary module be a single static library dependency,\\nsuch as a [swift_library](#swift_library) or an [objc_library](#objc_library)\\n(which is a compilation target).\\n\\n[ios_unit_test]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-ios.md#ios_unit_test\\n\\n#### `ios_ui_test`\\n\\nAn [`ios_ui_test`][ios_ui_test] target generates a UI testing bundle.\\n\\nSimilar to [`ios_application`](#ios_application),\\n`ios_ui_test` defines a bundling target,\\nwhich means that it doesn\'t list its source files,\\nand instead requires that its primary module be a single static library dependency,\\nsuch as a [swift_library](#swift_library) or an [objc_library](#objc_library)\\n(which is a compilation target).\\n\\n[ios_ui_test]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-ios.md#ios_ui_test\\n\\n#### `local_provisioning_profile`\\n\\nA [`local_provisioning_profile`][local_provisioning_profile] target defines a reference to a provisioning file that exists on the user\'s machine.\\nUse it when your provisioning profile is not checked into the workspace,\\nsuch as per-user and/or managed by Xcode profiles.\\n\\n[local_provisioning_profile]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-apple.md#local_provisioning_profile\\n\\n### Translating the Xcode project\\n\\nWhen migrating a project that uses Xcode to build,\\nwhich the Mastodon iOS project does,\\nwe have a blueprint in the form of the Xcode project that we can use to guide us on which Bazel targets we need to create.\\nEach Xcode target will map to one or more Bazel targets,\\nmostly formulaically.\\nAnd since we now know which rules we can use for those Bazel targets,\\nlet\'s get to translating.\\n\\n#### Dependencies\\n\\nBefore talking about how any given target is translated,\\nI wanted to mention how dependencies between targets are handled.\\n\\nFor each target dependency that an Xcode target has,\\nthe corresponding Bazel target will have the same dependency listed in one of its dependency attributes.\\nFor example,\\nif the Xcode target `A` depends on targets `B` and `C`,\\nthen the Bazel target `//some:A` will have `//a/package:B` and `//another/pkg:C` included in its dependency attributes.\\n\\nIf a dependency is on a target that translates to multiple Bazel targets,\\ne.g. an `ios_extension` and `swift_library`,\\nthen only the top-most target\\n(`ios_extension` in this example)\\nshould be included in one of the Bazel target\'s dependency attributes.\\n\\nIf a dependency is on a product defined in a Swift package,\\nthen a label of the form `@swiftpkg_foo//:A`,\\nwhere `A` is a product in the `Foo` Swift package,\\nshould be included in one of the Bazel target\'s dependency attributes.\\nI\'ll give more details on how Swift packages are handled with Bazel in a [later section](#swift-packages-swiftpm).\\n\\n#### **apple_support**, **rules_swift**, **rules_apple**, and **bazel_skylib**\\n\\nBefore using rules from some of the core rulesets we need to add dependencies on\\n**apple_support**,\\n**rules_swift**,\\n**rules_apple**,\\nand **bazel_skylib**.\\nWe do that by adding `bazel_dep`s to our `MODULE.bazel` file:\\n\\n```python title=\\"MODULE.bazel\\"\\nbazel_dep(name = \\"apple_support\\", version = \\"1.14.0\\")\\nbazel_dep(name = \\"rules_swift\\", version = \\"1.16.0\\", repo_name = \\"build_bazel_rules_swift\\")\\nbazel_dep(name = \\"rules_apple\\", version = \\"3.3.0\\", repo_name = \\"build_bazel_rules_apple\\")\\nbazel_dep(name = \\"bazel_skylib\\", version = \\"1.5.0\\")\\n```\\n\\n#### Static libraries\\n\\nWhile the Mastodon iOS project doesn\'t define any static library targets in its Xcode project\\n(though it implicitly does through its use of Swift packages,\\nwhich are discussed later),\\nI wanted to mention that they are translated 1:1 with [static library](#swift_library) rules.\\n\\n#### Provisioning profiles\\n\\nIf you have your provisioning profile stored in your workspace,\\nyou can reference it directly with the [`provisioning_profile`][provisioning_profile-attr] attribute.\\nIf your provisioning profile is instead stored in the default Xcode location\\n(i.e. `~/Library/MobileDevice/Provisioning Profiles`),\\nyou\'ll want to use the [`local_provisioning_profile`](#local_provisioning_profile) rule to reference it.\\nFinally,\\nif you use Xcode\'s \\"Automatic Code Signing\\" feature,\\nyou\'ll want to use the [`xcode_provisioning_profile`][xcode_provisioning_profile] rule as well.\\n\\n[provisioning_profile-attr]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-ios.md#ios_application-provisioning_profile\\n[xcode_provisioning_profile]: https://github.com/MobileNativeFoundation/rules_xcodeproj/blob/1.17.0/docs/bazel.md#xcode_provisioning_profile\\n\\n#### Swift packages (SwiftPM)\\n\\nAn Xcode project can declare dependencies on Swift packages,\\nboth remote and local.\\nThe easy way to handle those dependencies with Bazel is by using [**rules_swift_package_manager**][rules_swift_package_manager].\\n\\n**rules_swift_package_manager** requires all Swift package dependencies to be declared in a `Package.swift` file.\\nSo any dependencies declared in an Xcode project need to be added to a new `Package.swift` file.\\nI say \\"new\\" since there might already exist `Package.swift` files that declare local packages,\\nand if you don\'t want to migrate those packages to Bazel\\n(which we aren\'t going to for this migration),\\nyou\'ll need to declare those packages as local dependencies in a new `Package.swift` file.[^local-rspm]\\n\\n[^local-rspm]:\\n    This is an area that I think can be improved upon in **rules_swift_package_manager**.\\n    For example,\\n    if you are only using a `Package.swift` file,\\n    without an Xcode project,\\n    I think it would be nice to be able to use **rules_swift_package_manager** to build the declared products in it,\\n    without having to migrate those to Bazel manually.\\n\\nHere is the new `Package.swift` file that includes the dependencies that were referenced in the Xcode project:\\n\\n```swift title=\\"Package.swift\\"\\n// swift-tools-version:5.7\\n\\nimport PackageDescription\\n\\nlet package = Package(\\n    name: \\"Mastodon-iOS\\",\\n    defaultLocalization: \\"en\\",\\n    platforms: [\\n        .iOS(.v16),\\n    ],\\n    dependencies: [\\n        .package(name: \\"ArkanaKeys\\", path: \\"Dependencies/ArkanaKeys\\"),\\n        .package(name: \\"MastodonSDK\\", path: \\"MastodonSDK\\"),\\n        .package(\\n            url: \\"https://github.com/Bearologics/LightChart.git\\",\\n            branch: \\"master\\"\\n        ),\\n        .package(\\n            url: \\"https://github.com/jdg/MBProgressHUD.git\\",\\n            from: \\"1.2.0\\"\\n        ),\\n        .package(\\n            url: \\"https://github.com/tid-kijyun/Kanna.git\\",\\n            from: \\"5.2.7\\"\\n        ),\\n    ]\\n)\\n```\\n\\nCurrently **rules_swift_package_manager** requires you to use [Gazelle][gazelle] in order to create a `swift_deps_index.json` file.[^rspm-no-gazelle]\\nSo we need to add a `bazel_dep` on **gazelle** in addition to **rules_swift_package_manager** in our `MODULE.bazel` file.\\nWe also need to add a [`use_repo`][use_repo] stanza for the Swift packages we directly depend on\\n(though if you run the `//:swift_update_pkgs` Gazelle target,\\nwhich we will define shortly,\\nit will add the required stanza for you):\\n\\n[^rspm-no-gazelle]:\\n    There is [a plan][remove-swift_deps_index] that before **rules_swift_package_manager** reaches 1.0.0 it will remove the need for the `swift_deps_index.json` file,\\n    and the need to use Gazelle with it.\\n\\n```python title=\\"MODULE.bazel\\"\\nbazel_dep(name = \\"rules_swift_package_manager\\", version = \\"0.28.0\\")\\nbazel_dep(name = \\"gazelle\\", version = \\"0.35.0\\")\\n\\n# swift_deps START\\nswift_deps = use_extension(\\n    \\"@rules_swift_package_manager//:extensions.bzl\\",\\n    \\"swift_deps\\",\\n)\\nswift_deps.from_file(\\n    deps_index = \\"//:swift_deps_index.json\\",\\n)\\nuse_repo(\\n    swift_deps,\\n    \\"swiftpkg_arkanakeys\\",\\n    \\"swiftpkg_arkanakeysinterfaces\\",\\n    \\"swiftpkg_kanna\\",\\n    \\"swiftpkg_lightchart\\",\\n    \\"swiftpkg_mastodonsdk\\",\\n    \\"swiftpkg_mbprogresshud\\",\\n)\\n# swift_deps END\\n```\\n\\nAnd now we can define our Gazelle targets in a root `BUILD` file:\\n\\n```python title=\\"BUILD\\"\\nload(\\"@gazelle//:def.bzl\\", \\"gazelle\\", \\"gazelle_binary\\")\\nload(\\n  \\"@rules_swift_package_manager//swiftpkg:defs.bzl\\",\\n  \\"swift_update_packages\\",\\n)\\n\\n# - Gazelle\\n\\n# Ignore the `.build` folder that is created by running Swift package manager\\n# commands. The Swift Gazelle plugin executes some Swift package manager\\n# commands to resolve external dependencies. This results in a `.build` file\\n# being created.\\n# NOTE: Swift package manager is not used to build any of the external packages.\\n# The `.build` directory should be ignored. Be sure to configure your source\\n# control to ignore it (i.e., add it to your `.gitignore`).\\n# gazelle:exclude .build\\n\\n# This declaration builds a Gazelle binary that incorporates all of the Gazelle\\n# plugins for the languages that you use in your workspace. In this example, we\\n# are only listing the Gazelle plugin for Swift from\\n# rules_swift_package_manager.\\ngazelle_binary(\\n    name = \\"gazelle_bin\\",\\n    languages = [\\n        \\"@rules_swift_package_manager//gazelle\\",\\n    ],\\n)\\n\\n# This macro defines two targets: `swift_update_pkgs` and\\n# `swift_update_pkgs_to_latest`.\\n#\\n# The `swift_update_pkgs` target should be run whenever the list of external\\n# dependencies is updated in the `Package.swift`. Running this target will\\n# populate the `swift_deps.bzl` with `swift_package` declarations for all of the\\n# direct and transitive Swift packages that your project uses.\\n#\\n# The `swift_update_pkgs_to_latest` target should be run when you want to\\n# update your Swift dependencies to their latest eligible version.\\nswift_update_packages(\\n    name = \\"swift_update_pkgs\\",\\n    gazelle = \\":gazelle_bin\\",\\n    generate_swift_deps_for_workspace = False,\\n    patches_yaml = \\"patches/swiftpkgs.yaml\\",\\n    update_bzlmod_stanzas = True,\\n)\\n\\n# This target updates the Bazel build files for your project. Run this target\\n# whenever you add or remove source files from your project.\\ngazelle(\\n    name = \\"update_build_files\\",\\n    gazelle = \\":gazelle_bin\\",\\n)\\n```\\n\\n:::note\\n\\nBecause of how **rules_apple** handles app icon assets\\n(though possibly because of a bug),\\nwe need to [patch][rspm-patch] the **Tabman** package to not include test assets.\\nOur patches are defined in the `patches/swiftpkgs.yaml` file.\\n\\nAlso,\\nin our `.bazelrc` file we added something to work around a [current issue][rspm-sandboxing] with **rules_swift_package_manager** and sandboxing.\\n\\n[rspm-patch]: https://github.com/cgrindel/rules_swift_package_manager/blob/v0.28.0/docs/patch_swift_package.md\\n[rspm-sandboxing]: https://github.com/cgrindel/rules_swift_package_manager/blob/v0.28.0/docs/faq.md#my-project-builds-successfully-with-bazel-build--but-it-does-not-build-when-using-rules_xcodeproj-how-can-i-fix-this\\n\\n:::\\n\\nTo generate the `swift_deps_index.json` file,\\nand/or update the `MODULE.bazel` `use_repo` stanza,\\nrun the `//:swift_update_pkgs` target:\\n\\n```shellsession\\n$ bazel run //:swift_update_pkgs\\nINFO: Invocation ID: f2427bde-865b-43b3-bd3c-6a8489387f00\\nINFO: Analyzed target //:swift_update_pkgs (148 packages loaded, 11707 targets configured).\\nINFO: Found 1 target...\\nTarget //:swift_update_pkgs up-to-date:\\n  bazel-bin/swift_update_pkgs-runner.bash\\n  bazel-bin/swift_update_pkgs\\nINFO: Elapsed time: 1.724s, Critical Path: 0.07s\\nINFO: 1 process: 1 internal.\\nINFO: Build completed successfully, 1 total action\\nINFO: Running command line: bazel-bin/swift_update_pkgs\\n```\\n\\nAt [this commit][commit-rspm] Swift packages have been integrated for the Mastodon iOS project.\\n\\n[commit-rspm]: https://github.com/brentleyjones/mastodon-ios/commit/9616360e2e7148ee5d6ceb63616d14b3363c2b51\\n[gazelle]: https://github.com/bazelbuild/bazel-gazelle\\n[remove-swift_deps_index]: https://github.com/cgrindel/rules_swift_package_manager/discussions/936\\n[rules_swift_package_manager]: https://github.com/cgrindel/rules_swift_package_manager\\n[use_repo]: https://bazel.build/versions/7.0.0/rules/lib/globals/module#use_repo\\n\\n#### App extensions\\n\\nApp extensions,\\nsuch as the\\n`MastodonIntent`,\\n`NotificationService`,\\n`ShareActionExtension`,\\n`OpenInActionExtension`,\\nand `WidgetExtension`\\ntargets,\\nare represented by a combination of an [`*_extension`](#ios_extension) and [static library](#swift_library) rule.\\nAnd the static library target will need to have the `-application-extension` (for Swift) or `-fapplication-extension` (for Objective-C) copt set.\\n\\nYou will need to set the `infoplists` and `entitlements` attributes to your `Info.plist` and `.entitlements` files,\\nthe `bundle_id` attribute to the value of the `PRODUCT_BUNDLE_IDENTIFIER` build setting,\\nand the `minimum_os_version` attribute to the value of `IPHONEOS_DEPLOYMENT_TARGET` build setting.\\n\\n:::note\\n\\n**rules_apple** processes `Info.plist` and `.entitlements` files in a slightly different manner than Xcode.\\nIn Xcode,\\nyou have build settings such as\\n`PRODUCT_BUNDLE_IDENTIFIER`,\\n`CURRENT_PROJECT_VERSION`,\\nand `PRODUCT_MODULE_NAME`.\\nAnd when it processes an `Info.plist`,\\nit substitutes references to those build settings with their resolved value.\\n**rules_apple** doesn\'t use build settings,\\nso it\'s not able to do the same substitutions.\\n\\nThere are some attributes on bundling rules that **rules_apple** [will substitute][rules_apple-variable-subsitution] in place of a build setting,\\nsuch as `bundle_id` for `PRODUCT_BUNDLE_IDENTIFIER`,\\nbut for the most part when using Bazel you\'ll need to remove these build setting references from `Info.plist` and `.entitlements` files,\\nor use a custom rule to expand those values for you.\\nI decided to use the **bazel_skylib** [`expand_template`][expand_template] rule to allow the build setting references to stay in the `Info.plist` files.\\n\\n[expand_template]: https://github.com/bazelbuild/bazel-skylib/blob/1.5.0/docs/expand_template_doc.md\\n[rules_apple-variable-subsitution]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/common_info.md#variable-substitution\\n\\n:::\\n\\nSince the Mastodon iOS project doesn\'t use resource bundles,\\nresources will be referenced directly with the `data` attribute of the static library target for the primary module.\\n\\nWith that in mind I added `BUILD` files for the app extension targets:\\n\\n```python title=\\"WidgetExtension/BUILD\\"\\nload(\\"@bazel_skylib//rules:expand_template.bzl\\", \\"expand_template\\")\\nload(\\"@build_bazel_rules_apple//apple:ios.bzl\\", \\"ios_extension\\")\\nload(\\"@build_bazel_rules_apple//apple:resources.bzl\\", \\"apple_intent_library\\")\\nload(\\"@build_bazel_rules_swift//swift:swift.bzl\\", \\"swift_library\\")\\n\\nios_extension(\\n    name = \\"WidgetExtension\\",\\n    bundle_id = \\"org.joinmastodon.app.WidgetExtension\\",\\n    entitlements = \\"WidgetExtension.entitlements\\",\\n    families = [\\n        \\"ipad\\",\\n        \\"iphone\\",\\n    ],\\n    infoplists = [\\":InfoPlist\\"],\\n    minimum_os_version = \\"16.0\\",\\n    resources = glob(\\n        [\\n            \\"**/*.lproj/**\\",\\n            \\"**/*.js\\",\\n            \\"**/*.xcassets/**\\",\\n        ],\\n        exclude = [\\".*\\"],\\n    ),\\n    visibility = [\\"//visibility:public\\"],\\n    deps = [\\":WidgetExtension.library\\"],\\n)\\n\\nswift_library(\\n    name = \\"WidgetExtension.library\\",\\n    srcs = glob([\\"**/*.swift\\"]) + [\\":WidgetExtension.intent\\"],\\n    module_name = \\"WidgetExtension\\",\\n    deps = [\\n        \\"@swiftpkg_lightchart//:LightChart\\",\\n        \\"@swiftpkg_mastodonsdk//:MastodonSDKDynamic\\",\\n    ],\\n)\\n\\napple_intent_library(\\n    name = \\"WidgetExtension.intent\\",\\n    src = \\"Base.lproj/WidgetExtension.intentdefinition\\",\\n    language = \\"Swift\\",\\n    visibility = [\\"//visibility:public\\"],\\n)\\n\\nexpand_template(\\n    name = \\"InfoPlist\\",\\n    out = \\"Bazel.Info.plist\\",\\n    substitutions = {\\n        \\"$(CURRENT_PROJECT_VERSION)\\": \\"1\\",\\n        \\"$(MARKETING_VERSION)\\": \\"2024.3\\",\\n    },\\n    template = \\"Info.plist\\",\\n)\\n```\\n\\n:::note\\n\\nWe are using [`glob`][glob] to collect our source files.\\nThis requires that none of the source files in the workspace are dead/unused,\\nwhich can sometimes happen when using an Xcode project since it doesn\'t have to reference all files in a directory.\\nIt also requires that all source files for a module live under that module\'s directory.\\nBest practice is to share code via modules instead of having multiple modules reference the same source file.\\n\\nWe also created and used an [`apple_intent_library`](#apple_intent_library) target for the `WidgetExtension.intentdefinition` file.\\nIt has increased [visibility][visibility] since it\'s also used by the `Mastodon` application target.\\n\\n[glob]: https://bazel.build/versions/7.0.0/reference/be/functions#glob\\n[visibility]: https://bazel.build/concepts/visibility\\n\\n:::\\n\\nAt [this commit][commit-app-extensions] app extensions have been translated for the Mastodon iOS project.\\n\\n[commit-app-extensions]: https://github.com/brentleyjones/mastodon-ios/commit/4e615641e1028ee6cd7c7f9eb2a0148fa9cb68fb\\n[exports_files]: https://bazel.build/versions/7.0.0/reference/be/functions#exports_files\\n\\n#### Applications\\n\\nApplications,\\nsuch as the `Mastodon` target,\\nare represented by a combination of an [`*_application`](#ios_application) and [static library](#swift_library) rule.\\nSince applications are bundle targets,\\nthey are handled very similar to app extension targets,\\nwhich means we need to apply the same translations in regards to `Info.plist` files and build settings.\\n\\nWith that in mind I added a `BUILD` file for the `Mastodon` target:\\n\\n```python title=\\"Mastodon/BUILD\\"\\nload(\\"@bazel_skylib//rules:expand_template.bzl\\", \\"expand_template\\")\\nload(\\"@build_bazel_rules_apple//apple:ios.bzl\\", \\"ios_application\\")\\nload(\\"@build_bazel_rules_swift//swift:swift.bzl\\", \\"swift_library\\")\\n\\nios_application(\\n    name = \\"Mastodon\\",\\n    bundle_id = \\"org.joinmastodon.app\\",\\n    entitlements = \\"Mastodon.entitlements\\",\\n    extensions = [\\n        \\"//MastodonIntent\\",\\n        \\"//NotificationService\\",\\n        \\"//OpenInActionExtension\\",\\n        \\"//ShareActionExtension\\",\\n        \\"//WidgetExtension\\",\\n    ],\\n    families = [\\n        \\"ipad\\",\\n        \\"iphone\\",\\n    ],\\n    infoplists = [\\":InfoPlist\\"],\\n    minimum_os_version = \\"16.0\\",\\n    resources = glob(\\n        [\\n            \\"Resources/**\\",\\n            \\"Supporting Files/**\\",\\n        ],\\n        exclude = [\\n            \\".*\\",\\n            \\"Resources/Preview Assets.xcassets\\",\\n        ],\\n    ),\\n    visibility = [\\"//visibility:public\\"],\\n    deps = [\\":Mastodon.library\\"],\\n)\\n\\nswift_library(\\n    name = \\"Mastodon.library\\",\\n    srcs = glob([\\"**/*.swift\\"]) + [\\n        \\"//MastodonIntent:Intents.intent\\",\\n        \\"//WidgetExtension:WidgetExtension.intent\\",\\n    ],\\n    module_name = \\"Mastodon\\",\\n    visibility = [\\"//MastodonTests:__pkg__\\"],\\n    deps = [\\n        \\"@swiftpkg_kanna//:Kanna\\",\\n        \\"@swiftpkg_mastodonsdk//:MastodonSDKDynamic\\",\\n        \\"@swiftpkg_mbprogresshud//:MBProgressHUD\\",\\n    ],\\n)\\n\\nexpand_template(\\n    name = \\"InfoPlist\\",\\n    out = \\"Bazel.Info.plist\\",\\n    substitutions = {\\n        \\"$(CURRENT_PROJECT_VERSION)\\": \\"1\\",\\n        \\"$(MARKETING_VERSION)\\": \\"2024.3\\",\\n    },\\n    template = \\"Info.plist\\",\\n)\\n```\\n\\n:::note\\n\\nThe [visibility][visibility] of the `Mastodon` target was increased to allow it to be a test host for tests.\\n\\n[visibility]: https://bazel.build/concepts/visibility\\n\\n:::\\n\\nAt [this commit][commit-app] the iOS app has been translated for the Mastodon iOS project.\\n\\n[commit-app]: https://github.com/brentleyjones/mastodon-ios/commit/dcf1dcd12f92b6d27719eea79c8fc7e2cf63df14\\n\\n#### Tests\\n\\nTests,\\nsuch as the `MastodonTests` and `MastodonUITests` targets,\\nare represented by a combination of a [`*_unit_test`](#ios_unit_test)/[`*_ui_test`](#ios_ui_test) and [static library](#swift_library) rule.\\nSince tests are bundle targets,\\nthey are handled very similar to application targets,\\nwhich means we need to apply the same translations in regards to `Info.plist` files and build settings.\\n\\nIf a unit test has a host application,\\nor a UI test has a target application,\\nthe [`test_host`][test_host-attr] attribute needs to be set to the corresponding `*_application` Bazel target.\\nIn the case of unit tests,\\nif the `Allow testing Host Application APIs` checkbox is unchecked,\\n[`test_host_is_bundle_loader`][test_host_is_bundle_loader-attr] needs to be set to `False`.\\n\\nWith that in mind I added `BUILD` files for the `MastodonTests` and `MastodonUITests` targets:\\n\\n```python title=\\"MastodonTests/BUILD\\"\\nload(\\"@build_bazel_rules_apple//apple:ios.bzl\\", \\"ios_unit_test\\")\\nload(\\"@build_bazel_rules_swift//swift:swift.bzl\\", \\"swift_library\\")\\n\\nios_unit_test(\\n    name = \\"MastodonTests\\",\\n    bundle_id = \\"org.joinmastodon.MastodonTests\\",\\n    minimum_os_version = \\"16.0\\",\\n    test_host = \\"//Mastodon:Mastodon\\",\\n    deps = [\\":MastodonTests.library\\"],\\n)\\n\\nswift_library(\\n    name = \\"MastodonTests.library\\",\\n    srcs = glob([\\"**/*.swift\\"]),\\n    module_name = \\"MastodonTests\\",\\n    testonly = True,\\n    deps = [\\n        \\"@swiftpkg_mastodonsdk//:MastodonSDKDynamic\\",\\n        \\"//Mastodon:Mastodon.library\\",\\n    ],\\n)\\n```\\n\\n```python title=\\"MastodonUITests/BUILD\\"\\nload(\\"@build_bazel_rules_apple//apple:ios.bzl\\", \\"ios_ui_test\\")\\nload(\\"@build_bazel_rules_swift//swift:swift.bzl\\", \\"swift_library\\")\\n\\nios_ui_test(\\n    name = \\"MastodonUITests\\",\\n    bundle_id = \\"org.joinmastodon.MastodonUITests\\",\\n    minimum_os_version = \\"16.0\\",\\n    test_host = \\"//Mastodon:Mastodon\\",\\n    deps = [\\":MastodonUITests.library\\"],\\n)\\n\\nswift_library(\\n    name = \\"MastodonUITests.library\\",\\n    srcs = glob([\\"**/*.swift\\"]),\\n    module_name = \\"MastodonUITests\\",\\n    testonly = True,\\n)\\n```\\n\\nAt [this commit][commit-tests] the tests have been translated for the Mastodon iOS project.\\n\\n[commit-tests]: https://github.com/brentleyjones/mastodon-ios/commit/f622f72b704b470650b3101aa7f0e2a5e8b2fdaf\\n[test_host-attr]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-ios.md#ios_unit_test-test_host\\n[test_host_is_bundle_loader-attr]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-ios.md#ios_unit_test-test_host_is_bundle_loader\\n\\n#### Frameworks\\n\\nSince we are using **rules_swift_package_manager** for the `MastodonSDK` target,\\nwe don\'t have any framework targets to define.\\nIf we did though,\\nwe would use the [`ios_framework`](#ios_framework) rule to define a bundle similar to our application or app extensions,\\nand reference the framework with the [`frameworks`][frameworks-attr] attribute.\\nThis is in addition to listing dependencies in the `deps` attribute for any [static library](#swift_library) targets that happen to be bundled in the framework.\\n\\n[frameworks-attr]: https://github.com/bazelbuild/rules_apple/blob/3.3.0/doc/rules-ios.md#ios_application-provisioning_profile\\n\\n#### Codegen\\n\\nBazel actions can\'t modify source files in the workspace.\\nSo in order to use code generation with Bazel you need to use a [`genrule`][genrule] or a custom rule to generate files,\\nwhich you then depend on in your `srcs` attributes.\\n\\nThe Mastodon iOS project uses [Sourcery][sourcery] and [SwiftGen][swiftgen] to modify source files in-place,\\nwhich it then checks into source control.\\nIn order to allow building the project with either xcodebuild or Bazel,\\nwe will leave code generation as an external process.\\n\\n[genrule]: https://bazel.build/versions/7.0.0/reference/be/general#genrule\\n[sourcery]: https://github.com/krzysztofzablocki/Sourcery\\n[swiftgen]: https://github.com/SwiftGen/SwiftGen\\n\\n## Integrating with Xcode\\n\\nIf we were performing this migration more than a year ago this section would be a lot larger,\\nand could probably be its own post.\\nThankfully since the start of last year we have a\\nfast,\\nstable,\\nand\\nmature\\ncommunity backed solution in the form of [**rules_xcodeproj**][rules_xcodeproj].\\n\\n### `xcodeproj`\\n\\nTo use **rules_xcodeproj**,\\nwe add a `bazel_dep` for it to our `MODULE.bazel` file,\\nand define an `xcodeproj` target for the project in the root `BUILD` file:\\n\\n```python title=\\"MODULE.bazel\\"\\nbazel_dep(name = \\"rules_xcodeproj\\", version = \\"1.16.0\\")\\n```\\n\\n```python title=\\"BUILD\\"\\nload(\\"@rules_xcodeproj//xcodeproj:defs.bzl\\", \\"top_level_target\\", \\"xcodeproj\\")\\n\\nxcodeproj(\\n    name = \\"xcodeproj\\",\\n    generation_mode = \\"incremental\\",\\n    project_name = \\"MastodonBazel\\",\\n    top_level_targets = [\\n        top_level_target(\\n            \\"//Mastodon:Mastodon\\",\\n            target_environments = [\\"simulator\\", \\"device\\"],\\n        ),\\n        \\"//MastodonTests:MastodonTests\\",\\n        \\"//MastodonUITests:MastodonUITests\\",\\n    ],\\n)\\n```\\n\\n:::note\\n\\nAny targets listed in `xcodeproj.top_level_targets` will need to grant visibility to **rules_xcodeproj**.\\nThey can do so by having `\\"@rules_xcodeproj//xcodeproj:generated\\"` in their [`visibility`][visibility] attribute.\\n\\n[visibility]: https://bazel.build/concepts/visibility\\n\\n:::\\n\\nAt [this commit][commit-xcodeproj] **rules_xcodeproj** has been integrated into the Mastodon iOS project.\\n\\n[commit-xcodeproj]: https://github.com/brentleyjones/mastodon-ios/commit/c0139c3cce3784832a00e42405c690a3db9c8d49\\n[rules_xcodeproj]: https://github.com/MobileNativeFoundation/rules_xcodeproj\\n\\n### Generating the Xcode project\\n\\nWe can now generate a Bazel integrated Xcode project by running a single command:\\n\\n```shellsession\\n$ bazel run //:xcodeproj\\nINFO: Analyzed target //:xcodeproj (1 packages loaded, 1 target configured).\\nINFO: Found 1 target...\\nTarget //:xcodeproj up-to-date:\\n  bazel-bin/xcodeproj-runner.sh\\nINFO: Elapsed time: 0.089s, Critical Path: 0.00s\\nINFO: 3 processes: 3 internal.\\nINFO: Build completed successfully, 3 total actions\\nINFO: Running command line: bazel-bin/xcodeproj-runner.sh\\n\\nGenerating \\"MastodonBazel.xcodeproj\\"\\nINFO: Analyzed target @@rules_xcodeproj~1.16.0~internal~rules_xcodeproj_generated//generator/xcodeproj:xcodeproj (1 packages loaded, 1 target configured).\\nINFO: Found 1 target...\\nINFO: Elapsed time: 0.308s, Critical Path: 0.07s\\nINFO: 4 processes: 2 internal, 2 local.\\nINFO: Build completed successfully, 4 total actions\\nINFO: Running command line: /private/var/tmp/_bazel_brentley/b406c5544781724b8a84c3c6fa8dad13/rules_xcodeproj.noindex/build_output_base/execroot/_main/bazel-out/darwin_arm64-dbg/bin/external/rules_xcodeproj~1.16.0~internal~rules_xcodeproj_generated/generator/xcodeproj/xcodeproj-installer.sh --xcodeproj_bazelrc /private/var/tmp/_bazel_brentley/b406c5544781724b8a84c3c6fa8dad13/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/xcodeproj-runner.sh.runfiles/_main/xcodeproj.bazelrc --extra_flags_bazelrc /private/var/tmp/_bazel_brentley/b406c5544781724b8a84c3c6fa8dad13/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/xcodeproj-runner.sh.runfiles/_main/xcodeproj-extra-flags.bazelrc --bazel_path /Users/brentley/Library/Caches/bazelisk/downloads/sha256/93772ce53afbe2282d0d727137a19c835eaa6f328964d02024bf3c234993bf7b/bin/bazel --execution_root /private/var/tmp/_bazel_brentley/b406c5544781724b8a84c3c6fa8dad13/execroot/_main\\nUpdated project at \\"MastodonBazel.xcodeproj\\"\\n```\\n\\nIf you open the generated project\\n(i.e. `xed MastodonBazel.xcodeproj`)\\nand run the `Mastodon` scheme,\\nit should\\nbuild,\\ninstall to the simulator,\\nand launch successfully:\\n\\n<figure>\\n![](../static/img/blog/mastodon-bazel-xcode-and-simulator.png)\\n<figcaption>The <strong>rules_xcodeproj</strong> generated project open in Xcode and running in the Simulator</figcaption>\\n</figure>\\n\\n### Ensuring Bazel sees the correct Xcode version\\n\\nCurrently there are additional steps that need to be taken in order for Bazel to correctly detect when Xcode versions change.\\nI recommend reading the [\\"Xcode Version Selection and Invalidation\\"][rules_apple-xcode-management] section of the **rules_apple** docs for details on what and why.\\nIf you only build your project inside of Xcode,\\nor with the [**rules_xcodeproj** command-line API][rules_xcodeproj-command-line-api],\\nthere is nothing else you need to do to manage your Xcode version with Bazel,\\nbecause it [applies these steps for you][rules_xcodeproj-xcode-management].\\n\\n[rules_apple-xcode-management]: https://github.com/bazelbuild/rules_apple/blob/3.2.1/doc/common_info.md#xcode-version-selection-and-invalidation\\n[rules_xcodeproj-command-line-api]: https://github.com/MobileNativeFoundation/rules_xcodeproj/blob/1.17.0/docs/usage.md#command-line-api\\n[rules_xcodeproj-xcode-management]: https://github.com/MobileNativeFoundation/rules_xcodeproj/blob/1.17.0/xcodeproj/internal/templates/runner.sh#L148-L171\\n\\n### Generating release archives\\n\\nCurrently the Archive action in Xcode doesn\'t work when using **rules_xcodeproj**.\\nThis means that you\'ll need to generate release archives on the command line directly with Bazel,\\nand then upload them to the App Store.\\n\\nFor example, you can generate the `.ipa` archive for the Mastodon app by running the following command:\\n\\n```shellsession\\n$ bazel build //Mastodon --ios_multi_cpus=arm64\\n```\\n\\nAnd then you can [manually upload the archive][upload-ipa].\\nOr you can use the [`xcarchive`][xcarchive] rule from **rules_apple** to generate an `.xcarchive` bundle,\\nand then use Xcode to upload the archive.\\n\\n[upload-ipa]: https://developer.apple.com/help/app-store-connect/manage-builds/upload-builds/\\n[xcarchive]: https://github.com/bazelbuild/rules_apple/blob/3.2.1/doc/rules-xcarchive.md#xcarchive\\n\\n## Leveraging remote caching and remote execution\\n\\nOne of the main reasons to use Bazel,\\ninstead of another build system such as xcodebuild,\\nis to leverage its remote caching and execution capabilities.\\nFor a detailed overview on both of those capabilities,\\nI recommend reading my [post on the subject][rbc-explained].\\n\\nFor this post I\'ll detail the steps I would take for any Bazel migration,\\nstarting from no caching and ending with both caching and remote execution.\\n\\n[rbc-explained]: bazels-remote-caching-and-remote-execution-explained.md\\n\\n### Disk cache\\n\\nBazel supports a form of \\"remote cache\\" that uses the local filesystem instead of a remote server.\\nIt\'s called the \\"disk cache\\" and is enabled with the [`--disk_cache`][disk_cache-flag] flag.\\n\\nThere are pros and cons to using the disk cache:\\n\\n- **Pros**\\n  - Lower latency than a remote cache\\n  - Includes blobs[^blob] that have been built locally,\\n    which is useful for developers that can\'t upload to the remote cache\\n- **Cons**\\n  - Only includes blobs that have been built or downloaded for local builds\\n  - Some redundancy with blobs already stored in the output base\\n  - No automatic cleanup[^disk-cache-max-size]\\n  - A history of being buggy\\n\\n[^blob]: A \\"blob\\" is an [REAPI][reapi] term for artifacts that are stored in a cache.\\n\\n[^disk-cache-max-size]: [Bazel issue #5139](https://github.com/bazelbuild/bazel/issues/5139).\\n\\nWith those in mind,\\nwe are going to start out by enabling the disk cache for all use cases in the [`.bazelrc`][bazelrc] file:\\n\\n```shell title=\\".bazelrc\\"\\n# Cache\\n\\ncommon --disk_cache=~/bazel_disk_cache\\n```\\n\\n[bazelrc]: https://bazel.build/run/bazelrc\\n[disk_cache-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--disk_cache\\n[reapi]: https://github.com/bazelbuild/remote-apis\\n\\n### Remote cache\\n\\nUsing a remote cache allows for multiple machines to benefit from the work performed by a single machine.\\nIt can be enabled with the [`--remote_cache`][remote_cache-flag] flag.\\n\\nThe disk cache can be used concurrently with a remote cache,\\nbut I only recommend that setup for local development.\\nThat\'s because normally the remote cache will only accept writes from CI,\\nso the disk cache can still provide a benefit to developers,\\nbut CI will rarely see benefits,\\nand usually degradation,\\nby also using the disk cache.\\n\\nWe can adjust the `.bazelrc` file to\\nenable a remote cache,\\ndisable uploads for local development,\\nand disable the disk cache on CI\\n(by using a dedicated [config][bazelrc-config]):\\n\\n```shell title=\\".bazelrc\\"\\ncommon --remote_cache=grpcs://remote.buildbuddy.io\\ncommon --noremote_upload_local_results\\ncommon:upload --disk_cache=\\ncommon:upload --remote_upload_local_results\\n\\n# CI\\n\\ncommon:ci --config=upload\\n```\\n\\nWe used [BuildBuddy\'s Remote Cache][bb-remote-cache] because it\'s free for personal or open source projects.\\nWe also used the [`--[no]remote_upload_local_results`][remote_upload_local_results-flag] flag to control uploading to the remote cache,\\nbut in your project you probably want to use some sort of authentication and authorization method to limit this instead\\n(e.g. [BuildBuddy API keys][bb-auth]).\\n\\nAt [this commit][commit-rbc] a remote cache has been integrated into the Mastodon iOS project.\\n\\n[bazelrc-config]: https://bazel.build/run/bazelrc#config\\n[bb-auth]: https://www.buildbuddy.io/docs/guide-auth\\n[bb-remote-cache]: https://www.buildbuddy.io/remote-cache\\n[commit-rbc]: https://github.com/brentleyjones/mastodon-ios/commit/aeac0c76d4d94e227a8862e4d5f92953fd0bf173\\n[remote_cache-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--remote_cache\\n[remote_upload_local_results-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--remote_upload_local_results\\n\\n### Debugging cache hits\\n\\nThere might be times when you get fewer cache hits than you are expecting.\\nIf that\'s the case,\\nI recommend reading [\\"Debugging Remote Cache Hits\\"][debug-remote-cache-hits] in the Bazel docs,\\nwhich has information that will aid you in finding the problem.\\n\\n[debug-remote-cache-hits]: https://bazel.build/remote/cache-remote\\n\\n### **rules_xcodeproj** cache warming\\n\\n**rules_xcodeproj** most likely builds your targets with a slightly different configuration than when you build them on the command line.\\nBecause of this,\\n**rules_xcodeproj** offers a [command-line API][rules_xcodeproj-command-line-api] that allows you to build targets under the same configuration that it uses.\\nThis allows us to build targets on CI in a way that will populate the remote cache with blobs that developers will then get cache hits on.\\n\\nWe can add a new config to the `.bazelrc` file to ensure that we don\'t get CI specific modifications:\\n\\n```shell title=\\".bazelrc\\"\\n# Cache warming\\n\\ncommon:warming --config=upload\\ncommon:warming --remote_download_minimal\\n```\\n\\nHere is the cache warming command we would run on CI:\\n\\n```shellsession\\n$ bazel run //:xcodeproj -- --generator_output_groups=all_targets \'build --config=warming\'\\nINFO: Analyzed target //:xcodeproj (0 packages loaded, 0 targets configured).\\nINFO: Found 1 target...\\nTarget //:xcodeproj up-to-date:\\n  bazel-bin/xcodeproj-runner.sh\\nINFO: Elapsed time: 0.145s, Critical Path: 0.00s\\nINFO: 1 process: 1 internal.\\nINFO: Build completed successfully, 1 total action\\nINFO: Running command line: bazel-bin/xcodeproj-runner.sh \'--generator_output_groups=all_targets\' \'build --config=warming\'\\n\\nINFO: Analyzed target @@rules_xcodeproj~override~internal~rules_xcodeproj_generated//generator/xcodeproj:xcodeproj (3 packages loaded, 515 targets configured).\\nINFO: Found 1 target...\\nINFO: Elapsed time: 4.002s, Critical Path: 3.48s\\nINFO: 13 processes: 5 internal, 7 local, 1 worker.\\nINFO: Build completed successfully, 13 total actions\\n```\\n\\n:::note\\n\\n`--generator_output_groups=all_targets` will build every target,\\nin every `target_environment`,\\nthat could be built by the project generated by `//:xcodeproj`.\\n\\nIf you don\'t want to build _every_ target\\n(e.g. you don\'t want to cache tests or device builds),\\nyou can adjust the\\n`top_level_targets`,\\n`focused_targets`,\\nand/or `unfocused_targets` attributes to reflect the subset of targets that you want to build.\\nYou can do this by defining additional `xcodeproj` targets,\\nor by adjusting the existing `//:xcodeproj` target before running the cache warming command\\n(and then throwing away the modifications after).\\n\\n:::\\n\\n### Build event service\\n\\nNow that we have a remote cache enabled,\\nwe should also enable uploading events to a Build Event Service (BES).\\nUsing BES gives you greater insight into your builds,\\nasynchronously to when the build actually happened\\n(which can be immensely useful for CI builds).\\n\\nHere are some benefits of using BES:\\n\\n- Easily share build logs\\n- See historical build data, including aggregations and trends\\n- See details not exposed via the terminal\\n  (e.g. all command-line flags used without having to use [`--announce_rc`][announce_rc-flag],\\n  or all environment variables set)\\n- View action timing data (same as [`--generate_json_trace_profile`][generate_json_trace_profile-flag])\\n- Visualize queries\\n- View error and test logs\\n- Download action outputs\\n- View remote cache stats\\n- View related remote execution data\\n  - List of actions executed\\n  - Individual action details\\n    (e.g. command-line arguments,\\n    environment variables,\\n    platform properties,\\n    timing data,\\n    and downloading inputs and outputs)\\n\\nWe can adjust the `.bazelrc` file to upload to a BES endpoint:\\n\\n```shell title=\\".bazelrc\\"\\ncommon --bes_backend=grpcs://remote.buildbuddy.io\\ncommon --bes_results_url=https://app.buildbuddy.io/invocation/\\ncommon --bes_upload_mode=nowait_for_upload_complete\\n```\\n\\nWe used [BuildBuddy\'s Build and Test UI][bb-bes] because it\'s free for personal or open source projects.\\n\\nNow when we perform a build there will be a [link to the build results UI](https://app.buildbuddy.io/invocation/e69835b2-672f-4a4f-bb00-c73ca8850859),\\nwhich when opened shows detailed information about the build performed:\\n\\n```shellsession\\n$ bazel build //Mastodon\\nINFO: Invocation ID: e69835b2-672f-4a4f-bb00-c73ca8850859\\nINFO: Streaming build results to: https://app.buildbuddy.io/invocation/e69835b2-672f-4a4f-bb00-c73ca8850859\\nINFO: Analyzed target //Mastodon:Mastodon (0 packages loaded, 0 targets configured).\\nINFO: Found 1 target...\\nTarget //Mastodon:Mastodon up-to-date:\\n  bazel-bin/Mastodon/Mastodon.ipa\\nINFO: Elapsed time: 0.253s, Critical Path: 0.00s\\nINFO: 1 process: 1 internal.\\nINFO: Build completed successfully, 1 total action\\nINFO:\\nINFO: Streaming build results to: https://app.buildbuddy.io/invocation/e69835b2-672f-4a4f-bb00-c73ca8850859\\n```\\n\\n<figure>\\n![](../static/img/blog/mastodon-bazel-build-results-ui.png)\\n<figcaption>BuildBuddy Build Results UI for a build of the <code>//Mastodon</code> target</figcaption>\\n</figure>\\n\\nAt [this commit][commit-bes] a BES endpoint has been integrated into the Mastodon iOS project.\\n\\n[announce_rc-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--announce_rc\\n[bb-bes]: https://www.buildbuddy.io/ui\\n[commit-bes]: https://github.com/brentleyjones/mastodon-ios/commit/aeac0c76d4d94e227a8862e4d5f92953fd0bf173\\n[generate_json_trace_profile-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--generate_json_trace_profile\\n\\n### Remote execution\\n\\nUsing a remote execution service allows Bazel to run actions on an external cluster of executors.\\nBecause of the inherint latency involved in that\\n(e.g. network transfer and staging of remote input trees),\\nthe remote executors need to be a fair bit faster than your local machine,\\nor your build needs to be \\"wide enough\\",\\nfor a remote build to be faster than a local one.\\n\\nEnabling remote execution after you have remote caching set up is as simple as setting the [`--remote_executor`][remote_executor-flag] flag\\nand ensuring that `remote` is the first strategy set in [`--spawn_strategy`][spawn_strategy-flag].\\n(which it is by default).\\nYou might also need to set some default platform properties with the [`--remote_default_exec_properties`][remote_default_exec_properties-flag] flag to ensure that actions are routed to the right executors.\\n\\nWe can adjust the `.bazelrc` file to have a dedicated `remote` config which sets `--remote_executor` and some default platform properties for an Apple silicon Mac:\\n\\n```shell title=\\".bazelrc\\"\\n# Remote exectuion\\n\\ncommon:remote --config=upload\\ncommon:remote --remote_executor=grpcs://remote.buildbuddy.io\\ncommon:remote --remote_default_exec_properties=OSFamily=darwin\\ncommon:remote --remote_default_exec_properties=Arch=arm64\\n```\\n\\n:::note\\n\\nBuildBuddy\'s anonymous and personal tiers don\'t include Mac remote executors.\\n[Contact us][contact-buildbuddy] if you want to use Mac remote execution.\\n\\n[contact-buildbuddy]: https://www.buildbuddy.io/contact\\n\\n:::\\n\\nAt [this commit][commit-rbe] remote execution has been integrated into the Mastodon iOS project.\\n\\n[commit-rbe]: https://github.com/brentleyjones/mastodon-ios/commit/ea98209d9907f03a89c7d08aef9ea0bfec729621\\n[remote_default_exec_properties-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--remote_default_exec_properties\\n[remote_executor-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--remote_executor\\n[spawn_strategy-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--spawn_strategy\\n\\n## Optimizing\\n\\nNow that everything is building,\\nand we have a functioning remote cache,\\nit\'s time to optimize the build further.\\nIdeally we wouldn\'t need to do anything further at this point,\\nbut currently Bazel doesn\'t have the best default settings for all projects.\\nAnd even if it did,\\nthe structure of the build graph itself has a large impact on build performance.\\n\\n### Optimal Bazel settings\\n\\nIf you build with Xcode,\\n**rules_xcodeproj** will apply a lot of [optimal settings for you][rules_xcodeproj-default-flags].\\nI\'ll still list them here,\\nalong with some settings it doesn\'t set for you,\\nin case you need to build outside of Xcode.\\n\\nAt [this commit][commit-optimal-flags] we applied all of the flags discussed in the following sections to the Mastodon iOS project.\\n\\n[commit-optimal-flags]: https://github.com/brentleyjones/mastodon-ios/commit/066830f4f2ee0a4c2f533ee26acfbe546f5b4bb2\\n[rules_xcodeproj-default-flags]: https://github.com/MobileNativeFoundation/rules_xcodeproj/blob/1.17.0/xcodeproj/internal/templates/xcodeproj.bazelrc\\n\\n#### Cacheability\\n\\nThe\\n[`oso_prefix_is_pwd`][oso_prefix_is_pwd-feature],\\n[`relative_ast_path`][relative_ast_path-feature],\\nand [`remap_xcode_path`][remap_xcode_path-feature]\\n[features][features-flag] in **apple_support**,\\nand the [`swift.cacheable_swiftmodules`][swift-cacheable_swiftmodules-feature] feature in **rules_swift**,\\nremove absolute paths from binaries produced by **rules_apple** and **rules_swift**.\\nIt\'s highly recommended that you use these features if using a remote cache,\\notherwise you might get a low cache hit rate on anything involving those binaries.\\nAs long as you are using a version of **apple_support** and **rules_swift** that is at least 1.5.0,\\nthese features are enabled by default.\\nOtherwise,\\nyou can enable them with `--features=oso_prefix_is_pwd,relative_ast_path,remap_xcode_path,swift.cacheable_swiftmodules`.\\n\\n:::note\\n\\nWhen using these features you may need to [provide additional information to lldb][swift-debug-settings] for debugging to work properly.\\n\\n[swift-debug-settings]: https://github.com/MobileNativeFoundation/rules_xcodeproj/blob/1.17.0/tools/generators/swift_debug_settings/src/Generator/WriteSwiftDebugSettings.swift#L121-L155\\n\\n:::\\n\\n[features-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--features\\n[oso_prefix_is_pwd-feature]: https://github.com/bazelbuild/apple_support/blob/1.14.0/crosstool/cc_toolchain_config.bzl#L2080-L2089\\n[relative_ast_path-feature]: https://github.com/bazelbuild/apple_support/blob/1.14.0/crosstool/cc_toolchain_config.bzl#L1747-L1761\\n[remap_xcode_path-feature]: https://github.com/bazelbuild/apple_support/blob/1.14.0/crosstool/cc_toolchain_config.bzl#L1851-L1873\\n[swift-cacheable_swiftmodules-feature]: https://github.com/bazelbuild/rules_swift/blob/1.16.0/swift/internal/feature_names.bzl#L229-L238\\n\\n#### Local performance\\n\\nBazel\'s implementation of [sandboxing][sandboxing] on macOS is slow.[^slow-macos-sandbox]\\nBecause of that I recommend,\\nat least for non-release builds,\\ndisabling sandboxing.\\nThis can be achieved by setting the [`--spawn_strategy`][spawn_strategy-flag] flag to `remote,worker,local`,\\nand setting the [`--noworker_sandboxing`][worker_sandboxing-flag] flag.\\n\\nThe [`swift.use_global_module_cache`][swift-use_global_module_cache-feature] feature in **rules_swift** sets the Swift module cache to a fixed location,\\nallowing it to be reused by multiple compilations.\\nThis can result in up to 10 times faster compilations.\\nAs long as you are using a version of **rules_swift** that is at least 1.5.0,\\nthis feature is enabled by default.\\nOtherwise,\\nyou can enable it with `--features=swift.use_global_module_cache`.\\n\\nBazel calculates digests of all input and output files,\\nin order to determine when actions need to be rerun.\\nBy default it uses the [SHA-256][sha256] hash function to calculate these digests.\\nSince version 6.4.0 Bazel now supports using the [BLAKE3][blake3] hash function instead,\\nby setting the [`--digest_function`][digest_function-flag] startup flag to `blake3`.\\nFor builds with large binaries,\\nwhich iOS apps usually have,\\nusing BLAKE3 can result in up to 5 times faster digest calculations.\\nAnd since the actions producing these large binaries\\n(e.g. linking)\\nare normally on the critical path,\\nthis can speed up incremental development.\\n\\n:::note\\n\\nIf you use remote capabilities,\\nsuch as\\nremote caching,\\nremote execution,\\nor a build event service,\\nthey also have to support the digest function you set with `--digest_function`.\\nIn case you were wondering,\\nall of BuildBuddy\'s products\\n(i.e. Build and Test UI, Remote Build Cache, and Remote Build Execution)\\nsupport BLAKE3 digests \ud83d\ude0a.\\n\\n:::\\n\\nSpeaking of digests,\\nBazel keeps an in-memory cache of file digests,\\nsince computing the digests is expensive.\\nThe default number of entries in this cache is set to 50,000,\\nwhich can be too low for some projects.\\nI recommend adjusting this up by setting the [`--cache_computed_file_digests`][cache_computed_file_digests-flag] flag to `500000`.\\nThis number seems to have a minimal impact on the amount of memory that the Bazel server retains.\\n\\n[^slow-macos-sandbox]: [Bazel issue #8320](https://github.com/bazelbuild/bazel/issues/8230).\\n\\n[blake3]: https://en.wikipedia.org/wiki/BLAKE_(hash_function)#BLAKE3\\n[cache_computed_file_digests-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--cache_computed_file_digests\\n[digest_function-flag]: https://bazel.build/reference/command-line-reference#flag--digest_function\\n[sandboxing]: https://bazel.build/docs/sandboxing\\n[sha256]: https://en.wikipedia.org/wiki/SHA-2\\n[swift-use_global_module_cache-feature]: https://github.com/bazelbuild/rules_swift/blob/1.16.0/swift/internal/feature_names.bzl#L167-L174\\n[worker_sandboxing-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--worker_sandboxing\\n\\n#### Remote performance\\n\\nThere are a few settings I recommend adjusting for optimal\\nremote caching,\\nremote execution,\\nand build event service\\nusage.\\n\\nThe [`--experimental_remote_cache_async`][remote_cache_async-flag] flag allows execution of actions that don\'t depend on the output of a given action to start before the outputs of that action finish uploading.\\nThat\'s a lot of words to say that uploading of outputs becomes as asynchronous as possible,\\nwhile still blocking dependent actions from starting.\\nThe `bazel` command will also block at the end of a build while it waits for all uploads to finish.\\n\\nSimilarly,\\nsetting the [`--bes_upload_mode`][bes_upload_mode-flag] flag to `nowait_for_upload_complete` will prevent the `bazel` command from blocking at the end of a build while it uploads to a build event service.\\nIf another build starts while uploads are still happening in the background,\\nthat build will wait to start until the previous uploads finish.\\nYou can have previous uploads cancelled rather than delay a build by using a value of `fully_async` instead.\\n\\nSpeaking of BES related flags,\\nif your build event service isn\'t [ResultStore][resultstore]\\n(e.g. BuildBuddy),\\nyou should set [`--nolegacy_important_outputs`][legacy_important_outputs-flag] to reduce the size of the uploaded events.\\n\\nThe [`--remote_cache_compression`][remote_cache_compression-flag] flag causes Bazel to compress uploads and decompress downloads with the [zstd][zstd] algorithm.\\nThis reduces the average number of bytes transferred by around 70%,\\nwhich for some projects has resulted in a 45% faster overall build time.\\n\\nSome types of actions we shouldn\'t remotely cache or build.\\nWe can tell Bazel about that by using the [`--modify_execution_info`][modify_execution_info-flag] flag.\\nThe **rules_apple** documentation has a [nice explaination][rules_apple-modify_execution_info] on the suggested value for this flag.\\n\\nIf using remote execution,\\nyou might have to set some additional platform properties for optimal performance.\\nIn the case of BuildBudddy\'s product,\\nI recommend setting [these properties][buildbuddy-platform-properties]:\\n\\n- `recycle-runner=true`\\n- `preserve-workspace=true`\\n- `clean-workspace-inputs=*`\\n\\nFinally,\\nwhen using remote caching or remote execution,\\nyou\'ll want to use an increased value for the [`--jobs`][jobs-flag] flag.\\nA higher value will result in more concurrent downloads and/or remote actions being executed.\\nYou\'ll need to experiement to determine the correct value for you,\\nsince different projects or host machines can benefit from,\\nor potentially suffer from[^jobs-flag-performance],\\ndifferent values.\\n\\n[^jobs-flag-performance]: [Bazel issue #21954](https://github.com/bazelbuild/bazel/issues/21594).\\n\\n[bes_upload_mode-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--bes_upload_mode\\n[buildbuddy-platform-properties]: https://www.buildbuddy.io/docs/rbe-platforms#action-isolation-and-hermeticity-properties\\n[jobs-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--jobs\\n[legacy_important_outputs-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--legacy_important_outputs\\n[modify_execution_info-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--modify_execution_info\\n[remote_cache_async-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--experimental_remote_cache_async\\n[remote_cache_compression-flag]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--remote_cache_compression\\n[rules_apple-modify_execution_info]: https://github.com/bazelbuild/rules_apple/blob/master/doc/common_info.md#optimizing-remote-cache-and-build-execution-performance\\n[resultstore]: https://github.com/google/resultstoreui\\n[zstd]: https://github.com/facebook/zstd\\n\\n### Modularization\\n\\nTo get the most benefit out of Bazel\'s incremental compilation support,\\nyou need to have your project split into many modules.\\nIf your project is only a couple large modules,\\nthen when you make changes most of that code will need to be recompiled.\\nBut if your project is made up of many small modules,\\nthen when you make changes a smaller portion of the code will need to be recompiled.\\n\\nYou can think of modularization\\n(the process of splitting large modules into smaller modules)\\nas one way to optimize your build graph for Bazel.\\nAnother would be adjusting your dependencies such that your build graph is \\"wide\\" instead of \\"deep\\".\\nThis allows for more parallel compilation,\\nand when using [remote execution](#remote-execution) the wider the build graph is the better.\\n\\n## Next steps\\n\\nAt this point you should have a well functioning iOS Bazel project.\\nCongratulations \ud83c\udf89!\\n\\nNext steps from here depend on what is the highest priority for you and your team.\\nYou could\\ncontinue focusing on modularization,\\nprofile and optimize build performance,\\nor maybe look into custom macros and rules to make your specific workflows more efficient or easier to set up.\\n\\nIn you need any help,\\nthe `#apple` and `#rules_xcodeproj` channels in the [Bazel Slack workspace][bazel-slack] are a great place to ask questions.\\nYou can also email us at [hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts.\\n\\n[bazel-slack]: https://slack.bazel.build/"},{"id":"how-bazel-7-0-makes-your-builds-faster","metadata":{"permalink":"/blog/how-bazel-7-0-makes-your-builds-faster","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/how-bazel-7-0-makes-your-builds-faster.md","source":"@site/blog/how-bazel-7-0-makes-your-builds-faster.md","title":"How Bazel 7.0 Makes Your Builds Faster","description":"Highlighting changes in Bazel 7.0 that help BuildBuddy users build even faster!","date":"2024-01-08T10:00:00.000Z","tags":[{"inline":true,"label":"bazel","permalink":"/blog/tags/bazel"}],"readingTime":5.04,"hasTruncateMarker":true,"authors":[{"name":"Brentley Jones","title":"Developer Evangelist @ BuildBuddy","url":"https://brentleyjones.com","imageURL":"https://avatars.githubusercontent.com/u/158658?v=4","key":"brentley","page":null}],"frontMatter":{"slug":"how-bazel-7-0-makes-your-builds-faster","title":"How Bazel 7.0 Makes Your Builds Faster","description":"Highlighting changes in Bazel 7.0 that help BuildBuddy users build even faster!","authors":"brentley","date":"2024-01-08:10:00:00","image":"/img/bazel_7_0_faster.png","tags":["bazel"]},"unlisted":false,"prevItem":{"title":"How to migrate an iOS app to Bazel","permalink":"/blog/how-to-migrate-an-ios-app-to-bazel"},"nextItem":{"title":"What\'s New in Bazel 7.0","permalink":"/blog/whats-new-in-bazel-7-0"}},"content":"In our [last post][bazel_7_0],\\nwe summarized the changes that were in the Bazel 7.0 release.\\nThere were a lot of changes though,\\nso it can be hard to determine which ones are impactful to you and why.\\n\\nDon\'t worry, we\'ve got your back.\\nIn this post we highlight the changes that help BuildBuddy users build even faster!\\n\\n[bazel_7_0]: whats-new-in-bazel-7-0.mdx\\n\\n\x3c!-- truncate --\x3e\\n\\n## Analysis phase\\n\\nBazel 7.0 includes numerous optimizations to the Starlark interpreter.\\nThese optimizations result in faster loading and analysis phases,\\nallowing execution to start sooner.\\nThey also result in lower peak and retained Bazel server memory usage,\\nwhich can indirectly speed up your build\\n(e.g. because of fewer JVM garbage collections).\\n\\n## Execution phase\\n\\nIn Bazel 6.x and 7.0 file checksumming was optimized.\\nThis means that actions that output symlinks of large objects or large tree artifacts run much faster.\\n\\nThe [`--reuse_sandbox_directories`][reuse_sandbox_directories] feature received some bug fixes.\\nUsing this flag on macOS can be a sizable speedup if you use sandboxing,\\nwhich is the the default for most actions.\\n\\nBazel\'s local CPU resource counting on Linux is now container aware.\\nThis should result in better default utilization of CPUs in containers.\\n\\nThe Android rules added persistent worker support to more actions.\\nThe persistent workers can be enabled with the\\n[`--experimental_persistent_aar_extractor`][experimental_persistent_aar_extractor],\\n[`--persistent_android_resource_processor`][persistent_android_resource_processor],\\nand [`--persistent_android_dex_desugar`][persistent_android_dex_desugar] flags.\\n\\n[experimental_persistent_aar_extractor]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--experimental_persistent_aar_extractor\\n[persistent_android_resource_processor]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--persistent_android_resource_processor\\n[persistent_android_dex_desugar]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--persistent_android_dex_desugar\\n[reuse_sandbox_directories]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--reuse_sandbox_directories\\n\\n## Skymeld\\n\\nIn Bazel 7.0 the analysis and execution phases are now merged\\n(i.e. [project Skymeld][skymeld]).\\nDepending on the shape of your build,\\nand the number of top-level targets you are building,\\nthis can result in a decent speedup.\\n\\nYou can disable this feature\\n(e.g. to work around bugs or to benchmark)\\nwith [`--noexperimental_merged_skyframe_analysis_execution`][experimental_merged_skyframe_analysis_execution].\\n\\n[experimental_merged_skyframe_analysis_execution]: https://github.com/bazelbuild/bazel/blob/7.0.0/src/main/java/com/google/devtools/build/lib/buildtool/BuildRequestOptions.java#L376-L383\\n[skymeld]: https://github.com/bazelbuild/bazel/issues/14057\\n\\n## BLAKE3\\n\\nIn Bazel 6.4 the `blake3` option was added to the [`--digest_function`][digest_function] startup flag.\\nWhen using this option the [BLAKE3][blake3] hash function is used to compute file digests.\\nFor large files this can be significantly faster than the default SHA-256 hash function.\\n\\nThere is a small caveat to using this new option.\\nIf you use a remote cache,\\nit needs to also support BLAKE3 digests.\\nIf you are not using a cache,\\nor only using `--disk_cache`,\\nyou can safely use this option.\\nIn case you were wondering,\\nall of BuildBuddy\'s products\\n(i.e. Build and Test UI, Remote Build Cache, and Remote Build Execution)\\nsupport BLAKE3 digests \ud83d\ude0a.\\n\\n[blake3]: https://github.com/BLAKE3-team/BLAKE3\\n[digest_function]: https://github.com/bazelbuild/bazel/blob/7.0.0/src/main/java/com/google/devtools/build/lib/runtime/BlazeServerStartupOptions.java#L407-L418\\n\\n## Remote caching and remote execution\\n\\nRemote server capabilities are now fetched asynchronously,\\nallowing analysis and non-remote actions to start sooner.\\n\\nMerkle trees,\\nwhich are created by Bazel for use with remote execution,\\nare now built faster while using less memory.\\n\\nWhen the remote cache or executors are unreachable,\\nBazel now automatically falls back to local execution,\\ninstead of erroring.\\nSimilarly, in Bazel 6.3 the\\n[`--experimental_circuit_breaker_strategy`][experimental_circuit_breaker_strategy],\\n[`--experimental_remote_failure_window_interval`][experimental_remote_failure_window_interval],\\nand [`--experimental_remote_failure_rate_threshold`][experimental_remote_failure_rate_threshold]\\nflags were added,\\nwhich allows configuring Bazel to switch to local execution if a certain rate of remote errors are encountered during a build.\\n\\nThe [`--experimental_remote_scrubbing_config`][experimental_remote_scrubbing_config] flag was added,\\nwhich allows you to increase cache hits for platform independent targets when building from multiple host platforms.\\n\\nAll of these changes result in faster and more reliable builds when you use remote strategies.\\n\\n[experimental_circuit_breaker_strategy]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--experimental_circuit_breaker_strategy\\n[experimental_remote_failure_rate_threshold]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--experimental_remote_failure_rate_threshold\\n[experimental_remote_failure_window_interval]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--experimental_remote_failure_window_interval\\n[experimental_remote_scrubbing_config]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--experimental_remote_scrubbing_config\\n\\n## Build without the Bytes\\n\\nThere were quite a few changes to the [Build without the Bytes feature][bwtb],\\nin the form of both performance enhancements and bug fixes.\\nBecause of those changes,\\nthe Bazel team is finally confident enough in this feature that `toplevel` is now the the default value for the [`--remote_download_outputs`][remote_download_outputs] flag.\\n\\nUsing Build without the Bytes can speed up your build by allowing Bazel to not fetch unneeded intermediate build artifacts from your cache.\\nThe benefit of this is even more pronounced if you are using Remote Build Execution,\\nsince any actions that need to be rerun are run remotely,\\nsaving you from having to download action inputs.\\n\\nIf you don\'t need the outputs\\n(e.g. on CI or when running tests with Remote Build Execution),\\nyou can use the `minimal` option with the `--remote_download_outputs` flag,\\nwhich can speed up your builds even more.\\nAnd as of Bazel 7.0,\\nchanging the value of the `--remote_download_outputs` flag won\'t invalidate the analysis cache.\\n\\n[bwtb]: https://blog.bazel.build/2023/10/06/bwob-in-bazel-7.html\\n[remote_download_outputs]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--remote_download_outputs\\n\\n## Bzlmod\\n\\nThe Bzlmod lockfile,\\nwhich received bug fixes and breaking changes through the Bazel 6.x and 7.0 releases,\\nis now stable as of Bazel 7.0.\\nUsing the lockfile can speed up fresh Bazel server launches,\\nby preventing unnecessary rerunning of dependency resolution.\\nThis has an added benefit of allowing your workspace to build offline,\\neven if the Bazel server is restarted.\\n\\nAdditionally,\\nBazel 6.4 and 7.0 includes dependency resolution performance optimizations,\\nresulting in reduced CPU and memory usage.\\n\\nBoth Bzlmod and the Bzlmod lockfile are enabled by default in Bazel 7.0,\\nand can be adjusted with the [`--enable_bzlmod`][enable_bzlmod] and [`--lockfile_mode`][lockfile_mode] flags.\\n\\n[enable_bzlmod]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--enable_bzlmod\\n[lockfile_mode]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--lockfile_mode\\n\\n## And more...\\n\\nBazel 7.0 includes many additional changes that improve its reliability and performance.\\nTo dig a little deeper,\\nbe sure to check out our [What\'s New in Bazel 7.0][bazel_7_0] post."},{"id":"whats-new-in-bazel-7-0","metadata":{"permalink":"/blog/whats-new-in-bazel-7-0","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/whats-new-in-bazel-7-0.mdx","source":"@site/blog/whats-new-in-bazel-7-0.mdx","title":"What\'s New in Bazel 7.0","description":"You know the drill \ud83d\ude01; We reviewed over 3,700 commits and summarized them, so you don\'t have to!","date":"2023-12-11T03:30:00.000Z","tags":[{"inline":true,"label":"bazel","permalink":"/blog/tags/bazel"}],"readingTime":58.03,"hasTruncateMarker":true,"authors":[{"name":"Brentley Jones","title":"Developer Evangelist @ BuildBuddy","url":"https://brentleyjones.com","imageURL":"https://avatars.githubusercontent.com/u/158658?v=4","key":"brentley","page":null}],"frontMatter":{"slug":"whats-new-in-bazel-7-0","title":"What\'s New in Bazel 7.0","description":"You know the drill \ud83d\ude01; We reviewed over 3,700 commits and summarized them, so you don\'t have to!","authors":"brentley","date":"2023-12-11:3:30:00","image":"/img/bazel_7_0.png","tags":["bazel"]},"unlisted":false,"prevItem":{"title":"How Bazel 7.0 Makes Your Builds Faster","permalink":"/blog/how-bazel-7-0-makes-your-builds-faster"},"nextItem":{"title":"Lazily Pulling Container Images with Podman and SOCI Snapshotter","permalink":"/blog/image-streaming"}},"content":"import VersionPill from \\"@site/src/components/version_pill/version_pill\\";\\n\\n[Bazel 7.0][bazel-7-0] includes [over 3,700 changes][diff] since 6.0.\\nIt\'s the latest major release,\\nfollowing the release of 6.0 in December of last year,\\nand it\'s Bazel\'s [fourth LTS release][lts-releases].\\n\\n[bazel-7-0]: https://blog.bazel.build/2023/12/11/bazel-7-release.html\\n[diff]: https://github.com/bazelbuild/bazel/compare/6.0.0...7.0.0\\n[lts-releases]: https://bazel.build/versions/7.0.0/release\\n\\nSince there were so many changes,\\nmany of them quite impactful,\\nI felt I needed to review them all and provide a nice summary for y\'all.\\n\\n\x3c!-- truncate --\x3e\\n\\nWhile I reviewed every change,\\nI didn\'t _understand_ every change \ud83d\ude05.\\nI just wanted to mention that,\\nsince this isn\'t an exhaustive list of changes,\\nbut it is a lot of changes I felt were relevant to a large portion of the community.\\nAlso, this year I\'ve included changes that appeared in the Bazel 6 minor releases\\n(e.g. Bazel 6.1).\\nWhile you might already be on a version greater than 6.0,\\nyou might not know about all of the neat changes that made it into these \\"minor\\" releases.\\n\\nSimilar to [Bazel 6.0\'s changes][whats-new-in-bazel-6],\\nthe end result was quite big,\\nso I\'ve included a table of contents to allow easy navigation to the changes that interest you the most:\\n\\n[whats-new-in-bazel-6]: whats-new-in-bazel-6-0.md\\n\\n<nav className=\\"toc\\">\\n\\n- [Command-line flag changes](#command-line-flag-changes)\\n  - [Renamed](#renamed)\\n  - [Default values changed](#default-values-changed)\\n  - [Undeprecated](#undeprecated)\\n  - [No-op](#no-op)\\n  - [Removed](#removed)\\n- [Remote](#remote)\\n  - [Remote caching (RBC)](#remote-caching-rbc)\\n  - [Remote execution (RBE)](#remote-execution-rbe)\\n  - [Dynamic execution](#dynamic-execution)\\n  - [Build Event Service (BES)](#build-event-service-bes)\\n- [Logging](#logging)\\n  - [Build Event Protocol (BEP)](#build-event-protocol-bep)\\n  - [Timing profile](#timing-profile)\\n  - [Execution log](#execution-log)\\n  - [Execution graph](#execution-graph)\\n  - [Other](#other)\\n- [Execution](#execution)\\n  - [Running and testing](#running-and-testing)\\n  - [Coverage](#coverage)\\n  - [Persistent workers](#persistent-workers)\\n- [Querying](#querying)\\n  - [`query`](#query)\\n  - [`cquery`](#cquery)\\n  - [`aquery`](#aquery)\\n- [Dependency management](#dependency-management)\\n  - [Bzlmod](#bzlmod)\\n- [Platforms](#platforms)\\n  - [Android](#android)\\n  - [Apple](#apple)\\n  - [Linux](#linux)\\n  - [Windows](#windows)\\n- [Languages](#languages)\\n  - [Bash](#bash)\\n  - [C and C++](#c-and-c)\\n  - [Java](#java)\\n  - [Objective-C](#objective-c)\\n  - [Proto](#proto)\\n  - [Python](#python)\\n- [Starlark and Build API](#starlark-and-build-api)\\n  - [Aspects](#aspects)\\n- [Platforms and toolchains API](#platforms-and-toolchains-api)\\n- [Misc](#misc)\\n\\n</nav>\\n\\n[starlarkification-roadmap]: https://docs.google.com/document/d/12mYYtp2aJ6q1_yhguyMKh6onSZ2afJW9VctRz0hy6-Q\\n\\n## Command-line flag changes\\n\\nBazel\'s [LTS strategy][lts-releases] allows for breaking changes between major versions.\\nIn particular,\\nit allows for command-line flags to be removed,\\nrenamed,\\nmade to do nothing,\\nor have their default values changed.\\nIn the following sections I collected all such flag changes I could find.\\n\\n### Renamed\\n\\n- <VersionPill version=\\"6.1.0\\" /> `--experimental_strict_conflict_checks` to `--incompatible_strict_conflict_checks`\\n  ([77f82f4](https://github.com/bazelbuild/bazel/commit/77f82f4fab189fd042754be0a7747042d9b01b8f))\\n- <VersionPill version=\\"6.2.0\\" /> `--experimental_remote_grpc_log` to `--remote_grpc_log`\\n  ([2715120](https://github.com/bazelbuild/bazel/commit/271512031d1a43f85eede12cd05b0ebeec66bc9a))\\n- <VersionPill version=\\"6.3.0\\" /> `--experimental_credential_helper` to `--credential_helper`\\n  ([0573eee](https://github.com/bazelbuild/bazel/commit/0573eee38d7d3b695267dfd125ab8e08d83a2640))\\n- <VersionPill version=\\"6.3.0\\" /> `--experimental_credential_helper_cache_duration` to\\n  `--credential_helper_cache_duration`\\n  ([0573eee](https://github.com/bazelbuild/bazel/commit/0573eee38d7d3b695267dfd125ab8e08d83a2640))\\n- <VersionPill version=\\"6.3.0\\" /> `--experimental_credential_helper_timeout` to `--credential_helper_timeout`\\n  ([0573eee](https://github.com/bazelbuild/bazel/commit/0573eee38d7d3b695267dfd125ab8e08d83a2640))\\n- `--experimental_allow_unresolved_symlinks` `--allow_unresolved_symlinks` ([215f698](https://github.com/bazelbuild/bazel/commit/215f6982d3caec22e67d2fe345a61d63351c7937))\\n- `--experimental_heuristically_drop_nodes` to `--heuristically_drop_nodes` ([e8a69f5](https://github.com/bazelbuild/bazel/commit/e8a69f5d5acaeb6af760631490ecbf73e8a04eeb))\\n- `--experimental_remote_build_event_upload` to `--remote_build_event_upload` ([fb16e8c](https://github.com/bazelbuild/bazel/commit/fb16e8cd96a8adaeede743a505c9d4a3992d35b5))\\n- `--experimental_remote_cache_compression` to `--remote_cache_compression` ([0cdd409](https://github.com/bazelbuild/bazel/commit/0cdd40972ba5253b4b4f0de80f080a911dc8c99b))\\n- `--experimental_remote_download_regex` to `--remote_download_regex` ([6d04d38](https://github.com/bazelbuild/bazel/commit/6d04d386eee5f856742c9ede664cb816e85b63d7))\\n- `--experimental_repository_disable_download` to `--repository_disable_download` ([4c7baa2](https://github.com/bazelbuild/bazel/commit/4c7baa254ba0918f57a7ebfc97f21c6c22a57579))\\n- `--experimental_sandbox_memory_limit` to `--experimental_sandbox_memory_limit_mb` ([09a07a4](https://github.com/bazelbuild/bazel/commit/09a07a45ad71b839e0bca1036d99f1c5fadeaea4))\\n- `--experimental_worker_multiplex` to `--worker_multiplex` ([4ad970d](https://github.com/bazelbuild/bazel/commit/4ad970d90c0638556c4faeca2744c236204edcbc))\\n\\n### Default values changed\\n\\n- <VersionPill version=\\"6.3.0\\" /> `--experimental_credential_helper_timeout=10s`\\n  ([5a71d9b](https://github.com/bazelbuild/bazel/commit/5a71d9b8b73098cf97bd05773f7c13cb0a3dd67c))\\n- <VersionPill version=\\"6.4.0\\" /> `--experimental_cc_implementation_deps=true`\\n  ([05787f3](https://github.com/bazelbuild/bazel/commit/05787f3f8bc3f3866ccb4d7650b331373a053640))\\n- `--android_fixed_resource_neverlinking=true` ([253e986](https://github.com/bazelbuild/bazel/commit/253e9862112e7ab6bdbe5d0b3fadabb8e544315d))\\n- `--enable_bzlmod=true` ([30d033c](https://github.com/bazelbuild/bazel/commit/30d033cd7e2153e8b8d7eb034a5323053192ecaa))\\n- `--experimental_build_transitive_python_runfiles=false` ([2f9c7d6](https://github.com/bazelbuild/bazel/commit/2f9c7d60ea676f9f8e929b20a3ff74e786995c91))\\n- `--experimental_exec_configuration_distinguisher=off` ([94d8bd3](https://github.com/bazelbuild/bazel/commit/94d8bd3c152c42b6c75d980b4302b22a3543437c))\\n- `--experimental_link_static_libraries_once=true` ([1456361](https://github.com/bazelbuild/bazel/commit/1456361e1b471e635e6ab02d4553978e860a69e1))\\n- `--experimental_merged_skyframe_analysis_execution=true` ([1b729a5](https://github.com/bazelbuild/bazel/commit/1b729a5bb44c244556437ed6a330d25f7e19e3c4))\\n- `--experimental_output_directory_naming_scheme=diff_against_dynamic_baseline` ([81d12db](https://github.com/bazelbuild/bazel/commit/81d12dbfa24d047453e96e10eedabc9126b108b4))\\n- `--experimental_sandbox_async_tree_delete_idle_threads=4` ([d169556](https://github.com/bazelbuild/bazel/commit/d169556e1630c1ea2a670b8ecf405141356a504e))\\n- `--incompatible_allow_tags_propagation=true` ([d0625f5](https://github.com/bazelbuild/bazel/commit/d0625f5b37e7cfe4ecfcff02b15f634c53d7440c))\\n- `--incompatible_check_sharding_support=true` ([d6257ee](https://github.com/bazelbuild/bazel/commit/d6257ee582d593453af022f785072099c26462c1))\\n- `--incompatible_disallow_java_import_exports=true` ([b740189](https://github.com/bazelbuild/bazel/commit/b740189b2209493b65f75b99709741fa58936417))\\n- `--incompatible_enable_android_toolchain_resolution=true` ([05bea52](https://github.com/bazelbuild/bazel/commit/05bea52ed3159aa5d15d967f5f56fc084a2b6c73))\\n- `--incompatible_enable_cc_toolchain_resolution=true` ([1be55d8](https://github.com/bazelbuild/bazel/commit/1be55d8add84c2d04c3353b7e481a7866a92eac7))\\n- `--incompatible_exclusive_test_sandboxed=true` ([23580aa](https://github.com/bazelbuild/bazel/commit/23580aaee7d040d7bff49c68ac0d8dfa7333225b))\\n- `--incompatible_fail_on_unknown_attributes=true` ([5f4a0b2](https://github.com/bazelbuild/bazel/commit/5f4a0b26fa751544362fa07ff92aa8fce69c543b))\\n- `--incompatible_legacy_local_fallback=false` ([0f75c57](https://github.com/bazelbuild/bazel/commit/0f75c57fc55ac21223a5ef4dd9eb337bfc128595))\\n- `--incompatible_remote_use_new_exit_code_for_lost_inputs=true` ([c77790f](https://github.com/bazelbuild/bazel/commit/c77790f55e90a4f66d3c439b583ad7fe0b9a34fd))\\n- `--incompatible_sandbox_hermetic_tmp=true` ([fe85936](https://github.com/bazelbuild/bazel/commit/fe85936f7d38c4a279eec78eee7371b37f800000))\\n- `--incompatible_merge_fixed_and_default_shell_env=true` ([8c191d8](https://github.com/bazelbuild/bazel/commit/8c191d8627d178682484d80fdcb587f8de76568c))\\n- `--incompatible_multi_release_deploy_jars=true` ([36998c5](https://github.com/bazelbuild/bazel/commit/36998c56fbe056ee6ca3ea2cf571a887144cc2b6))\\n- `--incompatible_strict_conflict_checks=true` ([53035bf](https://github.com/bazelbuild/bazel/commit/53035bfcfe8077d995d97b815094dfd56e3950b0))\\n- `--incompatible_use_host_features=true` ([93f2216](https://github.com/bazelbuild/bazel/commit/93f22166187cea8bce1f7a083cc29ca2567c4f31))\\n- `--incompatible_visibility_private_attributes_at_definition=true` ([0656103](https://github.com/bazelbuild/bazel/commit/0656103c9bc23b627e1a49fe4544f068469f8f1b))\\n- `--lockfile_mode=update` ([8ba6618](https://github.com/bazelbuild/bazel/commit/8ba66188e378fe3df5db9549b3b9661d62cf93bb))\\n- `--java_language_version=\\"\\"` ([f23440b](https://github.com/bazelbuild/bazel/commit/f23440b60337c9d74b9dfde1f7fd66e42181714f))\\n- `--remote_build_event_upload=minimal` ([bfdff54](https://github.com/bazelbuild/bazel/commit/bfdff5455da3c5106ba31393568556441ef1b9b5))\\n- `--remote_download_outputs=toplevel` ([9c96529](https://github.com/bazelbuild/bazel/commit/9c96529fca4a135c162e35ce2882834b879438fb))\\n- `--watchos_cpus=x86_64` ([0205bf7](https://github.com/bazelbuild/bazel/commit/0205bf78a3075006ec27a3ea5671cf582c3c12e7))\\n- `--dynamic_local_strategy` now includes `standalone` when `--experimental_local_lockfree_output` is set ([40cf855](https://github.com/bazelbuild/bazel/commit/40cf855ce6a0c7c9dd5126ce2d10a7e1fbe21b78))\\n- Removed `--experimental_inmemory_jdeps_files` and `--experimental_inmemory_dotd_files` from the expansion of `--remote_download_minimal` and `--remote_download_toplevel` ([0d9e477](https://github.com/bazelbuild/bazel/commit/0d9e477675b72a9d13e5be53071696b4ca32c6b4))\\n- Removed `--nobuild_runfile_links` from the expansion of `--remote_download_minimal` ([24ba4fa](https://github.com/bazelbuild/bazel/commit/24ba4fa60cc82380196f03ad978717da84b9984b))\\n\\n### Undeprecated\\n\\nSurprisingly, a flag was undeprecated in Bazel 7.0:\\n\\n- `--allowed_local_actions_regex` ([a1dcaea](https://github.com/bazelbuild/bazel/commit/a1dcaea019a63c13dbe10bfd07861fa0beae19b7))\\n\\n### No-op\\n\\nThese flags now do nothing, but still exist to allow for migration off of them:\\n\\n- <VersionPill version=\\"6.2.0\\" /> `--use_workers_with_dexbuilder`\\n  ([765c0eb](https://github.com/bazelbuild/bazel/commit/765c0ebc9cf544d70bc22ed89acf7b1592cca59d))\\n- <VersionPill version=\\"6.3.0\\" /> `--experimental_use_fork_join_pool`\\n  ([30cf799](https://github.com/bazelbuild/bazel/commit/30cf799f58128d2922d3af59a6a907c4d8115952))\\n- `--action_cache_store_output_metadata` ([ec6ce5b](https://github.com/bazelbuild/bazel/commit/ec6ce5bdeb6c0977eab3f4e3925fb3ccd5a06460))\\n- `--android_databinding_use_androidx` ([6a19449](https://github.com/bazelbuild/bazel/commit/6a19449233d6e51d8a862545726a60a611943068))\\n- `--android_databinding_use_v3_4_args` ([6a19449](https://github.com/bazelbuild/bazel/commit/6a19449233d6e51d8a862545726a60a611943068))\\n- `--collapse_duplicate_defines` ([68a4780](https://github.com/bazelbuild/bazel/commit/68a47806d1fcacef49445115ebf2144dbd4f244f))\\n- `--experimental_allow_android_library_deps_without_srcs` ([2c16f3f](https://github.com/bazelbuild/bazel/commit/2c16f3f00d72e36a94bc3e4ddde415ac3c974915))\\n- `--experimental_android_databinding_v2` ([6a19449](https://github.com/bazelbuild/bazel/commit/6a19449233d6e51d8a862545726a60a611943068))\\n- `--experimental_collect_local_action_metrics` ([549254e](https://github.com/bazelbuild/bazel/commit/549254e48c6976a3a16ca8c22122a423c8c6d7a0))\\n- `--experimental_collect_local_sandbox_action_metrics` ([549254e](https://github.com/bazelbuild/bazel/commit/549254e48c6976a3a16ca8c22122a423c8c6d7a0))\\n- `--experimental_enable_aspect_hints` ([86d4f48](https://github.com/bazelbuild/bazel/commit/86d4f4874b2f8cfa848ea9422c112fb69831e5b7))\\n- `--experimental_genquery_use_graphless_query` ([b7678af](https://github.com/bazelbuild/bazel/commit/b7678aff8a85ff315890d0022bea2fa9bae56fcc))\\n- `--experimental_parse_headers_skipped_if_corresponding_srcs_found` ([d4625cf](https://github.com/bazelbuild/bazel/commit/d4625cfb5345128528015598a696b39e5d039bc2))\\n- `--experimental_require_availability_info` ([c02d128](https://github.com/bazelbuild/bazel/commit/c02d128cdd59e54b2e3a03944084d495cd32eb82))\\n- `--experimental_sandboxfs_map_symlink_targets` ([217fafe](https://github.com/bazelbuild/bazel/commit/217fafe2b492de7349547cc3be2b9eef38628055))\\n- `--experimental_worker_as_resource` ([660f441](https://github.com/bazelbuild/bazel/commit/660f44183d5984022729d11013e803a2cac7a610))\\n- `--high_priority_workers` ([8e359e7](https://github.com/bazelbuild/bazel/commit/8e359e7f1b707a45f61ebf96510988eae07f13b4))\\n- `--legacy_bazel_java_test` ([08d3187](https://github.com/bazelbuild/bazel/commit/08d31877bd5c1500e3ca67f47bcd3b79b4af226d))\\n- `--incompatible_auto_configure_host_platform` ([f95df42](https://github.com/bazelbuild/bazel/commit/f95df4222d55b167b8af2dc53fe203f339867d6a), [51396c3](https://github.com/bazelbuild/bazel/commit/51396c3051a0aa17b1d63b614fa757161f6295c6))\\n- `--incompatible_disallow_symlink_file_to_dir` ([8d375a9](https://github.com/bazelbuild/bazel/commit/8d375a90b4af71c40042bc414ee2518a642beb11))\\n- `--incompatible_generated_protos_in_virtual_imports` ([3efaa32](https://github.com/bazelbuild/bazel/commit/3efaa325a1e142831744e8a021c4d25e1c6869f2))\\n- `--incompatible_remote_build_event_upload_respect_no_cache` ([fe97f20](https://github.com/bazelbuild/bazel/commit/fe97f2090828340a0687116bcd973fc529bcca7f))\\n- `--incompatible_remote_results_ignore_disk` ([c88f374](https://github.com/bazelbuild/bazel/commit/c88f374246c0a7b3a87c58553d3b9ad0ef4e9ad4))\\n- `--incompatible_remove_rule_name_parameter` ([fcf6b79](https://github.com/bazelbuild/bazel/commit/fcf6b79cb0626da093990aa55fabc0d216015712))\\n- `--incompatible_require_javaplugininfo_in_javacommon` ([192702c](https://github.com/bazelbuild/bazel/commit/192702ca7416b853a8a64443d6d730a88ed1f7c1))\\n- `--target_platform_fallback` ([51396c3](https://github.com/bazelbuild/bazel/commit/51396c3051a0aa17b1d63b614fa757161f6295c6))\\n- `--use_top_level_targets_for_symlinks` ([32df891](https://github.com/bazelbuild/bazel/commit/32df89144bb119476ad69a306290482a899e3217))\\n\\n### Removed\\n\\n- `--android_include_proguard_location_references` ([bbf11ed](https://github.com/bazelbuild/bazel/commit/bbf11ed97516322aa31f6eb7a990d2564d752d1a))\\n- `--apple_bitcode` ([37b8e1b](https://github.com/bazelbuild/bazel/commit/37b8e1b37d5676b3d047b528149546bf2bfefdd1))\\n- `--apple_compiler` ([1acdfc4](https://github.com/bazelbuild/bazel/commit/1acdfc422e724b4fe12c7bf5248086ab514ec4be))\\n- `--apple_enable_auto_dsym_dbg` ([40ef6d3](https://github.com/bazelbuild/bazel/commit/40ef6d3c50eb901d278326c460b63add3a1cb90c))\\n- `--apple_grte_top` ([fb4106b](https://github.com/bazelbuild/bazel/commit/fb4106bdbd23c365337ea99704921ada7b86c2df))\\n- `--compress_in_memory_genquery_results` ([554f309](https://github.com/bazelbuild/bazel/commit/554f3097253322a5b0c04ad390c7972e5cdfe12c))\\n- `--debug_print_action_contexts` ([737830a](https://github.com/bazelbuild/bazel/commit/737830ac34c0c89d8b64bcd01b575ee007ae94ff))\\n- `--distinct_host_configuration` ([9c01a5a](https://github.com/bazelbuild/bazel/commit/9c01a5adb09f30feadc8d84c7ee19a3944a42bdb))\\n- `--deduplicate_depsets` ([53ca28c](https://github.com/bazelbuild/bazel/commit/53ca28cfaaaf66feb135c719f56e98d7dc31cbf6))\\n- `--dynamic_worker_strategy` ([2ca7c18](https://github.com/bazelbuild/bazel/commit/2ca7c18df10fdd978f092e4519bee22780dd42f6))\\n- `--experimental_allow_top_level_aspects_parameters` ([6b2ff30](https://github.com/bazelbuild/bazel/commit/6b2ff306848d501ac6d1fc2087ddc62b1fd94d10))\\n- `--experimental_analysis_test_call` ([b747a4f](https://github.com/bazelbuild/bazel/commit/b747a4f698f8119e767bbe1a5b8cf3b1b392e0a4))\\n- `--experimental_android_local_test_binary_resources` ([6122700](https://github.com/bazelbuild/bazel/commit/612270080eb829b294c74031f18516a93c948144))\\n- `--experimental_apple_mandatory_minimum_version` ([dbd9e18](https://github.com/bazelbuild/bazel/commit/dbd9e1889f899fe20c7e1195bbde57a8c40b4327))\\n- `--experimental_async_execution` ([6b2ff30](https://github.com/bazelbuild/bazel/commit/6b2ff306848d501ac6d1fc2087ddc62b1fd94d10))\\n- `--experimental_availability_info_exempt` ([6b2ff30](https://github.com/bazelbuild/bazel/commit/6b2ff306848d501ac6d1fc2087ddc62b1fd94d10))\\n- `--experimental_build_setting_api` ([d72760b](https://github.com/bazelbuild/bazel/commit/d72760b4bcca1414327e97d862d58e359be5d641))\\n- `--experimental_cc_shared_library_debug` ([92e16da](https://github.com/bazelbuild/bazel/commit/92e16da9f2960fb76a9078a4277131c4b7940612))\\n- `--experimental_cpp_compile_argv_ignore_param_file` ([b34ea66](https://github.com/bazelbuild/bazel/commit/b34ea66e1edd268ed93bee21a9094f79c40b3a62))\\n- `--experimental_enable_objc_cc_deps` ([51f45c4](https://github.com/bazelbuild/bazel/commit/51f45c4173704649e246ee759e62939137e6a535))\\n- `--experimental_enable_target_export_check` ([1456361](https://github.com/bazelbuild/bazel/commit/1456361e1b471e635e6ab02d4553978e860a69e1))\\n- `--experimental_execution_graph_log` ([8ab9c6e](https://github.com/bazelbuild/bazel/commit/8ab9c6e5497ccfe88fdedb2c86ce0ae9461115dc))\\n- `--experimental_execution_graph_log_cached` ([6b204c0](https://github.com/bazelbuild/bazel/commit/6b204c013bbb6d4ec9fb88938832bc3166145e2b))\\n- `--experimental_execution_graph_log_missed` ([6b204c0](https://github.com/bazelbuild/bazel/commit/6b204c013bbb6d4ec9fb88938832bc3166145e2b))\\n- `--experimental_execution_log_spawn_metrics` ([c0f2e14](https://github.com/bazelbuild/bazel/commit/c0f2e146583a18f24e3af542ba0068a7add3f823))\\n- `--experimental_dynamic_execution_cpu_limited` ([6b2ff30](https://github.com/bazelbuild/bazel/commit/6b2ff306848d501ac6d1fc2087ddc62b1fd94d10))\\n- `--experimental_dynamic_skip_first_build` ([6b2ff30](https://github.com/bazelbuild/bazel/commit/6b2ff306848d501ac6d1fc2087ddc62b1fd94d10))\\n- `--experimental_includes_attribute_subpackage_traversal` ([1961b09](https://github.com/bazelbuild/bazel/commit/1961b0955cca1a3a1a394c7271ac50a29e3f810a))\\n- `--experimental_java_proto_library_default_has_services` ([0c8b3ed](https://github.com/bazelbuild/bazel/commit/0c8b3ed31a10aec6c160798bba8fada09f1ba4ba))\\n- `--experimental_keep_config_nodes_on_analysis_discard` ([6b2ff30](https://github.com/bazelbuild/bazel/commit/6b2ff306848d501ac6d1fc2087ddc62b1fd94d10))\\n- `--experimental_lazy_template_expansion` ([61c31d2](https://github.com/bazelbuild/bazel/commit/61c31d255b6ba65c372253f65043d6ea3f10e1f9))\\n- `--experimental_local_memory_estimate` ([6b2ff30](https://github.com/bazelbuild/bazel/commit/6b2ff306848d501ac6d1fc2087ddc62b1fd94d10))\\n- `--experimental_multi_cpu` ([6b2ff30](https://github.com/bazelbuild/bazel/commit/6b2ff306848d501ac6d1fc2087ddc62b1fd94d10))\\n- `--experimental_multi_threaded_digest` ([6b2ff30](https://github.com/bazelbuild/bazel/commit/6b2ff306848d501ac6d1fc2087ddc62b1fd94d10))\\n- `--experimental_persistent_javac` ([7fe8fa2](https://github.com/bazelbuild/bazel/commit/7fe8fa2041039347caa1bf910b17d822dc444819))\\n- `--experimental_prioritize_local_actions` ([e45b8d4](https://github.com/bazelbuild/bazel/commit/e45b8d40ac5cf380c713bfdb860ab011c602714c))\\n- `--experimental_replay_action_out_err` ([6b2ff30](https://github.com/bazelbuild/bazel/commit/6b2ff306848d501ac6d1fc2087ddc62b1fd94d10))\\n- `--experimental_repository_cache_urls_as_default_canonical_id` ([a6f8923](https://github.com/bazelbuild/bazel/commit/a6f8923d6f0ddf37cd101f348779dd93335fca6e))\\n- `--experimental_repository_hash_file` ([176b07f](https://github.com/bazelbuild/bazel/commit/176b07f7d7ed364fabd241a4dd2557ec77883b32))\\n- `--experimental_sandboxfs_path` ([217fafe](https://github.com/bazelbuild/bazel/commit/217fafe2b492de7349547cc3be2b9eef38628055))\\n- `--experimental_shortened_obj_file_path` ([6b2ff30](https://github.com/bazelbuild/bazel/commit/6b2ff306848d501ac6d1fc2087ddc62b1fd94d10))\\n- `--experimental_show_artifacts` ([bdcd311](https://github.com/bazelbuild/bazel/commit/bdcd3110587359a03c372ad5187d18793ea262fd))\\n- `--experimental_skip_runfiles_manifests` ([2dc7375](https://github.com/bazelbuild/bazel/commit/2dc73754f44a87402849dd4e5cb6798d26869d1b))\\n- `--experimental_skyframe_include_scanning` ([205091e](https://github.com/bazelbuild/bazel/commit/205091ef05b056ce284262c88ae72bf85b02184b))\\n- `--experimental_skymeld_ui` ([681a0c1](https://github.com/bazelbuild/bazel/commit/681a0c181510674a69035138735026156e2e6dd8))\\n- `--experimental_supports_info_crosstool_configuration` ([1ebfb7d](https://github.com/bazelbuild/bazel/commit/1ebfb7dceb8d4794f5843cf8246a93f3194451ee))\\n- `--experimental_use_sh_binary_stub_script` ([f2d82c6](https://github.com/bazelbuild/bazel/commit/f2d82c61487a82034d8a95f06a4dc54627af18db))\\n- `--experimental_verify_repository_rules` ([176b07f](https://github.com/bazelbuild/bazel/commit/176b07f7d7ed364fabd241a4dd2557ec77883b32))\\n- `--incompatible_avoid_conflict_dlls` ([e1eef7c](https://github.com/bazelbuild/bazel/commit/e1eef7c9dd0499aa1a311b009d803eb1a621b04c))\\n- `--incompatible_disallow_legacy_javainfo` ([606dac7](https://github.com/bazelbuild/bazel/commit/606dac73643269eecb762422759e59a3ca54eb97))\\n- `--incompatible_disable_cc_configuration_make_variables` ([20528af](https://github.com/bazelbuild/bazel/commit/20528afbd02f7f46dc69894219a4cf38c9fecc13))\\n- `--incompatible_disable_cc_toolchain_label_from_crosstool_proto` ([20528af](https://github.com/bazelbuild/bazel/commit/20528afbd02f7f46dc69894219a4cf38c9fecc13))\\n- `--incompatible_disable_crosstool_file` ([20528af](https://github.com/bazelbuild/bazel/commit/20528afbd02f7f46dc69894219a4cf38c9fecc13))\\n- `--incompatible_disable_depset_in_cc_user_flags` ([20528af](https://github.com/bazelbuild/bazel/commit/20528afbd02f7f46dc69894219a4cf38c9fecc13))\\n- `--incompatible_disable_expand_if_all_available_in_flag_set` ([ff37230](https://github.com/bazelbuild/bazel/commit/ff372304604629627c0b74f3457d8821976d88ce))\\n- `--incompatible_disable_legacy_cpp_toolchain_skylark_api` ([20528af](https://github.com/bazelbuild/bazel/commit/20528afbd02f7f46dc69894219a4cf38c9fecc13))\\n- `--incompatible_disable_legacy_flags_cc_toolchain_api` ([20528af](https://github.com/bazelbuild/bazel/commit/20528afbd02f7f46dc69894219a4cf38c9fecc13))\\n- `--incompatible_disable_managed_directories` ([20528af](https://github.com/bazelbuild/bazel/commit/20528afbd02f7f46dc69894219a4cf38c9fecc13))\\n- `--incompatible_disable_runtimes_filegroups` ([20528af](https://github.com/bazelbuild/bazel/commit/20528afbd02f7f46dc69894219a4cf38c9fecc13))\\n- `--incompatible_display_source_file_location` ([8c24877](https://github.com/bazelbuild/bazel/commit/8c2487756ec6ee32414117a3157f6e72b13aab10))\\n- `--incompatible_disable_sysroot_from_configuration` ([20528af](https://github.com/bazelbuild/bazel/commit/20528afbd02f7f46dc69894219a4cf38c9fecc13))\\n- `--incompatible_disable_tools_defaults_package` ([20528af](https://github.com/bazelbuild/bazel/commit/20528afbd02f7f46dc69894219a4cf38c9fecc13))\\n- `--incompatible_disable_third_party_license_checking` ([ae40562](https://github.com/bazelbuild/bazel/commit/ae405626c63cbea9f98b1a7dd08238b0200d780b))\\n- `--incompatible_dont_emit_static_libgcc` ([20528af](https://github.com/bazelbuild/bazel/commit/20528afbd02f7f46dc69894219a4cf38c9fecc13))\\n- `--incompatible_enable_legacy_cpp_toolchain_skylark_api` ([20528af](https://github.com/bazelbuild/bazel/commit/20528afbd02f7f46dc69894219a4cf38c9fecc13))\\n- `--incompatible_force_strict_header_check_from_starlark` ([3f36464](https://github.com/bazelbuild/bazel/commit/3f3646473d9a5838bd3ef1e5597498f255addb70))\\n- `--incompatible_genquery_use_graphless_query` ([58a44d4](https://github.com/bazelbuild/bazel/commit/58a44d46f3964618d9667903d953aaf67e04fd12))\\n- `--incompatible_linkopts_in_user_link_flags` ([20528af](https://github.com/bazelbuild/bazel/commit/20528afbd02f7f46dc69894219a4cf38c9fecc13))\\n- `--incompatible_load_cc_rules_from_bzl` ([65b5640](https://github.com/bazelbuild/bazel/commit/65b564013c077c5bdb649aa38c547f51357341f2))\\n- `--incompatible_provide_cc_toolchain_info_from_cc_toolchain_suite` ([20528af](https://github.com/bazelbuild/bazel/commit/20528afbd02f7f46dc69894219a4cf38c9fecc13))\\n- `--incompatible_remove_cpu_and_compiler_attributes_from_cc_toolchain` ([0567176](https://github.com/bazelbuild/bazel/commit/0567176074348037ec9d8ee32544784e1e319a10))\\n- `--incompatible_require_feature_configuration_for_pic` ([20528af](https://github.com/bazelbuild/bazel/commit/20528afbd02f7f46dc69894219a4cf38c9fecc13))\\n- `--incompatible_use_platforms_repo_for_constraints` ([a7f7df3](https://github.com/bazelbuild/bazel/commit/a7f7df301b0fbc1769764b060dfd762357c9f3f8))\\n- `--legacy_spawn_scheduler` ([f2c11f7](https://github.com/bazelbuild/bazel/commit/f2c11f7f2225e0a881585bf866ce5117f3c51735))\\n- `--print_workspace_in_output_paths_if_needed` ([f2c11f7](https://github.com/bazelbuild/bazel/commit/f2c11f7f2225e0a881585bf866ce5117f3c51735))\\n- `--remove_all_convenience_symlinks` ([002bd04](https://github.com/bazelbuild/bazel/commit/002bd04dddbe72ef10c13dd8dfc0c40bd1a4c52c))\\n- `--resource_autosense` ([c6ba553](https://github.com/bazelbuild/bazel/commit/c6ba55312039f0e34c8f9e3e898143c7f433faad))\\n- `--show_warnings` ([53b0081](https://github.com/bazelbuild/bazel/commit/53b00813459e5b69c2d6f9159b050c2d7c2a1309))\\n- `--toolchain_resolution_override` ([60a3c5b](https://github.com/bazelbuild/bazel/commit/60a3c5bea68fb6354c0bc7a611f916d2e26f988e))\\n- `--tvos_simulator_version` ([f2c11f7](https://github.com/bazelbuild/bazel/commit/f2c11f7f2225e0a881585bf866ce5117f3c51735))\\n- `--tvos_simulator_device` ([f2c11f7](https://github.com/bazelbuild/bazel/commit/f2c11f7f2225e0a881585bf866ce5117f3c51735))\\n- `--use_single_jar_apk_builder` ([669c8aa](https://github.com/bazelbuild/bazel/commit/669c8aa147b65186c8f85373609a3b07c9e59e10))\\n- `--use_workers_with_dexbuilder` ([f2c11f7](https://github.com/bazelbuild/bazel/commit/f2c11f7f2225e0a881585bf866ce5117f3c51735))\\n- `--watchos_simulator_version` ([f2c11f7](https://github.com/bazelbuild/bazel/commit/f2c11f7f2225e0a881585bf866ce5117f3c51735))\\n- `--watchos_simulator_device` ([f2c11f7](https://github.com/bazelbuild/bazel/commit/f2c11f7f2225e0a881585bf866ce5117f3c51735))\\n\\n## Remote\\n\\nOne of Bazel\'s most powerful features is its ability to use [remote caching and remote execution][remote-explained].\\nNumerous improvements and fixes to Bazel\'s remote capabilities made it into Bazel since 6.0.\\n\\nBelow are some changes that weren\'t tied to any specific remote feature\\n(e.g. gRPC connections):\\n\\n[remote-explained]: bazels-remote-caching-and-remote-execution-explained.md\\n\\n- <VersionPill version=\\"6.2.0\\" /> Added the `--remote_retry_max_delay` flag, which allows remote retry max delay to be\\n  user configurable. ([060fea5](https://github.com/bazelbuild/bazel/commit/060fea547102b8bdb31b9b5a6396208227bf6c53))\\n- <VersionPill version=\\"6.3.0\\" /> Added the `--experimental_circuit_breaker_strategy`,\\n  `--experimental_remote_failure_rate_threshold`, and `--experimental_remote_failure_window_interval` flags, which\\n  causes Bazel to stop using the remote cache or remote execution after a certain rate of failures.\\n  ([5575ff2](https://github.com/bazelbuild/bazel/commit/5575ff24aff3c2ba6e487158f8d79f72d86e6800),\\n  [10fb5f6](https://github.com/bazelbuild/bazel/commit/10fb5f6c39b945fe280e2d694c1be1a53d326810))\\n- <VersionPill version=\\"6.4.0\\" /> The `digest_function` field is now set as part of all relevant gRPC requests.\\n  ([0a8380b](https://github.com/bazelbuild/bazel/commit/0a8380bec9dceae1bffabddcccd459e82d8674b1))\\n- <VersionPill version=\\"6.4.0\\" /> The stack trace is now included in all gRPC errors when `--verbose_failures` is set.\\n  ([454f11d](https://github.com/bazelbuild/bazel/commit/454f11de856c9cc89f0f5f7b5d7f3a862c7c28b0))\\n- <VersionPill version=\\"6.4.0\\" /> SSL `BAD_DECRYPT` errors are now retried.\\n  ([fb38c3a](https://github.com/bazelbuild/bazel/commit/fb38c3aa8d3c7691e23f9e129d8986a06323a613))\\n- Optimized fetching of `ServerCapabilities`. ([35642f4](https://github.com/bazelbuild/bazel/commit/35642f49a35e55b17a85edc30d13a6155ebfbb10), [0d36c6b](https://github.com/bazelbuild/bazel/commit/0d36c6baee286fabef4a5188208a02c61031c762))\\n- `exec_properties` is now used when `remote_execution_properties` is empty. ([6f24fa5](https://github.com/bazelbuild/bazel/commit/6f24fa5de1a376ea93e95458cf7bc2cfcae9ce17))\\n\\n### Remote caching (RBC)\\n\\nUsing a remote cache is one of the most popular ways of speeding up a Bazel build.\\nThankfully these changes make using a remote cache both more performant and more reliable:\\n\\n- <VersionPill version=\\"6.1.0\\" /> Added the `--incompatible_remote_use_new_exit_code_for_lost_inputs` flag, which causes\\n  Bazel to exit with code 39 if the remote cache evicted blobs that Bazel needed.\\n  ([99cff33](https://github.com/bazelbuild/bazel/commit/99cff33e955bd5ceb9a7802b9bd161200c6d7a28))\\n- <VersionPill version=\\"6.1.0\\" /> Background download progress is now reported in the UI.\\n  ([0f524c6](https://github.com/bazelbuild/bazel/commit/0f524c63f3ea769793c4b801bc2dc882570cffc4))\\n- <VersionPill version=\\"6.1.0\\" /> Bazel now cleans up stale metadata when it detects that remote cache blobs have been\\n  evicted. ([963640a](https://github.com/bazelbuild/bazel/commit/963640a8d75747c3891911940566cc115eacc340),\\n  [32e4f23](https://github.com/bazelbuild/bazel/commit/32e4f23ec67909e92313be4d3334b62ccb490d55),\\n  [c05ba76](https://github.com/bazelbuild/bazel/commit/c05ba7658b36f44bbd77e949c9b13092af06c038))\\n- <VersionPill version=\\"6.1.0\\" /> When using a combined cache, the AC integrity check now applies to disk part as well.\\n  ([5f2866f](https://github.com/bazelbuild/bazel/commit/5f2866f8434ce9a17cf82c001efb7b236f189115))\\n- <VersionPill version=\\"6.1.0\\" /> Fixed `--remote_download_minimal` to work with `bazel test`.\\n  ([e8182ce](https://github.com/bazelbuild/bazel/commit/e8182ce32931560406fee1c30745e56a2ee9a6b3))\\n- <VersionPill version=\\"6.2.0\\" /> Added the `--experimental_remote_cache_eviction_retries` flag, which automatically\\n  retries the build if it encounters a remote cache eviction error.\\n  ([24b4589](https://github.com/bazelbuild/bazel/commit/24b45890c431de98d586fdfe5777031612049135))\\n- <VersionPill version=\\"6.2.0\\" /> All remote metadata is now cleared if any blobs are detected as evicted from the\\n  remote cache. ([49a9502](https://github.com/bazelbuild/bazel/commit/49a9502312b6af391a10e1a5c3e05d245ad54899))\\n- <VersionPill version=\\"6.2.0\\" /> Removed `action_id` metadata from prefetched inputs.\\n  ([f62a8b9](https://github.com/bazelbuild/bazel/commit/f62a8b9f6a7e840c648f44f094390c3b85b236df))\\n- <VersionPill version=\\"6.2.0\\" /> `ALREADY_EXISTS` when uploading is now treated as a success.\\n  ([daa3dbe](https://github.com/bazelbuild/bazel/commit/daa3dbe22adb03338c75b53ea97954c9434099b4))\\n- <VersionPill version=\\"6.2.0\\" /> Improved the upload early return logic.\\n  ([50ec6bb](https://github.com/bazelbuild/bazel/commit/50ec6bbff08cc00de4dfdea68e7483f383674222))\\n- <VersionPill version=\\"6.2.0\\" /> Fixed failures creating output directories.\\n  ([4050120](https://github.com/bazelbuild/bazel/commit/405012066d2394ad9986830ca028badd3c65ad38))\\n- <VersionPill version=\\"6.3.0\\" /> `--experimental_remote_cache_eviction_retries` is now disabled if `--invocation_id` is\\n  set. ([d9b94cb](https://github.com/bazelbuild/bazel/commit/d9b94cbc86a5eb063974c159d404cce68ee56409))\\n- <VersionPill version=\\"6.2.0\\" /> Output symlinks are now gracefully handled when using Build without the Bytes.\\n  ([ca30372](https://github.com/bazelbuild/bazel/commit/ca30372e210a638cfce8334b6dc3396c83424baa))\\n- <VersionPill version=\\"6.3.0\\" /> The `prefetecher` `action_id` metadata is now set for prefected inputs.\\n  ([3b39ab8](https://github.com/bazelbuild/bazel/commit/3b39ab8e0b0cc91a4970141eaa3469047076dcca))\\n- <VersionPill version=\\"6.3.0\\" /> Fixed local action non-declared symlink issue when using Build without the Bytes.\\n  ([5c4cf47](https://github.com/bazelbuild/bazel/commit/5c4cf47a131c84506aad9ce0e014c6643c31a4ac))\\n- <VersionPill version=\\"6.3.0\\" /> Fixed a potential memory leak in the UI.\\n  ([ce8836d](https://github.com/bazelbuild/bazel/commit/ce8836dd05de94b92a494be12a47a56bf9819107))\\n- <VersionPill version=\\"6.4.0\\" /> Added the `--experimental_remote_require_cached` flag, which fails the build if any\\n  remotely cachable actions aren\'t cached.\\n  ([22f518c](https://github.com/bazelbuild/bazel/commit/22f518c04babd1b01cdacfbdda7c1781558fc508))\\n- <VersionPill version=\\"6.4.0\\" /> Added support new-style digest functions.\\n  ([88412ce](https://github.com/bazelbuild/bazel/commit/88412ce8ef94dfc7b27c0331d625e14056fc0bc8))\\n- <VersionPill version=\\"6.4.0\\" /> Added support for multiple digest functions.\\n  ([f8c8875](https://github.com/bazelbuild/bazel/commit/f8c88752acf6da4448df52d87e9fee54ca9d826c))\\n- Added the `--incompatible_disallow_unsound_directory_outputs` flag, which disallows materializing an output file as a directory. ([77f8603](https://github.com/bazelbuild/bazel/commit/77f8603a4cebeccdb1d873d6e7bcaa788e9b09a7))\\n- Added the `--remote_download_all` flag, which is similar to the `--remote_download_{toplevel,minimal}` flags. ([d097b5d](https://github.com/bazelbuild/bazel/commit/d097b5d6cd3bc9fdb725b379b6cf3ef247126008))\\n- Added the `--experimental_remote_cache_ttl` flag, which causes old blobs to be considered potentially evicted from the remote cache. ([1ebb04b](https://github.com/bazelbuild/bazel/commit/1ebb04bb5b7773837f6d5653b65378c4bb8df7f6))\\n- Added the `--experimental_remote_cache_lease_extension` flag, which causes a background thread to periodically send `FindMissingBlobs` requests to the remote cache during a build. ([1a2b792](https://github.com/bazelbuild/bazel/commit/1a2b792e580ec2e1d23f22e16f23b3f957d2acbe))\\n- Added the `--experimental_remote_scrubbing_config` flag, which allows scrubbing remote cache keys for locally run actions. ([24de276](https://github.com/bazelbuild/bazel/commit/24de276977b44c6135813ced5e113c36da7e9953))\\n- Build without the Bytes now works without setting the `--experimental_inmemory_*_files` flags. ([ba5e617](https://github.com/bazelbuild/bazel/commit/ba5e61798b358f81071786843dd0d93902cda28c))\\n- Changing `--remote_download_mode` no longer invalidates the analysis cache. ([d426b3d](https://github.com/bazelbuild/bazel/commit/d426b3d36d6fd2e0427caa1a64bd629bfaab4569))\\n- HTTP remote cache failures are now retried. ([6115d94](https://github.com/bazelbuild/bazel/commit/6115d94cd05864fe5c6e5f774e9482b3b4976976))\\n- If the remote cache is unavailable at the start of the build, it will now automatically fall back to local execution. ([0d36c6b](https://github.com/bazelbuild/bazel/commit/0d36c6baee286fabef4a5188208a02c61031c762))\\n- Tree objects are now emitted in topological order. ([c20d7ed](https://github.com/bazelbuild/bazel/commit/c20d7ed4d3c3a0a70b3ccd54eb2d539c5583527a))\\n- The mtime is now updated on files stored or retrieved from the disk cache. ([7a774ff](https://github.com/bazelbuild/bazel/commit/7a774ff7c5850e7bd57af840a0e097ad4ec25417))\\n- Fixed `--experimental_remote_download_regex` to work in incremental builds. ([20552d8](https://github.com/bazelbuild/bazel/commit/20552d8a2a29d411e641ee18a70b4c7b83d8076a))\\n- Fixed Build without the Bytes when using multiple source roots. ([de4746d](https://github.com/bazelbuild/bazel/commit/de4746da2394e49d028b5327ee5e65c6b60011cc))\\n- Fixed prefetching symlinks. ([0a1d505](https://github.com/bazelbuild/bazel/commit/0a1d50533078283fab93024681c917303a91c46c))\\n- Fixed runfile symlink handling when using Build without the Bytes. ([fb76e6e](https://github.com/bazelbuild/bazel/commit/fb76e6e28556401389d65468e96f87aa19b441af))\\n\\n### Remote execution (RBE)\\n\\nFor some projects,\\nusing remote execution is the ultimate performance unlock for their Bazel builds.\\nIn addition to the remote caching changes covered above,\\nwhich also apply to remote execution,\\nthe following changes improve the remote execution experience:\\n\\n- <VersionPill version=\\"6.1.0\\" /> Added the `--experimental_remote_discard_merkle_trees` flag, which discards in-memory\\n  copies of the input root\'s Merkle tree and associated input mappings during calls to `GetActionResult` and `Execute`.\\n  ([4069a87](https://github.com/bazelbuild/bazel/commit/4069a87611886532a19c7e558ab4c2f1e83f53f0))\\n- <VersionPill version=\\"6.1.0\\" /> Made Bazel more responsive and use less memory when `--jobs` is set to a high value.\\n  ([4069a87](https://github.com/bazelbuild/bazel/commit/4069a87611886532a19c7e558ab4c2f1e83f53f0))\\n- <VersionPill version=\\"6.1.0\\" /> Fixed handling of remote cache eviction when uploading inputs.\\n  ([c1168e1](https://github.com/bazelbuild/bazel/commit/c1168e13965ccd61ae9d948cf1e30bcdf459ae6a))\\n- <VersionPill version=\\"6.2.0\\" /> Optimized building Merkle trees.\\n  ([f63ce79](https://github.com/bazelbuild/bazel/commit/f63ce7973b8f3f2560f41daf7321a40d20b22fab),\\n  [6d6fa81](https://github.com/bazelbuild/bazel/commit/6d6fa81e47591f41b9dce5e2a9a8512ec13d3f4a))\\n- <VersionPill version=\\"6.2.0\\" /> Tree artifacts are now included in the Merkle cache.\\n  ([0f55d12](https://github.com/bazelbuild/bazel/commit/0f55d124c05ee2654c3ff56e0332e71ff1eb437c))\\n- <VersionPill version=\\"6.3.0\\" /> Added support for `output_symlinks` in `ActionResult`.\\n  ([e842fd5](https://github.com/bazelbuild/bazel/commit/e842fd5197bfa549c6ec70696d62b024deabb09d),\\n  [d3fb047](https://github.com/bazelbuild/bazel/commit/d3fb04748392addf2568d1e9fa1db7e8262a2b49))\\n- <VersionPill version=\\"6.3.0\\" /> Remote symlink outputs are now supported when using building without the bytes.\\n  ([0ff6b88](https://github.com/bazelbuild/bazel/commit/0ff6b88d8ade0a539a101d8428d35cd004523472))\\n- <VersionPill version=\\"6.4.0\\" /> The `no-remote-exec` execution requirement is now part of the action salt.\\n  ([5a23ab2](https://github.com/bazelbuild/bazel/commit/5a23ab2f6416b7ed450bb7b0a59d7aa0f68eea8d))\\n\\n### Dynamic execution\\n\\n[Dynamic execution][dynamic-execution] allows for Bazel to race remote and local execution of actions,\\npotentially allowing you to get the benefit of both modes,\\nwithout the drawbacks of either.\\nBazel 7.0 only included a single notable user-facing change to dynamic execution:\\n\\n[dynamic-execution]: https://bazel.build/versions/7.0.0/remote/dynamic\\n\\n- Added the `--experimental_dynamic_ignore_local_signals` flag, which allows local failures under dynamic execution to be ignored for exit codes > 127 (signals). ([07ee4b7](https://github.com/bazelbuild/bazel/commit/07ee4b7c566c46c259ef050a1eedbde4a1d4ab5f))\\n\\n### Build Event Service (BES)\\n\\nUsing a build event service can give you unparalleled insight into your Bazel builds at scale.\\nThere were a couple nice changes to BES support:\\n\\n- <VersionPill version=\\"6.1.0\\" /> stdout and stderr logs are now uploaded when using\\n  `--experimental_remote_build_event_upload=minimal`.\\n  ([17b8e44](https://github.com/bazelbuild/bazel/commit/17b8e448a5e5589f96c2794cb38c86b0c64e86c0))\\n- <VersionPill version=\\"6.1.0\\" /> When using `--experimental_remote_build_event_upload=minimal`, `bytestream://` is\\n  always used for BEP referenced files.\\n  ([b0c5eb3](https://github.com/bazelbuild/bazel/commit/b0c5eb30b2738bf6454c3026a3e0f37579d5854c))\\n- Added the `--bes_system_keywords` flag, which allows specifying non-prefixed notification keywords. ([8daa3dc](https://github.com/bazelbuild/bazel/commit/8daa3dc47cf6a1803350eb249709d847f945d25f))\\n- Added the `--build_event_{binary,json,text}_file_upload_mode` flags, which specify the upload mode to use for each file type. ([ca62ca1](https://github.com/bazelbuild/bazel/commit/ca62ca133459ad83f2b886b20fb02e8f100a386a))\\n\\n## Logging\\n\\nBazel offers various methods to gain insight into your build.\\nI cover some of the notable changes to those methods below.\\n\\n### Build Event Protocol (BEP)\\n\\nThe build event protocol is used by [build event services](#build-event-service-bes),\\nso all of these changes could have also been listed in that section as well.\\nThe BEP can also be collected locally with [`--build_event_json_file`][build_event_json_file], [`--build_event_binary_file`][build_event_binary_file], and [`--build_event_text_file`][build_event_text_file].\\n\\n[build_event_binary_file]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--build_event_binary_file\\n[build_event_json_file]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--build_event_json_file\\n[build_event_text_file]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--build_event_text_file\\n\\nThe vast majority of changes added additional information to the BEP,\\nthough some are fixes and improvements:\\n\\n- <VersionPill version=\\"6.3.0\\" /> Added the `action_cache_statistics` field to `BuildMetrics.ActionSummary`.\\n  ([7963528](https://github.com/bazelbuild/bazel/commit/79635280a69c92085674c448f2a2f72f8ed1d442))\\n- Added the `end_time`, `start_time`, and `strategy_details` fields to `ActionExecuted`. ([2ddacab](https://github.com/bazelbuild/bazel/commit/2ddacab80af1dca3c04e74809827c47ec4bc8498))\\n- Added the `exec_kind` field to `BuildMetrics.ActionSummary.RunnerCount`. ([0e1d1b6](https://github.com/bazelbuild/bazel/commit/0e1d1b6b759ab403db40ffcfa0dc586adcf7f94b))\\n- Added the `execution_phase_time_in_ms` field to `BuildMetrics.ActionSummary.TimingMetrics`. ([be63eee](https://github.com/bazelbuild/bazel/commit/be63eeefa9736d66f4b773bf6043958575eb02d7))\\n- Added the `package_load_metrics` field to `BuildMetrics.ActionSummary.PackageMetrics`. ([0597a07](https://github.com/bazelbuild/bazel/commit/0597a070853e6b483aa7bbdcb97a47bbf83a67b5))\\n- Added the `symlink_target_path` field to `File`. ([7fa5796](https://github.com/bazelbuild/bazel/commit/7fa5796de6094ff529ceb17ee73c7eac9e42eb15))\\n- Added the `system_time` and `user_time` fields to `BuildMetrics.ActionSummary.ActionData`. ([5f1a570](https://github.com/bazelbuild/bazel/commit/5f1a5709b34ca578f9bbb995d62cd028dac3b03c))\\n- Added the `worker_ids` field to `BuildMetrics.WorkerMetrics`. ([d31dd09](https://github.com/bazelbuild/bazel/commit/d31dd094c56270d892040ce65586af9b76a99744))\\n- Added the `worker_key_hash` field to `BuildMetrics.WorkerMetrics`. ([58eeea1](https://github.com/bazelbuild/bazel/commit/58eeea17db80cc85d685d9319655f2dc398f063d))\\n- Added the `worker_pool_metrics` field to `BuildMetrics`. ([284e5a3](https://github.com/bazelbuild/bazel/commit/284e5a3aee6f7290b19af5c8a5ffc0b1811305d1))\\n- Added the `CoverageActionsFinishedId` event. ([c2a6f0c](https://github.com/bazelbuild/bazel/commit/c2a6f0c38b75743158a3a8cbe7d6adf4202c2110))\\n- Added the `ExecRequest` event. ([9a047de](https://github.com/bazelbuild/bazel/commit/9a047de5f6cd5c2f1204b2389746d5a9862f10c8))\\n- Added the `TestProgress` event. ([d8b8ab0](https://github.com/bazelbuild/bazel/commit/d8b8ab0165aa813161d4d7528cbcbdf5c78e1593))\\n- Added the `--experimental_publish_package_metrics_in_bep` flag, which populates the `BuildMetrics.ActionSummary.PackageMetrics.package_load_metrics` field. ([0597a07](https://github.com/bazelbuild/bazel/commit/0597a070853e6b483aa7bbdcb97a47bbf83a67b5))\\n- Added the `--experimental_run_bep_event_include_residue` flag, which populates the `ExecRequest.argv` field. ([9a047de](https://github.com/bazelbuild/bazel/commit/9a047de5f6cd5c2f1204b2389746d5a9862f10c8), [dab6383](https://github.com/bazelbuild/bazel/commit/dab6383ecef2d3996a67b2b1e4760369abc08de7))\\n- Deprecated the `worker_id` field in `BuildMetrics.WorkerMetrics`. ([d31dd09](https://github.com/bazelbuild/bazel/commit/d31dd094c56270d892040ce65586af9b76a99744))\\n- Fixed Starlark flags set in `.bazelrc` from appearing in `UnstructuredCommandLine`. ([f272df3](https://github.com/bazelbuild/bazel/commit/f272df3908db3cc0aab884a77d0c8cc338abab40))\\n\\n### Timing profile\\n\\nThe action timing profile,\\nwhich is enabled by default with [`--profile`][profile],\\nis viewable both [locally in Chrome][performance-profiling] and on [build event services](#build-event-service-bes).\\nThese changes add more detail and clarity to the profile:\\n\\n[performance-profiling]: https://bazel.build/versions/7.0.0/advanced/performance/json-trace-profile\\n[profile]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--profile\\n\\n- <VersionPill version=\\"6.1.0\\" /> Added the `bazel_version` field to `otherData`.\\n  ([7569b0d](https://github.com/bazelbuild/bazel/commit/7569b0df723b5397501ac63f01a37fd757921331))\\n- <VersionPill version=\\"6.2.0\\" /> Added the `profile_finish_ts` field to `otherData`.\\n  ([dbc8423](https://github.com/bazelbuild/bazel/commit/dbc842326c09084005bb59729c9551081eb72084))\\n- <VersionPill version=\\"6.4.0\\" /> Added profiling of Bzlmod operations.\\n  ([e7cfd2e](https://github.com/bazelbuild/bazel/commit/e7cfd2e9aeeaa4dfe7e1079eaa3b52421c4bb590),\\n  [8a68310](https://github.com/bazelbuild/bazel/commit/8a683109239314aa561a8422bb060f9d5b8c33bb))\\n- Added local action cache hits as a stacked chart. ([610b56f](https://github.com/bazelbuild/bazel/commit/610b56f50d98181ee5051f2644295e0fea43560a))\\n- Added the `--experimental_collect_pressure_stall_indicators` flag, which adds Linux PSI data to the profile. ([50446bc](https://github.com/bazelbuild/bazel/commit/50446bcb2eb825d799d88ecf82fff6097371ffb1))\\n- Added the `--experimental_collect_resource_estimation` flag, which adds CPU and memory estimation profiling. ([2e2f5d9](https://github.com/bazelbuild/bazel/commit/2e2f5d901d3178eafb2b6a248c952f395c714f43))\\n- Added the `ANALYZE_AND_EXECUTE` (`interleaved loading, analysis and execution`) phase. ([78140bf](https://github.com/bazelbuild/bazel/commit/78140bf57f42fad30c00349d3d5ec07457bb3c8b))\\n- Added profiling of checking outputs. ([df3d00a](https://github.com/bazelbuild/bazel/commit/df3d00aa9937061fb0f59a6adc217486b7f06695))\\n- Added profiling of execution log creation, writing, and sorting. ([c2e25ea](https://github.com/bazelbuild/bazel/commit/c2e25ea70376b5c5dc7e304eb986163c332621d5))\\n- Added profiling of long wait times for cancelling the other branch in dynamic execution. ([9f2cc56](https://github.com/bazelbuild/bazel/commit/9f2cc569c26914a96337525022a73ded515df813))\\n- Added profiling of network handshakes. ([bf9b177](https://github.com/bazelbuild/bazel/commit/bf9b177b7d6f32978ee42d356b7300a8764b2c7e))\\n- Added profiling of symlink tree creation and deletion. ([f84329e](https://github.com/bazelbuild/bazel/commit/f84329e007e2421c92805b50da135af411ee754c))\\n- Doubles are now used instead of strings for counter series. ([6d1dd4e](https://github.com/bazelbuild/bazel/commit/6d1dd4ee40d23bdf60a21bb4275f33e3a7833358))\\n- `REMOTE_DOWNLOAD` (`remote output download`) now has a 10ms threshold. ([b8e2c5f](https://github.com/bazelbuild/bazel/commit/b8e2c5f0d4966f1039a22c8306b02cb9932616eb))\\n- Extended the span of checking action cache hits to include all of the work and not only the actual cache lookup. ([df3d00a](https://github.com/bazelbuild/bazel/commit/df3d00aa9937061fb0f59a6adc217486b7f06695))\\n- Removed `taskId`. ([bf2368a](https://github.com/bazelbuild/bazel/commit/bf2368a65a05201e8fed73201a9f7b68ef8af3d3))\\n- Fixed local execution to use `LOCAL_PROCESS_TIME` (`Local execution process wall time`) instead of `REMOTE_PROCESS_TIME` (`Remote execution process wall time`). ([480b234](https://github.com/bazelbuild/bazel/commit/480b23451ed4a74422a7b77b70bd77af4b4149bc))\\n\\n### Execution log\\n\\nBazel logs all of the [spawns][spawns] it executes in the execution log,\\nwhich is enabled with the [`--execution_log_json_file`][execution_log_json_file] or [`--execution_log_binary_file`][execution_log_binary_file] flags.\\nThis feature is relatively stable,\\nwith just a few noticeable changes:\\n\\n[execution_log_binary_file]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--execution_log_binary_file\\n[execution_log_json_file]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--execution_log_json_file\\n[spawns]: bazels-remote-caching-and-remote-execution-explained.md#spawns\\n\\n- <VersionPill version=\\"6.1.0\\" /> Added the `--execution_log_sort` flag, which allows disabling execution log sorting.\\n  ([1a6ffe6](https://github.com/bazelbuild/bazel/commit/1a6ffe6d453708e3cefc98a07965c680e48d6bac))\\n- <VersionPill version=\\"6.4.0\\" /> Added the `is_tool` field to `File`.\\n  ([0434287](https://github.com/bazelbuild/bazel/commit/04342878d02ed47735051c343a888eab591422af))\\n- `--execution_log_json_file` and `--execution_log_binary_file` are now mutually exclusive. ([61fa933](https://github.com/bazelbuild/bazel/commit/61fa9331099dbc73df4b9d51ad1143f23369d8a2))\\n- Renamed the `remote_cache_hit` field in `SpawnExec` to `cache_hit`. ([60dbc64](https://github.com/bazelbuild/bazel/commit/60dbc6436ede4088f953186bea74f023484fdb43))\\n- Removed the `progress_message` field from `SpawnExec`. ([0ca0510](https://github.com/bazelbuild/bazel/commit/0ca0510f42339bf30693ff3d4353f4ef198134db))\\n- Removed the `walltime` field from `SpawnExec`. ([60e03bf](https://github.com/bazelbuild/bazel/commit/60e03bf0535090e7c011180cdc95ba89942c2bbc))\\n\\n### Execution graph\\n\\nThe execution graph,\\nwhich is enabled with the [`--experimental_enable_execution_graph_log`][experimental_enable_execution_graph_log] flag,\\nlogs all actions executed during a build.\\nIt differs from the [execution log](#execution-log) in that it contains additional information needed to reconstruct the full dependency graph.\\n\\n[experimental_enable_execution_graph_log]: https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--experimental_enable_execution_graph_log\\n\\nEven though there aren\'t many changes to the execution graph in Bazel 7.0,\\nI only recently learned about its existence,\\nand wanted to call attention to it:\\n\\n- Added the `discover_inputs_millis` field to `Metrics`. ([0e099d9](https://github.com/bazelbuild/bazel/commit/0e099d92b4340f424e224c0b73ae8c111b3a409a))\\n- Added the `--experimental_execution_graph_enable_edges_from_filewrite_actions` flag, which adjusts how filewrite action edges are handled. ([4973166](https://github.com/bazelbuild/bazel/commit/49731660d8348d4ce243c4531bd5f3b14006f1df))\\n- Added the `--experimental_enable_execution_graph_log` and `--experimental_execution_graph_log_path` flags, which replace the `--experimental_execution_graph_log` flag. ([8ab9c6e](https://github.com/bazelbuild/bazel/commit/8ab9c6e5497ccfe88fdedb2c86ce0ae9461115dc))\\n- The execution graph is now written to the output base instead of the workspace. ([b5808a4](https://github.com/bazelbuild/bazel/commit/b5808a4c095102609e4dd1d480592aeda473dc24))\\n- Shared actions are now included in the execution graph. ([2036a0f](https://github.com/bazelbuild/bazel/commit/2036a0f0fa093d6e48fc02431e28734907cfca63))\\n- Test actions no longer output an extra node. ([c3260c4](https://github.com/bazelbuild/bazel/commit/c3260c4ec429664c44f0905518d3bb4057b10da3))\\n\\n### Other\\n\\n- <VersionPill version=\\"6.3.0\\" /> Changed `--memory_profile_stable_heap_parameters` to accept more than one GC\\n  specification. ([3dc6951](https://github.com/bazelbuild/bazel/commit/3dc69515210897c00d645e323dff23dfd178970c))\\n- Added the `--experimental_command_profile` flag, which records a Java Flight Recorder CPU profile into a `profile.jfr` file in the output base. ([5cbb153](https://github.com/bazelbuild/bazel/commit/5cbb153c839f13c07d777a0175e88dc8a1ab2780))\\n\\n## Execution\\n\\nExecuting build commands is a primary function of Bazel.\\nSome execution related changes can be classified in a particular way,\\nsuch as [remote execution](#remote-execution-rbe)\\nor [dynamic execution](#dynamic-execution).\\nFor the rest,\\nI\'ve collected them here.\\n\\nBelow I summarize some foundational execution related changes,\\nincluding \\"local execution\\" strategies:\\n\\n- <VersionPill version=\\"6.1.0\\" /> Added the `--experimental_writable_outputs` flag, which causes the permissions of all\\n  output files to `0755` instead of `0555`.\\n  ([88c426e](https://github.com/bazelbuild/bazel/commit/88c426e73cc0eb0a41c0d7995e36acd94e7c9a48))\\n- <VersionPill version=\\"6.1.0\\" /> Added the `--local_extra_resources` flag, which allows specifying additional resource\\n  types that can limit concurrently running actions.\\n  ([2b2bea4](https://github.com/bazelbuild/bazel/commit/2b2bea4ee9d51ad875a8d273aa344ac9c5b6742c))\\n- <VersionPill version=\\"6.1.0\\" /> Fixed symlink creation overhead.\\n  ([c15148a](https://github.com/bazelbuild/bazel/commit/c15148af6c0227ea8360bcf180bd0784113472db))\\n- <VersionPill version=\\"6.2.0\\" /> ctime is now used in file digest cache keys.\\n  ([763f1d9](https://github.com/bazelbuild/bazel/commit/763f1d976ba679e5b7aebe63a978a4ab80fca310))\\n- <VersionPill version=\\"6.2.0\\" /> Optimized file checksumming.\\n  ([368bf11](https://github.com/bazelbuild/bazel/commit/368bf117513731909337b6e2bd5082c046399506))\\n- <VersionPill version=\\"6.3.0\\" /> Adjusted `--top_level_targets_for_symlinks` to work in more cases.\\n  ([ceb9955](https://github.com/bazelbuild/bazel/commit/ceb9955cc36e65e48923dbe51437f589ce277eef))\\n- <VersionPill version=\\"6.4.0\\" /> Added the `--allow_analysis_cache_discard` flag, which when false causes the build to\\n  fail if the analysis cache would be discarded.\\n  ([1997f09](https://github.com/bazelbuild/bazel/commit/1997f09a83d8bb91247617afeb199381b5c03cc4))\\n- <VersionPill version=\\"6.4.0\\" /> Added the `blake3` option to `--digest_function`.\\n  ([cc49d68](https://github.com/bazelbuild/bazel/commit/cc49d68644521d3e0577d27ae1f2bed8ab385117))\\n- <VersionPill version=\\"6.4.0\\" /> Added the `diff_against_dynamic_baseline` option to\\n  `--experimental_output_directory_naming_scheme`.\\n  ([39b450c](https://github.com/bazelbuild/bazel/commit/39b450c004a6641499aba617bd7980c329f6d031))\\n- <VersionPill version=\\"6.4.0\\" /> Added the `FORMATTED_DATE` entry to the volatile workspace status file.\\n  ([ee36d32](https://github.com/bazelbuild/bazel/commit/ee36d322c038bd4a8bd9a5fcd25685ad76c56123))\\n- Added a `forced=k` option to `--test_sharding_strategy`. ([bd5f3c3](https://github.com/bazelbuild/bazel/commit/bd5f3c33559489690d8107a66096b2ffded22b47))\\n- Added the `--experimental_gc_thrashing_limits` and `--gc_thrashing_limits_retained_heap_limiter_mutually_exclusive` flags, which causes Bazel to trigger an OOM crash when too much garbage collection thrashing happens. ([9f93780](https://github.com/bazelbuild/bazel/commit/9f93780eafb4f98500f3bc6a828c43b6da363089))\\n- Added the `--experimental_throttle_action_cache_check` flag, which throttles action cache checks. ([3d29b2e](https://github.com/bazelbuild/bazel/commit/3d29b2e14f143cd56dfee4d49d991a6e330f3a85))\\n- Added the `--experimental_skymeld_analysis_overlap_percentage` flag, which limits amount of analysis phase and execution phase overlap. ([9adbe0f](https://github.com/bazelbuild/bazel/commit/9adbe0f3b1c725419e7cc8c40a6c393a8ae86009))\\n- Added the `--experimental_use_semaphore_for_jobs` flag, which limits the number of concurrent action execution with a semaphore. ([a83a97e](https://github.com/bazelbuild/bazel/commit/a83a97eb3a3b36f0f48c5aee726ce56a1e1e7b6b))\\n- Added the `--skip_incompatible_explicit_targets` flag, which skips incompatible targets that are explicitly listed on the command line. ([136a1ee](https://github.com/bazelbuild/bazel/commit/136a1ee4be934f91bb1388dc289338f213fac181))\\n- Actions can now opt into path mapping with the `supports-path-mapping` execution requirement. ([a239ea8](https://github.com/bazelbuild/bazel/commit/a239ea84832f18ee8706682145e9595e71b39680))\\n- `--flag_alias` can now be set on `common` and `always`. ([86fe599](https://github.com/bazelbuild/bazel/commit/86fe599f7fc67d09c2f9ab4ef0c177a0fb8445f7))\\n- Elevated the `analysis cache discarded` message from `INFO` to `WARN`. ([0a47a1f](https://github.com/bazelbuild/bazel/commit/0a47a1fb04efef598376d4ee7b383add1febcc6c))\\n- Normalized `--action_env`, `--flag_alias`, `--host_action_env`, and `--test_env` values. ([4dc5de8](https://github.com/bazelbuild/bazel/commit/4dc5de80a26c00ddd5a60980f723cc8b2becb40d))\\n- `0755` instead of `0777` is now used when creating a writable directory. ([ff0e61a](https://github.com/bazelbuild/bazel/commit/ff0e61a66b5a96d1557ed5cbf6288f8d124d668e), [4da0642](https://github.com/bazelbuild/bazel/commit/4da06426be298a350260879852db651da389c6c8))\\n- Optimized computing digests from the filesystem. ([e2a57ac](https://github.com/bazelbuild/bazel/commit/e2a57acbb9949040f9190a56c707ca5123e59a66))\\n- When using `--experimental_merged_skyframe_analysis_execution`, symlinks aren\'t planted for paths in `.bazelignore`. ([e1fbc83](https://github.com/bazelbuild/bazel/commit/e1fbc8349850145a12136d2488e0ca70e46fc8e9))\\n- When using `--subcommands` the mnemonic is now reported. ([afa2500](https://github.com/bazelbuild/bazel/commit/afa2500c0d3b53c8c99cdeab24674bc2176270a1))\\n- Removed the `sandboxfs` strategy. ([217fafe](https://github.com/bazelbuild/bazel/commit/217fafe2b492de7349547cc3be2b9eef38628055))\\n- Fixed `--reuse_sandbox_directories` to work with differently-named workspaces. ([2dc5ba9](https://github.com/bazelbuild/bazel/commit/2dc5ba992bd461748a43351ef9f5d2d5cfc53ecb))\\n- Fixed encoding of non-ascii contents written to parameter files. ([dc80fa7](https://github.com/bazelbuild/bazel/commit/dc80fa79b29b83acac72f1bc4abda718e87a295d))\\n- Fixed state tracking for actions that run under multiple strategies. ([d46aed6](https://github.com/bazelbuild/bazel/commit/d46aed621d1eebd166428bbf1e15ccd180e3c4b6))\\n- Fixed docker strategy `GID` clash. ([4082e0f](https://github.com/bazelbuild/bazel/commit/4082e0f574634cde37d04cfb50f9a6a4e1f869f8))\\n\\n### Running and testing\\n\\nIn addition to building targets,\\nBazel can run applications and tests with the `run` and `test` commands.\\nHere were some notable changes to that functionality:\\n\\n- <VersionPill version=\\"6.1.0\\" /> Non-test actions are no longer reported as tests in the UI.\\n  ([fcb0077](https://github.com/bazelbuild/bazel/commit/fcb007749f7f24b36c2b7c4284378bba20fc8b69))\\n- <VersionPill version=\\"6.1.0\\" /> Non-started tests now count as skipped.\\n  ([16427c9](https://github.com/bazelbuild/bazel/commit/16427c9050db140d6cb90d7d6324d4a2ff1e249a))\\n- <VersionPill version=\\"6.2.0\\" /> `SIGWINCH` is now correctly handled when `bazel run`-ing test rules.\\n  ([38ece3c](https://github.com/bazelbuild/bazel/commit/38ece3c04105698fc84daa89ba30c5fa692e0403))\\n- <VersionPill version=\\"6.2.0\\" /> Fixed missing output from quick tests run with `bazel run`.\\n  ([c04f0d4](https://github.com/bazelbuild/bazel/commit/c04f0d41317bfe1f6ff42da94dddb4023587fc26))\\n- <VersionPill version=\\"6.3.0\\" /> Added the `--incompatible_check_sharding_support` flag, which will fail sharded tests\\n  that don\'t touch the `TEST_SHARD_STATUS_FILE` file.\\n  ([f7d795a](https://github.com/bazelbuild/bazel/commit/f7d795a3846645bc7d73c30587fe2acc0494a112))\\n- <VersionPill version=\\"6.3.0\\" /> `test-setup.sh` now raises a signal on exit codes above 128.\\n  ([90c4bdf](https://github.com/bazelbuild/bazel/commit/90c4bdfba8e71d50275c6106a6e9c273b7510618))\\n- <VersionPill version=\\"6.4.0\\" /> Runfiles related environment variables are now cleared when using `bazel run`.\\n  ([bc83389](https://github.com/bazelbuild/bazel/commit/bc83389808d5a970a56fb826e86d0efe56b65d2b))\\n- <VersionPill version=\\"6.4.0\\" /> When `--test_summary=detailed` is used, passing methods are now also included in the\\n  test summary. ([c75fda9](https://github.com/bazelbuild/bazel/commit/c75fda99e714e9adfb5754701a9c450dfb29992f))\\n- Added the `--run` flag, which if false prevents bazel from running the built executable. ([6069512](https://github.com/bazelbuild/bazel/commit/6069512ef6fa576613fbe0612929033d251a2328))\\n- Added the `//command_line_option/fragment:test` option for the `transitive_configs` attribute. ([6bd7878](https://github.com/bazelbuild/bazel/commit/6bd7878be3d61110733f82f50794f72345034757))\\n- Made `--experimental_inprocess_symlink_creation` work with `--nobuild_runfile_links`. ([7b87ae1](https://github.com/bazelbuild/bazel/commit/7b87ae1b81b681d4fc7e42282b6966fbcaf6301c))\\n- When switching from `--enable_runfiles` to `--noenable_runfiles` the previous runfiles symlink tree is now cleaned up. ([f84329e](https://github.com/bazelbuild/bazel/commit/f84329e007e2421c92805b50da135af411ee754c))\\n- Fixed incrementality issues related to runfiles and a changing `--output_base`. ([c9d7ff9](https://github.com/bazelbuild/bazel/commit/c9d7ff9384fa06e9fe676c2c8935c675f2238c57))\\n\\n### Coverage\\n\\nBazel can collect [code coverage][code-coverage] when running tests.\\nRecent changes made the default settings work for more people:\\n\\n[code-coverage]: https://bazel.build/versions/7.0.0/configure/coverage\\n\\n- <VersionPill version=\\"6.1.0\\" /> `bazel coverage` now works with `--remote_download_minimal`.\\n  ([e8ff51f](https://github.com/bazelbuild/bazel/commit/e8ff51f4d498380b7287df8b007f5bb0810c2b2c))\\n- <VersionPill version=\\"6.1.0\\" /> `@remote_coverage_tools` is now only fetched when collecting coverage.\\n  ([4d188a9](https://github.com/bazelbuild/bazel/commit/4d188a9beaf3b003d2cb3409000424acf5fd82b7))\\n- <VersionPill version=\\"6.1.0\\" /> Fixed LLVM coverage collection for source file paths with a `tmp` segment.\\n  ([88b51f5](https://github.com/bazelbuild/bazel/commit/88b51f57d09e43dec31a84d4b636595924d5bfef))\\n- <VersionPill version=\\"6.3.0\\" /> Added the flag `--experimental_collect_code_coverage_for_generated_files`, which\\n  collects code coverage for generated files.\\n  ([9c83049](https://github.com/bazelbuild/bazel/commit/9c83049a707a761db8bb2450f105e9e9c66a87be))\\n- <VersionPill version=\\"6.3.0\\" /> Added the `metadata_files` parameter to the `coverage_common.instrumented_files_info`\\n  function. ([ef54ef5](https://github.com/bazelbuild/bazel/commit/ef54ef5d17a013c863c4e2fb0583e6bd209645f2))\\n- <VersionPill version=\\"6.3.0\\" /> `--experimental_split_coverage_postprocessing` now works in combination with\\n  `--experimental_generate_llvm_lcov`.\\n  ([9d3b375](https://github.com/bazelbuild/bazel/commit/9d3b375fa6071fc7138d57f30cfcd91a3a2bfa7a))\\n- <VersionPill version=\\"6.3.0\\" /> Fixed `json.gz` check to not rely on `gcov --version`.\\n  ([7f628d7](https://github.com/bazelbuild/bazel/commit/7f628d7178b660b69fe87d0a30d93290c808e957))\\n- The `CoverageReport` action now uses the `no-remote` execution requirement instead of `local`. ([188b4ef](https://github.com/bazelbuild/bazel/commit/188b4ef8b742223a25b1f94b4f0c567cdbd829df))\\n- The `coverage_support_files` parameter on the `coverage_common.instrumented_files_info` function now accepts `FilesToRunProvider` arguments. ([062b83f](https://github.com/bazelbuild/bazel/commit/062b83fcf48206aba254607c701bdae5c928de0b))\\n- Fixed coverage combining to happen after exclusive tests have run. ([6eb7dbb](https://github.com/bazelbuild/bazel/commit/6eb7dbb2f2634a0acaee5dc8c73f0aab710e1256))\\n\\n### Persistent Workers\\n\\n[Persistent workers][workers] improve build performance by sending multiple requests to long-running processes.\\nHere are some notable changes to persistent worker support:\\n\\n[workers]: https://bazel.build/versions/7.0.0/remote/persistent\\n\\n- Added the `--experimental_shrink_worker_pool` flag, which shrinks the worker pool if memory pressure gets too high. ([dce697d](https://github.com/bazelbuild/bazel/commit/dce697d10a1684f75cc8a2df001c6f6ee5f46e6a))\\n- Added the `--experimental_worker_allowlist` flag, which specifies which mnemonics can use persistent workers. ([85dcafe](https://github.com/bazelbuild/bazel/commit/85dcafeba92479bee5b2cd2cb3f33f84be7de7f7))\\n- Added the `--experimental_worker_memory_limit_mb` flag, which kills workers using more than a given amount of memory. ([8d1db5b](https://github.com/bazelbuild/bazel/commit/8d1db5bfce66f1f7f3184e2be37d964eb2ebd8a7))\\n- Added the `--experimental_worker_metrics_poll_interval` flag, which allows changing the interval between collecting worker metrics and possibly attempting evictions. ([a95847c](https://github.com/bazelbuild/bazel/commit/a95847c654f121d00ab769f86d65e190091b10e2))\\n- Added the `--experimental_worker_sandbox_hardening` flag, which uses the linux sandbox for worker sandboxing. ([6669a4f](https://github.com/bazelbuild/bazel/commit/6669a4fc8e18d1ac2c0ffef102ec6d7c5b87fbd8))\\n- Removed support for high priority workers. ([8e359e7](https://github.com/bazelbuild/bazel/commit/8e359e7f1b707a45f61ebf96510988eae07f13b4))\\n\\n## Querying\\n\\nHere are some changes that were made to the `query` family of commands,\\nstarting with ones that applied to more than one of the commands:\\n\\n- <VersionPill version=\\"6.2.0\\" /> The `aquery` and `cquery` commands now respect the `--query_file` flag just like the\\n  `query` command. ([fb23246](https://github.com/bazelbuild/bazel/commit/fb2324620a4adee19bb4e8a030b6fba58f672dc0))\\n- <VersionPill version=\\"6.4.0\\" /> Added the `--consistent_labels` flag, which forces consistent label formatting across\\n  all output modes that is also compatible with `str(Label(...))` in Starlark.\\n  ([20cdacc](https://github.com/bazelbuild/bazel/commit/20cdacc22ab4f3ec8ae4337d535a1846bcbfd382))\\n- Added the `--proto:include_attribute_source_aspects` flag, which includes a new field `source_aspect_name` to the `Attribute` message that indicates the source aspect that the attribute comes from. ([5c7a159](https://github.com/bazelbuild/bazel/commit/5c7a1598deb67ca46f47943891a687fa0af6dd4f))\\n- Added a filter in `cquery`/`aquery` to skip targets with mismatched configurations. ([a2bd3ef](https://github.com/bazelbuild/bazel/commit/a2bd3ef39d7133d8fab8074a9d48023d8553bd79))\\n- `label_flag` and `label_setting` values now consider defaults. ([658b3a6](https://github.com/bazelbuild/bazel/commit/658b3a6a4811c7907dd07e949182ba571e96138a))\\n\\n### `query`\\n\\n- <VersionPill version=\\"6.3.0\\" /> Added `jsonproto` option to the `--output` flag.\\n  ([a94383f](https://github.com/bazelbuild/bazel/commit/a94383f8928abd379f7edef61bbaa04d262bcf98))\\n- <VersionPill version=\\"6.3.0\\" /> Fixed `--output=proto --order_output=deps` not returning targets in topological order.\\n  ([2ff87be](https://github.com/bazelbuild/bazel/commit/2ff87be508101737f113709ae82fa82b772c0452))\\n- <VersionPill version=\\"6.4.0\\" /> Renamed `--output=jsonproto` to `streamed_jsonproto` and made the format valid ndjson.\\n  ([2cd583a](https://github.com/bazelbuild/bazel/commit/2cd583a4868354c2198fbb63f124136ad1c0d29b))\\n- Duplicates in `<rule-inputs>` when using `query --output=xml --aspect_deps=precise` are removed. ([5c7a159](https://github.com/bazelbuild/bazel/commit/5c7a1598deb67ca46f47943891a687fa0af6dd4f))\\n\\n### `cquery`\\n\\n- <VersionPill version=\\"6.2.0\\" /> Added support for `alias` targets to the `providers` function.\\n  ([156325e](https://github.com/bazelbuild/bazel/commit/156325e676cf15c49379eda317b662b2307a7f7e))\\n- Added the `streamed_proto` option to the `--output` flag. ([aa88357](https://github.com/bazelbuild/bazel/commit/aa8835753cbbed5a837fc10a37464ee4a84941ba))\\n- Starlark transitions now have full fidelity in `cquery`. ([9575c7f](https://github.com/bazelbuild/bazel/commit/9575c7fa86458717c154f08ff8a7f7aff000f6ae))\\n- `cquery --output=starlark` now respects `BuildLanguageOptions`. ([1447f24](https://github.com/bazelbuild/bazel/commit/1447f2422ba345e57511a246a58e485422fa2f93))\\n\\n### `aquery`\\n\\n- <VersionPill version=\\"6.1.0\\" /> The effective environment is now printed for for all `CommandAction`s.\\n  ([2ae409b](https://github.com/bazelbuild/bazel/commit/2ae409bc88aaab5683f1890acec21c337b73a812))\\n- Added `streamed_proto` option to the `--output` flag. ([8490321](https://github.com/bazelbuild/bazel/commit/849032185b7a01684aa84bde31b54366e9e1a315))\\n- Added the target paths of `UnresolvedSymlink` actions. ([df82dcd](https://github.com/bazelbuild/bazel/commit/df82dcd1b57a9a7460156ff2d53b376737115dbc))\\n- Added whether or not a `FileWrite` action\'s output is executable. ([abac1c6](https://github.com/bazelbuild/bazel/commit/abac1c632ef0f2c2fac8858abf9b6f9657cb19c2))\\n- Added `RepoMappingManifest` to the set of files that `--include_file_write_contents` affects. ([604a9ef](https://github.com/bazelbuild/bazel/commit/604a9ef6332d49110d14d427317bd726225fff1d))\\n- Removed duplicate printing of `ExecutionInfo`. ([dd3b0ec](https://github.com/bazelbuild/bazel/commit/dd3b0ec5d494224cf88fc5201331c19007255665))\\n\\n## Dependency management\\n\\nWith Bazel 7.0 external dependencies can be managed either with [Bzlmod](#bzlmod) or the `WORKSPACE` file.\\nHere are some changes that apply to either method:\\n\\n- <VersionPill version=\\"6.1.0\\" /> Improved readability of human-readable download progress.\\n  ([66b58ee](https://github.com/bazelbuild/bazel/commit/66b58ee904efa22696edc1b78a59bac91da9ed8d))\\n- <VersionPill version=\\"6.1.0\\" /> Repository fetch progress is now reported during main repo mapping computation.\\n  ([51e6c38](https://github.com/bazelbuild/bazel/commit/51e6c38ae808df4f2bf8fb29b4c5173e06ac014a))\\n- <VersionPill version=\\"6.3.0\\" /> Added the `archive_type` attribute to `http_archive`.\\n  ([c7695ce](https://github.com/bazelbuild/bazel/commit/c7695ce4a50f6ce4e7ab286bd3702e1d60c7c2ff))\\n- <VersionPill version=\\"6.3.0\\" /> Download progress now includes a percentage complete if possible.\\n  ([6ffff17](https://github.com/bazelbuild/bazel/commit/6ffff174a226d799d72312550e77541a19e69443))\\n- <VersionPill version=\\"6.3.0\\" /> Hash strings can now contain uppercase characters.\\n  ([cc8ecc5](https://github.com/bazelbuild/bazel/commit/cc8ecc5ad847969cc7e4b23c3a4facc8bd56ee36))\\n- <VersionPill version=\\"6.4.0\\" /> Fixed handling of non-ASCII characters in archive entry file names.\\n  ([10169bb](https://github.com/bazelbuild/bazel/commit/10169bbe66e818868ec37f7d853ab5a567cd2ced))\\n- <VersionPill version=\\"6.4.0\\" /> Generated patches files now use `\\\\n` for line endings on all platforms.\\n  ([07e0d31](https://github.com/bazelbuild/bazel/commit/07e0d316a345a3cb2593f98525320590bbc56e30))\\n- Added support for `.tbz` files in the `repository_ctx.download_and_extract` function. ([6e01b25](https://github.com/bazelbuild/bazel/commit/6e01b25954d974a36bd345be730611507df902cd))\\n- Added the `--experimental_worker_for_repo_fetching` flag, which allows fetching repositories using a worker thread. ([1590dbc](https://github.com/bazelbuild/bazel/commit/1590dbc4be2ce262ee9348e12cdb44c3b6ee0544))\\n- Added the `--http_connector_attempts` and `--http_connector_retry_max_timeout` flags, which makes connection retry attempts and timeout configurable. ([f29db1b](https://github.com/bazelbuild/bazel/commit/f29db1bf54ffb5c49b3027d3ebe762fcfd10ee1b))\\n- `.git` directories are now deleted from `git_repository` external repositories when using `strip_prefix`. ([2977ba6](https://github.com/bazelbuild/bazel/commit/2977ba69d39509f0982156ab03589aeef5b84dd5))\\n- Extended `--unix_digest_hash_attribute_name` to also work in the repository cache. ([87d6e9a](https://github.com/bazelbuild/bazel/commit/87d6e9ab89d6119a429daede7ae1c719e4244971))\\n- HTTP 429 (Too Many Requests) errors are now retried. ([4ed6a2f](https://github.com/bazelbuild/bazel/commit/4ed6a2f2d89eb5de6422fc683b51f26e158d7f68))\\n- URLs are now used as default canonical IDs in common repo rules. ([a6f8923](https://github.com/bazelbuild/bazel/commit/a6f8923d6f0ddf37cd101f348779dd93335fca6e))\\n\\n### Bzlmod\\n\\nWith Bazel 7.0 Bzlmod is enabled by default.\\nWhile Bzlmod was made non-experimental in Bazel 6.0,\\nthe minor releases contained a lot of additional quality-of-life and feature improvements:\\n\\n- <VersionPill version=\\"6.1.0\\" /> Tildes are now acceped in `--override_module`.\\n  ([094a0aa](https://github.com/bazelbuild/bazel/commit/094a0aabed1e018e6503bc3ac844c8022b71a527))\\n- <VersionPill version=\\"6.2.0\\" /> Added the `--lockfile_mode` flag, which controls how the bzlmod lockfile is generated\\n  and checked. ([3b11a2f](https://github.com/bazelbuild/bazel/commit/3b11a2f69535521f0886cf470edd3b9602c34d55))\\n- <VersionPill version=\\"6.2.0\\" /> Added the `dev_dependency` attribute to `register_execution_platforms` and\\n  `register_toolchains`.\\n  ([f39454f](https://github.com/bazelbuild/bazel/commit/f39454f0eb85e08f849c8c76123191205224d269))\\n- <VersionPill version=\\"6.2.0\\" /> Added the `is_dev_dependency` attribute to `module_ctx`.\\n  ([1a719ce](https://github.com/bazelbuild/bazel/commit/1a719cea3f9bf7ee427620d779b6c287f885eff8))\\n- <VersionPill version=\\"6.2.0\\" /> Added the `extension_metadata` attribute to `module_ctx`.\\n  ([6a47481](https://github.com/bazelbuild/bazel/commit/6a47481ca48415515a51c701864c244f08da1c0d))\\n- <VersionPill version=\\"6.2.0\\" /> Added the `max_compatibility_level` attribute to `bazel_dep`, which allows version\\n  selection to upgrade a dependency up to the specified compatibility level.\\n  ([152a001](https://github.com/bazelbuild/bazel/commit/152a001f422795722a5dd497370b71662fb5d558))\\n- <VersionPill version=\\"6.2.0\\" /> Added support for relative paths in `--override_module`.\\n  ([f7627e0](https://github.com/bazelbuild/bazel/commit/f7627e00bf96c9159ab79a32afc4f6a622f0deeb))\\n- <VersionPill version=\\"6.2.0\\" /> Fixed an issue where WORKSPACE and WORKSPACE-loaded .bzl files couldn\'t see the Bzlmod\\n  root module\'s mappings when Bzlmod is enabled.\\n  ([dfdf63a](https://github.com/bazelbuild/bazel/commit/dfdf63a398ef3909364d31d00d1860bf42d6151f))\\n- <VersionPill version=\\"6.3.0\\" /> Added the `root_module_has_non_dev_dependency` attribute to `module_ctx`.\\n  ([640e850](https://github.com/bazelbuild/bazel/commit/640e8502c979d353fcac421f12e7170635c74292))\\n- <VersionPill version=\\"6.3.0\\" /> Added the `show` command to `bazel mod`.\\n  ([1ae56c2](https://github.com/bazelbuild/bazel/commit/1ae56c294502ee3f5532c285ef491a673353f064))\\n- <VersionPill version=\\"6.3.0\\" /> `REPO.bazel` and `MODULE.bazel` files are now considered workspace boundary markers.\\n  ([f93b2f3](https://github.com/bazelbuild/bazel/commit/f93b2f31630fa5c0b8f6be1f75a3a8a5f0eba3f3))\\n- <VersionPill version=\\"6.3.0\\" /> Overrides specified by non-root modules no longer cause an error, and are silently\\n  ignored instead. ([78cb7d5](https://github.com/bazelbuild/bazel/commit/78cb7d5b652ee155a0d1ad5cef3a3131e9705152))\\n- <VersionPill version=\\"6.3.0\\" /> The canonical repo name of the `platforms` module is now forced to be `platforms`.\\n  ([343ab03](https://github.com/bazelbuild/bazel/commit/343ab03d0c6e5828b498765cd83c80cb731b1e3d))\\n- <VersionPill version=\\"6.3.0\\" /> Renamed `modquery` command to `mod`.\\n  ([f6c2ef9](https://github.com/bazelbuild/bazel/commit/f6c2ef95adeba852888d406a0f333e8dd2aeba8f))\\n- <VersionPill version=\\"6.3.0\\" /> Yanked module versions no longer contribute dependency requirements or emit `DEBUG`\\n  messages for `print()` statements.\\n  ([2a2a474](https://github.com/bazelbuild/bazel/commit/2a2a4743ad624f7f238b7771b8ceedb7649e8f5c))\\n- <VersionPill version=\\"6.4.0\\" /> Added the `environ` attribute to `module_extension`.\\n  ([64554a3](https://github.com/bazelbuild/bazel/commit/64554a32d0836bf8c5eaa5d5f2bebb7163ac73bc))\\n- <VersionPill version=\\"6.4.0\\" /> Added the `--experimental_isolated_extension_usages` flag, which enables the `isolate`\\n  parameter of `use_extension`.\\n  ([19a9710](https://github.com/bazelbuild/bazel/commit/19a971089952e53bba130a8e3e8b28b6b1e310e6),\\n  [3a4b04f](https://github.com/bazelbuild/bazel/commit/3a4b04f3e5e74f16a981a265e95b196899c79d54))\\n- <VersionPill version=\\"6.4.0\\" /> Builtin modules are now injected at the end of the `MODULE.bazel` file.\\n  ([0e58b0d](https://github.com/bazelbuild/bazel/commit/0e58b0d94d9867f5c22da704a66fe4da0ad53f1f))\\n- <VersionPill version=\\"6.4.0\\" /> Release candidates are now considered equivalent to the actual release for\\n  `module.bazel_compatibility`.\\n  ([21cd4ef](https://github.com/bazelbuild/bazel/commit/21cd4efaa8c766ac9f1d930c7b10052d91a3958e))\\n- <VersionPill version=\\"6.4.0\\" /> Optimized computing root repository mapping.\\n  ([8a68310](https://github.com/bazelbuild/bazel/commit/8a683109239314aa561a8422bb060f9d5b8c33bb))\\n- <VersionPill version=\\"6.4.0\\" /> Optimized memory usage.\\n  ([74aadb2](https://github.com/bazelbuild/bazel/commit/74aadb265c1cae614ae636146f7a1e9e195b7e97))\\n- <VersionPill version=\\"6.4.0\\" /> Optimized registry downloading.\\n  ([8337dd7](https://github.com/bazelbuild/bazel/commit/8337dd704237d2d21fd999c9484a23174b6074d5))\\n- Added the `--all` flag to the `fetch` command. ([0356a3f](https://github.com/bazelbuild/bazel/commit/0356a3ff1d978fe645f71a546680bd89391466dc))\\n- Added the `--repo` flag to the `fetch` command. ([9a1d385](https://github.com/bazelbuild/bazel/commit/9a1d3858bfa8138b62e9f7c6ca5a78b195c179eb))\\n- Added support for the `use_repo_rule` directive in `MODULE.bazel` files. ([ab016be](https://github.com/bazelbuild/bazel/commit/ab016bec63d7afaf868b81ad7341fde5909dbffd))\\n- All labels in Bazel error messages, log output, Build Event Protocol, etc. are now prefixed with `@@` instead `@` where applicable, to properly denote that they contain canonical repo names. ([c456082](https://github.com/bazelbuild/bazel/commit/c4560822cc9d48f6642fd946ae0eac93a40668cc))\\n- Optimized CPU usage. ([57b0bd7](https://github.com/bazelbuild/bazel/commit/57b0bd7f743481e7eca4f9c78f3bd36c18a8ac77))\\n\\n## Platforms\\n\\n[Platforms][platforms] are where your build tools run (i.e. execution platforms)\\nor where your built products will run (i.e. target platforms).\\nIn previous years I catagorized changes along those lines,\\nbut this year I\'m not making that distinction.\\n\\n[platforms]: https://bazel.build/versions/7.0.0/extending/platforms\\n\\n### Android\\n\\n- Continued progress on Starlarkifying the Android rules\\n- <VersionPill version=\\"6.1.0\\" /> Made desugar dependencies deterministic.\\n  ([a306f4f](https://github.com/bazelbuild/bazel/commit/a306f4f7fd440d006aa6ae9234b4430f13bc8cf9))\\n- <VersionPill version=\\"6.1.0\\" /> Fixed multiplexed workers for busybox tools.\\n  ([8b1521e](https://github.com/bazelbuild/bazel/commit/8b1521ebfa4a7333148ddaa63eea8a9d3702579d))\\n- <VersionPill version=\\"6.2.0\\" /> Added test coverage support to `android_local_test`.\\n  ([6bd2cc3](https://github.com/bazelbuild/bazel/commit/6bd2cc345b459de3b0b0a47be5707bff2f0ab044))\\n- <VersionPill version=\\"6.2.0\\" /> Fixed worker and multiplex workers for `DexBuilder` and `Desugar` actions.\\n  ([765c0eb](https://github.com/bazelbuild/bazel/commit/765c0ebc9cf544d70bc22ed89acf7b1592cca59d))\\n- Added the `--experimental_persistent_aar_extractor` flag, which uses persistent workers for aar extractors. ([74bc046](https://github.com/bazelbuild/bazel/commit/74bc04653cd8635f19a887bd1171d2e8566166c1))\\n- Added the `--optimizing_dexer` flag, which allows specifying a binary to use to do dexing without sharding. ([9337dfe](https://github.com/bazelbuild/bazel/commit/9337dfe28c00fc1faf4331416ed1d65ad7336cca))\\n- Added the `bazel_android` fragment. ([bd0f9b0](https://github.com/bazelbuild/bazel/commit/bd0f9b08561403a3dcbf95facff6ef8e863381da))\\n- Added the `dexdump` tool to `android_sdk_repository`. ([773b50f](https://github.com/bazelbuild/bazel/commit/773b50f979b8f40e73cf547049bb8e1114fb670a))\\n- Added the `dexdump` attribute to `android_sdk`. ([1e4b275](https://github.com/bazelbuild/bazel/commit/1e4b275bb0c292f5d434d97522ab51c3581b6cd6))\\n- Added persistent worker support for `GenerateDataBindingBaseClasses`. ([9092e29](https://github.com/bazelbuild/bazel/commit/9092e29f1bd0fe8a94bcee18fe108a9ca2dab075))\\n- Added persistent worker support for `ProcessDatabinding`. ([9092e29](https://github.com/bazelbuild/bazel/commit/9092e29f1bd0fe8a94bcee18fe108a9ca2dab075))\\n- Added support for `R.txt` files generated with `aapt2 link --package-id`. ([41f894f](https://github.com/bazelbuild/bazel/commit/41f894f5adcb04f1860344793ea113d2308973aa))\\n- Added support for optimizers rewriting baseline profiles. ([5391486](https://github.com/bazelbuild/bazel/commit/53914865fc26850a1f282a83f3846c6103af217e))\\n- `AndroidDataBindingProcessingAction` now emits deterministic zip file timestamps. ([10af780](https://github.com/bazelbuild/bazel/commit/10af780af88b794c1497e771c6d8bab925297c3c))\\n- Made `AndroidInstall` actions hermetic with respect to dex shards. ([2b104c8](https://github.com/bazelbuild/bazel/commit/2b104c8fd5e54e31abbe1c84b04ba64530cd74ed))\\n- The `--no_proguard_location_reference` flag is now added unconditionally to the command line of `aapt2`. ([7d911b5](https://github.com/bazelbuild/bazel/commit/7d911b52688cc214b13e4282698827ea4b48fba8))\\n- The default Android SDK toolchain is now registered first. ([9be1e9b](https://github.com/bazelbuild/bazel/commit/9be1e9ba923139fd0dbc44aa359d3b7d3abfff89))\\n- Baseline profile wildcards are now expanded before optimizer tools see them. ([52c3566](https://github.com/bazelbuild/bazel/commit/52c35661db52a79e17984a7da0f0506ae0106030))\\n- Removed support for Databinding v1. ([6a19449](https://github.com/bazelbuild/bazel/commit/6a19449233d6e51d8a862545726a60a611943068))\\n\\n### Apple\\n\\n- <VersionPill version=\\"6.1.0\\" /> `xcrun` is now used to invoke `install_name_tool`.\\n  ([8ec8743](https://github.com/bazelbuild/bazel/commit/8ec874348226995c4101b2173a465ddc65cab591))\\n- <VersionPill version=\\"6.1.0\\" /> Dropped support for macOS versions prior to 10.13.\\n  ([43dadb2](https://github.com/bazelbuild/bazel/commit/43dadb275b3f9690242bf2d94a0757c721d231a9))\\n- <VersionPill version=\\"6.2.0\\" /> Patched `zlib` to fix compatibility with latest Xcode.\\n  ([1f2b3ed](https://github.com/bazelbuild/bazel/commit/1f2b3ed4ac717b814d02a0d125f160ddabe78003))\\n- <VersionPill version=\\"6.3.0\\" /> Bumped `default_macos_sdk_version` to `10.11`.\\n  ([86ef4f4](https://github.com/bazelbuild/bazel/commit/86ef4f4cc2b8f7fd58101eb49c266be63f6e923c))\\n- <VersionPill version=\\"6.4.0\\" /> Added initial visionOS support.\\n  ([c113e62](https://github.com/bazelbuild/bazel/commit/c113e6261aa0c5d593ff6091200463c01fd101cd))\\n- <VersionPill version=\\"6.4.0\\" /> The `xcode_autoconf` repository rule will now re-run when the `DEVELOPER_DIR` or\\n  `XCODE_VERSION` environment variable changes.\\n  ([19979e6](https://github.com/bazelbuild/bazel/commit/19979e619ccbb8257a6d696553e1b00fafccb504))\\n- <VersionPill version=\\"6.4.0\\" /> Removed the `-s` flag from `libtool` invocation.\\n  ([ae7cfa5](https://github.com/bazelbuild/bazel/commit/ae7cfa59461b2c694226be689662d387e9c38427))\\n- Added `-dead_strip` to `opt` linker flags. ([1da8a82](https://github.com/bazelbuild/bazel/commit/1da8a825c0fba882f33ea6998a76ff8265fcd32c))\\n- Added the `extra_requested_features` and `extra_disabled_features` parameters to the `apple_common.link_multi_arch_binary` function. ([1f8951c](https://github.com/bazelbuild/bazel/commit/1f8951c15a6d8384d51f5854e0485e7ad32cf33e))\\n- Linker framework arguments now use the two-argument form (e.g. `[\\"-framework\\", \\"UIKit\\"]` instead of `[\\"-Wl,-framework,UIKit\\"]`). ([32fb0a2](https://github.com/bazelbuild/bazel/commit/32fb0a282685c721926dce7c1b1afd55cdb8eaaa))\\n- Moved Apple toolchain setup to apple_support. ([699e403](https://github.com/bazelbuild/bazel/commit/699e40373f95e42390a85f29dfa1098636336103))\\n- `xcode_autoconf` now used `configure = True` instead of `local = True`. ([c747ae7](https://github.com/bazelbuild/bazel/commit/c747ae7aab077227099409f2f0774b485d42eaa4))\\n- `xcrunwrapper` is no longer used for the `ObjcBinarySymbolStrip` action. ([80621fd](https://github.com/bazelbuild/bazel/commit/80621fdbd20a2240320be0225c324b3452488e56))\\n- Removed `apple_common.multi_arch_split`. ([a76763c](https://github.com/bazelbuild/bazel/commit/a76763c4125fbbea17f415a40d9efca846b0b6f0))\\n- Removed `apple_common.apple_crosstool_transition`. ([534e6f8](https://github.com/bazelbuild/bazel/commit/534e6f86df7022700d1b5349c58c429269e93669))\\n- Removed `darwin` as a `--cpu` value. ([d1b4fb7](https://github.com/bazelbuild/bazel/commit/d1b4fb746e7c1865ce9631636c227e1aaca732d0))\\n- Removed bitcode support. ([37b8e1b](https://github.com/bazelbuild/bazel/commit/37b8e1b37d5676b3d047b528149546bf2bfefdd1))\\n- Removed the use of `-undefined dynamic_lookup`. ([4853dfd](https://github.com/bazelbuild/bazel/commit/4853dfd02ac7440a04caada830b7b61b6081bdfe))\\n\\n### Linux\\n\\n- <VersionPill version=\\"6.3.0\\" /> `--local_termination_grace_seconds` is now used when testing sandbox availability.\\n  ([d0e19ae](https://github.com/bazelbuild/bazel/commit/d0e19ae1943ce50f91bb64f1aca132632245f3e8))\\n- Added the `--experimental_sandbox_memory_limit` flag, which allows setting per-sandbox memory limits. ([03996c1](https://github.com/bazelbuild/bazel/commit/03996c167d0a87d228ef727cc5db063929f2f5cf))\\n- `.bazelignore` paths on Linux are no longer watched for changes. ([4dabe43](https://github.com/bazelbuild/bazel/commit/4dabe43494cf4b13d3b08349ba92d6e7c662a20b))\\n- Bazel\'s local CPU resource on Linux is now container aware. Use `--local_cpu_resources`, `--loading_phase_threads` or `--jobs` to override. ([ab2953c](https://github.com/bazelbuild/bazel/commit/ab2953ca55dfc61595bd465852a83e21d9a3716f))\\n\\n### Windows\\n\\n- <VersionPill version=\\"6.1.0\\" /> The `archive_param_file` feature is now enabled by default for Windows.\\n  ([bb0b886](https://github.com/bazelbuild/bazel/commit/bb0b886271d45209e3bef476da37811b9dd2afe5))\\n- <VersionPill version=\\"6.1.0\\" /> Fixed `--nozip_undeclared_test_outputs` on Windows.\\n  ([cd10d50](https://github.com/bazelbuild/bazel/commit/cd10d508e20a4964586b46f7edea8a6dc900157c))\\n- <VersionPill version=\\"6.2.0\\" /> C++ deps pruning is now enabled on Windows when PARSE_SHOWINCLUDES is available.\\n  ([788801a](https://github.com/bazelbuild/bazel/commit/788801a8fd30985a1831de805172d257c6f63691))\\n- <VersionPill version=\\"6.3.0\\" /> Fixed VS 2022 autodetection.\\n  ([cd33d14](https://github.com/bazelbuild/bazel/commit/cd33d148ad31a23ba87aa59c745e3ce826dcd967))\\n- <VersionPill version=\\"6.4.0\\" /> Compilation actions using the auto-configured MSVC toolchain are forced to emit error\\n  messages in English if the English language pack for Visual Studio is installed.\\n  ([0f10359](https://github.com/bazelbuild/bazel/commit/0f103598bba32439355c94b2c226fb60625c94dd))\\n- <VersionPill version=\\"6.4.0\\" /> Fixed Bash runfiles failure when the output base contains uppercase letters.\\n  ([ea4ab7d](https://github.com/bazelbuild/bazel/commit/ea4ab7d8e696f48253fd172fcfbd37661e4710d5))\\n- Added the `external_include_paths` feature to the windows cc toolchain. ([850b334](https://github.com/bazelbuild/bazel/commit/850b33430edbe188249a9dde784271fbd8919c7f))\\n- `.bazelignore` paths on Windows are no longer watched for changes. ([4dabe43](https://github.com/bazelbuild/bazel/commit/4dabe43494cf4b13d3b08349ba92d6e7c662a20b))\\n- The execution platform, instead of the host platform, is now used to decide whether to do Windows-specific things in a few places. ([2f0948b](https://github.com/bazelbuild/bazel/commit/2f0948bcbdf8bb4361d6433bf8b3953fa54054d9))\\n- The arm64 version of the embedded JDK is now used for Windows ARM64. ([b43418d](https://github.com/bazelbuild/bazel/commit/b43418d2ab69bdc7e504c2d79c627c6a88afa1d5))\\n- Enabled the `compiler_param_file` feature in the Windows MSVC toolchain. ([d47a410](https://github.com/bazelbuild/bazel/commit/d47a4100320b85aa44e6eb933c2a218c8e2fc0f1))\\n- Removed forced link to `clang_rt.builtins` in the Windows MSVC toolchain. ([761b280](https://github.com/bazelbuild/bazel/commit/761b2804501de523deafe1ce98533f55ea0cc401))\\n- Fixed `launcher_maker` to work with long paths on Windows. ([33fed24](https://github.com/bazelbuild/bazel/commit/33fed243eed7986441076794d370082d17db4790))\\n\\n## Languages\\n\\nWhile there are lots of programming languages that are supported through standalone Starlark rules,\\nsome are still written as \\"native\\" rules in Bazel core,\\nor are bundled Starlark rules while [Starlarkification][starlarkification-roadmap] is in progress.\\nIn the following sections I summarize the notable changes in support of these languages.\\n\\n### Bash\\n\\n- <VersionPill version=\\"6.1.0\\" /> Fixed `runfiles_current_repository` with RBE.\\n  ([497b7e4](https://github.com/bazelbuild/bazel/commit/497b7e403d6e5523bd1310bd1fe83c4ce1a6b1ec))\\n- <VersionPill version=\\"6.1.0\\" /> Fix root symlink edge case in runfiles library.\\n  ([dd24a00](https://github.com/bazelbuild/bazel/commit/dd24a0022a0ff959598da2c9bc097d27083be1a0))\\n- Fixed runfiles calling repository lookup for directly run scripts. ([da1a6d7](https://github.com/bazelbuild/bazel/commit/da1a6d7225e487901de629d22fe53bc054b4cc5c))\\n\\n### C and C++\\n\\n- Continued progress on Starlarkifying C/C++ rules. ([starlarkification roadmap][starlarkification-roadmap])\\n- <VersionPill version=\\"6.1.0\\" /> Added support for `.pyd` extensions.\\n  ([073f54b](https://github.com/bazelbuild/bazel/commit/073f54b9a7c46afd2c28b4a99a235bdd6b63bb5f))\\n- <VersionPill version=\\"6.1.0\\" /> Added support for `.wasm` extensions.\\n  ([de062a6](https://github.com/bazelbuild/bazel/commit/de062a6750fdea75361e42f8d198c09bf6825d76),\\n  [4b6f014](https://github.com/bazelbuild/bazel/commit/4b6f0141b8df49f4911af725f766e9dd8128a000))\\n- <VersionPill version=\\"6.1.0\\" /> Added the sanitizer features to `unix_cc_toolchain_config`.\\n  ([abae5ca](https://github.com/bazelbuild/bazel/commit/abae5ca3e8142f93cf0c2597e3410ed955c4dd59))\\n- <VersionPill version=\\"6.1.0\\" /> The exec transition is now applied to `lcov_merger` in `sh_test` and `cc_test`.\\n  ([37953c5](https://github.com/bazelbuild/bazel/commit/37953c56ea77c7aa7bea677f3481557fdb2c2a15))\\n- <VersionPill version=\\"6.1.0\\" /> The `cc_shared_library.roots` attribute was renamed to `deps`.\\n  ([68aad18](https://github.com/bazelbuild/bazel/commit/68aad18cfc01400bf6c3f447b6cd7d21dcc8f01f))\\n- <VersionPill version=\\"6.1.0\\" /> `libtool` is no longer hardcoded when using the unix cc toolchain.\\n  ([3c47b47](https://github.com/bazelbuild/bazel/commit/3c47b4716e6eca2b8ab06253915ef8d1bdd28038))\\n- <VersionPill version=\\"6.1.0\\" /> Removed the `-O1` flag from sanitizer feature flags.\\n  ([e132653](https://github.com/bazelbuild/bazel/commit/e132653ead5e50f4226dbff7776466fef1918f49))\\n- <VersionPill version=\\"6.1.0\\" /> Removed the `static_deps` attribute from `cc_shared_library`.\\n  ([9815b76](https://github.com/bazelbuild/bazel/commit/9815b76121d4e36bdaae110de7e68131916478ca))\\n- <VersionPill version=\\"6.2.0\\" /> Exposed `cc_proto_aspect` as a toplevel symbol.\\n  ([2aa06cf](https://github.com/bazelbuild/bazel/commit/2aa06cf227fe349195191107286167035f0c5431))\\n- <VersionPill version=\\"6.3.0\\" /> Added the `force_no_whole_archive` feature, which force disables `--whole-archive`.\\n  ([661ebef](https://github.com/bazelbuild/bazel/commit/661ebef465b08697a82fc3ee4c9fd540d953dc84))\\n- <VersionPill version=\\"6.3.0\\" /> Added the `additional_compiler_inputs` attribute to `cc_library`.\\n  ([ade32e6](https://github.com/bazelbuild/bazel/commit/ade32e68dc7aa23b5038cd44a4b86cb491818139))\\n- <VersionPill version=\\"6.3.0\\" /> Added the `CcSharedLibraryHintInfo` provider.\\n  ([dbb09c9](https://github.com/bazelbuild/bazel/commit/dbb09c9ea84cc6099ad7a30fa8206130d025f7ad))\\n- <VersionPill version=\\"6.3.0\\" /> File extensions are case sensitive again.\\n  ([e4990f8](https://github.com/bazelbuild/bazel/commit/e4990f8a20e44f7a7875f614e9fc2fe24b051fd9))\\n- <VersionPill version=\\"6.3.0\\" /> Unused targets listed in `cc_shared_library.dynamic_deps` are now linked.\\n  ([ba5c740](https://github.com/bazelbuild/bazel/commit/ba5c74038ed3ae633a9bf8346c88b01e1931992e))\\n- <VersionPill version=\\"6.3.0\\" /> `cc_binary` targets with `dynamic_deps` attributes no longer link indirect\\n  `dynamic_deps` on Unix.\\n  ([95ae4db](https://github.com/bazelbuild/bazel/commit/95ae4dbfe34fee7b033c4b7918e1afdc1cee017a))\\n- <VersionPill version=\\"6.3.0\\" /> Added the `exclude_bazel_rpaths_in_transitive_libs` and\\n  `link_indirect_dynamic_deps_in_binary` features.\\n  ([95ae4db](https://github.com/bazelbuild/bazel/commit/95ae4dbfe34fee7b033c4b7918e1afdc1cee017a))\\n- <VersionPill version=\\"6.3.0\\" /> Removed `cc_shared_library_permissions`.\\n  ([adfd4df](https://github.com/bazelbuild/bazel/commit/adfd4dff773161ce5280a80f568b3584a94f277a))\\n- <VersionPill version=\\"6.3.0\\" /> Removed the `preloaded_deps` attribute from `cc_shared_library`.\\n  ([3b7e233](https://github.com/bazelbuild/bazel/commit/3b7e2335d9624b63a2e190fd27b960826bf8f649))\\n- <VersionPill version=\\"6.3.0\\" /> Fixed the `cc_shared_library` aspect to propagate along all attributes.\\n  ([590ee17](https://github.com/bazelbuild/bazel/commit/590ee17c225244efd48793899170bc11f64b65d2))\\n- <VersionPill version=\\"6.3.0\\" /> Fixed the order of linker inputs in `cc_binary` and `cc_shared_library`.\\n  ([a772452](https://github.com/bazelbuild/bazel/commit/a77245215e61187dba763dd619cc60c62fb346bb))\\n- <VersionPill version=\\"6.3.0\\" /> Fixed rpath for symlinks in `cc_shared_library`.\\n  ([044a14c](https://github.com/bazelbuild/bazel/commit/044a14cca2747aeff258fc71eaeb153c08cb34d5))\\n- <VersionPill version=\\"6.3.0\\" /> Fixed `cc_shared_library` to take into account unused `CcInfo`s.\\n  ([b6b9eec](https://github.com/bazelbuild/bazel/commit/b6b9eec8ea44ceca80d345c1b3b81412bbd97a81))\\n- <VersionPill version=\\"6.3.0\\" /> Fixed `cc_shared_library` to take into account indirect top level deps.\\n  ([f9008f6](https://github.com/bazelbuild/bazel/commit/f9008f698467eb85657711c608db16086a9908eb))\\n- <VersionPill version=\\"6.3.0\\" /> Fixed `exports_filter` in `cc_shared_library`.\\n  ([bc33ac2](https://github.com/bazelbuild/bazel/commit/bc33ac2d4f0ce39524ca88833aaf26427a3d7e00))\\n- <VersionPill version=\\"6.4.0\\" /> Added the `additional_linker_inputs` attribute to `cc_library`.\\n  ([0589995](https://github.com/bazelbuild/bazel/commit/05899953a1726328b0ff9d940720e363260ce5c4))\\n- <VersionPill version=\\"6.4.0\\" /> Debug info context is now collected from the `cc_library.implementation_deps`\\n  attribute. ([e55fee2](https://github.com/bazelbuild/bazel/commit/e55fee2938b38605cd3da7fc9c790da71961dd1a))\\n- <VersionPill version=\\"6.4.0\\" /> Data dependencies are now propagated through the `cc_library.implementation_deps`\\n  attribute. ([56e9020](https://github.com/bazelbuild/bazel/commit/56e9020b434e321d51d077428cd5f49bee940ee2))\\n- <VersionPill version=\\"6.4.0\\" /> `c++14` is now used as the default C++ standard.\\n  ([978cd23](https://github.com/bazelbuild/bazel/commit/978cd23e80f202a03e99a87f2089a9a0622b5d5d))\\n- Added auto-configured Unix toolchain support for `BAZEL_CONLYOPTS`. ([b272cef](https://github.com/bazelbuild/bazel/commit/b272cef7d4b2d1be4e3f82b737c3c14d5e768aea))\\n- Added a feature definition for `static_link_cpp_runtimes` to the unix cc toolchain config. ([6c7147b](https://github.com/bazelbuild/bazel/commit/6c7147b71ea99225f3a2fd604706039492fb5d97))\\n- Added support for optional toolchains to `find_cpp_toolchain`. ([6b126d6](https://github.com/bazelbuild/bazel/commit/6b126d60c319c574ed598eb38c0bdcc6b10fde03))\\n- Added the `external_includes` attribute to `compilation_context`. ([a6ef0b3](https://github.com/bazelbuild/bazel/commit/a6ef0b341a8ffe8ab27e5ace79d8eaae158c422b))\\n- Added the `validates_layering_check_in_textual_hdrs` feature, which skips the `parse_headers` action. ([8ef60d0](https://github.com/bazelbuild/bazel/commit/8ef60d09f99189f9f68ff58c326a6149d14612a9))\\n- Added the `prefer_pic_for_opt_binaries` feature, that indicates that PIC compiles are preferred for binaries even in optimized builds. ([4084671](https://github.com/bazelbuild/bazel/commit/40846718e4f54c28fddc063b80b5ea30a82988c1))\\n- Added the `--memprof_profile` flag, which allows passing an LLVM MemProf to `CppCompile` actions. ([617a3bd](https://github.com/bazelbuild/bazel/commit/617a3bd0aee6aca477758b9072f74aa54a4d65c6))\\n- Added the `--@bazel_tools//tools/cpp:link_extra_libs` flag, which allow. ([9f2c62a](https://github.com/bazelbuild/bazel/commit/9f2c62aa489394ae882e07fb97eefb0556075944))\\n- Added the `link_extra_lib` attribute to `cc_binary`s specifying extra libraries to be linked into every binary. ([5eff703](https://github.com/bazelbuild/bazel/commit/5eff703556815068c8f93cafbd893fd9e752faff))\\n- Added the `module_files` output group, which enables building PCMs from `cc_library` targets directly. ([9b30bf7](https://github.com/bazelbuild/bazel/commit/9b30bf761a7526433c56251c49d7da3b8286bf8b))\\n- Added support for `expand_if_available` to `env_entry`. ([cc335fd](https://github.com/bazelbuild/bazel/commit/cc335fd27e3f8b5a57f98328a67e874d28f4d558))\\n- Added the `use_lto_native_object_directory` feature, which adds tree artifact support to the `thin_lto` feature. ([db34798](https://github.com/bazelbuild/bazel/commit/db347988dfd1b4b8cd5685de63d937f2ffa76b25), [480c8c8](https://github.com/bazelbuild/bazel/commit/480c8c81972a5866a380d75fb711bbe129828d91))\\n- Added a tool name for `objcopy`. ([2d1f37d](https://github.com/bazelbuild/bazel/commit/2d1f37dd88d4c080e76326831bb234f44f94d263))\\n- `cc_test` can now be configured by using a `native.toolchain()`. ([99b672b](https://github.com/bazelbuild/bazel/commit/99b672b631a075b25fe9215709f53703924dccf0))\\n- `--crosstool_top` is now unset when `--incompatible_enable_cc_toolchain_resolution` is set. ([0013115](https://github.com/bazelbuild/bazel/commit/0013115fb495380d262a2cc30bcffef248ecb105))\\n- `--fdo_optimize` no longer accepts a relative path. ([afe070e](https://github.com/bazelbuild/bazel/commit/afe070ecd70b00b61d6191eda177ff0c32fc7acd))\\n- C++ branch coverage is now enabled when using gcov 8 or later. ([57ae1ff](https://github.com/bazelbuild/bazel/commit/57ae1ff52ffbb2494ac9d43c1e49c2ba9425495e))\\n- The `BAZEL_CURRENT_REPOSITORY` preprocessor variable is now only set during compilation if the target depends on the runfiles library via `deps` or `implementation_deps`. ([1b214d2](https://github.com/bazelbuild/bazel/commit/1b214d2c13d4f8841c459e80ff455021b997fddb))\\n- The `includes` parameter in the `cc_common.compile()` function now accepts depsets as well as lists. ([c8d6c11](https://github.com/bazelbuild/bazel/commit/c8d6c118ae6bd8843f80c770b8fec360f1791f82))\\n- Made `generate_system_module_map.sh` more deterministic. ([78f98e7](https://github.com/bazelbuild/bazel/commit/78f98e760d7577104a2c6b44c0561f59d9b2d040))\\n- Moved `CcSharedLibraryHintInfo` to cc_common. ([b1c2e8d](https://github.com/bazelbuild/bazel/commit/b1c2e8d975ea2eb642bc82c06749ce414c455bd5))\\n- `libstdc++` (`libc++` on macOS) and `libm` are no longer linked in if none of their symbols are referenced, e.g., in a pure C target. ([2482322](https://github.com/bazelbuild/bazel/commit/2482322fedb463e0bbecd29c5e8e6d0f087ed884))\\n- When building C++ modules, FDO variables and profile inputs are no longer added. ([edeb037](https://github.com/bazelbuild/bazel/commit/edeb037adadf32cd57dd67443fce689c078fc431))\\n- Relocatable object files are no longer wrapped in `-Wl,-whole-archive` `-Wl,-no-whole-archive`. ([61267b3](https://github.com/bazelbuild/bazel/commit/61267b3e96aa8bb51dfde3ba120fc8194e79d808))\\n- Removed the `cc_host_toolchain_alias` rule. ([3543b19](https://github.com/bazelbuild/bazel/commit/3543b194b1be005ba950191b223722bfa5908cfa))\\n- Removed the `grep_includes` parameter from `cc_common` functions. ([b82e202](https://github.com/bazelbuild/bazel/commit/b82e202d4f5191b9f03fb8a76b077bb00fe9949d))\\n\\n### Java\\n\\n- Continued progress on Starlarkifying Java rules. ([starlarkification roadmap][starlarkification-roadmap])\\n- <VersionPill version=\\"6.1.0\\" /> Coverage can now be collected for external targets.\\n  ([00e9af1](https://github.com/bazelbuild/bazel/commit/00e9af1985cc0227599516fe7568785ca4334050))\\n- <VersionPill version=\\"6.1.0\\" /> Fixed coverage collection with the Java 8 runtime.\\n  ([c266651](https://github.com/bazelbuild/bazel/commit/c26665102d0d524bb42be8cd205c7b31a22a75c9))\\n- <VersionPill version=\\"6.1.0\\" /> Fixed `--experimental_java_classpath=bazel`.\\n  ([ac504cb](https://github.com/bazelbuild/bazel/commit/ac504cbb463e76b1374d0060534acabbccb408d2))\\n- <VersionPill version=\\"6.2.0\\" /> Added the `version` attribute to `java_runtime` and `JavaRuntimeInfo`.\\n  ([7556e11](https://github.com/bazelbuild/bazel/commit/7556e1107b666d10b660470a571631463c7eb4ec))\\n- <VersionPill version=\\"6.2.0\\" /> Added `-Xep:IgnoredPureGetter:OFF` to default `javacopts`.\\n  ([3b57894](https://github.com/bazelbuild/bazel/commit/3b5789473db34481e4d121d08461c19961bf729b))\\n- <VersionPill version=\\"6.2.0\\" /> Added `-Xep:LenientFormatStringValidation:OFF` to default `javacopts`.\\n  ([33a3b01](https://github.com/bazelbuild/bazel/commit/33a3b01d7ecfcf27102e8cde1253dac987f4a958))\\n- <VersionPill version=\\"6.2.0\\" /> Added `-Xep:ReturnMissingNullable:OFF` to default `javacopts`.\\n  ([e80ca15](https://github.com/bazelbuild/bazel/commit/e80ca154239d189a69323048eba0cd6c31e60da4))\\n- <VersionPill version=\\"6.2.0\\" /> JVM warnings are now redirected to stderr.\\n  ([abea37b](https://github.com/bazelbuild/bazel/commit/abea37b3519172ce8810e765b10aa377ef70de3b))\\n- <VersionPill version=\\"6.3.0\\" /> `local_java_repository` now sets the `version` attribute of `java_runtime`.\\n  ([1c1584b](https://github.com/bazelbuild/bazel/commit/1c1584b4081972c69d7746243f023257387d8121))\\n- <VersionPill version=\\"6.3.0\\" /> `ijar` now handles dynamic constants.\\n  ([69d2991](https://github.com/bazelbuild/bazel/commit/69d299165743613d303f19f47d8b3db4481d58b5))\\n- <VersionPill version=\\"6.4.0\\" /> Added a toolchain type for the Java bootstrap runtime.\\n  ([8715e9a](https://github.com/bazelbuild/bazel/commit/8715e9ae6f5c2fd42607018b3adaad14bf601a1c))\\n- <VersionPill version=\\"6.4.0\\" /> Optimized classpath pre-processing in `java_stub_template.txt`.\\n  ([4e8f0bd](https://github.com/bazelbuild/bazel/commit/4e8f0bdb4eca04844a86e3c7affc8aa85245e75a))\\n- Added `-Xep:EmptyTopLevelDeclaration:OFF` to default `javacopts`. ([8d9a06e](https://github.com/bazelbuild/bazel/commit/8d9a06ed7e2b08efe71a4e181a94e244804673bb))\\n- Added the `bootclasspath` parameter to the `java_common.compile` function. ([a75f516](https://github.com/bazelbuild/bazel/commit/a75f51693b6cd023912019b9279f7986c98e80ff))\\n- Added the `default_cds` attribute to `java_runtime` and `JavaRuntimeInfo`. ([53ff268](https://github.com/bazelbuild/bazel/commit/53ff268c7e7d61614e3fdba74d55103e64b8f80b))\\n- Added the `exec_compatibility_with` and `target_compatibility_with` attributes to `local_java_runtime` and `default_java_toolchain`. ([27fe30b](https://github.com/bazelbuild/bazel/commit/27fe30bb7cc1fdea7c60d7f73774149c0dd21457))\\n- Added the `ijar` attribute to `JavaToolchainInfo`. ([0dd6a49](https://github.com/bazelbuild/bazel/commit/0dd6a4994d45fe9b5770eef6b4ac4f49ead26140))\\n- Added the `proguard_allowlister` attribute to `JavaToolchainInfo`. ([8b9e8d5](https://github.com/bazelbuild/bazel/commit/8b9e8d571f5a03ed185fe9e0f64e272d15883cef))\\n- Added the `javac_options_list` attribute to `compilation_info`. ([ea154dc](https://github.com/bazelbuild/bazel/commit/ea154dc3e44a9c9180eb2535998b9895ca9eb059))\\n- Added the `--incompatible_disable_non_executable_java_binary` flag, which removes the `create_executable` attribute from `java_binary`. ([d12c7fa](https://github.com/bazelbuild/bazel/commit/d12c7fae71b7011a8a1af49474218af939519905))\\n- Added the `--incompatible_java_info_merge_runtime_module_flags` flag, which causes the `JavaInfo` constructor to merge `add_exports` and `add_opens` of `runtime_deps` in addition to `deps` and `exports`. ([e2249f9](https://github.com/bazelbuild/bazel/commit/e2249f91ff84541565d8ba841592a0a8a43fcb66))\\n- Added the `--build_target` flag to `singlejar`, which allows changing the `build.target` property when stamping is enabled. ([a1a5f33](https://github.com/bazelbuild/bazel/commit/a1a5f3341f2e3052886fee79cffb5c6fcc80c1bd))\\n- `darwin_x86_64` and `darwin_arm64` now have separate `java_tools` releases. ([3b475b3](https://github.com/bazelbuild/bazel/commit/3b475b322643bf026251daa19018ac425ff6e689))\\n- `java_stub_template.txt` is now exported from `@java_tools//jdk`. ([1465771](https://github.com/bazelbuild/bazel/commit/146577133acf1a384133b0fbc70e693bd0e5b45a))\\n- The `--experimental_local_java_optimization_configuration` flag now only accepts a single-label. ([6e3a421](https://github.com/bazelbuild/bazel/commit/6e3a421264b860e7e75dbfddde0d465b8a1ff55c))\\n- Proto toolchains are now used in `java_lite_proto_library`. ([8c38be3](https://github.com/bazelbuild/bazel/commit/8c38be3230ba97003276dfbf53c5ccb6a2b6af87))\\n- Proto toolchains are now used in `java_proto_library`. ([51970d2](https://github.com/bazelbuild/bazel/commit/51970d25d9920c358e716d094e1bcffafdb357c2))\\n- Optimized `java_common.merge` memory usage. ([8ffb972](https://github.com/bazelbuild/bazel/commit/8ffb9728e6a25033005eb527b9e2999693557331))\\n- Upgraded default `java_toolchain.java_runtime` to JDK 17. ([75e0f7d](https://github.com/bazelbuild/bazel/commit/75e0f7dfea71a7bd40b4bdb601f64217650e8d47))\\n- Replaced remote JDK 18 with JDK 20. ([19b2e2f](https://github.com/bazelbuild/bazel/commit/19b2e2f448bdd50c42d53c3b3d1c45a95eaadd44), [0e8e611](https://github.com/bazelbuild/bazel/commit/0e8e611aafec9ad9b948296d725bee8d48bddc24), [7ff98ba](https://github.com/bazelbuild/bazel/commit/7ff98ba28a21025fccdf82a3d148407be48fae40))\\n- Removed the `transitive_deps` and `transitive_runtime_deps` attributes from `JavaInfo`. ([72058be](https://github.com/bazelbuild/bazel/commit/72058be0628e84741232cb116a7199eb92638f84))\\n- Removed deprecated targets from `@java_tools//jdk`. ([844b5d2](https://github.com/bazelbuild/bazel/commit/844b5d2dbc3ff1dda43d78b81a00c6323e4e8115))\\n- Fixed proguard output map symlink when `proguard_specs` is a `select()`. ([c2761af](https://github.com/bazelbuild/bazel/commit/c2761af5045315a4e77954c71509ad84e938277b))\\n\\n### Objective-C\\n\\n- <VersionPill version=\\"6.3.0\\" /> Added the `implementation_deps` attribute to `objc_library`.\\n  ([ae7b9c5](https://github.com/bazelbuild/bazel/commit/ae7b9c5a32ce1ce0c102221265db641229870c54))\\n- <VersionPill version=\\"6.4.0\\" /> Added the `--incompatible_disable_objc_library_transition` flag, which removes\\n  `objc_libary`\'s custom transition.\\n  ([0f34e76](https://github.com/bazelbuild/bazel/commit/0f34e76f45a2d9a6407431ea3a371a9d62814527))\\n- Added the `target_should_alwayslink` attribute to the `objc` fragment. ([c878b59](https://github.com/bazelbuild/bazel/commit/c878b59eb73316293e08755314e3526a33869537), [3c0f394](https://github.com/bazelbuild/bazel/commit/3c0f39465c5c69f1e50c024ac68acaded0e0b604))\\n- Added the `--incompatible_disallow_sdk_frameworks_attributes` flag, which disallows the `sdk_frameworks` and `weak_sdk_frameworks` attributes in `objc_library` and `objc_import`. ([66121a7](https://github.com/bazelbuild/bazel/commit/66121a75d67b92990966fc94771a22b0b4a062e3))\\n- Added the `--incompatible_objc_alwayslink_by_default` flag, which changes the default of `objc.target_should_alwayslink` to `True`. ([a8b36c1](https://github.com/bazelbuild/bazel/commit/a8b36c1749f7b32365d2185266c60f1b0e9b75dd))\\n- Added the `--incompatible_objc_provider_remove_linking_info` flag, which removes linking information from `ObjcProvider`. ([3e170fb](https://github.com/bazelbuild/bazel/commit/3e170fbaed2bb28b3cf1cef10e51c5c3bb0f56ed))\\n- The `apple_common.new_executable_binary_provider` and `apple_common.new_dynamic_framework_provider` functions no longer require the `objc` argument. ([28f9056](https://github.com/bazelbuild/bazel/commit/28f905675c98c652badbcbc7510134aab08dc4fb))\\n- The `variables_extension` parameter on the `apple_common.link_multi_arch_binary` function can now be `None`. ([87bd420](https://github.com/bazelbuild/bazel/commit/87bd420a2a0ee863c073f903d2f7b2eccb5940d6))\\n- `objc_common` no longer sets linking information in `ObjcProvider`. ([0fa7933](https://github.com/bazelbuild/bazel/commit/0fa793364e6c88e76d2fa5d57aa01404a5190427))\\n- Linking no longer uses `ObjcProvider` information. ([426f225](https://github.com/bazelbuild/bazel/commit/426f2254669f62b7d332094a0af6d4dc6200ad51))\\n- Linking features, in addition to linkopts, are considered when determining the stripping type. ([3a31a6c](https://github.com/bazelbuild/bazel/commit/3a31a6c3f4c6f6fb0048337894e6671461a7763e))\\n- Tree artifacts in source attributes of `objc_library` can now have arbitrary extensions. ([280ae1a](https://github.com/bazelbuild/bazel/commit/280ae1a8bc01bc26c7ba85453921b3c2b7073ac0))\\n- Removed the `runtime_deps` attribute from `objc_library`. ([3ea60b7](https://github.com/bazelbuild/bazel/commit/3ea60b7cb45f6a90612b44d8c0d70a66184a3788))\\n- Removed the `objc_archive` action (`cpp_static_library` is used instead). ([e1cb203](https://github.com/bazelbuild/bazel/commit/e1cb203f6eeb376a5b8495de27272d4c952f9e19))\\n- Removed the `objc++-executable` action (`objc-executable` is used instead). ([1623f7e](https://github.com/bazelbuild/bazel/commit/1623f7eb7850b6e92010d5f76607c0cb019cb159), [6d0c210](https://github.com/bazelbuild/bazel/commit/6d0c21081b92da498f4b7eff9e5c921f32a37c09), [004c73c](https://github.com/bazelbuild/bazel/commit/004c73c4e5735dcea238e24a0e4e2acdf9eb28f0))\\n- Fixed the `includes` attribute of `objc_library` when `--experimental_sibling_repository_layout` is set. ([bbe453e](https://github.com/bazelbuild/bazel/commit/bbe453e38d5da8597e2cf9732d5bfe393334404b))\\n\\n### Proto\\n\\n- Continued progress on Starlarkifying Proto rules. ([starlarkification roadmap][starlarkification-roadmap])\\n- <VersionPill version=\\"6.3.0\\" /> Added the `output_files` attribute to `proto_lang_toolchain`.\\n  ([4d14d3f](https://github.com/bazelbuild/bazel/commit/4d14d3f0bb7e49a7ca60540707312982036e086c))\\n- Added the `--incompatible_enable_proto_toolchain_resolution` flag, which causes proto language rules to use toolchain resolution. ([d435c6d](https://github.com/bazelbuild/bazel/commit/d435c6dd6e977a5c3ea1bc726557a9321948a317))\\n- Removed the `proto_compiler` attribute from `proto_lang_toolchain`. ([f5fb2f6](https://github.com/bazelbuild/bazel/commit/f5fb2f6a5fc67a25181f8eb5c777da07b9cbb359))\\n- Fixed proto generation when using `--experimental_sibling_repository_layout`. ([6c6c196](https://github.com/bazelbuild/bazel/commit/6c6c196ceffe14c9cf29960ef4049469df73d991))\\n\\n### Python\\n\\n- Continued progress on Starlarkifying Python rules. ([starlarkification roadmap][starlarkification-roadmap])\\n- <VersionPill version=\\"6.1.0\\" /> Added host transition to the `lcov_merger` attribute of `py_test`.\\n  ([4a6d056](https://github.com/bazelbuild/bazel/commit/4a6d056a8d058ab98a01348fb0c046660ee99a71))\\n- <VersionPill version=\\"6.2.0\\" /> Fixed runfiles lookup when using a manifest file.\\n  ([91584dd](https://github.com/bazelbuild/bazel/commit/91584dd4f189f60b67d1984aeeaf2de8496ea824))\\n- Added the `--incompatible_python_disable_py2` flag, which causes `python_version=PY2`, `srcs_version=PY2` or `srcs_version=PY2ONLY` with `py_binary`, `py_test`, `py_library`, `py_runtime`, or `py_runtime_pair` to throw an error. ([d1bbf4b](https://github.com/bazelbuild/bazel/commit/d1bbf4b7698e019c11b7d1c483eb0b4959954060), [95a57ef](https://github.com/bazelbuild/bazel/commit/95a57efad3ada93ebd46b56a1c3cce8b6f4e07ee))\\n- Added the `--incompatible_python_disallow_native_rules` flag, which causes an error if a native Python rule is used without going through rule_python. ([2e558ed](https://github.com/bazelbuild/bazel/commit/2e558ed5dccdcc72622df52bf6d4dfe90ddc390c))\\n- Added the `build_python_zip` attribute to the `py` fragment. ([38b2789](https://github.com/bazelbuild/bazel/commit/38b278944f7f0131d4eb2e1863009b7aabc39e2d))\\n- Added the `default_python_version` attribute to the `py` fragment. ([c3b2be9](https://github.com/bazelbuild/bazel/commit/c3b2be967b9b03bbce75002968cf0c22905719d9))\\n- Added the `default_to_explicit_init_py` attribute to the `py` fragment. ([38b2789](https://github.com/bazelbuild/bazel/commit/38b278944f7f0131d4eb2e1863009b7aabc39e2d))\\n- Added the `use_toolchains` attribute to the `py` fragment. ([c3b2be9](https://github.com/bazelbuild/bazel/commit/c3b2be967b9b03bbce75002968cf0c22905719d9))\\n- Added the `bootstrap_template` attribute to `py_runtime`. ([0696ba3](https://github.com/bazelbuild/bazel/commit/0696ba32a789bbf3100f62fa2c1547fc74e36006))\\n- Removed the `py_transitions` module. ([e2c4d3c](https://github.com/bazelbuild/bazel/commit/e2c4d3c86b582e23af16a965ebf4bbbab60403b9))\\n\\n## Starlark and Build API\\n\\n[Starlark][starlark] is the configuration language used to configure your project.\\nIt is also the programming language used to define [rules][rules].\\nBazel also has a Build API which defines standard functions,\\nmodules,\\nand rules\\nthat can be used from Starlark.\\nHere are some notable changes to both:\\n\\n[rules]: https://bazel.build/versions/7.0.0/extending/rules\\n[starlark]: https://bazel.build/versions/7.0.0/rules/language\\n\\n- <VersionPill version=\\"6.1.0\\" /> Added the `--incompatible_use_host_features` flag, which causes the `--features` flag\\n  to only apply to the target configuration, while the `--host_features` flag only applies to the exec configuration.\\n  ([0ef9c7c](https://github.com/bazelbuild/bazel/commit/0ef9c7c2ad097b555f0dc25a5e65d5440a20d7df))\\n- <VersionPill version=\\"6.1.0\\" /> Added the `package_relative_label` function on the `native` module.\\n  ([b859571](https://github.com/bazelbuild/bazel/commit/b859571804f2095caaf018b172b59c90f185fd51))\\n- <VersionPill version=\\"6.1.0\\" /> The `map_each` callback in `template_dict.add_joined` can now return `None`.\\n  ([db68419](https://github.com/bazelbuild/bazel/commit/db684196afd3b1a0a0e7d883674324bd161ae8bf))\\n- <VersionPill version=\\"6.1.0\\" /> The `map_each` callback in `template_dict.add_joined` can now return a list of\\n  strings. ([8783459](https://github.com/bazelbuild/bazel/commit/87834594eff2a312b84832f382dc1f8844b1e8a3))\\n- <VersionPill version=\\"6.2.0\\" /> Added the `module_name` and `module_version` attributes on the `native` module.\\n  ([bcf309b](https://github.com/bazelbuild/bazel/commit/bcf309b88949fe1bbff1776d88fdaa5c3e1d2d37))\\n- <VersionPill version=\\"6.2.0\\" /> `json.decode` now accepts duplicate keys.\\n  ([8548e20](https://github.com/bazelbuild/bazel/commit/8548e202a6871a17f0d097e2cedc9ff8064ef962))\\n- <VersionPill version=\\"6.2.0\\" /> Multiple matching `select` branches are now allowed if they resolve to the same value.\\n  ([d43737f](https://github.com/bazelbuild/bazel/commit/d43737f95d28789bb2d9ef2d7f62320e9a840ab0))\\n- <VersionPill version=\\"6.4.0\\" /> Added the `--incompatible_merge_fixed_and_default_shell_env` flag, which merges rule\\n  supplied and shell provided environment variables.\\n  ([d1fdc53](https://github.com/bazelbuild/bazel/commit/d1fdc5303fd3cc22c5091aa4ce7df02eef09d922))\\n- <VersionPill version=\\"6.4.0\\" /> Optimized empty depsets.\\n  ([fa0ff49](https://github.com/bazelbuild/bazel/commit/fa0ff4996a7d3b8cff974e96a604651d6c6e9f9e))\\n- <VersionPill version=\\"6.4.0\\" /> Optimized single transitive depsets.\\n  ([216fce5](https://github.com/bazelbuild/bazel/commit/216fce58b81de2c597a78c16514006a4be4891f5))\\n- <VersionPill version=\\"6.4.0\\" /> Rule and aspect validation output groups are now merged.\\n  ([cd72583](https://github.com/bazelbuild/bazel/commit/cd725834eba3edb53b7a7dd9867363ef1fe00e57))\\n- <VersionPill version=\\"6.4.0\\" /> When the `repr` function is called on an exported rule the name of the rule is now\\n  included in the output.\\n  ([002490b](https://github.com/bazelbuild/bazel/commit/002490b9a2376f0b2ea4a37102c5e94fc50a65ba))\\n- Added the `abs()` function. ([5e37989](https://github.com/bazelbuild/bazel/commit/5e37989cc937cf58276dc46de98820adc8b27326))\\n- Added the `allow_closure` attribute to `template_dict.add_all`. ([4188edd](https://github.com/bazelbuild/bazel/commit/4188eddbfd12776b359b054c93294aa5013ec77f))\\n- Added the `compressed_output` attribute to `genquery`. ([7f639c6](https://github.com/bazelbuild/bazel/commit/7f639c657446715746680f8a33afeca3aa35d9dd))\\n- Added the `format_joined` callback to `template_dict.add_all`. ([4188edd](https://github.com/bazelbuild/bazel/commit/4188eddbfd12776b359b054c93294aa5013ec77f))\\n- Added the `initializer` parameter to the `rule` function, which allows specifying a function that computes default values for attributes. ([45bac19](https://github.com/bazelbuild/bazel/commit/45bac19b6435863a21731787938caa02cac8beb4))\\n- Added the `--experimental_enable_scl_dialect` flag, which allows loading `.scl` (Starlark Configuration Langauge) files. ([a0cd355](https://github.com/bazelbuild/bazel/commit/a0cd355347b57b17f28695a84af168f9fd200ba1))\\n- Added the `--experimental_rule_extension_api` flag, which enables the use of rule extension and subrules. ([8815980](https://github.com/bazelbuild/bazel/commit/8815980aa2acba6cc51ab76495668fda8f560b5d))\\n- Added the `--incompatible_no_package_distribs` flag, which disables the `distribs` attribute of `package`. ([e8184e0](https://github.com/bazelbuild/bazel/commit/e8184e0e8c87d5efe357c18e9e9e6b52efd0b3a9))\\n- Added the `starlark_doc_extract` rule, which is used by newer versions of Stardoc. ([fa65782](https://github.com/bazelbuild/bazel/commit/fa6578261dabd3973cb9db2c72c99a9075fe84f8))\\n- Changed the default value of `attrs` in `rule()` and `aspect()` to an empty dictionary. ([e8f5082](https://github.com/bazelbuild/bazel/commit/e8f5082a266ad71693aa436ef56280e6c457353b))\\n- `--deleted_packages` now accumulates multiple values. ([2a5d9c7](https://github.com/bazelbuild/bazel/commit/2a5d9c71d3b986c4d667336f51f46a837cba2f10))\\n- `attr` objects now use value equality rather than reference equality. ([31fd464](https://github.com/bazelbuild/bazel/commit/31fd464af77f084049386af02dbcc5189c745892))\\n- `json.decode` now takes an optional `default` positional parameter. If this parameter is specified and decoding fails, `json.decode` will return the `default` value instead of failing Starlark evaluation. ([71fb1e4](https://github.com/bazelbuild/bazel/commit/71fb1e4188b01e582a308cfe4bcbf1c730eded1b))\\n- `proto.encode_text()` now omits struct fields with `None` values. ([88346f1](https://github.com/bazelbuild/bazel/commit/88346f191104f76cc42f90234125980eeba88e4b))\\n- Besides for `implementation`, all arguments to the `rule` function now need to be named. ([cbd63ea](https://github.com/bazelbuild/bazel/commit/cbd63ea193545a2f96ef3ec26d375fd4f5c7daf6))\\n- The `location` of rules that explicitly specify `generator_name` and/or `generator_function` attributes is now the top-level call in the `BUILD` file. ([9800ffd](https://github.com/bazelbuild/bazel/commit/9800ffd1a471582fb42fd782e2e2eeb39dba6c9b))\\n- Transitions can now inspect attribute value. ([ceddfb1](https://github.com/bazelbuild/bazel/commit/ceddfb1ece1f8ed7ff81558fa1751e6526df031b))\\n- `_whitelist_function_transition` is now applied automatically. ([60f3319](https://github.com/bazelbuild/bazel/commit/60f3319ebca47080b7af823c8aba52b391a8baa6))\\n- Optimized calls to functions with `kwargs`. ([2fc7ab9](https://github.com/bazelbuild/bazel/commit/2fc7ab9a884499d6de08bf34a05e4ff00bc756c4))\\n- Optimized depsets in providers. ([cb5a033](https://github.com/bazelbuild/bazel/commit/cb5a033ce4cfd8dcb9628b343463a4ede4c666c7))\\n- Optimized provider memory layout. ([fc86f15](https://github.com/bazelbuild/bazel/commit/fc86f15a0b37cd36d03573c5f6a7cb347ecd2451))\\n- Optimized singleton tuples (e.g. `(single_value, )`). ([2cc9e13](https://github.com/bazelbuild/bazel/commit/2cc9e13516054368af69a1554f473db89a87f7b3))\\n- Optimized statement/expression heavy code. ([704027e](https://github.com/bazelbuild/bazel/commit/704027e3e7ea4249d39bd04490a065ba94a4f36e))\\n- Optimized string `find`/`index` calls when `end` isn\'t specified. ([70c821a](https://github.com/bazelbuild/bazel/commit/70c821ad1c2f8029643716cf738cf2aaca7a92a4))\\n- Optimized string `{l,r,}strip` calls. ([62ceeaf](https://github.com/bazelbuild/bazel/commit/62ceeaff6563c76cf67d615e4efedd84295e0999))\\n- Optimized string key dictionary lookups. ([6087258](https://github.com/bazelbuild/bazel/commit/60872586296e898e7734f6d2628eb3851952e7e5))\\n- Optimized tuple and list `in` checks. ([d027d48](https://github.com/bazelbuild/bazel/commit/d027d485c97ed15e3e8852b0701337c0b9d1a8dc))\\n- Optimized type checks. ([2e4694d](https://github.com/bazelbuild/bazel/commit/2e4694dd6026595a113601caef83ffeab4fc7a4f))\\n- Optimized `OutputGroupInfo`. ([655849b](https://github.com/bazelbuild/bazel/commit/655849b472f8e77f00ec49d0e125983877f619fa))\\n- Removed the `default_provider` attribute from the `ctx` module. ([2ce1a1b](https://github.com/bazelbuild/bazel/commit/2ce1a1b335a09a1e70260ee01af4a6f29cb1c61b))\\n- Removed the `host_configuration` attribute from the `ctx` module. ([51e1da9](https://github.com/bazelbuild/bazel/commit/51e1da9a2201f92e6b60c666e474bce284c76d48))\\n- Removed the `host_fragments` attribute from the `ctx` module. ([0ca7857](https://github.com/bazelbuild/bazel/commit/0ca78579ffc00ddc28517ad817bf29153ccd926d))\\n- Removed the `new_file` function from the `ctx` module. ([ffe595c](https://github.com/bazelbuild/bazel/commit/ffe595cc8b3fd15d9e5339da5528f619425696f2))\\n- Removed the `exec_tools` attribute from `genrule`. ([5ce12ee](https://github.com/bazelbuild/bazel/commit/5ce12ee3363c62218f096d16bd2424a86ebdae19))\\n- Removed the `cmd_helper` module. ([b3749b3](https://github.com/bazelbuild/bazel/commit/b3749b3456053cb521d5bb519e08e810163967fb))\\n- Removed support for `_whitelist_function_transition`. ([4064d78](https://github.com/bazelbuild/bazel/commit/4064d7827a3382a4fb5d7af07fb0969af9b5e12e))\\n- Fixed `ctx.expand_location` handling of binary target inputs. ([4148241](https://github.com/bazelbuild/bazel/commit/414824173363e579d34afc1aa16bc97a220743dc))\\n- Fixed `genrule` to use the execution platform to determine which `cmd*` to run. ([c64fa6d](https://github.com/bazelbuild/bazel/commit/c64fa6d54192448b7f083b813765eb1fc6c382e3))\\n- Fixed encoding of positive infinity in `proto.encode_text`. ([98e3752](https://github.com/bazelbuild/bazel/commit/98e375207f8945fd7e523bed65f36ce60ce69e6d))\\n\\n### Aspects\\n\\n[Aspects][aspects] allow augmenting build dependency graphs with additional information and actions.\\n\\n[aspects]: https://bazel.build/versions/7.0.0/extending/aspects\\n\\n- Console output now includes target status, even if non-validation aspects are requested. ([944b154](https://github.com/bazelbuild/bazel/commit/944b154135444813a6eed464b19b4cc6d71dde73))\\n- Only the visibility of an aspect\'s implicit dependencies are checked now. ([bc1df91](https://github.com/bazelbuild/bazel/commit/bc1df918074883660b74c40e0ee43db9aa0ced87))\\n- Fixed resolving aspect attributes with the same name as an underlying target attribute. ([93ad589](https://github.com/bazelbuild/bazel/commit/93ad5890883b7591eef23ae3c3334a245c2aa6ef))\\n\\n## Platforms and toolchains API\\n\\nIn Bazel 7.0 the C++, Android, and Apple rules completed their migration to support [building with Platforms][building-with-platforms].\\n\\n[building-with-platforms]: https://bazel.build/versions/7.0.0/concepts/platforms\\n\\nHere are some of the platforms and toolchains related changes which weren\'t tied to any of those migrations:\\n\\n- <VersionPill version=\\"6.1.0\\" /> `--platforms` is no longer cleared in transitions when no change is made to `--cpu`.\\n  ([5b4de12](https://github.com/bazelbuild/bazel/commit/5b4de12b37cb4ba921b6bdfe810bbb47921ab3a6))\\n- Added support for platform to Starlark flags platform mappings. ([8a7f5e2](https://github.com/bazelbuild/bazel/commit/8a7f5e2f488609085f62f933cdfbf87e97cbf0fd))\\n- Added the `--experimental_exec_config` flag, which allows setting a custom transition to be used for `cfg = \\"exec\\"`. ([23de211](https://github.com/bazelbuild/bazel/commit/23de2117d33325ee02043c2da4d1d9a578ae2b04), [f847e3f](https://github.com/bazelbuild/bazel/commit/f847e3f9b3c99a459f88383971d326019f30f9da))\\n- Added the `--incompatible_auto_exec_groups` flag, which automatically creates exec groups for each toolchain used by a rule. ([design doc](https://docs.google.com/document/d/1-rbP_hmKs9D639YWw5F_JyxPxL2bi6dSmmvj_WXak9M), [6194956](https://github.com/bazelbuild/bazel/commit/6194956b552413f8f7ccff8491714d7dcf8af6a3))\\n- Added the `--incompatible_check_visibility_for_toolchains` flag, which applies visibility checking to toolchain implementations. ([eecd04f](https://github.com/bazelbuild/bazel/commit/eecd04f25b8c3a4e34647744317b2e0bf6629a0c))\\n- Added the `--use_target_platform_for_tests` flag, which uses the target platform for running tests. ([d181353](https://github.com/bazelbuild/bazel/commit/d181353c17f9e6127c9aa8011ebd8dd17cf01cd6))\\n- `--extra_toolchains` precedence is now last-wins, instead of first-wins. ([a4576c1](https://github.com/bazelbuild/bazel/commit/a4576c1760a3c15890fe2f8658e96871d4557aa6))\\n- Attributes on `platform` are now non-configurable. ([b8faa69](https://github.com/bazelbuild/bazel/commit/b8faa69f9dc94e620d93525da00e5a606558caa9))\\n- The `platform` rule is now non-configurable. ([87fb462](https://github.com/bazelbuild/bazel/commit/87fb4620c6edd0e525d4621ecdca4bd47d69484c))\\n- Made `target_compatible_with` work better on `alias()` targets. ([1d2e9c8](https://github.com/bazelbuild/bazel/commit/1d2e9c87f50051aa4031a432a53e076d382f63be))\\n- Root repository mappings now work in the `platform_mappings` file. ([c0fc433](https://github.com/bazelbuild/bazel/commit/c0fc433ba86e266dc8b80b662733af05eca96cff))\\n- Target incompatibility is now checked before toolchain resolution. ([8482c7c](https://github.com/bazelbuild/bazel/commit/8482c7cf494686eb7498cec6ee58dad03b07ef0d))\\n- Subsequent settings of `--extra_execution_platforms` now override previous settings, instead of adding them to a list. ([c602cec](https://github.com/bazelbuild/bazel/commit/c602cec7887470db3e8ed69600f5bd2f38e160d5))\\n- Removed the `copy_from_rule` attribute from `exec_group`. ([f48412f](https://github.com/bazelbuild/bazel/commit/f48412f04e0af9b0c989da7199668975281a0a6c))\\n- Removed the `host` transition. ([c18e6d5](https://github.com/bazelbuild/bazel/commit/c18e6d54659ef34e7ee5a1ce05c18a97375d6661))\\n\\n## Misc\\n\\nThere were a handful of changes that I couldn\'t find a nice home for in the sections above,\\nbut I still felt were important or interesting enough to call attention to:\\n\\n- <VersionPill version=\\"6.2.0\\" /> `@foo` labels can now be used on the command line as the top-level target.\\n  ([24f6fe8](https://github.com/bazelbuild/bazel/commit/24f6fe802ebb68da71e1e071c9e84c89b4aa0772))\\n- <VersionPill version=\\"6.3.0\\" /> Options specified on the pseudo-command `common` in `.rc` files are now ignored by\\n  commands that do not support them as long as they are valid options for any Bazel command.\\n  ([44d3953](https://github.com/bazelbuild/bazel/commit/44d395338ab9a27596b0796c14076641f4cb2093))\\n- <VersionPill version=\\"6.3.0\\" /> Added the `always` pseudo-command which has the semantics of pre-6.3.0 `common` in\\n  `.rc` files. ([44d3953](https://github.com/bazelbuild/bazel/commit/44d395338ab9a27596b0796c14076641f4cb2093))\\n- <VersionPill version=\\"6.3.0\\" /> Credential helpers now apply to repository fetching as well.\\n  ([9731e69](https://github.com/bazelbuild/bazel/commit/9731e6906cba63a1eba0c1fb335290d76efabf16))\\n- <VersionPill version=\\"6.3.0\\" /> Wall-time is now used for credential helper invalidation.\\n  ([5f77aba](https://github.com/bazelbuild/bazel/commit/5f77abaca0457d83a78e89ba1549196ce2f4d798))\\n- Added the `--experimental_include_default_values` flag, which includes default values for Starlark flags in the `canonicalize-flags` command. ([33e9bf1](https://github.com/bazelbuild/bazel/commit/33e9bf119550950ebcf0ffb2c7b372c17748dd7d))\\n- `--ui_event_filters` now accumulates multiple values. ([3d1aeb5](https://github.com/bazelbuild/bazel/commit/3d1aeb569599ae5a671396bcf9c22824fe62b1bc))\\n- JVM options in the `JAVA_TOOL_OPTIONS` and `JDK_JAVA_OPTIONS` environment variables no loner propagate to the Bazel server; use `--host_jvm_args` instead. ([22e3ba5](https://github.com/bazelbuild/bazel/commit/22e3ba59692f74a85c6d9689e656cbed58642696))\\n- The repo mapping manifest is now generated when possible, not only when Bzlmod is enabled. ([cb55897](https://github.com/bazelbuild/bazel/commit/cb558978820b1fb9b579d8e9578cbb9ca590fe60))\\n\\n## Summary\\n\\nAs you can see,\\nBazel 7.0 was another _massive_ release (20% larger than last year!).\\nThankfully,\\nthrough the [rolling releases][rolling-releases] process,\\npeople were able to test,\\nor even actively depend on,\\nthese changes well before the first 7.0 release candidate was cut.\\n\\n[rolling-releases]: https://bazel.build/versions/7.0.0/release#rolling-releases\\n\\nWork on Bazel 8.0 is well underway,\\nand I look forward to summarizing its changes next year.\\nUntil then, \ud83d\udc4b."},{"id":"image-streaming","metadata":{"permalink":"/blog/image-streaming","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/container-image-streaming.md","source":"@site/blog/container-image-streaming.md","title":"Lazily Pulling Container Images with Podman and SOCI Snapshotter","description":"We\u2019re excited to share how we\'re making \\"podman pull\\" ten times faster by lazily fetching container images using the SOCI Snapshotter.","date":"2023-11-15T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"engineering","permalink":"/blog/tags/engineering"},{"inline":true,"label":"performance","permalink":"/blog/tags/performance"}],"readingTime":9.15,"hasTruncateMarker":true,"authors":[{"name":"Iain Macdonald","title":"Engineer @ BuildBuddy","url":"https://www.linkedin.com/in/macdonaldi/","imageURL":"https://avatars.githubusercontent.com/u/455246?v=4","key":"iain","page":null}],"frontMatter":{"slug":"image-streaming","title":"Lazily Pulling Container Images with Podman and SOCI Snapshotter","description":"We\u2019re excited to share how we\'re making \\"podman pull\\" ten times faster by lazily fetching container images using the SOCI Snapshotter.","authors":"iain","date":"2023-11-15:12:00:00","image":"/img/blog/container-image-streaming.webp","tags":["product","engineering","performance"]},"unlisted":false,"prevItem":{"title":"What\'s New in Bazel 7.0","permalink":"/blog/whats-new-in-bazel-7-0"},"nextItem":{"title":"Bazelcon 2023 Recap","permalink":"/blog/bazelcon-2023"}},"content":"We\u2019re excited to announce a podman performance improvement that makes pulling container images about ten times faster on BuildBuddy\u2019s hosted execution service, lowering customer build and test times and improving our ability to autoscale the BuildBuddy executor pool. Read on for the nitty-gritty details.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Containerization\\n\\nAt BuildBuddy, we use containers to isolate actions and support arbitrary code execution on our hosted remote execution service. In production we use Podman as our default container runtime, but we support Docker and Firecracker as well. One significant challenge we encounter with our container setup is that pulling a container image after cold start can be quite slow. Our executor images are about one gigabyte and it typically takes about 30 seconds to pull and extract them in our GCP production environment. Some client-provided images tip the scales at over 10GB and can take minutes to pull and extract.\\n\\nNot only does significant image pull latency directly slow down customer builds and tests, it also limits our ability to autoscale the executor pool and respond to heavy load. When new BuildBuddy executors start up, they pull container images as needed. This means the first action using an image that runs on an executor incurs the latency of pulling that image and blocks other queued actions using the same image. So the faster we can pull container images the faster we can spin up new executors and start running customer-submitted actions. We could address this problem by always running more executors, or preemptively scaling the executor pool during peak hours, but at best these tricks only partially solve this problem and have other drawbacks.\\n\\n[Lazy image distribution](https://medium.com/nttlabs/startup-containers-in-lightning-speed-with-lazy-image-distribution-on-containerd-243d94522361) provides a more promising solution. The premise is that most parts of a container image are unnecessary for most container runs, so instead of eagerly fetching the entire image upfront, pieces of the image\u2019s layers can be retrieved by the container runtime as needed. The [stargz-snapshotter](https://github.com/containerd/stargz-snapshotter) implements a lazy image fetcher based on the eStargz custom image format, and the [soci-snapshotter](https://github.com/awslabs/soci-snapshotter) provides one based on the OCI specification for those who can\u2019t or don\u2019t want to convert images to a new format to support lazy distribution.\\n\\n## SOCI Snapshotter\\n\\nThe SOCI Snapshotter acts as a local container layer store that containerd can use to retrieve image layers in place of the remote registry. Lazily fetched images must be indexed, which involves creating a zip table of contents (ZToC) indexing the contents of each container image layer, and bundling these ZToCs in a json file called the \\"SOCI Index\\" that associates ZToCs with the layers they index. Given an image, the `soci create` tool takes care of creating all of these artifacts. Once these ZToCs and the SOCI Index are created, most snapshotter users will push these artifacts to the remote container registry where they\u2019re associated with the container image using either the referrers API or a fallback mechanism involving tags. Then, other SOCI Snapshotter instances can retrieve the SOCI Index and ZToCs and use those to determine where container fileystem locations exist in each layer\'s targz file and fetch only parts of the layer files as needed.\\n\\n![](/img/blog/soci-snapshotter.webp)\\n_A typical soci-snapshotter setup. SOCI artifacts are stored in and retrieved from the container registry and used to lazily pull parts of the image as needed._\\n\\n## BuildBuddy + SOCI Snapshotter\\n\\nWe have a couple of caveats that prevent us from using the SOCI Snapshotter with BuildBuddy executors out-of-the-box. First, we\'d like to continue to use Podman as our default container runtime, and second, we want to support lazy image distribution for container images in read-only registries -- requiring our customers to either give us write access to their container registries or add an additional image indexing step to their image deployments is a nonstarter for us.\\n\\nWe solved the first problem by porting the Podman support in the stargz-snapshotter to the soci-snapshotter. This involved creating a new binary in the SOCI Snapshotter, the `soci-store`, and hooking that up to run the [store/fs.go](https://github.com/containerd/stargz-snapshotter/blob/main/store/fs.go) filesystem implementation.\\n\\nThe second problem posed a little bit more of a challenge. We needed a different mechanism for storing the SOCI Index, ZToCs, and the association between a container image and its SOCI Index. Fortunately for us, the SOCI artifacts (Index and ZToCs) are content-addressable and we know how to store [content-addressable blobs](https://bazel.build/remote/caching)! The final piece, the association between the image and its SOCI Index, isn\u2019t content-addressable, it\u2019s just a string-to-string mapping. But the BuildBuddy cache also supports storing non-content-addressable contents keyed by a hash. So we store the image-to-index mapping by salting and hashing the image identifier, to support versioning, and adding a cache entry under that key with a value containing the digest of the SOCI Index, which is retrievable from the content-addressable store.\\n\\nTo support all of these modifications, we added a bit of logic to the snapshotter that attempts to retrieve artifacts from the local filesystem before the remote registry and supports reading the image-to-index mapping from the local filesystem under a special directory, again keyed by the image identifier. Finally, we set up the app and executor to look for all of these artifacts in the cache, generate them if they\u2019re not present, and store them on the local filesystem so the snapshotter can do its thing.\\n\\nThe modified soci-snapshotter is available at [github.com/buildbuddy-io/soci-snapshotter](https://github.com/buildbuddy-io/soci-snapshotter).\\n\\n![](/img/blog/soci-snapshotter-buildbuddy.webp)\\n_The BuildBuddy + soci-snapshotter setup. SOCI artifacts are generated on-demand in the App, stored in the cache, and retrieved by the Executor as needed._\\n\\n## Authorization\\n\\nMany of our customer\u2019s container images are password protected in the container registry. We share user-provided registry credentials between the executors and the soci-snapshotter so the snapshotter can fetch registry artifacts as needed, but these credentials expire after a short time period. The setup described here doesn\u2019t permit any unauthorized access to container images or their derived artifacts. The SOCI artifacts are only generated and retrieved for authorized image pull operations, just like standard `podman pull` requests.\\n\\n## Cache Eviction\\n\\nWe continuously evict the oldest unused artifacts from the BuildBuddy caches to make room for fresh data, and SOCI artifacts are no exception to this. Fortunately, the average last-access-time (including reads) of evicted items for most customers is old enough that only artifacts for rarely pulled container images are affected. Container images used regularly in remote execution or CI only require re-indexing except after being updated in the container registry.\\n\\n## Bugs!\\n\\nAfter initially rolling out lazy image distribution to our executors, we saw intermittent build and test failures due to `Input/output errors` running binaries inside of containers. We tracked this down to [a bug](https://github.com/containerd/containerd/issues/6377) in the containerd docker authorization library that caused it to re-use expired authentication tokens a bit too eagerly. Fortunately, there was a pretty straightforward [workaround](https://github.com/buildbuddy-io/soci-snapshotter/pull/2) while we wait for an [upstream fix](https://github.com/containerd/containerd/pull/8735/files).\\n\\nWe also observed occasional panics in the soci-store running in our development and production setups. To gather more data, we ran a version compiled with the go race detector in our development environment for a few weeks and tracked down two sources of these panics. First, we observed unprotected multithreaded access to data cached in in-memory inodes which was easily fixed by protecting those accesses with a mutex, a change that we [pushed upstream](https://github.com/awslabs/soci-snapshotter/pull/833). We noticed this issue before the upstream maintainers because we concurrently pull two container images on executor startup, sometimes within less than a millisecond, a behavior that exacerbates latent multithreading bugs like this. And second, both the soci-store and the SOCI Snapshotter were affected by a bug in the go-fuse library that caused them to return incorrect values for some `Lseek` calls. This lead to out-of-bounds reads of soci-store in-memory files, and panics. This was easily fixed by upgrading the soci-store\'s go-fuse dependency past [github.com/hanwen/go-fuse/pull/488](https://github.com/hanwen/go-fuse/pull/488) which fixed the bug. Interestingly, this bug [manifested slightly differently](https://github.com/awslabs/soci-snapshotter/issues/829) in the SOCI Snapshotter, but thankfully the same solution addressed both symptoms. Both of these bugs occurred pretty infrequently and were difficult to reproduce, so we were thankful for the additional information from the go race detector.\\n\\nFinally, we encountered issues caused by private container registry credentials expiring mid-run. We were able to fix these problems by hooking up the background layer fetcher in the SOCI Snapshotter with the newly introduced soci-store binary, reducing the likelihood that a container layer part will be requested after the supplied credentials have expired.\\n\\n## Performance\\n\\nWe\'ve been using the lazy image distribution mechanism described here in our development environment for a few months and have observed an almost tenfold decrease in image pull latency after cold start, from about 30 seconds to about 4 seconds for our executor images in the common case where the SOCI artifacts are available in the cache. In the rare case where the SOCI artifacts are unavailable, container image setup is about 10% slower due to the need to pull the image, index it, and fetch the SOCI artifacts from the executor. After testing this setup in dev, we rolled it out to all BuildBuddy cloud customers in two phases. Earlier this summer we enabled lazy image distribution for all publicly pullable container images and this month we enabled it for images stored in private container image registries. We\'ve observed the same almost tenfold decrease in image pull latency for customer images with no action required by our customers.\\n\\nBecause lazy image distribution defers layer fetching from pull-time to run-time, it\'s expected that some container run operations are slightly slower -- specifically, when part of a layer is needed but not available locally, it must be fetched from the remote registry at run-time. Fortunately, our container operation throughput is high enough that this performance penalty isn\'t noticeable in our environment.\\n\\nWe\u2019re excited about the promise of lazily fetching remote resources in more circumstances and hope to build on what we\'ve learned from this project to continue to improve the BuildBuddy remote-execution platform.\\n\\nIf you want to learn more about BuildBuddy\u2019s remote execution service or any of the other features we offer, or give them a try, check out our [documentation](https://www.buildbuddy.io/docs/introduction/). And if this sort of engineering challenge sounds interesting, [we\u2019re hiring](https://www.buildbuddy.io/careers/)!"},{"id":"bazelcon-2023","metadata":{"permalink":"/blog/bazelcon-2023","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/bazelcon-2023-recap.mdx","source":"@site/blog/bazelcon-2023-recap.mdx","title":"Bazelcon 2023 Recap","description":"Another year, another Bazelcon! This year\'s edition was held in Munich, Germany, and featured two days of talks by Bazel maintainers, contributers, and users. Among the Bazel users represented as this year\'s conference were: Booking.com, RabbitMQ, Spotify, Stripe, Uber, and more.","date":"2023-11-01T12:00:00.000Z","tags":[{"inline":true,"label":"bazelcon","permalink":"/blog/tags/bazelcon"},{"inline":true,"label":"company","permalink":"/blog/tags/company"}],"readingTime":2.11,"hasTruncateMarker":true,"authors":[{"name":"Iain Macdonald","title":"Engineer @ BuildBuddy","url":"https://www.linkedin.com/in/macdonaldi/","imageURL":"https://avatars.githubusercontent.com/u/455246?v=4","key":"iain","page":null}],"frontMatter":{"slug":"bazelcon-2023","title":"Bazelcon 2023 Recap","authors":"iain","date":"2023-11-01T12:00:00.000Z","image":"/img/blog/bazelcon2023.png","tags":["bazelcon","company"]},"unlisted":false,"prevItem":{"title":"Lazily Pulling Container Images with Podman and SOCI Snapshotter","permalink":"/blog/image-streaming"},"nextItem":{"title":"BuildBuddy Named to Inaugural Redpoint InfraRed 100","permalink":"/blog/redpoint-infrared-100"}},"content":"Another year, another Bazelcon! This year\'s edition was held in Munich, Germany, and featured two days of talks by Bazel maintainers, contributers, and users. Among the Bazel users represented as this year\'s conference were: [Booking.com](https://www.youtube.com/watch?v=FFtZAKAm0qA&list=PLxNYxgaZ8Rsefrwb_ySGRi_bvQejpO_Tj&index=20), [RabbitMQ](https://www.youtube.com/watch?v=kax1Su_WSu4&list=PLxNYxgaZ8Rsefrwb_ySGRi_bvQejpO_Tj&index=31&pp=iAQB), [Spotify](https://www.youtube.com/watch?v=QYAbmE_1fSo&list=PLxNYxgaZ8Rsefrwb_ySGRi_bvQejpO_Tj&index=33&pp=iAQB), [Stripe](https://www.youtube.com/watch?v=JjZ0A1YkKsU&list=PLxNYxgaZ8Rsefrwb_ySGRi_bvQejpO_Tj&index=10&pp=iAQB), [Uber](https://www.youtube.com/watch?v=QLbkMdUOI48&list=PLxNYxgaZ8Rsefrwb_ySGRi_bvQejpO_Tj&index=13&pp=iAQB), and more.\\n\\nHere are some of the highlights:\\n\\n- [Jim](https://www.linkedin.com/in/jim-hollenbach-5a49659) talked about improvements we\'ve made to the trends page to help users [find and fix strange builds](https://www.youtube.com/watch?v=37C5zvQHnZI&list=PLxNYxgaZ8Rsefrwb_ySGRi_bvQejpO_Tj&index=8&pp=iAQB).\\n- [Maggie](https://www.linkedin.com/in/maggie-lou-4a3bb110a) explained how we\'re [using user fault file descriptors (UFFD) and FUSE to clone micro-VMs over the network](https://www.youtube.com/watch?v=YycEXBlv7ZA&list=PLxNYxgaZ8Rsefrwb_ySGRi_bvQejpO_Tj&index=9&pp=iAQB), keeping CI runner Bazel analysis caches hot, and speeding up workflows by up to 8x.\\n- [Son](https://www.linkedin.com/in/luongngocson) dove deep on [supporting multi-platform builds in a monorepo](https://www.youtube.com/watch?v=XimUovAh46k&list=PLxNYxgaZ8Rsefrwb_ySGRi_bvQejpO_Tj&index=4&pp=iAQB).\\n- [Brentley](https://www.linkedin.com/in/brentleyjones) co-lead a Birds of a Feather session with Lyft\'s Keith Smiley focused on Bazel-on-iOS.\\n- We co-hosted a well-attended happy hour together with Google Cloud open to all conference attendees.\\n- We had a great time meeting a bunch of our amazing customers, and other folks passionate about Bazel.\\n\\nMore details below!\\n\\n\x3c!-- truncate --\x3e\\n\\n## Our talks\\n\\n### Finding and Fixing Strange Builds with BuildBuddy\\n\\nBy Jim Hollenbach\\n\\n[![](../static/img/blog/bazelcon-2023-buildbuddy.webp)](https://www.youtube.com/watch?v=37C5zvQHnZI&list=PLxNYxgaZ8Rsefrwb_ySGRi_bvQejpO_Tj&index=8&pp=iAQB)\\n\\n### Reusing Bazel\'s Analysis Cache by Cloning Micro-VMs\\n\\nBy Maggie Lou\\n\\n[![](../static/img/blog/bazelcon-2023-uffd.webp)](https://www.youtube.com/watch?v=YycEXBlv7ZA&list=PLxNYxgaZ8Rsefrwb_ySGRi_bvQejpO_Tj&index=9&pp=iAQB)\\n\\n### Multi-Platforms Build with Remote Build Execution\\n\\nBy Son Luong Ngoc\\n\\n[![](../static/img/blog/bazelcon-2023-multiplatform.webp)](https://www.youtube.com/watch?v=XimUovAh46k&list=PLxNYxgaZ8Rsefrwb_ySGRi_bvQejpO_Tj&index=4&pp=iAQB)\\n\\n## BuildBuddy shout-outs\\n\\n### Planting Bazel in Barren Soil: A Perl Story\\n\\nBy Manuel Naranjo\\n\\n[![](../static/img/blog/bazelcon-2023-bookingcom.webp)](https://www.youtube.com/watch?v=FFtZAKAm0qA&list=PLxNYxgaZ8Rsefrwb_ySGRi_bvQejpO_Tj&index=20)\\n\\n### RabbitMQ and the Story of rules_erlang\\n\\nBy Rin Kuryloski\\n\\n[![](../static/img/blog/bazelcon-2023-rabbitmq.webp)](https://www.youtube.com/watch?v=kax1Su_WSu4&list=PLxNYxgaZ8Rsefrwb_ySGRi_bvQejpO_Tj&index=31&pp=iAQB)\\n\\nLooking forward to seeing everyone again next year!"},{"id":"redpoint-infrared-100","metadata":{"permalink":"/blog/redpoint-infrared-100","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/redpoint-infrared-100.md","source":"@site/blog/redpoint-infrared-100.md","title":"BuildBuddy Named to Inaugural Redpoint InfraRed 100","description":"New York City \u2013 July 18, 2023 \u2013 BuildBuddy, which provides an enterprise software for the Bazel ecosystem, announces its inclusion in the first edition of the Redpoint InfraRed 100, a comprehensive list of the next 100 promising private companies in Cloud Infrastructure. This curated selection of companies represents the next generation of leaders in the industry, poised to make a significant impact in the cloud infrastructure market.","date":"2023-07-18T12:00:00.000Z","tags":[{"inline":true,"label":"company","permalink":"/blog/tags/company"}],"readingTime":1.67,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"redpoint-infrared-100","title":"BuildBuddy Named to Inaugural Redpoint InfraRed 100","authors":"siggi","date":"2023-07-18:12:00:00","image":"/img/redpoint.png","tags":["company"]},"unlisted":false,"prevItem":{"title":"Bazelcon 2023 Recap","permalink":"/blog/bazelcon-2023"},"nextItem":{"title":"PostgreSQL Support for BuildBuddy","permalink":"/blog/postgres-support"}},"content":"**New York City \u2013 July 18, 2023** \u2013 BuildBuddy, which provides an enterprise software for the Bazel ecosystem, announces its inclusion in the first edition of the Redpoint InfraRed 100, a comprehensive list of the next 100 promising private companies in Cloud Infrastructure. This curated selection of companies represents the next generation of leaders in the industry, poised to make a significant impact in the cloud infrastructure market.\\n\\nRedpoint Ventures is a leading venture capital firm with a diverse portfolio of successful companies including Twilio, Looker, Nextdoor, Ramp, Stripe, Nubank, HashiCorp, Snowflake, Netflix, Hims, and more. In celebration of this accolade, BuildBuddy CEO Siggi Simonarson is joining Redpoint at Nasdaq alongside other InfraRed 100 company leaders to discuss the future of cloud infrastructure.\\n\\n![](/img/blog/redpoint.jpg)\\n\\n\x3c!-- truncate --\x3e\\n\\n\u201cIt\u2019s an honor to be included in the first ever InfraRed 100 alongside such an impressive cohort of cloud infrastructure companies. Our thanks to Redpoint for highlighting these innovators and congratulations to all companies included on the list!\u201d said Siggi Simonarson.\\n\\nAll companies included on the first annual InfraRed 100 are included [here](https://www.redpoint.com/infrared/100/).\\n\\n#####\\n\\n**About BuildBuddy:** BuildBuddy provides an open-core suite of enterprise features for Bazel, including a Remote Build Execution service, a shared build artifact cache, and a build & test result UI. It\'s available as a fully-managed cloud service or as an easy to deploy on-prem solution. BuildBuddy is based in San Francisco, backed by Y Combinator, and founded by two ex-Googlers deeply passionate about making developers more productive. For more information visit: https://buildbuddy.io/\\n\\n**About Redpoint Ventures:** Redpoint has partnered with visionary founders to create new markets and redefine existing ones since 1999. We invest in startups across the seed, early and growth phases, and we\u2019re proud to have backed over 578 companies\u2014including Snowflake, Looker, Kustomer, Twilio, 2U, DraftKings, Duo Security, HashiCorp, Stripe, Guild, HomeAway, Heroku, Netflix, and Sonos\u2014with 181 IPOs and M+A exits. Redpoint manages $7.2 billion across multiple funds. For more information visit: https://www.redpoint.com/"},{"id":"postgres-support","metadata":{"permalink":"/blog/postgres-support","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/postgres-support.md","source":"@site/blog/postgres-support.md","title":"PostgreSQL Support for BuildBuddy","description":"We\'re happy to announce PostgreSQL support for BuildBuddy.","date":"2023-06-21T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"}],"readingTime":1.07,"hasTruncateMarker":true,"authors":[{"name":"Zoey Greer","title":"Engineer @ BuildBuddy","url":"https://www.github.com/tempoz","imageURL":"https://avatars.githubusercontent.com/u/735684?v=4","key":"zoey","page":null}],"frontMatter":{"slug":"postgres-support","title":"PostgreSQL Support for BuildBuddy","description":"We\'re happy to announce PostgreSQL support for BuildBuddy.","authors":"zoey","date":"2023-06-21:12:00:00","image":"/img/blog/postgres-support.png","tags":["product"]},"unlisted":false,"prevItem":{"title":"BuildBuddy Named to Inaugural Redpoint InfraRed 100","permalink":"/blog/redpoint-infrared-100"},"nextItem":{"title":"Providing Control Over Cache Encryption","permalink":"/blog/customer-managed-encryption-keys"}},"content":"By popular demand, we are introducing support for a PostgreSQL database backend for BuildBuddy! You can now use PostgreSQL as a drop-in replacement for MySQL or SQLite just by specifying a PostgreSQL endpoint to your BuildBuddy instance.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Try it out!\\n\\n```bash\\n\\n# After following steps appropriate to your OS/distribution to install PostgreSQL:\\n\\n# Create a PostgreSQL user corresponding to the current user if one does not already exist\\nsudo su postgres -c \\"createuser $USER --createdb --pwprompt\\"\\n\\n# Create a PostgreSQL database called \\"buildbuddy_test\\"\\ncreatedb buildbuddy_test\\n\\n# Replace \\"$PGPASSWORD\\" with the PostgreSQL password you created for your user\\nbb run //enterprise/server -- --database.data_source=\\"postgresql://$USER:$PGPASSWORD@localhost/buildbuddy_test?sslmode=disable\\"\\n```\\n\\nThe PostgreSQL connection may also be specified via `database.advanced_data_source`, just like our other database backends, and as always these flags can instead be specified in your BuildBuddy YAML config as opposed to on the command line. Remember that when you switch out database backends, you\'re starting with a fresh BuildBuddy instance, so you\'ll need to create users and change your API keys before you can build anything against it if you\'re using auth.\\n\\nQuestions? Comments? Other things you\'d like to see in BuildBuddy? You can find us on [Slack](https://community.buildbuddy.io/) or contact us at [hello@buildbuddy.io](mailto:hello@buildbuddy.io); we\'d love to hear from you!"},{"id":"customer-managed-encryption-keys","metadata":{"permalink":"/blog/customer-managed-encryption-keys","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/customer-managed-encryption-keys.md","source":"@site/blog/customer-managed-encryption-keys.md","title":"Providing Control Over Cache Encryption","description":"We are announcing a feature that allows customers to control how their data is encrypted in in our cache.","date":"2023-06-05T11:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"security","permalink":"/blog/tags/security"},{"inline":true,"label":"encryption","permalink":"/blog/tags/encryption"},{"inline":true,"label":"enterprise","permalink":"/blog/tags/enterprise"}],"readingTime":1.89,"hasTruncateMarker":true,"authors":[{"name":"Vadim Berezniker","title":"Engineer @ BuildBuddy","url":"https://www.linkedin.com/in/vadimberezniker/","imageURL":"https://avatars.githubusercontent.com/u/1335358?v=4","key":"vadim","page":null}],"frontMatter":{"slug":"customer-managed-encryption-keys","title":"Providing Control Over Cache Encryption","description":"We are announcing a feature that allows customers to control how their data is encrypted in in our cache.","authors":"vadim","date":"2023-06-05:11:00:00","image":"/img/blog/cmek.png","tags":["product","security","encryption","enterprise"]},"unlisted":false,"prevItem":{"title":"PostgreSQL Support for BuildBuddy","permalink":"/blog/postgres-support"},"nextItem":{"title":"Buck2 Unboxing","permalink":"/blog/buck2-review"}},"content":"BuildBuddy enables fast builds by providing a high-performance cache that stores and serves artifacts, such as the\\ninputs and outputs to your build actions.\\n\\nStarting today, BuildBuddy customers can provide their own encryption keys that will be used to encrypt and decrypt data\\nstored in the cache. At launch, we are supporting keys managed by [Google Cloud Platform KMS](https://cloud.google.com/security-key-management) and [Amazon Web Services KMS](https://aws.amazon.com/kms/).\\n\\n\x3c!-- truncate --\x3e\\n\\nTo get started, head over to your organization Settings page and look for the \\"Encryption Keys\\" tab. Note that these\\nsettings are only visible to Organization Administrators.\\n\\nFor more details, see the [Customer Managed Encryption Keys documentation](https://www.buildbuddy.io/docs/cache-encryption-keys).\\n\\n## Encryption model\\n\\nWe\u2019ve modeled our Customer Managed Encryption Key implementation on Snowflake\u2019s [Tri-Secret Secure](https://docs.snowflake.com/en/user-guide/security-encryption-manage#tri-secret-secure) design.\\n\\nIn this model, the customer-supplied key is combined with a BuildBuddy-maintained key to create a composite master key\\nthat is used to protect your BuildBuddy data.\\n\\nIf the customer-managed key in the composite master key is revoked, your data can no longer be decrypted by BuildBuddy -\\nproviding a level of security and control above BuildBuddy\u2019s standard level of encryption that is controlled by GCP.\\n\\nThis dual-key encryption model, together with BuildBuddy\u2019s built-in user authentication enables three levels of data\\nprotection.\\n\\n## Technical Details\\n\\nIn order to generate the master key, two internal 256-bit symmetric keys are first created. These keys are then\\nencrypted by both the customer-supplied key and the BuildBuddy-managed key.\\n\\nTo perform cryptographic operations on data, these two keys are decrypted and passed through the\\n[HKDF-Expand](https://en.wikipedia.org/wiki/HKDF) key derivation function to generate a single master key. When cache\\nreads and writes are performed, the [XChaCha20-Poly1305](https://en.wikipedia.org/wiki/ChaCha20-Poly1305) algorithm is\\nused to encrypt, decrypt and authenticate the data using this master key.\\n\\nRevocation of either the customer-supplied key or the BuildBuddy-managed key renders previously written artifacts undecryptable.\\n\\nBoth the encryption design and source code have been audited by a third party.\\n\\nIf you have any questions or feedback about this feature, please reach out to us on [Slack](https://community.buildbuddy.io/)\\nor at [security@buildbuddy.io](mailto:security@buildbuddy.io)."},{"id":"buck2-review","metadata":{"permalink":"/blog/buck2-review","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/buck2.md","source":"@site/blog/buck2.md","title":"Buck2 Unboxing","description":"A review of Meta\'s new build tool Buck2.","date":"2023-05-30T12:00:00.000Z","tags":[{"inline":true,"label":"buck2","permalink":"/blog/tags/buck-2"},{"inline":true,"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":19.16,"hasTruncateMarker":true,"authors":[{"name":"Son Luong Ngoc","title":"Solution Engineer @ BuildBuddy","url":"https://github.com/sluongng/","imageURL":"https://avatars.githubusercontent.com/u/26684313?v=4","key":"son","page":null}],"frontMatter":{"slug":"buck2-review","title":"Buck2 Unboxing","description":"A review of Meta\'s new build tool Buck2.","authors":"son","date":"2023-05-30:12:00:00","image":"/img/blog/buck2-header.png","tags":["buck2","engineering"]},"unlisted":false,"prevItem":{"title":"Providing Control Over Cache Encryption","permalink":"/blog/customer-managed-encryption-keys"},"nextItem":{"title":"Keyboard Shortcuts in BuildBuddy","permalink":"/blog/keyboard-shortcuts"}},"content":"Recently Meta announced the release of Buck2, their official build tool that was rewritten in Rust.\\nI got a chance to try it and integrate it with BuildBuddy\'s Remote Cache and Remote Build Execution offerings.\\n\\n![](../static/img/blog/buck2.jpg)\\n\\nHere are the initial impressions I have after a week of using Buck2.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Overview\\n\\n**Edit** (2023-06-15): The Bazel team did reach out to me with some corrections to how the benchmark\\nwas setup. Please find revised numbers at bottom of this blog.\\n\\nSimilar to Buck(1) and Bazel, Buck2 is an [artifact-based](https://bazel.build/basics/artifact-based-builds) build tool that operates on a large graph of dependencies.\\n\\nBuck2 was rewritten from scratch in Rust while providing many backward compatibility features with Buck(1).\\nOn the [official website of Buck2](https://buck2.build/docs/why/), Meta touted it to be:\\n\\n1. Remote Execution first\\n2. Dynamic graph computation engine\\n3. A single build phase\\n\\nSo how true are these claims?\\nIs Buck2 going to replace Bazel?\\nIs this the right tool for your needs?\\n\\nLet\'s dive in!\\n\\n## The pros\\n\\n#### Incredible CLI UX\\n\\nRight out of the box, Buck2 feels incredibly responsive.\\nThe command line is ridiculously fast compared to Bazel 6.2.0.\\nHere, we are using [Hyperfine](https://github.com/sharkdp/hyperfine) to benchmark the two build tools.\\n\\n```bash\\n> hyperfine \'buck2 --version\' --shell=none --warmup 3 --runs 20\\nBenchmark 1: buck2 --version\\n  Time (mean \xb1 \u03c3):       5.5 ms \xb1   0.6 ms    [User: 2.7 ms, System: 1.4 ms]\\n  Range (min \u2026 max):     5.0 ms \u2026   7.1 ms    20 runs\\n\\n> hyperfine \'bazel version\' --shell=none --warmup 3 --runs 20\\nBenchmark 1: bazel version\\n  Time (mean \xb1 \u03c3):      31.2 ms \xb1   0.7 ms    [User: 9.7 ms, System: 11.8 ms]\\n  Range (min \u2026 max):    29.8 ms \u2026  32.4 ms    20 runs\\n```\\n\\nMoreover, the CLI was written in Rust\'s Clap library, which comes with a sane help menu\\nand (soon to come) auto-completion.\\n\\n```bash\\n> buck2 -h\\nbuck2 42652bf853883e0391382f6b8d038fe6 <local>\\nA build system\\n\\nDocumentation: https://buck2.build/docs/\\n\\nUSAGE:\\n    buck2 [OPTIONS] <SUBCOMMAND>\\n\\nOPTIONS:\\n    -h, --help\\n            Print help information\\n\\n        --isolation-dir <ISOLATION_DIR>\\n            Instances of Buck2 share a daemon if and only if their isolation directory is identical.\\n            The isolation directory also influences the output paths provided by Buck2, and as a\\n            result using a non-default isolation dir will cause cache misses (and slower builds)\\n            [env: BUCK_ISOLATION_DIR=] [default: v2]\\n\\n    -v, --verbose <NUMBER>\\n            How verbose buck should be while logging. Values: 0 = Quiet, errors only; 1 = default; 2\\n            = more info about errors; 3 = more info about everything [default: 1]\\n\\n    -V, --version\\n            Print version information\\n\\nSUBCOMMANDS:\\n    aquery       Perform queries on the action graph (experimental)\\n    audit        Perform lower level queries\\n    build        Build the specified targets\\n    bxl          Run BXL scripts\\n    clean        Delete generated files and caches\\n    cquery       Perform queries on the configured target graph\\n    ctargets     Resolve target patterns to configured targets\\n    docs         Print documentation of specified symbols\\n    help         Print this message or the help of the given subcommand(s)\\n    init         Initialize a buck2 project\\n    install      Build and install an application\\n    kill         Kill the buck daemon\\n    killall      Kill all buck2 processes on the machine\\n    log          Commands for interacting with buck2 logs\\n    lsp          Start an LSP server for starlark files\\n    profile      Profiling mechanisms\\n    query        Alias for `uquery`\\n    rage         Record information about the previous failed buck2 command\\n    root         Find buck cell, project or package root\\n    run          Build and run the selected target\\n    server       Start, query, and control the http server\\n    starlark     Run Starlark operations\\n    status       Buckd status\\n    subscribe    Subscribe to updates from the Buck2 daemon\\n    targets      Show details about the specified targets\\n    test         Build and test the specified targets\\n    uquery       Perform queries on the unconfigured target graph\\n```\\n\\nThis means that even the subcommands flags are declared with the framework and\\ncomes with amazing default documentation.\\n\\n```bash\\n> buck2 rage -h\\nbuck2-rage\\nRecord information about the previous failed buck2 command\\n\\nUSAGE:\\n    buck2 rage [OPTIONS]\\n\\nOPTIONS:\\n    -h, --help\\n            Print help information\\n\\n        --invocation-id <INVOCATION_ID>\\n            Select invocation directly using the invocation\'s UUID\\n\\n        --invocation-offset <INVOCATION_OFFSET>\\n            Use value 0 to select last invocation, 1 to select second to last and so on\\n\\n        --no-invocation\\n            Collect rage report about buck2 in general, not about specific invocation\\n\\n        --no-paste\\n            We may want to omit paste if this is not a user or is called in a machine with no pastry\\n            command\\n\\n        --origin <ORIGIN>\\n            Where buck2 rage is being called from [default: unspecified] [possible values:\\n            hang-detector, unspecified]\\n\\n        --timeout <TIMEOUT>\\n            Stop collecting information after `<timeout>` seconds [default: 60]\\n\\n    -v, --verbose <NUMBER>\\n            How verbose buck should be while logging. Values: 0 = Quiet, errors only; 1 = default; 2\\n            = more info about errors; 3 = more info about everything [default: 1]\\n```\\n\\nThe build progress library was custom-made for Buck2 and can sort and color-code slower actions.\\nHere is a quick sped up demo:\\n\\n![](../static/img/blog/buck2-success.gif)\\n\\n#### First-class Remote Execution\\n\\nBuck2 was not kidding about it being a \\"Remote Execution first\\" build tool.\\n\\nThanks to this assumption, Buck2 was able to cut corners by not providing any local-sandboxing implementations by default.\\nWhat seems to be an unwanted side-effect at scale, actually made the tool more friendly to new learners.\\nThe lack of local sandboxing allows Buck2 to behave locally closer to other task-runner build tools such as Make or Just.\\n\\nHowever, any mistakes that are made when authoring build definitions locally will very soon be revealed once moved to Remote Build Execution.\\nBuck2 follows the same industry standard [Remote Execution API](https://github.com/bazelbuild/remote-apis) that was adopted by the like of Bazel, Goma, Pants, Please, Recc...\\nThis means that Buck2 is compatible with BuildBuddy Remote Cache and Remote Build Execution offering! \ud83c\udf89\\n\\nSo let\'s test it out!\\n\\nFirst, let\'s establish a setup to benchmark our test\\n\\n```python\\nSIZE_RANGE = range(0, 1000)\\n\\nXYZ_SHA256 = \\"72036ae48c55d632cc333cac04c78be336b0c76f39b225d023e218efe077ab1b\\"\\n\\n# Add some execution time to each action to simulate a real build.\\nSLEEP_CMD = \\"sleep $$((RANDOM % 5));\\"\\n\\n# Stage 1\\n[\\n    genrule(\\n        name = \\"x_{}\\".format(n),\\n        outs = [\\"x_{}.txt\\".format(n)],\\n        cmd = SLEEP_CMD + \\"echo x_{} > $@\\".format(n),\\n    )\\n    for n in SIZE_RANGE\\n]\\n\\n[\\n    genrule(\\n        name = \\"y_{}\\".format(n),\\n        outs = [\\"y_{}.txt\\".format(n)],\\n        cmd = SLEEP_CMD + \\"echo y_{} > $@\\".format(n),\\n    )\\n    for n in SIZE_RANGE\\n]\\n\\n# Stage 2\\n[\\n    genrule(\\n        name = \\"z_{}\\".format(n),\\n        outs = [\\"z_{}.txt\\".format(n)],\\n        cmd = SLEEP_CMD + \\"cat $(location :x_{n}) $(location :y_{n}) > $@\\".format(n = n),\\n        tools = [\\n            \\":x_{}\\".format(n),\\n            \\":y_{}\\".format(n),\\n        ],\\n    )\\n    for n in SIZE_RANGE\\n]\\n\\n# Stage 3\\ngenrule(\\n    name = \\"xyz\\",\\n    outs = [\\"xyz.txt\\"],\\n    # cat $(location :z_0) $(location :z_1) ... $(location :z_999) > $@,\\n    cmd = SLEEP_CMD + \\"cat \\" + \\" \\".join([\\n        \\"$(location :z_{})\\".format(n)\\n        for n in SIZE_RANGE\\n    ]) + \\" > $@\\",\\n    tools = [\\n        \\":z_{}\\".format(n)\\n        for n in SIZE_RANGE\\n    ],\\n)\\n\\n# Stage 4\\nsh_test(\\n    name = \\"test\\",\\n    srcs = [\\"test.sh\\"],\\n    args = [\\n        \\"$(location :xyz)\\",\\n        XYZ_SHA256,\\n    ],\\n    data = [\\n        \\":xyz\\",\\n    ],\\n)\\n```\\n\\nOur setup is a build graph composed of 4 stages:\\n\\n- Stage 1: Create 1000 \\"x\\" targets and 1000 \\"y\\" targets (2000 build targets)\\n\\n- Stage 2: Create 1000 \\"z\\" targets by concat \\"x\\" and \\"y\\" from Stage 1 (1000 build targets)\\n\\n- Stage 3: Concat all \\"z\\" targets (1 build target)\\n\\n- Stage 4: Validate stage 3 output with a test (1 test target)\\n\\nBefore each action, we sleep a random duration between 0 and 4 seconds to make the simulation closer to real-world build.\\n\\nWe also inject this sleep value into our test to help validate testing features down the line:\\n\\n```bash\\n> cat test.sh\\n#!/bin/bash\\n\\nfile=$1\\nexpected=$2\\ngot=$(sha256sum $file | awk \'{print $1}\')\\n\\nsleep $((RANDOM % 5));\\nif [[ $expected == $got ]]; then\\n    exit 0\\nelse\\n    exit 1\\nfi\\n```\\n\\nWith a total of 2002 user-defined targets and 4 stages, assuming perfect concurrency,\\nit should result in a worst-case 16 seconds, average 8 seconds, sleep overhead.\\n\\nLet\'s use Bazel\'s latest release, 6.2.0, as our baseline and see how Buck2 compares.\\n\\n1. Local Execution\\n\\n   ```bash\\n   > cat .bazelrc\\n   build:local --strategy=local\\n   build:local --jobs=200\\n   build:local --local_cpu_resources=200\\n   build:local --local_ram_resources=\'HOST_RAM*2.0\'\\n   ```\\n\\n   It\'s worth noting that Bazel executes actions in a sandbox by default, so `--strategy=local` is used here to explicitly disable sandboxing.\\n   We also set Bazel\'s concurrency limit to 200 by specifying `--jobs=200` and override Bazel\'s system resource estimations by specifying\\n   `--local_cpu_resources` and `--local_ram_resources` to larger values.\\n   Because our actions are lightweight, with majority of the time being spent on `sleep(1)` call,\\n   these Bazel flags enable us to hit the \\"200 concurrent build actions\\" mark.\\n\\n   ```bash\\n   > hyperfine --prepare \'bazel clean\' --warmup 1 \'bazel test --config=local //...\'\\n   Benchmark 1: bazel test --config=local //...\\n     Time (mean \xb1 \u03c3):     65.631 s \xb1  0.460 s    [User: 0.051 s, System: 0.063 s]\\n     Range (min \u2026 max):   65.179 s \u2026 66.310 s    10 runs\\n   ```\\n\\n   To ensure fairness, we also set Buck2 execution concurrency to the same value as Bazel:\\n\\n   ```bash\\n   > tail -2 .buckconfig\\n   [build]\\n   threads = 200\\n   ```\\n\\n   Here, Buck\'s Starlark API differs slightly from Bazel\'s, so some small modifications were needed.\\n   For example:\\n\\n   ```diff\\n   @@ -21,9 +21,9 @@\\n    [\\n        genrule(\\n            name = \\"z_{}\\".format(n),\\n   -        outs = [\\"z_{}.txt\\".format(n)],\\n   +        out = \\"z_{}.txt\\".format(n),\\n   -        cmd = \\"cat $(location :x_{n}) $(location :y_{n}) > $@\\".format(n = n),\\n   +        cmd = \\"cat $(location :x_{n}) $(location :y_{n}) >$OUT\\".format(n = n),\\n   -        tools = [\\n   +        srcs = [\\n                \\":x_{}\\".format(n),\\n                \\":y_{}\\".format(n),\\n            ],\\n   ```\\n\\n   With all that set, let\'s see how Buck2 performs:\\n\\n   ```bash\\n   > hyperfine  --prepare \'buck2 clean\' --warmup 1 \'buck2 test //...\'\\n   Benchmark 1: buck2 test //...\\n     Time (mean \xb1 \u03c3):     41.175 s \xb1  2.183 s    [User: 0.371 s, System: 0.190 s]\\n     Range (min \u2026 max):   37.584 s \u2026 43.803 s    10 runs\\n   ```\\n\\n   And quite a performance indeed, Buck2 left Bazel in the dust!\\n\\n2. Remote Execution\\n\\n   Using BuildBuddy as the RBE backend should be as simple as copying the configurations from the website:\\n\\n   ```\\n   build:remote --jobs=600\\n\\n   build:remote --bes_results_url=https://app.buildbuddy.io/invocation/\\n   build:remote --bes_backend=grpcs://remote.buildbuddy.io\\n   build:remote --remote_cache=grpcs://remote.buildbuddy.io\\n   build:remote --remote_timeout=3600\\n   build:remote --remote_executor=grpcs://remote.buildbuddy.io\\n   build:remote --remote_header=x-buildbuddy-api-key=<redacted>\\n   ```\\n\\n   With that set, let\'s check the result:\\n\\n   ```bash\\n   # With remote cache\\n   > hyperfine --prepare \'bazel clean\' \\\\\\n               --warmup 1 \\\\\\n               \'bazel test --config=remote //...\'\\n   Benchmark 1: bazel test --config=remote //...\\n     Time (mean \xb1 \u03c3):      9.798 s \xb1  0.515 s    [User: 0.028 s, System: 0.039 s]\\n     Range (min \u2026 max):    8.645 s \u2026 10.434 s    10 runs\\n\\n   # Without remote cache\\n   # Set remote_instance_name to a random string to reset remote_cache\\n   > hyperfine  --prepare \'bazel clean\' \\\\\\n                --warmup 1 \\\\\\n                \'bazel test --config=remote --remote_instance_name=\\"$RANDOM\\" //...\'\\n   Benchmark 1: bazel test --config=remote --remote_instance_name=\\"$RANDOM\\" //...\\n     Time (mean \xb1 \u03c3):     106.062 s \xb1  3.106 s    [User: 0.090 s, System: 0.099 s]\\n     Range (min \u2026 max):   102.111 s \u2026 111.645 s    10 runs\\n   ```\\n\\n   10 seconds is amazing compared to the local execution time of 65 seconds.\\n   It\'s 84% faster with Remote Build Execution and Remote Cache!\\n\\n   But what about Buck2?\\n   Well setting it up is as simple as copying the provided configurations in [Buck2\'s BuildBuddy Example](https://github.com/facebook/buck2/tree/main/examples/remote_execution/buildbuddy)\\n\\n   ```bash\\n   [build]\\n   execution_platforms = root//platforms:platforms\\n\\n   # [buck2_re_client]\\n   engine_address = remote.buildbuddy.io\\n   action_cache_address = remote.buildbuddy.io\\n   cas_address = remote.buildbuddy.io\\n   http_headers = x-buildbuddy-api-key:<redacted>\\n   ```\\n\\n   Let\'s run it:\\n\\n   ```bash\\n   # With remote cache\\n   > hyperfine --prepare \'buck2 clean\' \\\\\\n               --warmup 1 \\\\\\n               \'buck2 test --unstable-allow-all-tests-on-re //...\'\\n     Time (mean \xb1 \u03c3):      7.937 s \xb1  0.487 s    [User: 0.296 s, System: 0.175 s]\\n     Range (min \u2026 max):    7.357 s \u2026  8.945 s    10 runs\\n\\n   # Without remote cache\\n   > hyperfine --prepare \'buck2 clean; echo \\"INSTANCE_NAME = \\\\\\"$RANDOM\\\\\\"\\" > instance.bzl\' \\\\\\n               \'buck2 test --unstable-allow-all-tests-on-re //...\'\\n   Benchmark 1: buck2 test --unstable-allow-all-tests-on-re //...\\n     Time (mean \xb1 \u03c3):     203.431 s \xb1 29.882 s    [User: 4.187 s, System: 1.566 s]\\n     Range (min \u2026 max):   163.044 s \u2026 258.968 s    10 runs\\n   ```\\n\\n   Buck2 does not have a good way to invalidate the remote cache to give a fair comparison,\\n   so I did apply a workaround by invalidating all the `x` and `y` actions with a random value instead.\\n\\n   Regardless, the performance was very impressive.\\n   The Remote Build Execution client of Buck2 is not as configurable as Bazel, so it was harder to tune.\\n   I expect it will make builds perform much better in the future.\\n\\n#### Easy to contribute\\n\\nSeriously, Buck2 code base is a blast to work with.\\nUnlike Bazel, which was written in a mix of C++ and Java using Google\'s homegrown frameworks,\\nBuck2 was built with a single language: Rust!\\n\\nNot only can the code base be built using Buck2, but it could also be built using Cargo, and\\nis completely compatible with Rust Analyzer (Rust\'s Language Server).\\nIt has been a long time since I could open the code base of a build tool and have \\"Go to definitions\\"\\nand \\"Find references\\" work out of the box.\\n\\nThe Buck2 team in Meta has been quite engaging thus far.\\nIt often takes them less than a week to respond to my GitHub Issues / Pull Requests.\\nAnd most of the time, I get a response within a day.\\n\\nDiving into Buck2 and its Rust code base is... addictive. \ud83d\ude05\\n\\n## The cons\\n\\n> So is that it? Buck2 is faster, let\'s all move there?\\n\\nNot so fast young padawan!\\nBuck2 does come with some downsides.\\n\\n#### It\'s actually multiple phases!\\n\\nIn contrary to it\'s official introduction, [Buck2\'s architecture diagram](https://buck2.build/docs/developers/architecture/buck2/)\\ndescribes multiple phases and stages inside a typical build.\\n\\n![](../static/img/blog/buck2_architecture.png)\\n\\nThere seems to be 5 Phases acting as transitions between 5 states of Buck2 dynamic build graph, [DICE](https://github.com/facebook/buck2/tree/main/dice).\\n\\nThe good thing about Buck2 is that none of these phases are \\"blocking\\", and thus multiple targets could\\ntransition through different states in great parallelization. Bazel is also trying to work toward this\\nsetup with the recently announced [SkyMeld project](https://www.youtube.com/watch?v=IEJLHNNRP9U&list=PLxNYxgaZ8RsdH4GCIZ69dzxQCOPyuNlpF&index=10).\\n\\n#### No Build Telemetry\\n\\nFirst of all, because Buck2 does not implement Bazel\'s Build Event Stream protocol (not part of Remote Execution API),\\nwe are not able to integrate with it to display your test results and provide you with sweet cache hit/miss analysis as we have with Bazel.\\n\\nBuck2 does come with a proto-defined set of `BuckEvent` data.\\nCurrently, these log-like data are stored locally under `buck-out/log` and could be interacted with using troubleshooting commands such as `buck2 what-failed`.\\n\\nInternally in Meta, these log data are sent to their [message queue system Scribe](https://engineering.fb.com/2019/10/07/data-infrastructure/scribe/) using Thrift RPC, which is consumed by their Telemetry Data platform [Scuba](https://research.facebook.com/publications/scuba-diving-into-data-at-facebook/).\\nHowever, there is no open-source implementation equivalent and I created [buck2/issue/226](https://github.com/facebook/buck2/issues/226) to discuss the creation of one.\\n\\n#### No Repository Phase\\n\\nIn Bazel, external dependencies to the build are prepared before build execution happens, in the \\"Repository Phase\\".\\n\\nBuck2 is touted to be a single phases build tool, so how does it manage 3rd party dependencies then?\\nCurrently, there are only a limited set of options:\\n\\n1. Git submodules\\n   Buck2 comes with **Prelude**, an open-source git repository that is meant to help define most Buck2 build rules.\\n   However, for each new Buck2 project being created with `buck2 init`, you would need to set up Prelude as a git submodule in your git repo.\\n   Without prelude, you would not get access to even basic rules such as `genrule` or `sh_binary`.\\n\\n2. Vendor\\n   Since the majority of Buck2 is written in Rust, the companion tool **Reindeer** helps you vendor all\\n   Cargo external packages into the repository and set up appropriate `BUCK` files for them.\\n   This is not a problem for Meta internally, with their custom monorepo and virtual file system [Sapling](https://sapling-scm.com/),\\n   but it should be a huge problem for Git repos and code review systems in the open-source world.\\n\\n3. Anon target and dynamic outputs\\n   Although there is no repository phase, you could still define `http_archive` to have external downloads happen during Buck2 build execution.\\n   However, you will not be able to export build targets out of these newly downloaded archives easily.\\n   Instead of the Bazel approach which lets you run some commands to generate `BUILD` files,\\n   Buck2 provides the complicated anon target, sub-targets, and dynamic outputs APIs in Starlark for you to accomplish the same thing.\\n   However, there is very limited documentation and examples of how these APIs work.\\n\\n#### Complicated testing abstraction\\n\\nUnlike Bazel, which treats tests as another build action to be executed at the end of the graph,\\nBuck2 took this to a whole new level by introducing a new RPC to integrate Buck2 with their internal testing platform [TPX](https://buck2.build/docs/rule_authors/test_execution/).\\n\\nBecause TPX is in charge of coordinating test executions on various platforms and collecting related test outputs data,\\nthe set of APIs that define integration between Buck2 and TPX is also quite featureful.\\nHowever, there is not a lot of documentation at this moment regarding how these work.\\n\\nBecause of this reason, there is no test caching in Buck2 by default as the test target selector is supposed to be handled. But there are ongoing conversation about this in [buck2/issue/183](https://github.com/facebook/buck2/issues/183).\\n\\n#### Other foot guns\\n\\nThere are several pain points I experienced while testing out Buck2. They range from small annoyances to rendering the tool completely un-usable \ud83d\ude13:\\n\\n- `http_archive` does not work from within anon target. Fixed in [buck2/commit/370cd4d](https://github.com/facebook/buck2-prelude/commit/370cd4d8b2cd002e0f794b91520febcab289b7d0).\\n\\n- All Go rules are not usable without a standard library to compile/link against. Reported in [buck2/issue/240](https://github.com/facebook/buck2/issues/240).\\n\\n- Lack of documentation for `.buckconfig` keys and default values. Reported in [buck2/issue/152](https://github.com/facebook/buck2/issues/152).\\n\\n- No local cache for external downloads (leading to re-download happening on a Buck Daemon reset). Reported in [buck2/issue/246](https://github.com/facebook/buck2/issues/246).\\n\\n- Terminal UI reported the wrong value for actions counts. Reported in [buck2/issue/251](https://github.com/facebook/buck2/issues/251).\\n\\n- Remote Execution does not have symlinks support [buck2/issue/222](https://github.com/facebook/buck2/issues/222).\\n\\n- Simply crash and not usable [buck2/issue/257](https://github.com/facebook/buck2/issues/257), but fixed with [buck2/commit/7947156](https://github.com/facebook/buck2/commit/79471567dd5e05f4035515c697e3fb9ef78622ac).\\n\\n## The verdict\\n\\n> So what does all this mean?\\n>\\n> Should I start using Buck2 today?\\n\\nBuck2 is a fresh, new shiny build tool on the block.\\nWith it comes a lot of good things:\\n\\n- Great language, great performance\\n\\n- Fresh UI\\n\\n- Compatibility with existing RBE services\\n\\nIt has all the joy and excitement of a typical green field project that attracts the Rust (and potentially C++) community toward it.\\n\\n> But is it a Bazel replacement?\\n>\\n> Should an enterprise consider adopting this for hundreds to thousands of users?\\n\\nI would say _not yet_!\\n\\n- There are still too many foot guns that come with the new tool (as documented above).\\n\\n- There is not enough configurations and/or documentation to support large-scale enterprise users.\\n\\n- Users are expected to be hands-on with the code base. If you don\'t know Rust... well you better learn it first.\\n\\n- Lack of build rules and toolings for typical use cases: building a container image, a typescript project, a go binary... are not possible just yet.\\n\\nMy conclusion is that Buck2 is exciting!\\nHowever, today, it\'s still young and too early to replace typical enterprise use cases.\\nI hope the current excitement could grow a community and ecosystem around Buck2 sustainably to further drive the tool to maturity.\\n\\nIn the meantime, I have created a repository to collect [all Buck2-related resources here](https://github.com/sluongng/awesome-buck2).\\nIf you are interested in Buck2, give it a look!\\n\\n## Update (2023-06-15)\\n\\nShortly after this blog post was released, [Tobias Werth](https://github.com/meisterT) from the Bazel team pointed out to me\\nthat the Bazel setup was not the most optimized.\\n\\nIn particular, instead of using the `tools` attribute in Bazel\'s `genrule`, I should have used `srcs` instead.\\n\\n```diff\\n--- a/BUILD.bazel\\n+++ b/BUILD.bazel\\n@@ -26,28 +26,28 @@ SLEEP_CMD = \\"sleep $$((RANDOM % 5));\\"\\n [\\n     genrule(\\n         name = \\"z_{}\\".format(n),\\n-        outs = [\\"z_{}.txt\\".format(n)],\\n-        cmd = SLEEP_CMD + \\"cat $(location :x_{n}) $(location :y_{n}) > $@\\".format(n = n),\\n-        tools = [\\n+        srcs = [\\n             \\":x_{}\\".format(n),\\n             \\":y_{}\\".format(n),\\n         ],\\n+        outs = [\\"z_{}.txt\\".format(n)],\\n+        cmd = SLEEP_CMD + \\"cat $(location :x_{n}) $(location :y_{n}) > $@\\".format(n = n),\\n     )\\n     for n in SIZE_RANGE\\n ]\\n\\n genrule(\\n     name = \\"xyz\\",\\n+    srcs = [\\n+        \\":z_{}\\".format(n)\\n+        for n in SIZE_RANGE\\n+    ],\\n     outs = [\\"xyz.txt\\"],\\n     # cat $(location :z_0) $(location :z_1) ... $(location :z_999) > $@,\\n     cmd = SLEEP_CMD + \\"cat \\" + \\" \\".join([\\n         \\"$(location :z_{})\\".format(n)\\n         for n in SIZE_RANGE\\n     ]) + \\" > $@\\",\\n-    tools = [\\n-        \\":z_{}\\".format(n)\\n-        for n in SIZE_RANGE\\n-    ],\\n )\\n```\\n\\nUsing `tools` would cause Bazel to configure twice the number of actions underneath due to Bazel\'s special treatment of tool dependencies.\\nAnd fewer actions means a faster build.\\n\\nSo I reran the benchmark and here are the new results:\\n\\n| Tools            |          Local Build | RBE (with Remote Cache) | RBE (without Remote Cache) |\\n| :--------------- | -------------------: | ----------------------: | -------------------------: |\\n| buck2            | `41.175 s \xb1 2.183 s` |    ` 7.937 s \xb1 0.487 s` |     `203.431 s \xb1 29.882 s` |\\n| bazel w. `tools` | `65.631 s \xb1 0.460 s` |    ` 9.798 s \xb1 0.515 s` |    `106.062 s \xb1 \u200e 3.106 s` |\\n| bazel w. `srcs`  | `42.580 s \xb1 1.881 s` |    `10.047 s \xb1 0.517 s` |    ` 73.009 s \xb1 \u200e 2.975 s` |\\n\\nThis means that if setup correctly, Bazel performance is quite competitive with Buck2.\\nDifferences of a few seconds could be negligible for most use cases.\\n\\nAnother point of improvement is using the default BuildBuddy setting, we are uploading Bazel\'s Build Events to BuildBuddy on each build.\\nWith Buck2, there is an equivalent Buck2 Event system.\\nHowever, as noted in the blog post, Buck2 Event system is not yet compatible with systems outside of Meta so it\'s not possible to test with it just yet.\\n\\nSo to achieve a more accurate test result, we could move Bazel\'s Build Event upload to a separate config as follows:\\n\\n```diff\\n--- a/.bazelrc\\n+++ b/.bazelrc\\n@@ -14,12 +14,14 @@ build:remote --host_platform=//platforms:platform_linux\\n build:remote --platforms=//platforms:platform_linux\\n build:remote --crosstool_top=@buildbuddy_toolchain//:ubuntu_cc_toolchain_suite\\n\\n-build:remote --bes_results_url=https://app.buildbuddy.io/invocation/\\n-build:remote --bes_backend=grpcs://remote.buildbuddy.io\\n build:remote --remote_cache=grpcs://remote.buildbuddy.io\\n build:remote --remote_timeout=3600\\n build:remote --remote_executor=grpcs://remote.buildbuddy.io\\n\\n+build:remote-w-bes --config=remote\\n+build:remote-w-bes --bes_results_url=https://app.buildbuddy.io/invocation/\\n+build:remote-w-bes --bes_backend=grpcs://remote.buildbuddy.io\\n```\\n\\nHow much of an improvement is it?\\n\\n```bash\\n> hyperfine --prepare \'bazel clean\' \\\\\\n            --warmup 1 \\\\\\n            \'bazel test --config=remote //...\' \\\\\\n            \'bazel test --config=remote-w-bes //...\'\\n\\nBenchmark 1: bazel test --config=remote //...\\n  Time (mean \xb1 \u03c3):      6.208 s \xb1  0.444 s    [User: 0.022 s, System: 0.031 s]\\n  Range (min \u2026 max):    5.392 s \u2026  6.860 s    10 runs\\n\\nBenchmark 2: bazel test --config=remote-w-bes //...\\n  Time (mean \xb1 \u03c3):     10.299 s \xb1  0.300 s    [User: 0.025 s, System: 0.036 s]\\n  Range (min \u2026 max):    9.811 s \u2026 10.739 s    10 runs\\n\\nSummary\\n  bazel test --config=remote //... ran\\n    1.66 \xb1 0.13 times faster than bazel test --config=remote-w-bes //...\\n```\\n\\n#### Putting all new improvements together\\n\\nHere are the new benchmark results:\\n\\n| Tools                         |          Local Build | RBE (with Remote Cache) | RBE (without Remote Cache) |\\n| :---------------------------- | -------------------: | ----------------------: | -------------------------: |\\n| buck2                         | `41.175 s \xb1 2.183 s` |    ` 7.937 s \xb1 0.487 s` |     `203.431 s \xb1 29.882 s` |\\n| bazel w. `tools` (old)        | `65.631 s \xb1 0.460 s` |    ` 9.798 s \xb1 0.515 s` |    `106.062 s \xb1 \u200e 3.106 s` |\\n| bazel w. `srcs`               | `42.580 s \xb1 1.881 s` |    `10.047 s \xb1 0.517 s` |    ` 73.009 s \xb1 \u200e 2.975 s` |\\n| bazel<br/>w. `srcs`, no `BES` | `40.455 s \xb1 2.275 s` |    ` 6.208 s \xb1 0.444 s` |    ` 70.788 s \xb1 \u200e 4.408 s` |\\n\\nThis shows that when configured correctly, Bazel\'s performance is very competitive with Buck2\'s,\\nand that Buck2 still has some room for growth in areas such as Remote Build Execution.\\n\\nInterested readers could find my benchmarking setup in Github repo [sluongng/buck2-rbe-bench](https://github.com/sluongng/buck2-rbe-bench)\\nto experiment further."},{"id":"keyboard-shortcuts","metadata":{"permalink":"/blog/keyboard-shortcuts","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/keyboard-shortcuts.md","source":"@site/blog/keyboard-shortcuts.md","title":"Keyboard Shortcuts in BuildBuddy","description":"We\'re happy to announce keyboard shortcuts in BuildBuddy.","date":"2023-05-22T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"}],"readingTime":1.13,"hasTruncateMarker":true,"authors":[{"name":"Iain Macdonald","title":"Engineer @ BuildBuddy","url":"https://www.linkedin.com/in/macdonaldi/","imageURL":"https://avatars.githubusercontent.com/u/455246?v=4","key":"iain","page":null}],"frontMatter":{"slug":"keyboard-shortcuts","title":"Keyboard Shortcuts in BuildBuddy","description":"We\'re happy to announce keyboard shortcuts in BuildBuddy.","authors":"iain","date":"2023-05-22:12:00:00","image":"/img/blog/keyboard-shortcuts.png","tags":["product"]},"unlisted":false,"prevItem":{"title":"Buck2 Unboxing","permalink":"/blog/buck2-review"},"nextItem":{"title":"Welcoming Grace Chuang","permalink":"/blog/welcoming-grace-chuang"}},"content":"There are lots of small, satisfying moments in the day-to-day lives of software developers. From finding and deleting dead code, to writing tests that pass on the first run (actually), to receiving UX mocks that call for simplifying the frontend code, those little joys are a pleasant treat! We\u2019re excited to share a small new BuildBuddy Build Result UI feature that we think fits into this category: keyboard shortcuts.\\n\\nKeyboard shortcuts can be enabled in the personal preferences menu on the settings page in the app. Once enabled, a help menu explaining the shortcuts can be toggled using `?` to show and `Esc` to hide. There\u2019s also a clickable button to close it just in case\u2026 if only Vim had one too!\\n\\n![](/img/blog/keyboard-shortcuts.png)\\n\\nI implemented this feature during a hackathon a couple of months ago and I like how it saves me a second or two on some common tasks in the Build Result UI. My favorite shortcut is `Shift-c` to copy invocation page links. I use it once or twice a day to share a link in Slack along with the confused emoji.\\n\\nWe love receiving feedback from customers, if you\u2019re excited about this or have other shortcuts you\u2019d like to see in the UI, hit us up on [Slack](https://community.buildbuddy.io/) or at [hello@buildbuddy.io](mailto:hello@buildbuddy.io).\\n\\n\x3c!-- truncate --\x3e"},{"id":"welcoming-grace-chuang","metadata":{"permalink":"/blog/welcoming-grace-chuang","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/welcoming-grace-chuang.md","source":"@site/blog/welcoming-grace-chuang.md","title":"Welcoming Grace Chuang","description":"To fulfill our mission of bringing the world\'s best developer tools to every company, keeping our business running smoothly is as important as ensuring our customers\' builds run smoothly. That\'s why we\'re excited to share that Grace Chuang is joining BuildBuddy!","date":"2023-04-03T12:00:00.000Z","tags":[{"inline":true,"label":"company","permalink":"/blog/tags/company"},{"inline":true,"label":"team","permalink":"/blog/tags/team"}],"readingTime":0.47,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"welcoming-grace-chuang","title":"Welcoming Grace Chuang","authors":"siggi","date":"2023-04-03T12:00:00.000Z","image":"/img/welcome_grace.png","tags":["company","team"]},"unlisted":false,"prevItem":{"title":"Keyboard Shortcuts in BuildBuddy","permalink":"/blog/keyboard-shortcuts"},"nextItem":{"title":"Donating rules_xcodeproj to the Mobile Native Foundation","permalink":"/blog/donating-rules_xcodeproj-to-the-mobile-native-foundation"}},"content":"To fulfill our mission of bringing the world\'s best developer tools to every company, keeping our business running smoothly is as important as ensuring our customers\' builds run smoothly. That\'s why we\'re excited to share that [**Grace Chuang**](https://www.linkedin.com/in/grace2chuang/) is joining BuildBuddy!\\n\\nGrace joins us from Google, where she spent 5+ years working on Product Strategy and Operations. Prior to Google, Grace spent 3 years at J.P. Morgan.\\n\\n![](../static/img/blog/welcome_grace.png)\\n\\nWe look forward to working alongside Grace to build the future of developer tools.\\n\\nWelcome to BuildBuddy, Grace!\\n\\n\x3c!-- truncate --\x3e"},{"id":"donating-rules_xcodeproj-to-the-mobile-native-foundation","metadata":{"permalink":"/blog/donating-rules_xcodeproj-to-the-mobile-native-foundation","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/donating-rules_xcodeproj-to-the-mobile-native-foundation.md","source":"@site/blog/donating-rules_xcodeproj-to-the-mobile-native-foundation.md","title":"Donating rules_xcodeproj to the Mobile Native Foundation","description":"We are solidifying the community ownership of rules_xcodeproj by donating it to the Mobile Native Foundation.","date":"2023-03-22T09:00:00.000Z","tags":[{"inline":true,"label":"rules_xcodeproj","permalink":"/blog/tags/rules-xcodeproj"}],"readingTime":6.26,"hasTruncateMarker":true,"authors":[{"name":"Brentley Jones","title":"Developer Evangelist @ BuildBuddy","url":"https://brentleyjones.com","imageURL":"https://avatars.githubusercontent.com/u/158658?v=4","key":"brentley","page":null}],"frontMatter":{"slug":"donating-rules_xcodeproj-to-the-mobile-native-foundation","title":"Donating rules_xcodeproj to the Mobile Native Foundation","description":"We are solidifying the community ownership of rules_xcodeproj by donating it to the Mobile Native Foundation.","authors":"brentley","date":"2023-03-22:9:00:00","image":"/img/rules_xcodeproj_mnf.png","tags":["rules_xcodeproj"]},"unlisted":false,"prevItem":{"title":"Welcoming Grace Chuang","permalink":"/blog/welcoming-grace-chuang"},"nextItem":{"title":"Multiple Xcode Configurations with rules_xcodeproj 1.3","permalink":"/blog/multiple-xcode-configurations-with-rules_xcodeproj-1-3"}},"content":"Since the first commit of rules_xcodeproj, we\u2019ve been committed to it being\\ncommunity driven and community owned. Early in\\n[rules_xcodeproj][rules_xcodeproj]\u2019s development, multiple companies started\\nusing the project, while also putting forth significant contributions. And all\\nthroughout its development we\u2019ve solicited feedback from users on how the\\nproject is working for them, not working for them, and what we should be\\nfocusing on next.\\n\\nToday we are taking the next step in this commitment; we are solidifying the\\ncommunity ownership of rules_xcodeproj by donating it to the\\n[Mobile Native Foundation][mnf]!\\n\\n[mnf]: https://mobilenativefoundation.org\\n[rules_xcodeproj]: https://github.com/MobileNativeFoundation/rules_xcodeproj\\n\\n\x3c!-- truncate --\x3e\\n\\n## Mobile Native Foundation\\n\\nThe Mobile Native Foundation (MNF) is a Linux Foundation project that provides a\\nplace to collaborate on open source projects and discuss wide ranging topics in\\norder to improve processes and technologies for large-scale Android and iOS\\napplications. Some of the popular iOS projects under its banner include\\n[bluepill][bluepill], [index-import][index-import], and\\n[XCLogParser][xclogparser].\\n\\n[bluepill]: https://github.com/MobileNativeFoundation/bluepill\\n[index-import]: https://github.com/MobileNativeFoundation/index-import\\n[xclogparser]: https://github.com/MobileNativeFoundation/XCLogParser\\n\\n> We are thrilled to welcome rules_xcodeproj to the Mobile Native Foundation.\\n> BuildBuddy has done an exceptional job solving one of the longest running\\n> problems facing Apple developers trying to adopt Bazel. Through community\\n> ownership we hope to enable rules_xcodeproj to continue to flourish as it\\n> enables even more developers to benefit from Bazel\u2019s advanced feature set.\\n\\n&ndash; Keith Smiley, Chair @ Mobile Native Foundation\\n\\nWith this donation our dedication to rules_xcodeproj isn\u2019t wavering; we are\\ngoing to continue to sponsor the project with both development hours and\\nleadership. As Keith mentioned, we believe that this change in ownership will be\\nan accelerant to the project, while also allowing adoption by users that were\\nblocked by the previous non-MNF ownership.\\n\\n## User statements\\n\\nWe asked some users of rules_xcodeproj to comment on its donation to the MNF,\\nand this is what they had to say:\\n\\n### Cash App\\n\\n> Following the work done on rules_xcodeproj has been incredible, all that\\n> effort has led to a great Bazel + Xcode experience! At Cash App we\u2019ve been\\n> using it to build Swift tooling for months now and have started using it to\\n> build the iOS app as we ship Bazel to all our engineers. The move to Mobile\\n> Native Foundation will mean an even larger audience which makes me feel great\\n> about the future of rules_xcodeproj.\\n\\n&ndash; Luis Padron, Engineer @ Cash App\\n\\n### Lyft\\n\\n> rules_xcodeproj is a game-changer for apple platform development using Bazel.\\n> It was a key missing piece to bring custom native rules to\xa0SwiftLint.\\n>\\n> For\xa0Envoy Mobile, it has been invaluable in building and debugging our\\n> polyglot codebase, seamlessly stepping through call stacks involving a mix of\\n> Swift, Objective-C++, and C++.\\n>\\n> Overall, rules_xcodeproj has boosted our confidence in the reliability and\\n> flexibility of our tools, thanks to its active open-source community and\\n> responsive contributors.\\n\\n&ndash; JP Simard, Staff Engineer @ Lyft\\n\\n### Reddit\\n\\n> rules_xcodeproj\xa0has made onboarding to Bazel for Apple related development all\\n> the easier. Finally consolidating many disparate project generation solutions\\n> to a modern one that the community has/can choose to use and support. The\\n> maintainers of the project are responsive and helpful in all respects related\\n> to community engagement and the donation to Mobile Native Foundation is just\\n> another gesture of goodwill to that community.\\n\\n&ndash; Matt Robinson, Staff Engineer @ Reddit\\n\\n### Robinhood\\n\\n> The rules_xcodeproj project has been a huge accelerant and motivating factor\\n> for our iOS team\u2019s migration to Bazel. I\u2019ve previously seen first hand how\\n> tricky the Bazel + Xcode local experience can be to implement in-house and\\n> create a negative experience for developers; however, BuildBuddy\u2019s expertise\\n> and stewardship of this project enabled us to immediately generate a\\n> functional Xcode project and focus our codebase migration. The Bazel iOS\\n> community has also been an integral part of the project contributing new\\n> features and optimizations; I\u2019m excited to see the project move into the\\n> Mobile Native Foundation and continue to grow!\\n\\n&ndash; Sebastian Shanus, Senior Engineer @ Robinhood\\n\\n### Slack\\n\\n> At Slack, the Bazel Xcode experience has always been where we invest the most\\n> time in, and has always been the most difficult to get right. With\\n> rules_xcodeproj and the outstanding community around it, a native Xcode\\n> experience \u201cjust works\u201d allowing us to focus on building Slack. Under the\\n> Mobile Native Foundation, we can be confident rules_xcodeproj will continue to\\n> grow and be supported by the community, and serve us at Slack for years to\\n> come.\\n\\n&ndash; Erik Kerber, Staff Engineer @ Slack\\n\\n### Snap\\n\\n> Snap has been struggling with a subpar Xcode developer experience, which has\\n> impeded the developer productivity. We have tried various Xcode project\\n> generators, but a lack of community support has left us constantly frustrated.\\n> Fortunately, rules_xcodeproj and its supportive community have provided a\\n> solution. With rules_xcodeproj, iOS development will be as smooth as \u201cnative\u201d\\n> Xcode projects, even at scale.\\n>\\n> Snap is thrilled to see that rules_xcodeproj is now part of the Mobile Native\\n> Foundation. This will not only bring more community contributions to the\\n> project, but also provide the benefits of rules_xcodeproj to everyone\\n> involved.\\n\\n&ndash; Yongjin Cho, Engineer @ Snap\\n\\n### Spotify\\n\\n> We are proud to have been involved in rules_xcodeproj since the early days. It\\n> has significantly lowered the entry-barrier to Bazel for the Apple ecosystem\\n> and allowed our iOS engineers at Spotify to start using Bazel with Xcode\\n> faster than we could ever have imagined. We are looking forward to continuing\\n> this journey of improving the developer experience for Apple developers under\\n> the Mobile Native Foundation umbrella with the rest of the community.\\n\\n&ndash; Patrick Balestra, Staff Engineer @ Spotify\\n\\n### Tinder\\n\\n> Tinder\u2019s local development experience prior to rules_xcodeproj was subpar and\\n> our developers wanted more. After we adopted this project generator our Xcode\\n> project experience is no longer a constant source of feedback. This project\\n> has also been a joy to contribute to and to learn more about Bazel in general.\\n> The migration to Mobile Native Foundation signifies the importance this\\n> project holds for the entire Apple development community.\\n\\n&ndash; Maxwell Elliot, Staff Engineer @ Tinder\\n\\n### Uber\\n\\n> Getting Bazel running inside Xcode the right way with all the IDE\\n> functionality working as expected has been a challenge for the entire\\n> community. Constant Bazel updates, and additions happening in rules_apple, and\\n> rules_swift makes maintenance even more challenging and all of this takes most\\n> of the time of all the mobile dev platform teams. Since it happens all\\n> in-house, we don\u2019t get community benefits and vice-versa.\\n>\\n> However, with rules_xcodeproj and the great community support that it has, I\\n> was really surprised to see our core Rider app building in Xcode in both BwB\\n> and BwX modes with no code changes, it literally has been a treat to see its\\n> progress. I am really impressed by the quality bar it has, and how it went\\n> beyond by adding various fixes in Bazel and rule sets to get the experience\\n> working the right way. All of this has boosted my confidence in\\n> rules_xcodeproj.\\n>\\n> I strongly believe that this project is the core foundation for any Apple\\n> Bazel workspace and with great community ownership under the Mobile Native\\n> Foundation, I feel confident about the future of rules_xcodeproj and the\\n> Bazel community it benefits.\\n\\n&ndash; Chirag Ramani, Staff Engineer @ Uber\\n\\n## Comments?\\n\\nDo you have comments on rules_xcodeproj being donated to the Mobile Native\\nFoundation? You can send us a message in the `#rules_xcodeproj` channel in the\\n[Bazel Slack workspace][bazel-slack], or you can email us at\\n[hello@buildbuddy.io](mailto:hello@buildbuddy.io).\\n\\n[bazel-slack]: https://slack.bazel.build/"},{"id":"multiple-xcode-configurations-with-rules_xcodeproj-1-3","metadata":{"permalink":"/blog/multiple-xcode-configurations-with-rules_xcodeproj-1-3","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/multiple-xcode-configurations-with-rules_xcodeproj-1-3.md","source":"@site/blog/multiple-xcode-configurations-with-rules_xcodeproj-1-3.md","title":"Multiple Xcode Configurations with rules_xcodeproj 1.3","description":"The one where we added a much requested, but surprisingly difficult to implement, feature.","date":"2023-03-17T12:00:00.000Z","tags":[{"inline":true,"label":"rules_xcodeproj","permalink":"/blog/tags/rules-xcodeproj"}],"readingTime":3.42,"hasTruncateMarker":true,"authors":[{"name":"Brentley Jones","title":"Developer Evangelist @ BuildBuddy","url":"https://brentleyjones.com","imageURL":"https://avatars.githubusercontent.com/u/158658?v=4","key":"brentley","page":null}],"frontMatter":{"slug":"multiple-xcode-configurations-with-rules_xcodeproj-1-3","title":"Multiple Xcode Configurations with rules_xcodeproj 1.3","description":"The one where we added a much requested, but surprisingly difficult to implement, feature.","authors":"brentley","date":"2023-03-17:12:00:00","image":"/img/rules_xcodeproj_1_3.png","tags":["rules_xcodeproj"]},"unlisted":false,"prevItem":{"title":"Donating rules_xcodeproj to the Mobile Native Foundation","permalink":"/blog/donating-rules_xcodeproj-to-the-mobile-native-foundation"},"nextItem":{"title":"Introducing rules_xcodeproj 1.0","permalink":"/blog/introducing-rules_xcodeproj-1-0"}},"content":"Today we released [version 1.3.2][version-1.3] of rules_xcodeproj!\\n\\nThis is a pretty exciting release, as it adds support for multiple Xcode\\nconfigurations (e.g. Debug and Release). Since early in rules_xcodeproj\u2019s\\ndevelopment, being able to have more than the default Debug configuration has\\nbeen highly requested. We would have implemented support much sooner, but\\nbecause rules_xcodeproj accounts for every file path and compiler/linker flag,\\nin order to have rock solid indexing and debugging support, it wasn\u2019t an easy\\ntask.\\n\\n[version-1.3]: https://github.com/buildbuddy-io/rules_xcodeproj/releases/tag/1.3.2\\n\\n\x3c!-- truncate --\x3e\\n\\n# The challenge\\n\\nrules_xcodeproj uses a Bazel aspect to collect all of the information about your\\nbuild graph. It also uses Bazel split transitions in order to apply variations\\nof certain flags in order to support simulator and device builds in a single\\nproject. It seems that it should have been pretty easy to extend this method to\\napply to Xcode configurations as well, right? There were two problems to being\\nable to do that nicely, and we only really solved one of them at this time.\\n\\nThe common way that Bazel developers express various configurations is by\\ndefining various configs in `.bazelrc` files, and then using the `--config`\\nstanza to select them. So, that brings us to our first problem: Bazel\\ntransitions can\u2019t transition on `--config`. Because of our nested invocation\\narchitecture, we are able to apply a single `--config` to the inner invocation,\\nand we\u2019ve had support for this for a while. Being able to transition on\\n`--config` would have allowed us to support multiple Xcode configurations a lot\\nsooner. Of note, in the solution we\u2019ve implemented, you still can\u2019t use\\n`--config`, and need to list out all the flags you want for each configuration.\\nThis is because of this limitation of transitions.\\n\\nFor now we\u2019ve decided to continue to use transitions, and wanted to extend our\\napproach to cover multiple configurations as well. That brought us to our second\\nproblem: transitions are specified as part of a rule definition, and Bazel\\nmacros can\u2019t create anonymous rule. The easy approach to this would have been to\\nrequire users to define transitions in `.bzl` files (with the help of some\\nmacros), and then reference them in their `xcodeproj` targets (which are\\nactually macros, not rules). This would go against one of our driving principles\\nof only needing a single `xcodeproj` target for all but the most complicated\\nsetups, as we believe Xcode configurations are a fundamental aspect of projects\\nthat everyone should be able to easily specify.\\n\\n# The solution\\n\\nThe solution we implemented allows you to specify a dictionary of transition\\nsettings in the `xcodeproj.xcode_configurations` attribute. Given the\\npreviously mentioned limitations, you may be wondering how we were able to\\naccomplish this. Earlier I mentioned our nested invocation architecture, which\\ncalls `bazel run` in `runner.sh` (the script that is invoked when you call\\n`bazel run //:xcodeproj`). We leverage this architecture to generate a Bazel\\npackage in an external repository. This package contains a `BUILD` file with a\\ntarget using the actual `xcodeproj` rule, along with a `.bzl` file that defines\\na custom transition containing information from\\n`xcodeproj.xcode_configurations`. And just like how a solution for a previous\\nfeature was built upon to enable another feature (i.e. nested invocations which\\nenabled isolated build configurations, was built on for generated packages to\\nenable multiple Xcode configurations), we should be able to build on this\\nsolution the same way (e.g. to enable automatic target discovery).\\n\\nHere is an example of how you could specify Debug and Release configurations:\\n\\n```python\\nxcodeproj(\\n    ...\\n    xcode_configurations = {\\n        \\"Debug\\": {\\n            \\"//command_line_option:compilation_mode\\": \\"dbg\\",\\n        },\\n        \\"Release\\": {\\n            \\"//command_line_option:compilation_mode\\": \\"opt\\",\\n        },\\n    },\\n    ...\\n)\\n```\\n\\nWe think the end result is a good starting point, but can be refined futher in\\nfuture releases. Please give it a try, and if you run into any problems\\n[file an issue][file-an-issue]! You can also join us in the `#rules_xcodeproj`\\nchannel in the [Bazel Slack workspace][bazel-slack], and you can email us at\\n[hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts.\\n\\n[bazel-slack]: https://slack.bazel.build/\\n[file-an-issue]: https://github.com/buildbuddy-io/rules_xcodeproj/issues/new/choose\\n[issues]: https://github.com/buildbuddy-io/rules_xcodeproj/issues"},{"id":"introducing-rules_xcodeproj-1-0","metadata":{"permalink":"/blog/introducing-rules_xcodeproj-1-0","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/introducing-rules_xcodeproj-1-0.md","source":"@site/blog/introducing-rules_xcodeproj-1-0.md","title":"Introducing rules_xcodeproj 1.0","description":"How we got here and what\u2019s next.","date":"2023-02-06T09:00:00.000Z","tags":[{"inline":true,"label":"rules_xcodeproj","permalink":"/blog/tags/rules-xcodeproj"}],"readingTime":4.15,"hasTruncateMarker":true,"authors":[{"name":"Brentley Jones","title":"Developer Evangelist @ BuildBuddy","url":"https://brentleyjones.com","imageURL":"https://avatars.githubusercontent.com/u/158658?v=4","key":"brentley","page":null}],"frontMatter":{"slug":"introducing-rules_xcodeproj-1-0","title":"Introducing rules_xcodeproj 1.0","description":"How we got here and what\u2019s next.","authors":"brentley","date":"2023-02-06:9:00:00","image":"/img/rules_xcodeproj_1_0.png","tags":["rules_xcodeproj"]},"unlisted":false,"prevItem":{"title":"Multiple Xcode Configurations with rules_xcodeproj 1.3","permalink":"/blog/multiple-xcode-configurations-with-rules_xcodeproj-1-3"},"nextItem":{"title":"Welcoming Son Luong Ngoc","permalink":"/blog/welcoming-son-luong-ngoc"}},"content":"Almost exactly one year ago I wrote the [first commit][first-commit] for\\n[rules_xcodeproj][rules_xcodeproj]. Like a lot of software engineers, I\u2019m pretty\\nbad at estimating, and thought that I would be able to finish 1.0 in 2 to 4\\nmonths \ud83d\ude05. The longer development cycle was a result of an increased scope and\\nlevel of quality that I came to expect for a proper 1.0 release. Over the course\\nof the year, I believe the project has risen to meet my expectations, and today\\nI\u2019m happy to announce the release of [version 1.0][version-1.0] of\\nrules_xcodeproj!\\n\\n[first-commit]: https://github.com/buildbuddy-io/rules_xcodeproj/commit/0bb516569aee5dd49b004c89a761b5d186f25b15\\n[rules_xcodeproj]: https://github.com/buildbuddy-io/rules_xcodeproj\\n[version-1.0]: https://github.com/buildbuddy-io/rules_xcodeproj/releases/tag/1.0.1\\n\\n\x3c!-- truncate --\x3e\\n\\n<div align=\\"center\\">\\n  <img alt=\\"Screenshot of a rules_xcodeproj generated project open in Xcode\\" src=\\"/img/blog/rules_xcodeproj_screenshot.png\\" width=\\"1245\\" />\\n</div>\\n\\n## The road to 1.0\\n\\nThe road to 1.0 has been an incredible journey. Early in the development cycle\\nSpotify, Robinhood, and Slack engineers became adopters and contributors;\\nwithout their help I wouldn\u2019t be writing this blog post today \ud83d\ude4f.\\n[JP](https://github.com/jpsim) became a vocal champion of rules_xcodeproj after\\nintegrating it with the SwiftLint and Envoy Mobile projects. During BazelCon\\n2022 the project got a couple shout-outs, including during\\n[Erik\u2019s wonderful talk](https://youtu.be/wy3Q38VJ5uQ?t=1209). And I\u2019m also\\nincredibly grateful that I was able to\\n[present rules_xcodeproj itself](https://youtu.be/B__SHnz3K3c) at the same\\nconference.\\n\\nDeciding what was _actually_ important for the 1.0 release shifted throughout\\nthe year. Some things that I initially thought were \u201cnice to haves\u201d, such as\\nframework targets and comprehensive ruleset support, became \u201cblockers\u201d for the\\nrelease. Other things that I was sure we would need before releasing, such as\\nmultiple Xcode configurations (e.g. `Debug`, `Profile`, and `Release`),\\ndiagnostic replaying, and BwX feature parity, ended up not being as important\\n(though don\u2019t worry if you are wanting some of those things, we aren\u2019t done\\nyet!).\\n\\nThe supported feature list also expanded throughout the year. It went from just\\nneeding to support the Core C/C++/Objective-C, [rules_swift][rules_swift], and\\n[rules_apple][rules_apple] rules, to supporting nearly any ruleset. Also,\\noutside contributors made their mark: [Chuck](https://github.com/cgrindel) added\\nsupport for custom Xcode schemes; [Chirag](https://github.com/chiragramani)\\nadded support for Runtime Sanitizers; [Maxwell](https://github.com/maxwellE)\\nadded support for Launch, Profile, and Test action environment variables and\\ncommand-line arguments; [Thi](https://github.com/thii) contributed BwB mode\\nspeed-ups and assisted with landing many more efficiency changes; and many\\nothers helped me test changes on their varied and complex projects. Overall\\nthese contributions, both in actual code and in invaluable time, allowed\\nrules_xcodepoj to be what it is today. Without this community effort the scope\\nand quality of the 1.0 release wouldn\u2019t be at the same level.\\n\\n[rules_apple]: https://github.com/bazelbuild/rules_apple\\n[rules_swift]: https://github.com/bazelbuild/rules_swift\\n\\n## What\u2019s next?\\n\\nWhile the 1.0 release marks a certain level \u201cdoneness\u201d, there is still a lot we\\nwant to add and improve. When I\\n[announced rules_xcodeproj](meet-rules_xcodeproj.md), I listed a set of\\nrequirements that other projects didn\u2019t fulfill, and I stated that I wanted\\nrules_xcodeproj to cover all of them. I feel that with the 1.0 release we still\\nhave a little ways to go to fully cover those requirements; though some\\nwill have to be in spirit instead of to the letter, as Bazel and Xcode proved\\nto be more stubborn than I expected.\\n\\nHere\u2019s a list of changes that I hope we can implement in the near future:\\n\\n- An additional build mode, currently called \u201cBuild with Bazel via Proxy\u201d\\n  (BwBvP)\\n  - Uses [XCBBuildServiceProxyKit][xcbbuildserviceproxykit] to create an\\n    XCBBuildService proxy\\n  - Adds replaying of diagnostics, which removes duplicate errors/warnings,\\n    persists warnings, and enables Fix-Its\\n  - Produces a custom Build Report, removing noise from the logs, and fixing the\\n    progress bar\\n- BwB or BwBvP support for Xcode features that break with relative paths\\n  - Source code viewer in Instruments\\n  - Undefined Behavior Sanitizer navigation\\n  - Thread Performance Checker navigation\\n  - Memory Graph Analyzer with Malloc stack logging navigation\\n  - Inline code coverage\\n- Support for multiple Xcode configurations\\n\\n[xcbbuildserviceproxykit]: https://github.com/MobileNativeFoundation/XCBBuildServiceProxyKit\\n\\n## Thank you\\n\\nOnce again, I would like to thank all of the contributors and users we\u2019ve gained\\nthroughout the last year. Hopefully you are as proud of the 1.0 release as I am.\\nAnd for anyone reading that hasn\u2019t tried rules_xcodeproj yet, or it didn\u2019t meet\\nyour requirements in an earlier release, I invite you to give it a shot now.\\n\\nIf you run into any problems with rules_xcodeproj, please check if\\n[another issue already exists][issues] and comment on it, and if not,\\n[file an issue][file-an-issue]! You can also join us in the `#rules_xcodeproj`\\nchannel in the [Bazel Slack workspace][bazel-slack], and you can email us at\\n[hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts.\\n\\n[bazel-slack]: https://slack.bazel.build/\\n[file-an-issue]: https://github.com/buildbuddy-io/rules_xcodeproj/issues/new/choose\\n[issues]: https://github.com/buildbuddy-io/rules_xcodeproj/issues"},{"id":"welcoming-son-luong-ngoc","metadata":{"permalink":"/blog/welcoming-son-luong-ngoc","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/welcoming-son-luong-ngoc.md","source":"@site/blog/welcoming-son-luong-ngoc.md","title":"Welcoming Son Luong Ngoc","description":"At BuildBuddy, our mission is to bring the world\'s best developer tools to every company. A big part of that mission involves building a team folks with deep industry experience helping companies build and scale their systems.","date":"2023-01-10T12:00:00.000Z","tags":[{"inline":true,"label":"company","permalink":"/blog/tags/company"},{"inline":true,"label":"team","permalink":"/blog/tags/team"}],"readingTime":1.05,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"welcoming-son-luong-ngoc","title":"Welcoming Son Luong Ngoc","authors":"siggi","date":"2023-01-10T12:00:00.000Z","image":"/img/welcome_son.png","tags":["company","team"]},"unlisted":false,"prevItem":{"title":"Introducing rules_xcodeproj 1.0","permalink":"/blog/introducing-rules_xcodeproj-1-0"},"nextItem":{"title":"What\'s New in Bazel 6.0","permalink":"/blog/whats-new-in-bazel-6-0"}},"content":"At BuildBuddy, our mission is to bring the world\'s best developer tools to every company. A big part of that mission involves building a team folks with deep industry experience helping companies build and scale their systems.\\n\\nThat\'s why we\'re so excited to share that [**Son Luong Ngoc**](https://www.linkedin.com/in/luongngocson/) has joined BuildBuddy as a Solutions Engineer. His work with Bazel at scale will directly benefit BuildBuddy users and customers.\\n\\nSon Luong is a contributor to [bazel](https://github.com/bazelbuild/bazel/pulls?q=is%3Apr+author%3Asluongng), [git](http://public-inbox.org/git/?q=sluongng), [rules_go](https://github.com/bazelbuild/rules_go/pulls?q=author%3Asluongng), [rules_docker](https://github.com/bazelbuild/rules_docker/commits?author=sluongng), [bazel-gazelle](https://github.com/bazelbuild/bazel-gazelle/pulls?q=author%3Asluongng), and more. He\'s also a regular contributor to the [Bazel Slack](https://slack.bazel.build/) and maintains an [incredible blog](https://sluongng.hashnode.dev/) that explains the inner workings of Bazel.\\n\\nSon Luong joins us from Qarik, where he helped large enterprises with Bazel and scalable build infrastructure. Prior to Qarik, Son Luong was an SRE at Booking.com, where he helped scale their Bazel monorepo.\\n\\n![](../static/img/blog/welcome_son.png)\\n\\nWe look forward to working alongside Son Luong to build the future of developer tools.\\n\\nWelcome to BuildBuddy, Son Luong!\\n\\n\x3c!-- truncate --\x3e"},{"id":"whats-new-in-bazel-6-0","metadata":{"permalink":"/blog/whats-new-in-bazel-6-0","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/whats-new-in-bazel-6-0.md","source":"@site/blog/whats-new-in-bazel-6-0.md","title":"What\'s New in Bazel 6.0","description":"We reviewed over 3,100 commits and summarized them, again \ud83d\ude05, so you don\'t have to!","date":"2022-12-19T09:00:00.000Z","tags":[{"inline":true,"label":"bazel","permalink":"/blog/tags/bazel"}],"readingTime":29.7,"hasTruncateMarker":true,"authors":[{"name":"Brentley Jones","title":"Developer Evangelist @ BuildBuddy","url":"https://brentleyjones.com","imageURL":"https://avatars.githubusercontent.com/u/158658?v=4","key":"brentley","page":null}],"frontMatter":{"slug":"whats-new-in-bazel-6-0","title":"What\'s New in Bazel 6.0","description":"We reviewed over 3,100 commits and summarized them, again \ud83d\ude05, so you don\'t have to!","authors":"brentley","date":"2022-12-19:9:00:00","image":"/img/bazel_6_0.png","tags":["bazel"]},"unlisted":false,"prevItem":{"title":"Welcoming Son Luong Ngoc","permalink":"/blog/welcoming-son-luong-ngoc"},"nextItem":{"title":"Welcoming Jim Hollenbach","permalink":"/blog/welcoming-jim-hollenbach"}},"content":"[Bazel 6.0][bazel-6-0] includes [over 3,100 changes][diff] since 5.4.\\nIt\'s the latest major release,\\nfollowing the release of 5.0 in January of this year,\\nand it\'s Bazel\'s [third LTS release][lts-releases].\\nSince there were so many changes,\\nmany of them quite impactful,\\nI felt I needed to review them all and provide a nice summary for y\'all.\\n\\n[bazel-6-0]: https://blog.bazel.build/2022/12/19/bazel-6.0.html\\n[diff]: https://github.com/bazelbuild/bazel/compare/5.4.0...6.0.0\\n[lts-releases]: https://bazel.build/versions/6.0.0/release/versioning#lts-releases\\n\\n\x3c!-- truncate --\x3e\\n\\nSimilar to [Bazel 5.0\'s changes][whats-new-in-bazel-5],\\nthe end result was quite big,\\nso I\'ve included a table of contents to allow easy navigation to the changes that interest you the most:\\n\\n<nav className=\\"toc\\">\\n\\n- [Command-line flag changes](#command-line-flag-changes)\\n  - [Renamed](#renamed)\\n  - [Default values changed](#default-values-changed)\\n  - [Deprecated](#deprecated)\\n  - [No-op](#no-op)\\n  - [Removed](#removed)\\n- [Remote](#remote)\\n  - [Remote caching (RBC)](#remote-caching-rbc)\\n  - [Remote execution (RBE)](#remote-execution-rbe)\\n  - [Dynamic execution](#dynamic-execution)\\n  - [Local execution](#local-execution)\\n  - [Build Event Service (BES)](#build-event-service-bes)\\n- [Logging](#logging)\\n  - [Build Event Protocol (BEP)](#build-event-protocol-bep)\\n  - [Timing profile](#timing-profile)\\n  - [Execution log](#execution-log)\\n- [Query](#query)\\n  - [`cquery`](#cquery)\\n  - [`aquery`](#aquery)\\n- [Dependency management](#dependency-management)\\n- [Platforms and toolchains](#platforms-and-toolchains)\\n- [Execution platforms](#execution-platforms)\\n  - [Linux](#linux)\\n  - [macOS](#macos)\\n- [Target platforms](#target-platforms)\\n  - [Android](#android)\\n  - [Apple](#apple)\\n- [Languages](#languages)\\n  - [C and C++](#c-and-c)\\n  - [Java](#java)\\n  - [Objective-C](#objective-c)\\n  - [Python](#python)\\n- [Rules authoring](#rules-authoring)\\n  - [Aspects](#aspects)\\n  - [Persistent workers](#persistent-workers)\\n  - [Starlark](#starlark)\\n- [Misc](#misc)\\n\\n</nav>\\n\\n[whats-new-in-bazel-5]: whats-new-in-bazel-5-0.md\\n\\n## Command-line flag changes\\n\\nBazel\'s [LTS strategy][lts-releases] allows for breaking changes between major versions.\\nIn particular,\\nit allows for command-line flags to be removed,\\nrenamed,\\nmade to do nothing,\\nor have their default values changed.\\nIn the following sections I collected all such flag changes I could find.\\n\\n### Renamed\\n\\n- `--experimental_build_transitive_python_runfiles` is now `--incompatible_build_transitive_python_runfiles`. ([36afffa](https://github.com/bazelbuild/bazel/commit/36afffa04151d9243051f83897c88257ab4d1026))\\n- `--experimental_debug_spawn_scheduler` is now `--debug_spawn_scheduler`. ([e38c73f](https://github.com/bazelbuild/bazel/commit/e38c73f8ecc327d54e0409892468ad1bec6e4a49))\\n- `--experimental_desugar_java8_libs` is now `--desugar_java8_libs`. ([e38c73f](https://github.com/bazelbuild/bazel/commit/e38c73f8ecc327d54e0409892468ad1bec6e4a49))\\n- `--experimental_enable_bzlmod` is now `--enable_bzlmod`. ([f106d5c](https://github.com/bazelbuild/bazel/commit/f106d5c1dc4d84e119537dda3d68bc2dd83e2077))\\n- `--experimental_local_execution_delay` is now `--dynamic_local_execution_delay`. ([e38c73f](https://github.com/bazelbuild/bazel/commit/e38c73f8ecc327d54e0409892468ad1bec6e4a49))\\n- `--experimental_worker_max_multiplex_instances` is now `--worker_max_multiplex_instances`. ([e38c73f](https://github.com/bazelbuild/bazel/commit/e38c73f8ecc327d54e0409892468ad1bec6e4a49))\\n\\n### Default values changed\\n\\n- `--analysis_testing_deps_limit=1000` ([21dfe4c](https://github.com/bazelbuild/bazel/commit/21dfe4cdc35ed0b3536accdc91be042aa5c550aa))\\n- `--experimental_allow_unresolved_symlinks=true` ([3d5c5d7](https://github.com/bazelbuild/bazel/commit/3d5c5d746b286c840ba5cfd437d93d8d11995e02))\\n- `--experimental_keep_config_nodes_on_analysis_discard=true` ([60523c7](https://github.com/bazelbuild/bazel/commit/60523c7fecd4e72490c2dde547e1e36eab5a79ef))\\n- `--experimental_collect_local_sandbox_action_metrics=true` ([60523c7](https://github.com/bazelbuild/bazel/commit/60523c7fecd4e72490c2dde547e1e36eab5a79ef))\\n- `--experimental_incremental_dexing_after_proguard=50` ([ce55639](https://github.com/bazelbuild/bazel/commit/ce55639c3ef2b9bd703d64026c40df0b7485b6a5))\\n- `--experimental_incremental_dexing_after_proguard_by_default=true` ([ce55639](https://github.com/bazelbuild/bazel/commit/ce55639c3ef2b9bd703d64026c40df0b7485b6a5))\\n- `--experimental_inmemory_dotd_files=true` ([d44f11b](https://github.com/bazelbuild/bazel/commit/d44f11be11f3ec12d644eb5f5245bf70c6a65bee))\\n- `--experimental_inmemory_jdeps_files=true` ([822e049](https://github.com/bazelbuild/bazel/commit/822e049d2881a1c7bedc9182116f772a72e00227))\\n- `--experimental_keep_config_nodes_on_analysis_discard=false` ([2f9f842](https://github.com/bazelbuild/bazel/commit/2f9f8429be9651d4bb94b425b6ae5f11e95bea16))\\n- `--experimental_use_dex_splitter_for_incremental_dexing=true` ([ce55639](https://github.com/bazelbuild/bazel/commit/ce55639c3ef2b9bd703d64026c40df0b7485b6a5))\\n- `--incompatible_always_include_files_in_data=true` ([0caf488](https://github.com/bazelbuild/bazel/commit/0caf488a7492740425af88b32c622fdc33bc1593))\\n- `--incompatible_enforce_config_setting_visibility=true` ([aad2db2](https://github.com/bazelbuild/bazel/commit/aad2db2aad2db20b51037ec849a11e4d43d6d6136e84889))\\n- `--incompatible_existing_rules_immutable_view=true` ([74b7dd5](https://github.com/bazelbuild/bazel/commit/74b7dd55325d6588f1a8827dd3bdb30deea073a0))\\n- `--incompatible_remote_results_ignore_disk=true` ([4c56431](https://github.com/bazelbuild/bazel/commit/4c56431c271850f7536aae0a0719f811e3c35b5b))\\n- `--incompatible_use_platforms_repo_for_constraints=true` ([f137e64](https://github.com/bazelbuild/bazel/commit/f137e640303486b52e39b4d4edee088f895b6b00))\\n- `--use_top_level_targets_for_symlinks=true` ([6452024](https://github.com/bazelbuild/bazel/commit/6452024a0106ab901f38027db65e8ab831201288))\\n- `--use_workers_with_dexbuilder=true` ([0c3f528](https://github.com/bazelbuild/bazel/commit/0c3f5280e0746b9cbf222b426d3885658e525b0b))\\n\\n### Deprecated\\n\\n- `--allowed_local_actions_regex` ([16f2eec](https://github.com/bazelbuild/bazel/commit/16f2eecc3c2406d9de0cfc11f8187cb68df12b51))\\n- `--experimental_spawn_scheduler` ([da6f802](https://github.com/bazelbuild/bazel/commit/da6f8026967e2338973306c9d85ae6cf23244ecb))\\n\\n### No-op\\n\\nThese flags now do nothing, but still exist to allow for migration off of them:\\n\\n- `--distinct_host_configuration` ([78d0fc9](https://github.com/bazelbuild/bazel/commit/78d0fc9ff1d2f22005ddfce43384e35fbac338cb))\\n- `--dynamic_worker_strategy` ([db64e7e](https://github.com/bazelbuild/bazel/commit/db64e7e54b7f17e86a3206b4834f0fd11c065155))\\n- `--experimental_allow_top_level_aspects_parameters` ([bccbcbf](https://github.com/bazelbuild/bazel/commit/bccbcbf9767ebd081df464db78c582d25173115b))\\n- `--experimental_dynamic_skip_first_build` ([db64e7e](https://github.com/bazelbuild/bazel/commit/db64e7e54b7f17e86a3206b4834f0fd11c065155))\\n- `--experimental_keep_config_nodes_on_analysis_discard` ([75bb463](https://github.com/bazelbuild/bazel/commit/75bb463ab73f5f7cc60e7cc445ba24b377f4963f))\\n- `--experimental_multi_cpu` ([85bfefe](https://github.com/bazelbuild/bazel/commit/85bfefedeef20063fb6d17a73d9ee18a028414f7))\\n- `--experimental_skyframe_prepare_analysis` ([f22e63d](https://github.com/bazelbuild/bazel/commit/f22e63deef43141f08b63cc0210fc9b9e2fded1d))\\n- `--incompatible_disable_managed_directories` ([cbf8159](https://github.com/bazelbuild/bazel/commit/cbf8159ba6190ab447ad54df63cb4db25763d755))\\n- `--incompatible_disable_third_party_license_checking` ([0aa750b](https://github.com/bazelbuild/bazel/commit/0aa750b7252ef8c71e11ae2f6cf6849b6ff0e715))\\n- `--incompatible_disallow_legacy_py_provider` ([f068b31](https://github.com/bazelbuild/bazel/commit/f068b31c94eef1ea10477a755d9173b4fadf6485))\\n- `--incompatible_override_toolchain_transition` ([2d5375c](https://github.com/bazelbuild/bazel/commit/2d5375c27a4ca43635183bbe0d12849c64a6176e))\\n\\n### Removed\\n\\n- `--all_incompatible_changes` ([8e6c469](https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc))\\n- `--analysis_warnings_as_errors` ([8e6c469](https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc))\\n- `--default_android_platform` ([ed7a056](https://github.com/bazelbuild/bazel/commit/ed7a0565f02b496bc4fc613157111638e8dd997f))\\n- `--experimental_delay_virtual_input_materialization` ([c887c2a](https://github.com/bazelbuild/bazel/commit/c887c2a4fe4395f9663ce2f1cde9b656d216415c))\\n- `--experimental_enable_cc_toolchain_config_info` ([8e6c469](https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc))\\n- `--experimental_local_memory_estimate` ([361ce67](https://github.com/bazelbuild/bazel/commit/361ce673ad2b959b73e859a121ff2e996feb561b))\\n- `--experimental_persistent_test_runner` ([1f33504](https://github.com/bazelbuild/bazel/commit/1f33504af3ebe3a43aa91e607e94edc07b1807f8))\\n- `--experimental_profile_cpu_usage` ([8e6c469](https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc))\\n- `--experimental_required_aspects` ([8e6c469](https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc))\\n- `--experimental_shadowed_action` ([8e6c469](https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc))\\n- `--experimental_skyframe_eval_with_ordered_list` ([8e6c469](https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc))\\n- `--experimental_worker_allow_json_protocol` ([09df7c0](https://github.com/bazelbuild/bazel/commit/09df7c0a14b9bf13d4aa18f5a02b4651e626d5f4))\\n- `--extra_proguard_specs` ([ab51d2e](https://github.com/bazelbuild/bazel/commit/ab51d2e45378d6ec23bce8b5b40d632364d77dbb))\\n- `--forceJumbo` ([9cb551c](https://github.com/bazelbuild/bazel/commit/9cb551c0e540090679448460ee19b04b0f281f1d))\\n- `--incompatible_applicable_licenses` ([29e4aee](https://github.com/bazelbuild/bazel/commit/29e4aee112e8649c93577ec225c7ed9fdedd76a2))\\n- `--incompatible_disable_depset_items` ([bf30d81](https://github.com/bazelbuild/bazel/commit/bf30d81caf907e0fa58e71b63924d81a1271c40a))\\n- `--incompatible_disable_late_bound_option_defaults` ([8e6c469](https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc))\\n- `--incompatible_disable_legacy_proto_provider` ([8e6c469](https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc))\\n- `--incompatible_disable_proto_source_root` ([8e6c469](https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc))\\n- `--incompatible_do_not_emit_buggy_external_repo_import` ([8e6c469](https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc))\\n- `--incompatible_enable_exports_provider` ([01a46f0](https://github.com/bazelbuild/bazel/commit/01a46f05dc79db2313c6c8e174a5d6eab474aefc))\\n- `--incompatible_linkopts_to_linklibs` ([34ce6a2](https://github.com/bazelbuild/bazel/commit/34ce6a23f5a2be58bb59661dd5fc9ab586ea1703))\\n- `--incompatible_proto_output_v2` ([6b6c63e](https://github.com/bazelbuild/bazel/commit/6b6c63ed9fb5d51a90b91dca4bed5a68955a6859))\\n- `--incompatible_use_native_patch` ([8e6c469](https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc))\\n- `--ios_cpu` ([684fb0a](https://github.com/bazelbuild/bazel/commit/684fb0a576827d4f5c7311f3ac13b59d0786ea04))\\n- `--json_trace_compression` ([8e6c469](https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc))\\n- `--master_bazelrc` ([96c8a90](https://github.com/bazelbuild/bazel/commit/96c8a9073807c9e97635ddafe2ed0365a9318d6f))\\n- `--max-bytes-wasted-per-file` ([e846207](https://github.com/bazelbuild/bazel/commit/e846207dc2495e39fd178218b29bab3b4a8cd1d1))\\n- `--minimal-main-dex` ([63ddfc4](https://github.com/bazelbuild/bazel/commit/63ddfc468d5b8a5c5f4ead28997dd4412fbfbb76))\\n- `--remote_allow_symlink_upload` ([4f557e8](https://github.com/bazelbuild/bazel/commit/4f557e8af473d26a55265ada7c4c950b7bef9b35))\\n- `--set-max-idx-number` ([e846207](https://github.com/bazelbuild/bazel/commit/e846207dc2495e39fd178218b29bab3b4a8cd1d1))\\n- `--show_task_finish` ([2e48994](https://github.com/bazelbuild/bazel/commit/2e48994ab8202796324df3c93ff9441a44b5ba4d))\\n- `--ui` ([8e6c469](https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc))\\n\\n## Remote\\n\\nOne of Bazel\'s most powerful features is its ability to use [remote caching and remote execution][remote-explained].\\nNumerous improvements and fixes to Bazel\'s remote capabilities are included in Bazel 6.0.\\n\\n[remote-explained]: bazels-remote-caching-and-remote-execution-explained.md\\n\\n### Remote caching (RBC)\\n\\nUsing a remote cache is one of the most popular ways of speeding up a Bazel build.\\nThankfully these changes make using a remote cache both more performant and more reliable:\\n\\n- Added the `--experimental_remote_downloader_local_fallback` flag, which causes the remote downloader to fallback to normal fetching. ([7b141c1](https://github.com/bazelbuild/bazel/commit/7b141c1edf243acae5859f56cd0afff2d3eaba32))\\n- Added the `--incompatible_remote_downloader_send_all_headers` flag, which causes all values of a multi-value header to be sent with Remote Downloader. ([b750f8c](https://github.com/bazelbuild/bazel/commit/b750f8c0242d7fcb581d368d8b75e59c51c13a61))\\n- The `--experimental_action_cache_store_output_metadata` flag is now enabled by default when using the `--remote_download_*` flags. ([e5f92a4](https://github.com/bazelbuild/bazel/commit/e5f92a40338ffe0f50f817ee1b2b6e3557d380e2))\\n- Outputs downloaded with `--experimental_remote_download_regex` no longer block spawn execution. ([e01e7f5](https://github.com/bazelbuild/bazel/commit/e01e7f51dd19f39ce3bc0718cec20ed6474de733))\\n- `--experimental_remote_download_regex` now matches on execution root relative paths. ([bb8e6ec](https://github.com/bazelbuild/bazel/commit/bb8e6eca7a8698b2bb8216160038a36e55e69da7))\\n- Top-level outputs are now always downloaded when using `--remote_download_toplevel`. ([b6f3111](https://github.com/bazelbuild/bazel/commit/b6f3111d8e460de35a5e5570bd784919fc30c5f8))\\n- `bazel run` now works with `--remote_download_minimal`. ([845077f](https://github.com/bazelbuild/bazel/commit/845077fff18432e6b2a1a089964e1afc9b9fec7f))\\n- When using Build without the Bytes, AC results in the disk cache are now validated to be complete. ([21b0992](https://github.com/bazelbuild/bazel/commit/21b0992eb26e91ad3e6d3046fa90f1f7ad8b9f08))\\n- Outputs and stdErr are now always downloaded. ([b303cd1](https://github.com/bazelbuild/bazel/commit/b303cd128d9f1d913749927f4a1cd942b10b1ae2))\\n- Symlinked targets are no longer unnecessarily downloaded. ([32b0f5a](https://github.com/bazelbuild/bazel/commit/32b0f5a258ee83b040d6975a6bd0795670f5cd47))\\n- Downloads now use a priority system to improve critical path performance. ([05b9739](https://github.com/bazelbuild/bazel/commit/05b97393ff7604f237d9d31bd63714f27fbe83f2))\\n- HTTP remote caches now support client TLS authentication. ([aaf65b9](https://github.com/bazelbuild/bazel/commit/aaf65b97b7cd75160b4b4dcc9149fb9fc60e1759))\\n- Headers are no longer included in `FetchBlobRequest`. ([7aa69a9](https://github.com/bazelbuild/bazel/commit/7aa69a968b9063cb080417426a11bb32954f7f6c))\\n- AC uploads will no longer error if `--remote_upload_local_results=true` and `GetCapabilities` returns `update_enabled=false`. ([f589512](https://github.com/bazelbuild/bazel/commit/f589512846c5762e89757b96835ee54da4bb2281))\\n- Fixed hanging when failing to upload action inputs. ([8b61746](https://github.com/bazelbuild/bazel/commit/8b61746cf18d3d8413b569e0b5fca639d28914ea))\\n\\n### Remote execution (RBE)\\n\\nFor some projects,\\nusing remote execution is the ultimate performance unlock for their Bazel builds.\\nIn addition to the remote caching changes covered above,\\nwhich also apply to remote execution,\\nthe following changes improve the remote execution experience:\\n\\n- Added the `--experimental_remote_mark_tool_inputs` flag, which marks tool inputs for remote executors, which in turn allows them to implement remote persistent workers. ([72b481a](https://github.com/bazelbuild/bazel/commit/72b481a8e9c19de1acf323c69d2d822c954a6dbb))\\n- Added the `--incompatible_remote_dangling_symlinks` flag, which allows symlinks in action outputs to dangle. ([5b46a48](https://github.com/bazelbuild/bazel/commit/5b46a48db8b380ba9afe2df2cb7d564b0c927913))\\n- Added the `--remote_print_execution_messages` flag, which allows control over when to print remote execution messages. ([8b57c58](https://github.com/bazelbuild/bazel/commit/8b57c5810f2cc58f71995be83604d47226cf9244))\\n- Added the `exclusive-if-local` tag, for disabling parallel local test execution but allowing remote execution if requested. ([8936828](https://github.com/bazelbuild/bazel/commit/8936828610db8106864e41860ad86c5c415fa0ed))\\n- Added support for remotely generating unresolved symlinks. ([ca95fec](https://github.com/bazelbuild/bazel/commit/ca95fecde07a28736ea815ec64bcd639a234d79c))\\n- Fixed formatting of non-ASCII text. ([c55b01e](https://github.com/bazelbuild/bazel/commit/c55b01e3e4c535738f9aebbb4d1ba0623235aee0))\\n\\n### Dynamic execution\\n\\n[Dynamic execution][dynamic-execution] allows for Bazel to race remote and local execution of actions,\\npotentially allowing you to get the benefit of both modes,\\nwithout the drawbacks of either.\\nBazel 6.0 included a number of changes to dynamic execution,\\nalmost all of them behind new experimental flags:\\n\\n- Added the `--experimental_dynamic_exclude_tools` flag, which prevents dynamic execution for tools. ([9a52a27](https://github.com/bazelbuild/bazel/commit/9a52a270132250b11523db055e13e69791aecba1))\\n- Added the `--experimental_dynamic_local_load_factor` flag, which controls how much load from dynamic execution to put on the local machine. ([d5c4f55](https://github.com/bazelbuild/bazel/commit/d5c4f551fa9f5981b36ab67c69386e3787d06f0c))\\n- Added the `--experimental_dynamic_slow_remote_time` flag, which starts locally scheduling actions above a certain age in dynamic scheduling. ([88f605c](https://github.com/bazelbuild/bazel/commit/88f605c689881f50e8ec310f43878e411936f23c))\\n- Added the `--experimental_prioritize_local_actions` flag, which prioritizes local-only actions over dynamically executed actions for local resources. ([8fa3ccb](https://github.com/bazelbuild/bazel/commit/8fa3ccbb072236a8d0a4937e9e4a0ced58268c25))\\n\\n[dynamic-execution]: https://bazel.build/versions/6.0.0/remote/dynamic\\n\\n### Local execution\\n\\nIn `buck2`,\\n[local execution is a specialization of remote execution][buck2-local-execution].\\nSo I\'m going to use that as the reason that this section is listed under the \\"Remote\\" section,\\nand not because I don\'t want to reorganize this post just to fit in a couple neat local execution changes \ud83d\ude09:\\n\\n- [Announced at BazelCon][skymeld-bazelcon], SkyMeld allows merging the analysis and execution phases with the the [`--experimental_merged_skyframe_analysis_execution` and `--experimental_skymeld_ui` flags](https://github.com/bazelbuild/bazel/issues/14057).\\n- Local actions now fetch inputs before acquiring the resource lock. ([17276d4](https://github.com/bazelbuild/bazel/commit/17276d4fade793955a6f2491e3527c2be184867a))\\n\\n[buck2-local-execution]: https://github.com/facebookincubator/buck2/blob/2116ae1d48d63109d72cb7100cb99ad8d20bc873/docs/why.md#why-might-it-be-interesting\\n[skymeld-bazelcon]: https://youtu.be/IEJLHNNRP9U\\n\\n### Build Event Service (BES)\\n\\nUsing a build event service can give you unparalleled insight into your Bazel builds at scale.\\nThere were some nice changes to BES support,\\nthough I think the improvements to how it interacts with the remote cache are especially noteworthy.\\n\\n- Added the `--bep_maximum_open_remote_upload_files` flag, which allows control over the maximum number of open files allowed during BEP artifact upload. ([46104c6](https://github.com/bazelbuild/bazel/commit/46104c6948dc4ca66797e413c62b58bd21981c51))\\n- Added the `--bes_check_preceding_lifecycle_events` flag, which tells BES to check whether it previously received `InvocationAttemptStarted` and `BuildEnqueued` events matching the current tool event. ([14b5c41](https://github.com/bazelbuild/bazel/commit/14b5c41c29423866cd3f2ee3f7b69ff48241bd34))\\n- Added the `--experimental_build_event_upload_max_retries` and `--experimental_build_event_upload_retry_minimum_delay` flags, which allow for configuring the behavior of BES uploader retires. ([e7218d5](https://github.com/bazelbuild/bazel/commit/e7218d556a2a265183a10a19fcaa21c0277820ad))\\n- Added the `--experimental_remote_build_event_upload` flag, which controls the way Bazel uploads files referenced in BEP to remote caches. ([6b52772](https://github.com/bazelbuild/bazel/commit/6b5277294bfcf032d1d2d009c102147af12ec896))\\n- BES RPC calls now include request metadata. ([dbcf260](https://github.com/bazelbuild/bazel/commit/dbcf260e0318ef553d606b0510832cfe8a5b14eb))\\n\\n## Logging\\n\\nBazel offers various methods to gain insight into your build.\\nI cover some of the notable changes to those methods below.\\n\\n### Build Event Protocol (BEP)\\n\\nThe build event protocol is used by [build event services](#build-event-service-bes),\\nso all of these changes could have also been listed in that section as well.\\nThe BEP can also be collected locally with [`--build_event_json_file`][build_event_json_file] and [`--build_event_binary_file`][build_event_binary_file].\\n\\nThe vast majority of changes added additional information to the BEP,\\nthough some are fixes and improvements:\\n\\n- Added the `digest` and `length` fields to `File`. ([da6d949](https://github.com/bazelbuild/bazel/commit/da6d9499d61ed4fb14a0bbbf456d5e9381c328ee))\\n- Added the `BuildMetrics.network_metrics` field. ([9bc9096](https://github.com/bazelbuild/bazel/commit/9bc9096241fb414303cafecd36a993f45117f3e1))\\n- Added the `MemoryMetrics.peak_post_gc_tenured_space_heap_size` field. ([a9ac2b6](https://github.com/bazelbuild/bazel/commit/a9ac2b6162234c4c1d0db37a6d7b783763d0f79f))\\n- Added the `WorkerMetrics.last_action_start_time_in_ms` field. ([d233c89](https://github.com/bazelbuild/bazel/commit/d233c896fd6eff93901f7dd8641936a76b544ccb))\\n- Changed the semantics of `build_event_stream.BuildMetrics.PackageMetrics.packages_loaded` to be the number of packages successfully loaded. ([d8c25fc](https://github.com/bazelbuild/bazel/commit/d8c25fcced761cb139e560076d24d9f179055548))\\n- Deprecated `AnomalyReport`. ([286fb80](https://github.com/bazelbuild/bazel/commit/286fb80081db0af43b1f86292ce417c6541d4ad4))\\n\\n[build_event_binary_file]: https://bazel.build/versions/6.0.0/reference/command-line-reference#flag--build_event_binary_file\\n[build_event_json_file]: https://bazel.build/versions/6.0.0/reference/command-line-reference#flag--build_event_json_file\\n\\n### Timing profile\\n\\nThe action timing profile,\\nwhich is enabled by default with [`--profile`][profile],\\nis viewable both [locally in Chrome][performance-profiling] and on [build event services](#build-event-service-bes).\\nThese changes add more detail and clarity to the profile:\\n\\n- Added action mnemonics. ([e78fd2e](https://github.com/bazelbuild/bazel/commit/e78fd2e5f4cfc4029d4725d764eca0b1abff164b))\\n- Added the `--experimental_collect_load_average_in_profiler` flag, which adds the system\'s overall load average. ([b4dbed0](https://github.com/bazelbuild/bazel/commit/b4dbed0c599862cc3886fc644cda95d0a38b4f70))\\n- Added the `--experimental_collect_system_network_usage` flag, which adds system network usage. ([e382cb2](https://github.com/bazelbuild/bazel/commit/e382cb2fd7b02e557a513f93a58eafd42ab234b0))\\n- Added the `--experimental_collect_worker_data_in_profiler` flag, which adds worker memory usage. ([be5354b](https://github.com/bazelbuild/bazel/commit/be5354b4b4a27d34badbce0c6540b879c84fd865))\\n- Improved reporting of critical path components. ([3d2bb2a](https://github.com/bazelbuild/bazel/commit/3d2bb2a400c48bc51e43db11ac154d999a97881b))\\n- Made the `sort_index` value always a string. ([081f831](https://github.com/bazelbuild/bazel/commit/081f831e3c86b4a4c6d6107b29c4883581b94aee))\\n\\n[performance-profiling]: https://bazel.build/versions/6.0.0/rules/performance#performance-profiling\\n[profile]: https://bazel.build/versions/6.0.0/reference/command-line-reference#flag--profile\\n\\n### Execution log\\n\\nBazel logs all of the [spawns][spawns] it executes in the execution log,\\nwhich is enabled with the [`--execution_log_json_file`][execution_log_json_file] or [`--execution_log_binary_file`][execution_log_binary_file] flags.\\nThis feature is relatively stable,\\nwith just a few noticeable additions:\\n\\n- Added the `--experimental_execution_log_spawn_metrics` flag, which causes spawn metrics in be included in the execution log. ([b4b8b26](https://github.com/bazelbuild/bazel/commit/b4b8b2614ae854651075506666f109d0fc508ad1))\\n- Added the `SpawnExec.digest` field. ([b2cbc9a](https://github.com/bazelbuild/bazel/commit/b2cbc9a17c90f9ddeb88eca4756cb2fc764abebe))\\n- Added the `SpawnExec.target_label` field. ([9f908ca](https://github.com/bazelbuild/bazel/commit/9f908cada13c9015f267f368f263c361df812983))\\n\\n[execution_log_binary_file]: https://bazel.build/versions/6.0.0/reference/command-line-reference#flag--execution_log_binary_file\\n[execution_log_json_file]: https://bazel.build/versions/6.0.0/reference/command-line-reference#flag--execution_log_json_file\\n[spawns]: bazels-remote-caching-and-remote-execution-explained.md#spawns\\n\\n## Query\\n\\n`bazel build` wasn\'t the only command to get improvements in this release.\\nHere are some changes that were made to the `query` family of commands:\\n\\n- Added the `--incompatible_package_group_includes_double_slash` flag, which removes the leading `//` from `package_group.package` output. ([1473988](https://github.com/bazelbuild/bazel/commit/1473988aa1e9b92c42fcbad4e155f247f1983d13))\\n- Added an optional second argument to the `some` operator, specifying number of nodes returned. ([cc71db2](https://github.com/bazelbuild/bazel/commit/cc71db2a465716ba175d3defaa6032107bf1dd90))\\n- Labels are decanonicalized if possible. ([47b1cad](https://github.com/bazelbuild/bazel/commit/47b1cad5a6026c220002d56ae3c25e5c20d0cef7))\\n\\n### `cquery`\\n\\n- Added support for queries over incompatible targets. ([73b22b6](https://github.com/bazelbuild/bazel/commit/73b22b6485de339794bf623e592f2595692c10af))\\n- Added `struct`, `json`, `proto`, and `depset` to `--output=starlark`. ([d693465](https://github.com/bazelbuild/bazel/commit/d69346575a7a2f791e61d181ca59aae6354236f9))\\n- Added `ConfiguredRuleInput` when using `--transitions`, which reports the configuration dependencies are configured in. ([9994c32](https://github.com/bazelbuild/bazel/commit/9994c3277607a3b7bd452512e1ff6e5ba73bbc4a))\\n- Added more information about configurations to proto output. ([29d46eb](https://github.com/bazelbuild/bazel/commit/29d46eb41a413430498ab033f84a8d960edfb6fb))\\n- Added the `Configuration.is_tool` attribute to proto output. ([fb92e2d](https://github.com/bazelbuild/bazel/commit/fb92e2da3c75db0ac3c119d137119d38c4858009))\\n- Complete configurations are now included in proto output. ([ac48e65](https://github.com/bazelbuild/bazel/commit/ac48e65f702d3e135bb0b6729392f9cb485da100))\\n- `--output=files` now also outputs source files. ([ca8674c](https://github.com/bazelbuild/bazel/commit/ca8674cc4879ed1846bf015c33fe7d920a3f66ab))\\n- Starlark transitions now report source code location. ([5de9888](https://github.com/bazelbuild/bazel/commit/5de9888f1f28837d0e801f7a4bbbf6f5d6481012))\\n- Updated `AnalysisProtosV2`. ([46a36d6](https://github.com/bazelbuild/bazel/commit/46a36d683801604e92b8b38f74a1388a973fd543))\\n\\n### `aquery`\\n\\n- Added the `--include_file_write_contents` flag, which includes file contents for the `FileWrite` action. ([6d73b96](https://github.com/bazelbuild/bazel/commit/6d73b9619026c536bb9e64f69b515d015b18bf67))\\n- Added the `Configuration.is_tool` attribute to the proto output. ([fb92e2d](https://github.com/bazelbuild/bazel/commit/fb92e2da3c75db0ac3c119d137119d38c4858009))\\n- Fixed formatting of non-ASCII text. ([c55b01e](https://github.com/bazelbuild/bazel/commit/c55b01e3e4c535738f9aebbb4d1ba0623235aee0))\\n- Fixed non-deterministic sorting of execution requirements. ([ec1ac2f](https://github.com/bazelbuild/bazel/commit/ec1ac2f272716a25f9909d61bddb5cfe82756a7b))\\n\\n## Dependency management\\n\\nA new dependency system named [Bzlmod][bzlmod] was added in Bazel 5.0,\\nand made non-experimental in Bazel 6.0.\\nBesides all of the changes needed to support Bzlmod,\\nthese were some other notable dependency management related changes:\\n\\n- Added the `--experimental_check_external_repository_files` flag, which allows disabling checking for modifications to files in external repositories. ([123da96](https://github.com/bazelbuild/bazel/commit/123da96ef501457193f6ff52f42522249f5e3737))\\n- Added the `build_file` and `build_file_content` attributes to `git_repository`. ([f5a899f](https://github.com/bazelbuild/bazel/commit/f5a899fbbeb34cbd13ec6293ef722344f20d6714))\\n- Added the `add_prefix` attribute to `http_*` rules. ([87c8b09](https://github.com/bazelbuild/bazel/commit/87c8b09061eb4d51271630353b1718c39dfd1ebe))\\n- Added the `integrity` attribute to `http_file` and `http_jar`. ([e51a15f](https://github.com/bazelbuild/bazel/commit/e51a15f4395d4223c9665e5cc8ae2c8dd29e8f20))\\n- Added the `workspace_root` attribute to `repository_ctx`. ([8edf6ab](https://github.com/bazelbuild/bazel/commit/8edf6abec40c848a5df93647f948e31f32452ae6))\\n- Added the `success` parameter to `repository_ctx.download`. ([5af794b](https://github.com/bazelbuild/bazel/commit/5af794bb9bb8f9a7f3667d53f31b132a3f51314e))\\n- Added the `rename_files` parameter to `repository_ctx.extract`. ([2b02416](https://github.com/bazelbuild/bazel/commit/2b02416b6175bf0ac82cb5c8ecc9a80a2f397e88))\\n- Added host arch to repository rule markers. ([16c89c1](https://github.com/bazelbuild/bazel/commit/16c89c12af1b703c605b35ec06ede881e77237de))\\n- `--override_repository` now accepts tildes. ([cc55400](https://github.com/bazelbuild/bazel/commit/cc55400e614e4e301244cc7c338ee3ea89424ce0))\\n- `http_*` rules now honour the `NETRC` environment variable. ([a15f342](https://github.com/bazelbuild/bazel/commit/a15f342931c0ef6529c8f53cd7a8b8823de8979e))\\n- Download progress now displays human readable bytes. ([801e01c](https://github.com/bazelbuild/bazel/commit/801e01c30005a562e4d056f2640e6f56cc096413))\\n- Removed support for managed directories. ([cbf8159](https://github.com/bazelbuild/bazel/commit/cbf8159ba6190ab447ad54df63cb4db25763d755))\\n- When Bzlmod is enabled, canonical label literals are used. ([design doc](https://docs.google.com/document/d/1N81qfCa8oskCk5LqTW-LNthy6EBrDot7bdUsjz6JFC4))\\n\\n[bzlmod]: https://bazel.build/versions/6.0.0/build/bzlmod\\n\\n## Platforms and toolchains\\n\\nThe C++, Android, and Apple rules are being migrated to support [building with Platforms][building-with-platforms].\\nWhile progress has been made,\\nthey don\'t fully support it yet in Bazel 6.0.\\nFor C++ projects,\\nit\'s recommended that the `--incompatible_enable_cc_toolchain_resolution` flag is used,\\nto help the Bazel team discover any issues in the wide variety of projects that exist.\\n\\nHere are some of the platforms and toolchains related changes which weren\'t tied to any of those migrations:\\n\\n- The `host` configuration is deprecated, and [a](https://github.com/bazelbuild/bazel/commit/6e6c4cf1bd6edaa15ecc4417cd0be70581181def) [lot](https://github.com/bazelbuild/bazel/commit/32fc7cac3c62dcf1721e9093a449561eb854f241) [of](https://github.com/bazelbuild/bazel/commit/790d7a75b34eb963c18f9165bd9608d7a8eb4f3d) [changes](https://github.com/bazelbuild/bazel/commit/48e88685105c906ae52865422da01c39c580bf21) [were](https://github.com/bazelbuild/bazel/commit/715c9faabba573501c9cb7604192759950633205) [made](https://github.com/bazelbuild/bazel/commit/d988e8b3bace4b2bb2ec4adc17d9bf7b4f49a907) to migrate away from it and to the `exec` configuration.\\n- Added the `--incompatible_disable_starlark_host_transitions` flag, which prevents rules from using the `host` configuration. ([6464f1c](https://github.com/bazelbuild/bazel/commit/6464f1cbdf14f0b8e8f29f7b57990a40ea584062))\\n- Added the `--experimental_exec_configuration_distinguisher` flag, which changes how the `platform_suffix` is calculated. ([51c90c7](https://github.com/bazelbuild/bazel/commit/51c90c7d7f749af99d66cbd21bbdda09b68f79ac))\\n- Added the `exec_group` argument to `testing.ExecutionInfo()`. ([423fb20](https://github.com/bazelbuild/bazel/commit/423fb20c2bc7773f8c9567be8056566ce4633e5f))\\n- Toolchain dependencies can now be optional. ([Issue #14726](https://github.com/bazelbuild/bazel/issues/14726))\\n- `sh` path is now selected based on execution platform instead of host platform, making it possible to execute `sh` actions in multi-platform builds. ([eeb2e04](https://github.com/bazelbuild/bazel/commit/eeb2e04e52cfad165a1bde33ce2d83a392f53d00))\\n- The `exec` transition no longer resets any `TestConfiguration.TestOptions` options. ([2adf003](https://github.com/bazelbuild/bazel/commit/2adf0033bb4e71171e96f95bbd54ab783c6bb6d1))\\n- `platform.exec_properties` now become execution requirements. ([e4c1c43](https://github.com/bazelbuild/bazel/commit/e4c1c434d49062449c7a83dd753fe01923766b1d))\\n\\n[building-with-platforms]: https://bazel.build/versions/6.0.0/concepts/platforms\\n\\n## Execution platforms\\n\\nExecution platforms are [platforms][platforms] which build tools execute on.\\nThese include the host platform on which Bazel runs.\\n\\nIn the following sections I collected notable changes for Linux and macOS.\\nI\'m sure there were some for Windows as well,\\nbut since I don\'t use Bazel on Windows,\\nnone of the changes stood out to me as pertaining only to it.\\n\\n[platforms]: https://bazel.build/versions/6.0.0/extending/platforms\\n\\n### Linux\\n\\n- Added the `--incompatible_sandbox_hermetic_tmp` flag, which causes the sandbox to have its own dedicated empty directory mounted as `/tmp` rather than sharing `/tmp` with the host filesystem. ([ae6a90a](https://github.com/bazelbuild/bazel/commit/ae6a90a143b1ef25ff5fd620c662ab5f81d0043d))\\n- Added the `--sandbox-explicit-pseudoterminal` flag, which allow processes in the sandbox to open pseudoterminals. ([9a13051](https://github.com/bazelbuild/bazel/commit/9a13051fb73d68221dfd9849b52e0f3cd046c524))\\n- Fixed handling of large UIDs. ([467f32d](https://github.com/bazelbuild/bazel/commit/467f32d8087fed11bd480ec5112bf1228b63053d))\\n\\n### macOS\\n\\n- Remote Xcode version is now matched more granuarly. ([2ff4124](https://github.com/bazelbuild/bazel/commit/2ff4124004355b0bf86e1228b4bb1d19bd55ec3d))\\n- `clean --async` is now available on macOS. ([b8d0e26](https://github.com/bazelbuild/bazel/commit/b8d0e26357065740d4007223cf20f488a120290e))\\n- The `@bazel_tools//tools/cpp:compiler` flag now has the value `clang` for the auto-configured Xcode toolchain rather than the generic value `compiler`. ([f99319f](https://github.com/bazelbuild/bazel/commit/f99319f14fb1c92c98217bb9b2a85c75bd963368))\\n- Removed some aborts from `wrapped_clang`. ([3451774](https://github.com/bazelbuild/bazel/commit/3451774a8a76b8ef9211e852ec3173498bbac1a7))\\n- Fixed `lld` detection on macOS. ([d9f20dc](https://github.com/bazelbuild/bazel/commit/d9f20dcf099d245a90c2d2965706076126ea574b))\\n\\n## Target platforms\\n\\nTarget platforms are [platforms][platforms] which you are ultimately building for.\\nI cover the Android and Apple platforms in the following sections,\\nas they still have some functionality provided by Bazel core,\\ninstead of being fully supported by standalone Starlark rules.\\n\\n### Android\\n\\n- D8 is now the default desugarer. ([ff311f6](https://github.com/bazelbuild/bazel/commit/ff311f618a602c15f5848a317561934b0154132b))\\n- D8 is now the default dexer. ([66d07f0](https://github.com/bazelbuild/bazel/commit/66d07f096cb697bdadb6f9d9fbc1c4fe33be6d59))\\n- The D8 jar from Maven is used instead of Android Studio\'s. ([ae24714](https://github.com/bazelbuild/bazel/commit/ae247145b897d0f41cdf2b317f5c7b856845e303))\\n- Added the `android_binary.min_sdk_version` attribute. ([4c3219e](https://github.com/bazelbuild/bazel/commit/4c3219ec5fc2f74b45f7b29b029caf56ed8a1b4d))\\n- Added the `ApkInfo.signing_min_v3_rotation_api_version` attribute. ([f6dbd1e](https://github.com/bazelbuild/bazel/commit/f6dbd1e4a127b95276127afe64a095345678019b))\\n- Added the `--mobile_install_run_deployer` flag to the `mobile-install` command, which allows skipping the deployer after building. ([0216657](https://github.com/bazelbuild/bazel/commit/021665748680b415704d70698d13b4efb9e0e9dc))\\n- Added the `--bytecode_optimization_pass_actions` flag, which allows splitting the optimization pass into N parts. ([2b44482](https://github.com/bazelbuild/bazel/commit/2b44482eb7645f738fddf48622ccc1cf05a179d7))\\n- Added the `--persistent_multiplex_android_tools`, `--persistent_multiplex_android_resource_processor`, `--persistent_android_dex_desugar`, and `--persistent_multiplex_android_dex_desugar` expansion flags, which allow for easy enabling of persistent and multiplexed Android tools (dexing, desugaring, resource, and processing) ([63aace2](https://github.com/bazelbuild/bazel/commit/63aace26c0e624c146840625e69051bace300ff2))\\n- Added the `--incompatible_android_platforms_transition_updates_affected` flag, which causes `AndroidPlatformsTransition` to also update `affected by Starlark transition` with the changed options. ([563664e](https://github.com/bazelbuild/bazel/commit/563664e0e0a9083be554b4931654743d84b9cba4))\\n- Added the `--experimental_persistent_multiplex_busybox_tools` flag, which enables multiplex worker support in `ResourceProcessorBusyBox`. ([4cfd32d](https://github.com/bazelbuild/bazel/commit/4cfd32d419ca322894dea5cbd6e8ce61676ec476))\\n- Added worker support to `AndroidCompiledResourceMergingAction`. ([3df19e8](https://github.com/bazelbuild/bazel/commit/3df19e8e900c0f435923754fee36ca5d6eb8724d))\\n- Added worker support to `CompatDexBuilder`. ([7ce1c57](https://github.com/bazelbuild/bazel/commit/7ce1c578b1d9a28709b3949ddfaaebe5e32c989f))\\n- Added worker support to the D8 desugarer. ([f32b99f](https://github.com/bazelbuild/bazel/commit/f32b99f452c08e4276c9c5efd564a246383f50bb))\\n- Added the merged manifest to the `android_deploy_info` output group. ([c60eb5d](https://github.com/bazelbuild/bazel/commit/c60eb5d324da4d81f6be93f442ac6d7576741e8e))\\n- Added `application_resources`\'s output groups to `android_binary`. ([bb97b02](https://github.com/bazelbuild/bazel/commit/bb97b02fb8fd7c4a60d0e85f86acec12bd1af58c))\\n- Removed support for `android_binary.multidex=off`. ([7de4fab](https://github.com/bazelbuild/bazel/commit/7de4fab0d8b507f3790533e1ae18e94dca916d04))\\n- Reduced `AndroidAssetMerger` intermediate outputs. ([b76cc3a](https://github.com/bazelbuild/bazel/commit/b76cc3a2ec4991bb5772ce309fae288e147bcebe))\\n- Resources are now sorted to produce a consistent zip (which helps cache hit rates). ([2c25f73](https://github.com/bazelbuild/bazel/commit/2c25f73880ed72dddb4bfa843388b15f02011158))\\n- Incremental APKs are now zipaligned before they are installed. ([1b2cf8d](https://github.com/bazelbuild/bazel/commit/1b2cf8d596a98abe3f02f711903435e060f76720))\\n- Split APKs are now zipaligned before they are installed. ([6613f6f](https://github.com/bazelbuild/bazel/commit/6613f6fbbcf85aac0ee5865d7d5273aad2a5813a))\\n- `minsdk` is now added to dexing and desugaring artifacts paths. ([4829960](https://github.com/bazelbuild/bazel/commit/4829960c1626357f514ac16eb1a4005a360ee96d))\\n- Certain Android actions now have their output paths stripped of config information. ([2907d15](https://github.com/bazelbuild/bazel/commit/2907d15985907f17fe53aa8c4e7953b5fa69977c))\\n- Fixed Android\'s `armeabi-v7a` constraint. ([46e0be4](https://github.com/bazelbuild/bazel/commit/46e0be4ef67901cab7896348c89de06396f737b4))\\n\\n### Apple\\n\\n- Added the `watchos_device_arm64` `cpu`. ([ce61164](https://github.com/bazelbuild/bazel/commit/ce611646969cfe72ae5e22083708684eae11e478))\\n- Added the `watchos_device_arm64e` `cpu`. ([531df65](https://github.com/bazelbuild/bazel/commit/531df65129f632a19ce0fd27422d55696af42511))\\n- Added the `apple_common.link_multi_arch_static_library` function. ([8778455](https://github.com/bazelbuild/bazel/commit/877845584186301e53ed01eaecf3166db4ddcec7))\\n- Added `-no_deduplicate` when linking with Darwin `dbg`/`fastbuild`. ([9608414](https://github.com/bazelbuild/bazel/commit/96084140804f552c0402de6223776757a66d0e5a))\\n- Added support for the `static_link_cpp_runtimes` feature in Apple linking. ([2cc3dc4](https://github.com/bazelbuild/bazel/commit/2cc3dc4130e3a2b11fbfb980609ca3f2532489b7))\\n- `cpu`s for tvOS and watchOS are now correctly inferred when running on an Apple Silicon host. ([da8a327](https://github.com/bazelbuild/bazel/commit/da8a327802187363636908f6c3bc16d9f5a18604))\\n- 32-bit watchOS architectures are no longer included in mulit-arch builds when targeting watchOS 9.0 or greater. ([01d46bb](https://github.com/bazelbuild/bazel/commit/01d46bbd54b1f3e75eda5876da4467b5bda33d01))\\n- Moved `-framework` flags to be after the `-filelist` flag. ([7866fd9](https://github.com/bazelbuild/bazel/commit/7866fd90d216d6bec7af3631ded5b2db56c5cde2))\\n- Static frameworks are now linked into fully linked static libraries. ([ccb2cc0](https://github.com/bazelbuild/bazel/commit/ccb2cc05ff72f9f10c741b0e1d44f9a1b1265ddb))\\n- macOS dynamic libraries now have `.dylib` extensions instead of `.so`. ([6e1b440](https://github.com/bazelbuild/bazel/commit/6e1b440a94214fdef0f6dd489c0aa3c4fdc6ef87))\\n- Linking `cc_info` is now exposed from `AppleExecutableBinary` and `AppleDynamicFramework`. ([9feeb1d](https://github.com/bazelbuild/bazel/commit/9feeb1d928899e3b390241da6d6cfbc8dca1e4a6))\\n- Removed the `AppleDylibBinary` and `AppleLoadableBundleBinary` providers. ([092884b](https://github.com/bazelbuild/bazel/commit/092884b0118f1b8b14ba2277851baa6dcce5cac2))\\n- Removed the `should_lipo` argument from `apple_common.link_multi_arch_binary`. ([3073f1b](https://github.com/bazelbuild/bazel/commit/3073f1b72fd6a9df758d059391b1f6791ea5eb1b))\\n- Removed the native `apple_binary` rule. ([0535477](https://github.com/bazelbuild/bazel/commit/0535477eabfbafb9665cc5a191b677077496751c))\\n- Removed the native `apple_static_library` rule. ([589354c](https://github.com/bazelbuild/bazel/commit/589354cdcc274edc01e5634c081739737c593f5e))\\n\\n## Languages\\n\\nWhile there are lots of programming languages that are supported through standalone Starlark rules,\\nsome are still written as \\"native\\" rules in Bazel core,\\nor are bundled Starlark rules while [Starlarkification](#starlark) is in progress.\\nIn the following sections I summarize the notable changes in support of these languages.\\n\\n### C and C++\\n\\n- Added the `--experimental_unsupported_and_brittle_include_scanning` flag, which enables C/C++ include scanning. ([6522472](https://github.com/bazelbuild/bazel/commit/6522472dc8a7efaa278b04fd27b3ebb3d467d4d3))\\n- Added the `--host_per_file_copt` flag. ([4919d4a](https://github.com/bazelbuild/bazel/commit/4919d4a61d8506d175b25a035500842b8bfe3d0d))\\n- Added the `archive_param_file` feature, which allows turning off param file for archives. ([bff9730](https://github.com/bazelbuild/bazel/commit/bff973031a65c139a4878c87e5f335a895964ab9))\\n- Added the `default_link_libs` feature, which can be disabled to support pure C. ([5ebb0d6](https://github.com/bazelbuild/bazel/commit/5ebb0d6884c62150afaa8e1a402881fd5c4f6a37))\\n- Added the `gcc_quoting_for_param_files` feature, which enables gcc quoting for linker param files. ([a9e5a32](https://github.com/bazelbuild/bazel/commit/a9e5a32b9c0de2ade15be67bd1b80c3ec8e6b472))\\n- Added the `treat_warnings_as_errors` feature, which treats warnings as errors. ([f802525](https://github.com/bazelbuild/bazel/commit/f802525ad37e4f4567103682244d65f6cc55ff57))\\n- Added the `separate_module_headers` parameter to `cc_common.compile`. ([94f83f4](https://github.com/bazelbuild/bazel/commit/94f83f4c8c5feb0f879eb83d122808fa328837c6))\\n- Added the `language` parameter to `cc_common.configure_features`. ([d308c17](https://github.com/bazelbuild/bazel/commit/d308c175aa53757746c65ab65c17f9dbd6267755))\\n- Added the `main_output` parameter to `cc_common.link`. ([8ac29d7](https://github.com/bazelbuild/bazel/commit/8ac29d796722cc7f8ad951e64fa18b4b4cd467a4))\\n- Added the `BAZEL_CURRENT_REPOSITORY` local define to `cc_*` rules. ([eb18166](https://github.com/bazelbuild/bazel/commit/eb181661ff7e72781f46b7994a5e5c9bab45d5dd))\\n- Added `Action.argv` support to `CppCompileAction`. ([aaba5be](https://github.com/bazelbuild/bazel/commit/aaba5be3d50b642ad3d9bccada8971a06c68c123))\\n- Added support for vendor\'ed `clang` ([17ed57a](https://github.com/bazelbuild/bazel/commit/17ed57ac5ad9b52bfc43e52ca40512f7114c58aa))\\n- Reverted `cc_library.interface_deps` back to `implementation_deps`. ([abe6667](https://github.com/bazelbuild/bazel/commit/abe6667469363d543d8d0fe9108eacb9f96028ed))\\n- Default flags features can now be disabled. ([25d17f5](https://github.com/bazelbuild/bazel/commit/25d17f53bed60464ce74d1c1a1769787ab259cf2))\\n- The `per_object_debug_info` feature is now enabled by default. ([5f51d21](https://github.com/bazelbuild/bazel/commit/5f51d21e918a4c7286c5024c3c50f2d931662af9))\\n- The `@bazel_tools//tools/cpp:compiler` flag now has the value `gcc` if the configured compiler is detected to be `gcc`. ([ef3f058](https://github.com/bazelbuild/bazel/commit/ef3f05852b3bf542903f091184da96b96354a13d))\\n- The `malloc` attribute of `cc_*` rules now accepts any `CcInfo` providing target. ([1746a79](https://github.com/bazelbuild/bazel/commit/1746a7958d8c332cae563333d9028b066373e547))\\n- The C++ archive action now has the `CppArchive` mnemonic. ([d519fec](https://github.com/bazelbuild/bazel/commit/d519fec25245fcc5806360c671b2d242469515f6))\\n- Coverage can now be collected for external targets. ([32e61b3](https://github.com/bazelbuild/bazel/commit/32e61b3235cf49b8764dd6b10622197fec6056ce))\\n- Make variable substitution now accepts `data` dependencies. ([46a8e09](https://github.com/bazelbuild/bazel/commit/46a8e09334a03eeb8518a4913dcd98f19ddc9c62))\\n- `cc_common.link` no longer stamps actions for tool dependencies. ([1799842](https://github.com/bazelbuild/bazel/commit/17998427da1438174fb41708d3afcaff7eedc4f4))\\n- Windows interface libraries can now use the `.lib` extension. ([af4a150](https://github.com/bazelbuild/bazel/commit/af4a1506d8b5f68a3208e401ee5a9a7c1e0a10ad))\\n- Fixed `cc_test` to apply all compilation flags. ([06f9202](https://github.com/bazelbuild/bazel/commit/06f9202e813d649b4ea48aa48cb0668fecb9cefa))\\n- Fixed dynamic library lookup with remotely executed tools. ([e3dcfa5](https://github.com/bazelbuild/bazel/commit/e3dcfa54baec45a6b247143106f7ab689df424cd))\\n\\n### Java\\n\\n- Upgraded JDK11. ([8f3d99a](https://github.com/bazelbuild/bazel/commit/8f3d99aa2e7c0742f7f89ddc3921350537feef77))\\n- Upgraded JDK17. ([fbb0958](https://github.com/bazelbuild/bazel/commit/fbb0958f281e523db085849e87f56bd70f038b34))\\n- Added JDK18. ([a7f1c71](https://github.com/bazelbuild/bazel/commit/a7f1c7133a58ac721d176487ff8e82bccc55699b))\\n- Added the `--incompatible_disallow_java_import_empty_jars` flag, which disallows empty `java_import.jars` attributes. ([1acda6b](https://github.com/bazelbuild/bazel/commit/1acda6be4ffc197f0a19a54556a4a3f8eb4b4906))\\n- Added the `--multi_release_deploy_jars` flag, which causes `_deploy.jar` outputs of `java_binary` to be Multi-Release jar files. ([7f75df2](https://github.com/bazelbuild/bazel/commit/7f75df2d299e383f58e7a0f82fd0822c88776b5e))\\n- Added the `com.google.devtools.build.buildjar.javac.enable_boot_classpath_cache` property, which disables the bootstrap classpath cache. ([fbb68e9](https://github.com/bazelbuild/bazel/commit/fbb68e9bcbe8401690a513f086afeadc57adfdd6))\\n- Added the `@AutoBazelRepository` annotation processor. ([0f95c8a](https://github.com/bazelbuild/bazel/commit/0f95c8a8a74d18823c3117d8f3370bc7301081b4))\\n- Added the `add_exports` and `add_opens` attributes to `java_*` rules. ([2217b13](https://github.com/bazelbuild/bazel/commit/2217b13cae4110b0e2b8fe6a283a9b6dfbf150e8))\\n- Added the `hermetic_srcs` and `lib_modules` attributes to `java_runtime`. ([79badc0](https://github.com/bazelbuild/bazel/commit/79badc0bf7937e8443bbe9171d92aefcf1e90e6f))\\n- Added the `classpath_resources` argument to `java_common.compile`. ([37d08ed](https://github.com/bazelbuild/bazel/commit/37d08ed18b6830e0eea81d7cdb7866c3535f9e47))\\n- Added the `resource_jars` argument to `java_common.compile`. ([80ca10b](https://github.com/bazelbuild/bazel/commit/80ca10bddc68af318efeef37975de0bfec204a68))\\n- Added the `--add_exports` and `--add_opens` options to `singlejar`. ([4ff441b](https://github.com/bazelbuild/bazel/commit/4ff441b13db6b6f5d5d317881c6383f510709b19))\\n- Added the `--hermetic_java_home` option to `singlejar`. ([341d7f3](https://github.com/bazelbuild/bazel/commit/341d7f3366ac15b375eb3f9a750382e2a034c9e1))\\n- Added the `--jdk_lib_modules` option to `singlejar`. ([276fb09](https://github.com/bazelbuild/bazel/commit/276fb093b83c37d9c4d2b6df01c04700e7aa3346))\\n- Added the `--multi_release` option to `singlejar`. ([f33ce3d](https://github.com/bazelbuild/bazel/commit/f33ce3d8192953e425f613024ec04541ceb80f1b))\\n- Added the `--output_jar_creator` option to `singlejar`. ([8b5ed8a](https://github.com/bazelbuild/bazel/commit/8b5ed8aac2b25180fbfac0ff27ebe3998a61209a))\\n- Added a tag-based suppression mechanism for `java_import.deps` checking. ([2930dd3](https://github.com/bazelbuild/bazel/commit/2930dd3ac20810730f2263fa9e319379f5d22720))\\n- Coverage can now be collected for external targets. ([acbb9e1](https://github.com/bazelbuild/bazel/commit/acbb9e1de6c9f2cc99be4ff849e456d316da9db1))\\n- The Java runtimes now have `target_compatible_with` set instead of `exec_compatible_with`. ([d5559c1](https://github.com/bazelbuild/bazel/commit/d5559c16ac008b86345fbbade5d600181a2fce6f))\\n- `ijar`/`java_import` now preserve classes with `@kotlin.Metadata` annotations. ([a32a0fd](https://github.com/bazelbuild/bazel/commit/a32a0fd0d6bf75c2c8c6af6281875e90908b82f6))\\n- Hermetic packaged JDK modules now record file size in deploy JAR manifest `JDK-Lib-Modules-Size` attribute. ([756be22](https://github.com/bazelbuild/bazel/commit/756be22f6445d6052a0a9cce66fdb7f7b3a8f300))\\n- `TurbineTransitiveJar` attributes are now recognized in `ijar`. ([b64f734](https://github.com/bazelbuild/bazel/commit/b64f734ffea7fa5d53cb1f0e62247a3ff0b74e0d))\\n- The stub template now defaults to a UTF-8 locale. ([17cfa01](https://github.com/bazelbuild/bazel/commit/17cfa015d73195f6fda7705a57702e36609b3175))\\n\\n### Objective-C\\n\\n- Added support for Objective-C specific features to `cc_common.configure_features`. ([68f29c6](https://github.com/bazelbuild/bazel/commit/68f29c67098cedbfaa3ef011eef4df661860ac36))\\n- `objc_library` now requires `CcInfo` in its deps. ([540892d](https://github.com/bazelbuild/bazel/commit/540892d788727f414cc0cd3ea2ae4d4445914366))\\n- Removed the `ObjcProvider.direct_headers` attribute. ([8a2b711](https://github.com/bazelbuild/bazel/commit/8a2b711a2700740575904682066dbe1e5c9f6d02))\\n\\n### Python\\n\\n- Added the `coverage_tool` attribute to `py_runtime`. ([9d01630](https://github.com/bazelbuild/bazel/commit/9d0163002ca63f4cdbaff9420380d72e2a6e38b3))\\n- Added the `requires-darwin` execution requirement to macOS `py_test` targets. ([32364dc](https://github.com/bazelbuild/bazel/commit/32364dc9194b71e5759546a0fd0013c44bf7109e))\\n- Added `CurrentRepository()` to Python runfiles library. ([d60ce2c](https://github.com/bazelbuild/bazel/commit/d60ce2c7c86393638c77698c00c2168a7a936a53))\\n- The stub now also considers `RUNFILES_DIR` when no runfiles directory can be found. ([c3425fe](https://github.com/bazelbuild/bazel/commit/c3425feeb3bc204923979773ae985dd2f3e24b9f))\\n- Reduced the number of imports used in the stub. ([c33e44c](https://github.com/bazelbuild/bazel/commit/c33e44c29e6c4fe35331d0c3f7aad1e76d6318da))\\n- `py_*.srcs_version=\\"PY2\\"` is now the the same as `\\"PY2ONLY\\"`. ([ecd4c90](https://github.com/bazelbuild/bazel/commit/ecd4c900b61416609d99c76a4e2190a4d6d7b97f))\\n- Removed UNC path prefix on Windows-10.1607 or later. ([40b95c3](https://github.com/bazelbuild/bazel/commit/40b95c32317f1739f14899ee5e4605c58e4836b2))\\n\\n## Rules authoring\\n\\nBazel\'s extensibility is powered by the ability to write custom [rules][rules].\\nMost rules used in a project will be provided by open source rule sets,\\nbut projects may also define rules themselves.\\nBazel 6.0 includes numerous changes that make custom rules more performant,\\neasier to write,\\nor even expand what is possible to do with them.\\n\\n[rules]: https://bazel.build/versions/6.0.0/extending/rules\\n\\n### Aspects\\n\\n[Aspects][aspects] allow augmenting build dependency graphs with additional information and actions.\\nThese changes expanded their capabilities:\\n\\n- Added the `--aspects_parameters` flag, which allows passing parameters to command-line aspects. ([3771072](https://github.com/bazelbuild/bazel/commit/37710728712e00e8bd7145662668d72591204146))\\n- Added support for using `attr.bool()`. ([30fd508](https://github.com/bazelbuild/bazel/commit/30fd508bf68c8bb9cf32839b71f79a9aa4bd069a))\\n- Added support for using `attr.int()`. ([14292d1](https://github.com/bazelbuild/bazel/commit/14292d176cb85d1cf6e20f79fde0249b0fe6ba24))\\n- Added support for setting exec_compatible_with and exec_group on aspects. ([7e3755d](https://github.com/bazelbuild/bazel/commit/7e3755d3bf1443a0f2a780bc8efff658c464c3a5))\\n- Aspects now inherit fragments from required aspects and from targets they are attached to. ([b3e12ba](https://github.com/bazelbuild/bazel/commit/b3e12bad9852a068ed8687d39e278441b52c910d))\\n\\n[aspects]: https://bazel.build/versions/6.0.0/extending/aspects\\n\\n### Persistent workers\\n\\n[Persistent workers][workers] improve build performance by sending multiple requests to long-running processes.\\nHere are some notable changes to persistent worker support:\\n\\n- Added the `--experimental_total_worker_memory_limit_mb` flag, which sets a limit on total worker memory usage. ([8e67432](https://github.com/bazelbuild/bazel/commit/8e674324d18b715fd09c7fcfedd97be28caa525c))\\n- Added the `--experimental_worker_multiplex_sandboxing` flag, which controls whether to sandbox multiplex workers that support it. ([fb19a28](https://github.com/bazelbuild/bazel/commit/fb19a28db30c6937f0df4e143b2256e7e4743bd4))\\n- Added the `--experimental_worker_strict_flagfiles` flag, which checks if the worker argument list conforms to the spec. ([cb2cd9f](https://github.com/bazelbuild/bazel/commit/cb2cd9fd2b65311da927777c35939701add5b879))\\n\\n[workers]: https://bazel.build/versions/6.0.0/remote/persistent\\n\\n### Starlark\\n\\n[As mentioned at Bazelcon][starlarkification],\\nprogress is being made on migrating natives rules out of Bazel and into standalone Starlark rules.\\nIn the Bazel 6.0 release progress was made on the Android, C++, Java, Objective-C, Protobuf, and Python rules.\\n\\nIn addition to changes directly needed for Starlarkification,\\nfor which there were many and I\'m not going to list them here,\\nthe Starlark language itself received performance and feature improvements:\\n\\n- Added the `--incompatible_disallow_symlink_file_to_dir` flag, which disallows `ctx.actions.symlink` from symlinking a file into a directory. ([54f11fe](https://github.com/bazelbuild/bazel/commit/54f11fe4189edfed92c820b8feaeb8c046d23a2a))\\n- Added the `--incompatible_remove_rule_name_parameter` flag, which disables the `rule.name` parameter. ([6449105](https://github.com/bazelbuild/bazel/commit/64491051223cdf28e7bf015baa131c7d30b2e2d8))\\n- Added the `--experimental_debug_selects_always_succeed` flag, which causes `select` functions with no matching clause to return an empty value, instead of failing. ([b615d0d](https://github.com/bazelbuild/bazel/commit/b615d0df882d1564dc1d62d40cf50490a9bc3738))\\n- Added the `--experimental_get_fixed_configured_action_env` flag, which causes `action.env` to return fixed environment variables specified through features configuration. ([e82beda](https://github.com/bazelbuild/bazel/commit/e82beda0257958892ff8a15f3eae5c8f2f509118))\\n- Added the `--experimental_lazy_template_expansion` flag, which adds support for lazily computed substitutions to `ctx.actions.expand_template()`. ([cc74b11](https://github.com/bazelbuild/bazel/commit/cc74b11bc1a0a0150abd37e82f913c4b95eb16bb))\\n- Added `dict` union operators (`|` and `|=`). ([b1deea4](https://github.com/bazelbuild/bazel/commit/b1deea40aeb81f4c7e23594e0166a6a653a75b65))\\n- Added the `coverage_support_files` and `coverage_environment` parameters to `coverage_common.instrumented_files_info`. ([0a13dd6](https://github.com/bazelbuild/bazel/commit/0a13dd69aa27ec643dd44637712b70c24b924c49))\\n- Added the `init` parameter to `provider()`, which allows for performing pre-processing and validation of field values. ([fc13ba2](https://github.com/bazelbuild/bazel/commit/fc13ba271f138c804869d0f99d751e25518b5326))\\n- Added `load` visibility. ([docs](https://bazel.build/versions/6.0.0/concepts/visibility#load-visibility))\\n- `dict()` and `dict.update()` now accept arbitrary maps, not just `dict`s. ([dfa9c62](https://github.com/bazelbuild/bazel/commit/dfa9c62abda21dcf187df9d2a2c00ecefda223e0))\\n- `testing.ExecutionInfo` can now be used as a provider key. ([40a6cb0](https://github.com/bazelbuild/bazel/commit/40a6cb093e9a9902a35943b97e2ae6b362a5f005))\\n- The `symlinks` and `root_symlinks` parameters of the `ctx.runfiles` function now accept `depset`s. ([aaf87f4](https://github.com/bazelbuild/bazel/commit/aaf87f4ef3e19cbf1e5ab28f50cd8fb90dfd115e))\\n- Starlark flags no longer warn for incompatible commands. ([f717d6a](https://github.com/bazelbuild/bazel/commit/f717d6a7484d1c7d624b0f39822e6fd61cfe7ce6))\\n- Moved `analysis_test` to `testing.analysis_test`. ([5e80514](https://github.com/bazelbuild/bazel/commit/5e80514244fd855b986790f2d981c2ed614e6940))\\n- The `\\\\a`, `\\\\b`, `\\\\f`, and `\\\\v` escape sequences are now supported. ([d0fde13](https://github.com/bazelbuild/bazel/commit/d0fde13454a71355b7695922c2179d8756b4632f))\\n- `print()` statements are now emitted only if the line of code is executed. ([3bda5c9](https://github.com/bazelbuild/bazel/commit/3bda5c945caff86475a3da9bd5875e8ff94eab71))\\n- `native.existing_rule/s()` with `--incompatible_existing_rules_immutable_view` can now be encoded as json and passed as `**kwargs`. ([cf99f84](https://github.com/bazelbuild/bazel/commit/cf99f8476df4110ac749deda15340ebde74a2116))\\n- Fixed incremental builds that transition on flags when the default value of those flags changed. ([2f7d965](https://github.com/bazelbuild/bazel/commit/2f7d965287ddfa056b169cf16144d05f78d03c7d))\\n- Fixed preserving the relative order of explicit and expanded Starlark flags. ([9f2542f](https://github.com/bazelbuild/bazel/commit/9f2542f91e99b40de65506c8f4768ec0003a4e5d))\\n- Fixed `ctx.actions.symlink(target_path = ...)` incorrectly making paths absolute. ([d834905](https://github.com/bazelbuild/bazel/commit/d834905a158d253e837597175f4905e23266d0c7))\\n\\n[starlarkification]: https://youtu.be/6_RrNxuny6Y?t=232\\n\\n## Misc\\n\\nThere were a handful of changes that I couldn\'t find a nice home for in the sections above,\\nbut I still felt were important or interesting enough to call attention to:\\n\\n- Added the `--experimental_output_directory_naming_scheme` flag, which modifies the way the output directory is calculated. ([52d1d4a](https://github.com/bazelbuild/bazel/commit/52d1d4ae9bfee7379093d46258fa3a56e4d69e61))\\n- Added the `--incompatible_check_testonly_for_output_files` flag, which checks `testonly` for prerequisite targets that are output files by looking up `testonly` of the generating rule. ([65388c3](https://github.com/bazelbuild/bazel/commit/65388c330141736d505cec50b4cc02a5d65ed5de))\\n- Added the `--incompatible_fix_package_group_reporoot_syntax` flag, which changes the meaning of `\\"//...\\"` to refer to all packages in the current repository instead of all packages in any repository. ([1473988](https://github.com/bazelbuild/bazel/commit/1473988aa1e9b92c42fcbad4e155f247f1983d13))\\n- Added the `--incompatible_package_group_has_public_syntax` flag, which allows writing `\\"public\\"` or `\\"private\\"` in the `package_group.packages` attribute to refer to all packages or no packages respectively. ([1473988](https://github.com/bazelbuild/bazel/commit/1473988aa1e9b92c42fcbad4e155f247f1983d13))\\n- Added the `--incompatible_unambiguous_label_stringification` flag, which enables unambiguous stringification of `Label`s. ([Issue #16196](https://github.com/bazelbuild/bazel/issues/16196))\\n- Added the `bazel leaf` command. ([b82a8e9](https://github.com/bazelbuild/bazel/commit/b82a8e9124a046f1a530ec4ba54e9c90383f82e9))\\n- `bazel config` now shows output path prefixes. ([507d85f](https://github.com/bazelbuild/bazel/commit/507d85fd6dcf276add3b46158eb5bf36a4179db5))\\n- `BAZEL_TEST=1` is now set as a test environment variable. ([830d464](https://github.com/bazelbuild/bazel/commit/830d4649b42451161adbdf907d9935e648f17d8c))\\n- Progress updates no longer have their delay increased when there is no cursor control. ([60e9bf3](https://github.com/bazelbuild/bazel/commit/60e9bf339f319d16b738619a05b1dd5d122ef852))\\n- Fixed native rules not merging default outputs into the transitive runfiles. ([7cc786a](https://github.com/bazelbuild/bazel/commit/7cc786ab51dacc7e2eade2ab9c2b440bf9d29972))\\n- Fixed `--nobuild_runfiles_links` when used with `--run_under` ([3badca3](https://github.com/bazelbuild/bazel/commit/3badca3f7e539e4b56fd5c502233c03b9934b813))\\n\\n## Summary\\n\\nAs you can see,\\nBazel 6.0 was another _massive_ release.\\nThankfully,\\nthrough the [rolling releases][rolling-releases] process,\\npeople were able to test,\\nor even actively depend on,\\nthese changes well before the first 6.0 release candidate was cut.\\n\\nI expect [Bazel 6.1][bazel-6-1] to be a fast follow with some changes that missed the final release candidate.\\nWork on Bazel 7.0 is well underway as well,\\nand I look forward to summarizing its changes next year.\\n\\n[bazel-6-1]: https://github.com/bazelbuild/bazel/milestone/46\\n[rolling-releases]: https://bazel.build/versions/6.0.0/release/versioning#rolling-releases"},{"id":"welcoming-jim-hollenbach","metadata":{"permalink":"/blog/welcoming-jim-hollenbach","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/welcoming-jim-hollenbach.md","source":"@site/blog/welcoming-jim-hollenbach.md","title":"Welcoming Jim Hollenbach","description":"To fulfill our mission of bringing the world\'s best developer tools to every company, the most imporant thing we can do is hire incredible Software Engineers with experience building and scaling great software. That\'s why we\'re excited to share that Jim Hollenbach is joining BuildBuddy\'s engineering team!","date":"2022-12-06T12:00:00.000Z","tags":[{"inline":true,"label":"company","permalink":"/blog/tags/company"},{"inline":true,"label":"team","permalink":"/blog/tags/team"}],"readingTime":0.51,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"welcoming-jim-hollenbach","title":"Welcoming Jim Hollenbach","authors":"siggi","date":"2022-12-06T12:00:00.000Z","image":"/img/welcome_jim.png","tags":["company","team"]},"unlisted":false,"prevItem":{"title":"What\'s New in Bazel 6.0","permalink":"/blog/whats-new-in-bazel-6-0"},"nextItem":{"title":"Bazelcon 2022 Recap","permalink":"/blog/bazelcon"}},"content":"To fulfill our mission of bringing the world\'s best developer tools to every company, the most imporant thing we can do is hire incredible Software Engineers with experience building and scaling great software. That\'s why we\'re excited to share that [**Jim Hollenbach**](https://www.linkedin.com/in/jim-hollenbach-5a49659/) is joining BuildBuddy\'s engineering team!\\n\\nJim joins us from Google, where he was a Staff Software Engineer. He spent over 10 years at Google working across Search, Maps, and more.\\n\\n![](../static/img/blog/welcome_jim.png)\\n\\nWe look forward to working alongside Jim to build the future of developer tools.\\n\\nWelcome to BuildBuddy, Jim!\\n\\n\x3c!-- truncate --\x3e"},{"id":"bazelcon","metadata":{"permalink":"/blog/bazelcon","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/bazelcon-2022-recap.mdx","source":"@site/blog/bazelcon-2022-recap.mdx","title":"Bazelcon 2022 Recap","description":"Earlier this month we wrapped up the 2022 Bazelcon conference in New York City. The conference featured talks by many prominent Bazel users including Lyft, Spotify, Tesla, Slack, Stripe, Tinder, Tecton, Coinbase, Uber, more.","date":"2022-11-29T12:00:00.000Z","tags":[{"inline":true,"label":"bazelcon","permalink":"/blog/tags/bazelcon"},{"inline":true,"label":"company","permalink":"/blog/tags/company"}],"readingTime":1.4,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"bazelcon","title":"Bazelcon 2022 Recap","authors":"siggi","date":"2022-11-29T12:00:00.000Z","image":"/img/bazelcon.png","tags":["bazelcon","company"]},"unlisted":false,"prevItem":{"title":"Welcoming Jim Hollenbach","permalink":"/blog/welcoming-jim-hollenbach"},"nextItem":{"title":"How We Use ClickHouse to Analyze Trends Across Millions of Builds","permalink":"/blog/clickhouse-build-trends"}},"content":"import { Tweet } from \\"react-twitter-widgets\\";\\n\\nEarlier this month we wrapped up the 2022 Bazelcon conference in New York City. The conference featured talks by many prominent Bazel users including [Lyft](https://youtu.be/e2ID05dpJzo), [Spotify](https://youtu.be/k4H20WxhbsA), [Tesla](https://youtu.be/ol5hwjr48Q4), [Slack](https://youtu.be/wy3Q38VJ5uQ), [Stripe](https://youtu.be/kaKpp10z5ws), [Tinder](https://youtu.be/IoEMMLjKFtM), [Tecton](https://youtu.be/Bjaiu8tZZhs), [Coinbase](https://youtu.be/2BgRXmX1X-4), [Uber](https://youtu.be/a1jXzx3884g), more.\\n\\nHere\'s are some of the highlights from the conference:\\n\\n- We gave a [talk previewing](https://youtu.be/MIXy4zGtniE) the upcoming **BuildBuddy 3.0** release\\n- **Six companies** that are [BuildBuddy Enterprise](https://buildbuddy.io/) customers presented on the main stage\\n- We co-hosted a [Bazelcon happy hour](https://twitter.com/bazelbuild/status/1592624463975448576) with **Google Cloud** that had over **200 attendees**\\n- We [shared](https://youtu.be/B__SHnz3K3c) what we\'ve been working on over the past year with [rules_xcodeproj](https://github.com/buildbuddy-io/rules_xcodeproj)\\n- We gave away **370 BuildBuddy shirts** and **1600 BuildBuddy stickers**\\n- We finally got to meet so many of incredible customers & open source contributors in person!\\n\\nTweets, talks, and pictures from the event below!\\n\\n\x3c!-- truncate --\x3e\\n\\n<Tweet tweetId=\\"1593290390953955328\\" options={{ align: \\"center\\" }} />\\n\\n<Tweet tweetId=\\"1593052641310875648\\" options={{ align: \\"center\\" }} />\\n\\n## Our talks\\n\\n### BuildBuddy 3.0\\n\\nBy Siggi Simonarson\\n\\n[![](../static/img/blog/buildbuddy-3-talk.jpg)](https://www.youtube.com/watch?v=MIXy4zGtniE)\\n\\n### Integrating Bazel with Xcode using rules_xcodeproj\\n\\nBy Brentley Jones\\n\\n[![](../static/img/blog/xcodeproj-talk.jpg)](https://www.youtube.com/watch?v=B__SHnz3K3c)\\n\\n## BuildBuddy shout-outs\\n\\n### Autopilot: Developing Software for Cars & Robots\\n\\nBy Gabe Gheorghian and Romi Phadte @ Tesla\\n\\n[![](../static/img/blog/tesla-talk.jpg)](https://youtu.be/ol5hwjr48Q4?t=1023)\\n\\n### Insights from Two iOS Bazel Migrations\\n\\nBy Erik Kerber @ Slack\\n\\n[![](../static/img/blog/slack-talk.jpg)](https://youtu.be/wy3Q38VJ5uQ?t=1626)\\n\\nSee you all next year!"},{"id":"clickhouse-build-trends","metadata":{"permalink":"/blog/clickhouse-build-trends","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/clickhouse-build-trends.md","source":"@site/blog/clickhouse-build-trends.md","title":"How We Use ClickHouse to Analyze Trends Across Millions of Builds","description":"When you use Buildbuddy with Bazel to build and test software, Buildbuddy","date":"2022-11-22T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":3.16,"hasTruncateMarker":true,"authors":[{"name":"Lulu Zhang","title":"Engineer @ BuildBuddy","url":"https://www.linkedin.com/in/luluzhang66","imageURL":"https://avatars.githubusercontent.com/u/3977083?v=4","key":"lulu","page":null}],"frontMatter":{"slug":"clickhouse-build-trends","title":"How We Use ClickHouse to Analyze Trends Across Millions of Builds","authors":"lulu","date":"2022-11-22:12:00:00","image":"/img/blog/clickhouse.png","tags":["product","engineering"]},"unlisted":false,"prevItem":{"title":"Bazelcon 2022 Recap","permalink":"/blog/bazelcon"},"nextItem":{"title":"Welcoming Iain Macdonald","permalink":"/blog/welcoming-iain-macdonald"}},"content":"When you use Buildbuddy with Bazel to build and test software, Buildbuddy\\ncaptures information about each Bazel invocation, such as number of builds, build\\nduration, remote cache performance, and more. Buildbuddy has\\na [Trends](https://app.buildbuddy.io/trends/) page to visualize trends in this\\ndata over time.\\n\\n![](/img/blog/trends-2.png)\\n\\nThe trends page allows you to see how improvements you are making to your builds\\naffects your average build duration and other stats. It also exposes areas that\\nmight need improving. For example, if you see the cache hit rate go down over\\ntime, your build might have some non-deterministic build actions that could be\\nimproved, or some newly introduced dependencies that result in more frequent\\ncache invalidations.\\n\\n\x3c!-- truncate --\x3e\\n\\nWhen we first created the Trends page, we used MySQL queries to aggregate\\nbuild stats and generate the data we wanted to display. For a time this worked\\nwell, but we quickly ran into performance issues for customers that had very\\nlarge numbers of builds. We were able to temporarily improve performance by\\nadding various indices, and though this helped to reduce the number of rows\\nread, it was not sufficient. Some customers do millions of builds monthly, and the\\nTrends page (which can look back up to a year) for these customers was taking\\nmore than 20 _minutes_ to load.\\n\\nThe queries behind the trends page require aggregation of multiple columns, such\\nas cache hits and cache misses. A traditional row-based database like MySQL is\\nnot always ideal for such a use case. In row-based databases, data is stored row\\nby row. When aggregating columns, more I/O seeks are required than\\na column-based database, which stores the data of each column in contiguous\\nblocks. Moreover, column-based databases have a higher compression rate because\\nconsecutive values of the same column are of the same type and may repeat.\\n\\n![](/img/blog/row-column-datastore.png)\\n\\nWith a row-based store, we can see from this diagram that computing a sum of\\ncache hit count would require us to load both block 1 and block 2. With\\na column-based store, all the cache hits data are stored in the same block.\\n\\nTherefore, we felt that using ClickHouse, a column-based database, would improve\\nthe performance of required queries for the trends page. We validated\\nClickHouse\u2019s performance against our use case: it took ClickHouse 0.317 seconds\\nto process 1.5 million rows and calculate the stats. The same query took MySQL\\nabout 24 minutes.\\n\\nOne of our goals for data migration is to make sure the data is accurate. We\\nadded monitoring and compared data between MySQL and ClickHouse after we enabled\\ndouble writing in production. One source of inconsistency was that data was\\ninserted into ClickHouse both by the backfill script and production servers.\\nDifferent to a traditional database, ClickHouse\u2019s\\n[ReplacingMergeTree](https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/replacingmergetree/)\\nengine only deduplicates data in the background at an indeterminate time. As\\na result, we needed to manually run the\\n[OPTIMIZE](https://clickhouse.com/docs/en/sql-reference/statements/optimize/)\\noperation to force ClickHouse to deduplicate data after the backfill was done.\\nAfter we were confident in the data consistency, we finally enabled the Trends\\npage to read from ClickHouse.\\n\\n## What\'s next\\n\\nWe are excited how ClickHouse unlocks more possibilities for us to provide\\nanalytical insights into builds, targets, tests and remote execution. For\\nexample, we want to add graphs that show how remote actions are spending most of\\ntheir time. These insights can be used to guide remote execution performance\\noptimizations.\\n\\nWe would love to hear your feedback about what stats and graphs you are interested in seeing.\\nJoin our [Slack channel](https://community.buildbuddy.io) or email us at\\n[hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts."},{"id":"welcoming-iain-macdonald","metadata":{"permalink":"/blog/welcoming-iain-macdonald","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/welcoming-iain-macdonald.md","source":"@site/blog/welcoming-iain-macdonald.md","title":"Welcoming Iain Macdonald","description":"To fulfill our mission of bringing the world\'s best developer tools to every company, we\'re intensely focused on hiring outstanding Software Engineers. That\'s why we\'re excited to share today that Iain Macdonald is joining BuildBuddy\'s engineering team!","date":"2022-10-26T12:00:00.000Z","tags":[{"inline":true,"label":"company","permalink":"/blog/tags/company"},{"inline":true,"label":"team","permalink":"/blog/tags/team"}],"readingTime":0.44,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"welcoming-iain-macdonald","title":"Welcoming Iain Macdonald","authors":"siggi","date":"2022-10-26T12:00:00.000Z","image":"/img/welcome_iain.png","tags":["company","team"]},"unlisted":false,"prevItem":{"title":"How We Use ClickHouse to Analyze Trends Across Millions of Builds","permalink":"/blog/clickhouse-build-trends"},"nextItem":{"title":"Welcoming Maggie Lou","permalink":"/blog/welcoming-maggie-lou"}},"content":"To fulfill our mission of bringing the world\'s best developer tools to every company, we\'re intensely focused on hiring outstanding Software Engineers. That\'s why we\'re excited to share today that [**Iain Macdonald**](https://www.linkedin.com/in/macdonaldi/) is joining BuildBuddy\'s engineering team!\\n\\nIain joins us from Google, where he spent over 10 years as an engineer working across the company from Gmail to Google Maps.\\n\\n![](../static/img/blog/welcome_iain.png)\\n\\nWe look forward to working alongside Iain to build the future of developer tools.\\n\\nWelcome to BuildBuddy, Iain!\\n\\n\x3c!-- truncate --\x3e"},{"id":"welcoming-maggie-lou","metadata":{"permalink":"/blog/welcoming-maggie-lou","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/welcoming-maggie-lou.md","source":"@site/blog/welcoming-maggie-lou.md","title":"Welcoming Maggie Lou","description":"To fulfill our mission of bringing the world\'s best developer tools to every company, we\'re expanding our team to keep up with our evergrowing customer base. That\'s why we\'re excited to share today that Maggie Lou is joining BuildBuddy\'s engineering team!","date":"2022-07-11T12:00:00.000Z","tags":[{"inline":true,"label":"company","permalink":"/blog/tags/company"},{"inline":true,"label":"team","permalink":"/blog/tags/team"}],"readingTime":0.38,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"welcoming-maggie-lou","title":"Welcoming Maggie Lou","authors":"siggi","date":"2022-07-11T12:00:00.000Z","image":"/img/welcome_maggie.png","tags":["company","team"]},"unlisted":false,"prevItem":{"title":"Welcoming Iain Macdonald","permalink":"/blog/welcoming-iain-macdonald"},"nextItem":{"title":"Bazel Remote Cache Debugging","permalink":"/blog/bazel-remote-cache-debugging"}},"content":"To fulfill our mission of bringing the world\'s best developer tools to every company, we\'re expanding our team to keep up with our evergrowing customer base. That\'s why we\'re excited to share today that [**Maggie Lou**](https://www.linkedin.com/in/maggie-lou-4a3bb110a/) is joining BuildBuddy\'s engineering team!\\n\\nMaggie joins us from Thumbtack.\\n\\n![](../static/img/blog/welcome_maggie.png)\\n\\nWe look forward to working alongside Maggie to build the future of developer tools.\\n\\nWelcome to BuildBuddy, Maggie!\\n\\n\x3c!--truncate--\x3e"},{"id":"bazel-remote-cache-debugging","metadata":{"permalink":"/blog/bazel-remote-cache-debugging","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/bazel-remote-cache-debugging.md","source":"@site/blog/bazel-remote-cache-debugging.md","title":"Bazel Remote Cache Debugging","description":"All about the new cache requests card and how to use it.","date":"2022-06-07T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":4.96,"hasTruncateMarker":true,"authors":[{"name":"Brandon Duffany","title":"Engineer @ BuildBuddy","url":"https://www.linkedin.com/in/brandon-duffany-39b7217a","imageURL":"https://avatars.githubusercontent.com/u/2414826?v=4","key":"brandon","page":null}],"frontMatter":{"slug":"bazel-remote-cache-debugging","title":"Bazel Remote Cache Debugging","description":"All about the new cache requests card and how to use it.","authors":"brandon","date":"2022-06-07:12:00:00","image":"/img/blog/remote-cache-debugging.png","tags":["product","engineering"]},"unlisted":false,"prevItem":{"title":"Welcoming Maggie Lou","permalink":"/blog/welcoming-maggie-lou"},"nextItem":{"title":"Distributed Scheduling for Faster Builds","permalink":"/blog/distributed-scheduling-for-faster-builds"}},"content":"Using a remote cache is a great way to speed up your Bazel builds! But by\\ndefault, Bazel uploads almost everything to the remote cache.\\n\\nIf your network is slow and your build artifacts are very large (like a\\ndocker image) this can lead to poor performance.\\n\\nTo address this, and make it easier to fix, we built the new cache\\nrequests card.\\n\\nIn this post we\'ll explore what insights this card can give you into your\\nbuilds, as well as some fun details about how the card works under the\\nhood.\\n\\n\x3c!-- truncate --\x3e\\n\\n## New insights\\n\\nThe cache requests card lets you answer some interesting questions about\\nyour build which were not easily answerable before. Here are a few:\\n\\n_**My build seems to have uploaded a lot of data &mdash; which targets\\nuploaded the largest artifacts?**_\\n\\nTo answer this question, select \\"Sort by **Size**\\" and \\"Show **All**\\".\\nThen, select \\"Group by **None**\\". This will show the largest artifacts\\nfirst, with target names displayed in the leftmost column.\\n\\n![](/img/blog/cache-requests-card.png)\\n\\nWe can see in this screenshot that the largest cache transfer was a\\ndownload of an artifact from the external repository\\n`com_github_tuist_xcodeproj`. To see the full target and action name,\\nhover over the row.\\n\\n_**I see some file references in the build event stream which aren\'t\\nassociated with an action. What are these files?**_\\n\\nTo answer this question, select \\"Show **All**\\" and search for\\n**bes-upload**. You\'ll see all the files which were uploaded by Bazel\\nand not associated with an action, including the timing profile.\\n\\n![](/img/blog/cache-requests-card-bes-upload.png)\\n\\nThe build in this screenshot shows that a large artifact (285.9 MB) was\\nuploaded at the very end of the build, so it most likely was blocking the\\nbuild\'s completion. We can see the full artifact path by hovering over the\\nrow.\\n\\n_**I expected my build to be fully-cached, but it was not. Was there a\\nsingle action whose inputs or environment variables changed unexpectedly,\\nthus triggering all its dependent targets to be rebuilt?**_\\n\\nTo answer this question, make sure you are sorted by **start time** in\\nascending order, and take a look at the actions with the earliest\\ntimestamps. The earliest action is most likely the root cause of the\\nchange from the previous build.\\n\\n![](/img/blog/cache-requests-card-incremental-rebuild.png)\\n\\nBefore the build in this screenshot, a file in the\\n`priority_task_scheduler` target was edited, which we can see triggered a\\ncascade of action executions that transitively depended on\\n`priority_task_scheduler`.\\n\\n## How it works\\n\\nImplementing the cache requests card required solving a few interesting\\nproblems.\\n\\nThe total size of the request metadata stored for each build is not\\nextremely large &mdash; just tens of megabytes for builds with hundreds of\\nthousands of cache requests &mdash; but we serve a high volume of\\nrequests, and we don\'t want to negatively impact cache performance just to\\nstore this metadata for each request.\\n\\nThe simplest solution to implement would be to do a blocking write to a\\nMySQL table for each cache request. This would also be pretty convenient\\nfor querying the data however we like. However, this would place far too\\nmuch load on the database and add way too much latency to each cache\\nrequest.\\n\\nSo, instead of using MySQL, we used Redis as an intermediate storage\\nmedium while the invocation is in progress. Redis can handle a much higher\\nvolume of writes than MySQL because it only stores values in memory and it\\nhas a much simpler key-value storage model.\\n\\nWe can\'t just store this data in Redis and call it a day, though. Firstly,\\nRedis does not give us long-term persistence, and it would be nice to be\\nable to keep this data around even for older invocations. To get long-term\\npersistence, we read all of the data from Redis and then serialize it into\\na [proto](https://developers.google.com/protocol-buffers). We store this\\nproto into a \\"blobstore,\\" which is just a generic storage interface backed\\nby a local disk, Google Cloud Storage, Amazon S3, etc.\\n\\nSecondly, even with the amazing performance of Redis, we can\'t just issue\\na single write request for every cache request. Doing a separate Redis\\nwrite for every request places a large amount of CPU load on Redis, since\\nit needs to do a `read()` and `write()` system call for each write.\\n(We learned this the hard way.)\\n\\nTo address this, we used Redis\\n[**pipelining**](https://redis.io/docs/manual/pipelining/). Instead of\\nissuing Redis commands directly, we add each command to a pipeline, and\\nhave a separate background job that periodically flushes the pipeline.\\nAdding the command to the pipeline is just a matter of appending to an\\nin-memory buffer, which takes just nanoseconds, so it doesn\'t impact cache\\nperformance to a significant degree.\\n\\n![](/img/blog/cache-requests-design-1.png)\\n\\nOnce an invocation is complete, we kick off a job to read all of the\\nrequests from Redis and then store it as a single blob in blobstore.\\n\\n![](/img/blog/cache-requests-design-2.png)\\n\\nTo read back this data for the UI, all we have to do is load this whole\\nblob into memory and then apply any client-side sorting and filtering.\\nThese blobs are small enough that we easily load the full blob into memory\\non the server &mdash; the blob is too big to be loaded in a browser,\\nthough, so we do use a relatively small page size.\\n\\n![](/img/blog/cache-requests-design-3.png)\\n\\n## What\'s next\\n\\nWe hope that you find the new cache requests card useful and that you\\nenjoyed reading about how it works! We would love to hear your feedback,\\nwhich will help inform how we design the next iteration of our cache\\ndebugging tools to help make your builds even faster and more scalable.\\nJoin our [Slack channel](https://community.buildbuddy.io) or email us at\\n[hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts."},{"id":"distributed-scheduling-for-faster-builds","metadata":{"permalink":"/blog/distributed-scheduling-for-faster-builds","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/distributed-scheduling-for-faster-builds.md","source":"@site/blog/distributed-scheduling-for-faster-builds.md","title":"Distributed Scheduling for Faster Builds","description":"The distributed scheduler that powers BuildBuddy remote execution","date":"2022-04-07T08:00:00.000Z","tags":[{"inline":true,"label":"engineering","permalink":"/blog/tags/engineering"},{"inline":true,"label":"go","permalink":"/blog/tags/go"},{"inline":true,"label":"sparrow","permalink":"/blog/tags/sparrow"},{"inline":true,"label":"scheduler","permalink":"/blog/tags/scheduler"}],"readingTime":6.78,"hasTruncateMarker":true,"authors":[{"name":"Tyler Williams","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/tyler-williams-80480519b/","imageURL":"https://avatars.githubusercontent.com/u/141737?v=4","key":"tyler","page":null}],"frontMatter":{"slug":"distributed-scheduling-for-faster-builds","title":"Distributed Scheduling for Faster Builds","description":"The distributed scheduler that powers BuildBuddy remote execution","authors":"tyler","date":"2022-04-07:08:00:00","image":"/img/distributed-scheduling.png","tags":["engineering","go","sparrow","scheduler"]},"unlisted":false,"prevItem":{"title":"Bazel Remote Cache Debugging","permalink":"/blog/bazel-remote-cache-debugging"},"nextItem":{"title":"Meet rules_xcodeproj","permalink":"/blog/meet-rules_xcodeproj"}},"content":"Let\'s start with \\"what\'s BuildBuddy\\" for the kids in back. In short, we provide a UI, distributed cache, and remote execution platform for your Bazel builds. That means we securely compile your code, cache the artifacts, and help you visualize the results. We make it possible to build projects like Tensorflow from your laptop in under 5 minutes instead of 90 minutes.\\n\\nObviously to do all this, we have to handle some thorny engineering challenges, one of which is scheduling remote executions. For that, we have a scheduler. The scheduler just matches actions (basically jobs) received by our API to remote workers that actually do the work. If you think of a full build of something like Tensorflow as a 10 course meal, a single action is like a recipe for a tiny part of that meal. To make it easier to visualize, here\'s a real action from building BuildBuddy:\\n\\n\x3c!-- truncate --\x3e\\n\\n```bash\\n# this action just uses gcc to compile zlib/infback.c into an object file, zlib/infback.o\\n/usr/bin/gcc -U_FORTIFY_SOURCE -fstack-protector -Wall -Wunused-but-set-parameter \\\\\\n  -Wno-free-nonheap-object -fno-omit-frame-pointer -g0 -O2 -D_FORTIFY_SOURCE=1 \\\\\\n  -DNDEBUG -ffunction-sections -fdata-sections -MD -MF \\\\\\n  bazel-out/k8-opt-exec-34F00540/bin/external/zlib/_objs/zlib/infback.d \\\\\\n  -frandom-seed=bazel-out/k8-opt-exec-34F00540/bin/external/zlib/_objs/zlib/infback.o \\\\\\n  -iquote external/zlib -iquote bazel-out/k8-opt-exec-34F00540/bin/external/zlib \\\\\\n  -isystem external/zlib/zlib/include \\\\\\n  -isystem bazel-out/k8-opt-exec-34F00540/bin/external/zlib/zlib/include -g0 \\\\\\n  -Wno-unused-variable -Wno-implicit-function-declaration -fno-canonical-system-headers \\\\\\n  -Wno-builtin-macro-redefined -D__DATE__=\\"redacted\\" -D__TIMESTAMP__=\\"redacted\\" \\\\\\n  -D__TIME__=\\"redacted\\" -c external/zlib/infback.c -o \\\\\\n  bazel-out/k8-opt-exec-34F00540/bin/external/zlib/_objs/zlib/infback.o\\n```\\n\\nAnd here\'s another:\\n\\n```bash\\n# this action uses protobufjs to generate typescript bindings for a protobuf file\\nbazel-out/host/bin/external/npm/protobufjs/bin/pbts.sh\\n--out=bazel-out/k8-fastbuild/bin/proto/buildbuddy_service_ts_proto.d.ts\\nbazel-out/k8-fastbuild/bin/proto/buildbuddy_service_ts_proto.js\\n--bazel_node_modules_manifest=bazel-out/k8-fastbuild/bin/proto/__buildbuddy_service_ts_proto_pbts.module_mappings.json\\n```\\n\\nSo you get the idea, building a binary involves compiling and linking many different libraries etc and a single action is usually one of those commands. Great.\\n\\nSo let\'s say we have hundreds or thousands of these actions hitting our API at a time, and a pool of remote workers ready to run them. Let\'s get to it. If you\'re like me, your first thought here is _load balancer_. I mean, why not? These are just requests that need to get to a pool of machines, and load balancers are a really common, well understood way to do this.\\n\\nIn the very early days, this is what we did. We ran nginx in front of a pool of executors. And it kind of worked! But the results were... lumpy. In a typical web application, most requests served by load balancers are pretty homogeneous. They are static file lookups or simple page actions that all usually take under a second to serve. But our requests were very heterogenous: the fastest ones were simple gcc compile commands that generated a single object file and could finish in 10s of milliseconds. The slowest ones were gigantic slow link statements that required every single object file and took 30+ seconds to link. Or even worse, test actions that ran a unit test binary and took 30+ minutes to run.\\n\\nWhat happened is that the load balancer would assign tasks in a round robin fashion and put two large tasks on the same worker, while other workers were sitting there idle, and the build would take much longer than it should.\\n\\nI should mention that I really wanted this to work, because I didn\'t want to write a scheduler. It seemed complex and risky. I would much rather use something simple and well tested than build a custom critical piece of infrastructure like a scheduler. In fact I went through all kinds of machinations to avoid doing this, from using different load balancing techniques like least loaded or exponential weighted moving average (EWMA) to trying to split the work into multiple load balancer targets, to using the Kubernetes scheduler.\\n\\nAnd in the end, nothing worked well. The core reason a load balancer was such a poor fit here is that it didn\'t know the size of the requests it was routing. It seemed possible to give the load balancer some hints about this, but it would have meant writing our own load balancing algorithm, or relying on a very complex routing configuration. Neither option sounded appealing, and both negated my whole rationale for using a load balancer in the first place, namely that they are fast and easy.\\n\\nSo I went and did some reading about schedulers, and found this really lovely paper [https://cs.stanford.edu/~matei/papers/2013/sosp_sparrow.pdf](https://cs.stanford.edu/~matei/papers/2013/sosp_sparrow.pdf) about a distributed scheduler called Sparrow. This paper is great because it\'s short and clearly written, and it talks about some cool ideas. The biggest idea is the power of two choices.\\n\\n:::note\\n\\n[The Power of Two Choices in Randomized Load Balancing](https://www.eecs.harvard.edu/~michaelm/postscripts/mythesis.pdf)\\n\\nIn a typical load balancer, some metrics are kept about how loaded a worker is based on how long it takes to serve a request, and then the load balancer uses those metrics to decide where to assign new requests. The metrics are stale though, being based on past requests, which leads to some non-optimal behavior. A better way to assign requests is just to pick two random workers and assign to the least loaded of the two. This leads to an exponential improvement in the maximum load.\\n\\n:::\\n\\nSparrow modifies two-choices slightly, and also introduces the idea of Late-Binding. In many schedulers, each worker maintains a queue and the scheduler tries to assign work to the worker with the shortest queue. The problem with this, and one of the core reasons it doesn\'t give good performance on our workloads, is that queue length is not a good indicator of how long a task will take. Late-binding solves this by enqueuing a task on multiple workers, and then the first worker to get to the task takes it. This effectively avoids the problems of huge single tasks blocking other work.\\n\\nAnother reason this paper is so great is because the authors actually implemented Sparrow, ported Apache Spark to use it, and then analyzed the results. Side note: I wish more papers were like this! So fun to read.\\n\\nSparrow is a _distributed_ scheduling algorithm, so no single node holds the entire state of the world. This is really important for us at BuildBuddy because we want our infrastructure to be resilient. When an API server or backend worker restarts or goes down, for whatever reason, we don\'t want it to impact customer builds.\\n\\nSo with this paper as a basis, I went and implemented Sparrow in Go, which was not nearly as hard as I\'d made it out to be. It maybe took a few days, which was far less time than I\'d spent trying to find alternative solutions. The lead author of the paper was even happy to help clarify things over email. And when I replaced our load balancer with it, the results were pretty much instantly far better than anything we\'d had before. No longer were builds timing out because of unequal load distribution. Even better, due to the distributed nature of the algorithm, we could run our workers on cheap preemptible compute machines that are often restarted and not worry about losing tasks. (These machines are less than half the cost!)\\n\\nWe still use this scheduler in production today, and it\'s working well for us. We\'ve made some modifications to the way requests are routed, but fundamentally this algorithm is the same one in the paper, the same one powering all remote execution on BuildBuddy today.\\n\\nIf you want to learn more about BuildBuddy or try it, check out [our docs](https://www.buildbuddy.io/docs/introduction/). And if you enjoy this kind of problem solving and engineering work, [we\u2019re hiring](https://www.buildbuddy.io/careers/)!"},{"id":"meet-rules_xcodeproj","metadata":{"permalink":"/blog/meet-rules_xcodeproj","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/meet-rules_xcodeproj.md","source":"@site/blog/meet-rules_xcodeproj.md","title":"Meet rules_xcodeproj","description":"We are happy to announce that today we are releasing the first version of rules_xcodeproj, version 0.1.0.","date":"2022-04-05T08:00:00.000Z","tags":[{"inline":true,"label":"rules_xcodeproj","permalink":"/blog/tags/rules-xcodeproj"}],"readingTime":1.95,"hasTruncateMarker":true,"authors":[{"name":"Brentley Jones","title":"Developer Evangelist @ BuildBuddy","url":"https://brentleyjones.com","imageURL":"https://avatars.githubusercontent.com/u/158658?v=4","key":"brentley","page":null}],"frontMatter":{"slug":"meet-rules_xcodeproj","title":"Meet rules_xcodeproj","description":"We are happy to announce that today we are releasing the first version of rules_xcodeproj, version 0.1.0.","authors":"brentley","date":"2022-04-05:08:00:00","image":"/img/meet_rules_xcodeproj.png","tags":["rules_xcodeproj"]},"unlisted":false,"prevItem":{"title":"Distributed Scheduling for Faster Builds","permalink":"/blog/distributed-scheduling-for-faster-builds"},"nextItem":{"title":"Bazel\'s Remote Caching and Remote Execution Explained","permalink":"/blog/bazels-remote-caching-and-remote-execution-explained"}},"content":"[rules_xcodeproj][rules_xcodeproj] is a Bazel ruleset that can be used to\\ngenerate Xcode projects from targets in your workspace. We are happy to announce\\nthat today we are releasing the first version of the ruleset,\\n[version 0.1.0][0.1.0].\\n\\n[rules_xcodeproj]: https://github.com/buildbuddy-io/rules_xcodeproj\\n[0.1.0]: https://github.com/buildbuddy-io/rules_xcodeproj/releases/tag/0.1.0\\n\\n\x3c!-- truncate --\x3e\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/blog/rules_xcodeproj.png\\" height=\\"256\\" />\\n</p>\\n\\nThere are already other tools out there that allow you to integrate Xcode with\\nBazel. So you may be wondering why we decided to create another one. The core\\nreason is there wasn\'t one tool that satisfied all of these requirements:\\n\\n- Fully supports all of Xcode\'s features\\n  - Indexing (i.e. autocomplete, syntax highlighting, jump to definition)\\n  - Debugging\\n  - Inline warnings and errors\\n  - Fix-its\\n  - Tests\\n  - SwiftUI Previews\\n- Supports building with Xcode (_not_ Bazel)\\n  - Useful for testing new Xcode features before Bazel and/or\\n    rules_apple/rules_swift supports it\\n  - An option if you don\'t want developers to build with Bazel quite yet\\n- Supports building with Bazel, in Xcode\\n  - While still fully supporting all of Xcode\'s features\\n  - Without needing an XCBBuildService proxy\\n- Supports all of the Core C/C++/Obj-C, rules_apple, and rules_swift rules\\n- Can be extended to support custom rules if needed\\n- Supports target discovery and focused projects\\n  - Target discovery means it can use a query system to find related targets,\\n    such as tests, without having to manually list them all\\n  - Focused projects allow Xcode to have only a portion of your build graph\\n    included in it, making Xcode perform better for large projects\\n- Produces Xcode projects that look and feel like normal Xcode projects\\n\\nWe\'ve been working on rules_xcodeproj for two months, and while it doesn\'t\\nyet support all of the above, we have designs and a roadmap to cover all of\\nthose requirements. Depending on the rules your project uses, or the attributes\\nof those rules, you should be able to generate an Xcode project that builds with\\nXcode today, using version 0.1.0.\\n\\nIf you run into any problems with rules_xcodeproj, please check if\\n[another issue already exists][issues] and comment on it, and if not,\\n[file an issue][file-an-issue]! You can also email us at [hello@buildbuddy.io](mailto:hello@buildbuddy.io)\\nwith any questions, comments, or thoughts.\\n\\n[issues]: https://github.com/buildbuddy-io/rules_xcodeproj/issues\\n[file-an-issue]: https://github.com/buildbuddy-io/rules_xcodeproj/issues/new/choose"},{"id":"bazels-remote-caching-and-remote-execution-explained","metadata":{"permalink":"/blog/bazels-remote-caching-and-remote-execution-explained","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/bazels-remote-caching-and-remote-execution-explained.md","source":"@site/blog/bazels-remote-caching-and-remote-execution-explained.md","title":"Bazel\'s Remote Caching and Remote Execution Explained","description":"A nuts and bolts (or rather actions and spawns \ud83d\ude04) overview of Bazel\'s remote caching and remote execution capabilities.","date":"2022-03-16T12:00:00.000Z","tags":[{"inline":true,"label":"bazel","permalink":"/blog/tags/bazel"}],"readingTime":15.9,"hasTruncateMarker":true,"authors":[{"name":"Brentley Jones","title":"Developer Evangelist @ BuildBuddy","url":"https://brentleyjones.com","imageURL":"https://avatars.githubusercontent.com/u/158658?v=4","key":"brentley","page":null}],"frontMatter":{"slug":"bazels-remote-caching-and-remote-execution-explained","title":"Bazel\'s Remote Caching and Remote Execution Explained","description":"A nuts and bolts (or rather actions and spawns \ud83d\ude04) overview of Bazel\'s remote caching and remote execution capabilities.","authors":"brentley","date":"2022-03-16:12:00:00","image":"/img/bazel_remote_explained.png","tags":["bazel"]},"unlisted":false,"prevItem":{"title":"Meet rules_xcodeproj","permalink":"/blog/meet-rules_xcodeproj"},"nextItem":{"title":"How Bazel 5.0 Makes Your Builds Faster","permalink":"/blog/how-bazel-5-0-makes-your-builds-faster"}},"content":"Bazel\'s famous remote caching and remote execution capabilities can be a game changer,\\nbut if you\'re not familiar with how they work,\\nthey can be a bit of a mystery.\\n\\nWell, don\'t worry.\\nI\'m here with to go over the fundamentals of remote caching and remote execution,\\nwith a nuts and bolts\\n(or rather actions and spawns \ud83d\ude04)\\noverview of Bazel\'s remote capabilities.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Actions\\n\\nEach [rule target][rule] in the [build graph][build-graph] of a requested build produces zero or more [actions][action] during the [analysis phase][analysis-phase].\\nThese actions form an [action graph][action-graph],\\nrepresenting all the actions that need to be performed during the [execution phase][execution-phase].\\n\\n<figure>\\n![](../static/img/blog/action-graph.svg)\\n<figcaption>An example action graph. Actions are grouped by the targets that created them. Arrows connect the actions, showing dependencies between them.</figcaption>\\n</figure>\\n\\nDuring the execution phase the action graph is traversed.\\nFor each action,\\nBazel determines if it has to be executed,\\neither because the [action result][action-result] doesn\'t exist in the output base\'s [action cache][action-cache],\\nor because the output in the [output base][output-base] doesn\'t match the output listed in the action result.\\n\\n## Spawns\\n\\nIf Bazel has to execute an action,\\nit creates a [spawn][spawn],\\nwhich encodes all the information needed to be able to execute the action,\\nincluding the spawn\'s [\\"strategy\\"][spawn-strategy][^1],\\nwhich,\\namong other things,\\ndetermines if/how the spawn should utilize remote caching or remote execution.\\n\\n[^1]: Julio wrote a great [summary on spawn strategies](https://jmmv.dev/2019/12/bazel-strategies.html) that I highly recommend reading.\\n\\nA spawn\'s strategy will dictate if Bazel has to do additional work\\nbefore,\\nafter,\\nor instead of executing an action locally.\\nFor example,\\nif a spawn with the `remote-cache` strategy is executed,\\nBazel may check if the action result exists in the external cache\'s action cache,\\nand if it does,\\nit might download the listed outputs instead of executing the action.\\nI go over this in greater detail [later](#remote-caching).\\n\\nAfter an action\'s outputs are available in the output base,\\neither because they were downloaded or created locally,\\ndependent actions in the action graph can spawn.\\n\\n### Parallelism\\n\\n<a id=\\"local_cpu_resources-flag\\"></a>\\n\\nThe number of actions that can be executed locally at once is limited by the [`--local_cpu_resources`][local_cpu_resources] flag.\\nThe number of spawns that can be executed at once is limited by the [`--jobs`][jobs] flag.\\nSince a spawn\'s execution can include more work,\\nor different work,\\nthan an action\'s local execution,\\nit can be beneficial to have a `--jobs` value that is larger than `--local_cpu_resources`.\\nWhen that is the case,\\nand a spawn tries to execute an action locally,\\nit might block waiting for CPU resources to free up.\\nThis is where [remote execution](#remote-execution) can be beneficial.\\n\\n## Remote caching\\n\\nTo prevent confusion over Bazel\'s concept of a [\\"remote cache\\"][remote-caching],\\nwhich can mean either a disk cache which is local to the machine,\\nor a remote cache which uses networking protocols and is probably not local to the machine,\\nI\'m going to instead refer to both of these cache types as an \\"external cache\\",\\nas it\'s external to the output base.\\n\\nWhen using an external cache,\\nBazel will augment it\'s output base with the action cache (AC) and content-addressable storage (CAS) of the external cache.\\nThis means if an action result for an action that Bazel wants to execute isn\'t in the output base\'s action cache,\\nBazel can check if the AC has it.\\nThe same is true for the action\'s outputs;\\nif the output base doesn\'t have the expected output,\\nthen Bazel can check if the CAS has it.\\n\\n### `remote-cache`\\n\\nBazel achieves this behavior with the `remote-cache` spawn strategy,\\nwhich is used alongside a local strategy (e.g. `sandbox`, `worker`, `local`, etc.).\\n\\nA `remote-cache` spawn has the following steps:\\n\\n- If the action\'s action result isn\'t in the output base\'s action cache,\\n  try to retrieve it from the AC\\n  ([`ActionCache.GetActionResult`][reapi-getactionresult])[^2]\\n- If the action result was retrieved from either cache...\\n  - And the action\'s outputs are in the output base,\\n    the spawn is done\\n  - Otherwise,\\n    try to retrieve it from the CAS\\n    ([`ByteStream.Read`][bytestream-read])\\n- If the outputs were retrieved,\\n  the spawn is done\\n- Otherwise,\\n  the action is executed locally\\n- If the action completes successfully,\\n  the action\'s outputs are uploaded to the CAS\\n  ([`ByteStream.Write`][bytestream-write]),\\n  and its action result is uploaded to the AC\\n  ([`ActionCache.UpdateActionResult`][reapi-updateactionresult])[^3]\\n  - If [`--experimental_remote_cache_async`][experimental_remote_cache_async][^4] is used,\\n    then the spawn is done,\\n    and dependent actions are able to spawn\\n    while uploads continue in the background\\n  - Otherwise,\\n    uploads have to finish before dependent actions are able to spawn\\n\\n[^2]:\\n    Except possibly if [`--noremote_accept_cached`][remote_accept_cached] is set.\\n    See the [flags section](#flags).\\n\\n[^3]:\\n    Except if the action is tagged with `no-remote-cache-upload`,\\n    or possibly if [`--noremote_upload_local_results`][remote_upload_local_results] is set.\\n    See the [flags section](#flags).\\n\\n[^4]: Available in [Bazel 5.0](https://github.com/bazelbuild/bazel/commit/7f08b7841fcf4c7d7d09b69f9ec1f24969aba8a1).\\n\\n### Flags\\n\\n<a id=\\"disk_cache-flag\\"></a>\\n<a id=\\"remote_cache-flag\\"></a>\\n\\nSetting the [`--disk_cache`][disk_cache] flag causes Bazel to use that directory on the filesystem as an external cache.\\nSetting the [`--remote_cache`][remote_cache] flag causes Bazel to connect via HTTP(S), gRPC(S), or UNIX sockets to an external cache.\\nSetting both flags causes Bazel to use both the disk cache and the remote cache at the same time,\\nforming a \\"combined cache\\".\\n\\nA combined cache reads from and writes to both the disk and remote caches,\\nand is treated like a remote cache overall,\\nunless the [`--incompatible_remote_results_ignore_disk`][incompatible_remote_results_ignore_disk] flag is used.\\nIf that flag is used,\\nthe disk cache instead continues to behave like a local cache,\\nallowing it to return results even if [`--noremote_accept_cached`][remote_accept_cached] is set,\\nstore results even if [`--noremote_upload_local_results`][remote_upload_local_results] is set,\\nand return/store results for [`no-remote-cache`/`no-remote`][common-tags] actions.[^5]\\n\\n<a id=\\"experimental_guard_against_concurrent_changes-flag\\"></a>\\n\\nSetting the [`--experimental_guard_against_concurrent_changes`][experimental_guard_against_concurrent_changes] flag helps protect the external cache from being poisoned by changes to input files that happen during a build.\\nI highly recommend setting this flag if developers have an external cache enabled,\\neven if it\'s only the disk cache.\\n\\n<a id=\\"remote_instance_name-flag\\"></a>\\n\\nMost remote cache implementations will separate the AC,\\nand some will separate the CAS,\\nbased on the value of the [`--remote_instance_name`][remote_instance_name] flag.\\nThis can used for numerous reasons,\\nsuch as project separation,\\nor a bandage for non-hermetic toolchains.\\n\\n<a id=\\"remote_cache_header-flag\\"></a>\\n\\nThe [`--remote_cache_header`][remote_cache_header] flag causes Bazel to send extra headers in requests to the external cache.\\nMultiple headers can be passed by specifying the flag multiple times.\\nMultiple values for the same name will be converted to a comma-separated list.\\nThe [`--remote_header`][remote_header] flag can be used instead of setting both `--remote_cache_header` and `--remote_exec_header` to the same value.\\n\\n[^5]: Available in [Bazel 5.0](https://github.com/bazelbuild/bazel/commit/46c3f1711b90c648baf3d15d6df2890c8a12f67c).\\n\\n## Remote execution\\n\\nBazel is able to execute actions on a remote executor,\\ninstead of executing them locally,\\nusing a concept called [\\"remote execution\\"][remote-execution].\\nSince these actions don\'t use local resources,\\nthe number of actions that can be executed remotely in parallel is limited only by `--jobs` and the available remote resources,\\nnot `--local_cpu_resources`.\\nIf your builds are sufficiently parallel,\\nthis can result in them completing faster.\\nThe [parallelism section](#parallelism) goes into more detail.\\n\\n### `remote`\\n\\nBazel achieves the behavior of executing actions remotely with the `remote` spawn strategy,\\nwhich includes most of the behavior of the [`remote-cache`](#remote-cache) strategy,\\nand is used instead of a local strategy (e.g. `sandbox`, `worker`, `local`, etc.).\\n\\nA `remote` spawn has the following steps:\\n\\n- If the action\'s action result isn\'t in the output base\'s action cache,\\n  try to retrieve it from the AC\\n  ([`ActionCache.GetActionResult`][reapi-getactionresult])[^6]\\n- If the action result was retrieved from either cache...\\n  - And the action\'s outputs are in the output base,\\n    the spawn is done\\n  - Otherwise,\\n    try to retrieve it from the CAS\\n    ([`ByteStream.Read`][bytestream-read])\\n- If the outputs were retrieved,\\n  the spawn is done\\n- Otherwise,\\n  determine if any inputs to the action need to be uploaded\\n  ([`ContentAddressableStorage.FindMissingBlobs`][reapi-findmissingblobs]),\\n  and upload them\\n  ([`ByteStream.Write`][bytestream-write])\\n- Then execute the action remotely ([`Execution.Execute`][reapi-execute])\\n- If the action completes successfully,\\n  download the action\'s outputs from the CAS\\n  ([`ByteStream.Read`][bytestream-read])\\n\\n[^6]: Except if [`--noremote_accept_cached`][remote_accept_cached] is set.\\n\\n### Disk cache\\n\\n[Starting in Bazel 5.0](https://github.com/bazelbuild/bazel/commit/cf57d036c2e1b608ca902267fbbdfeb7ee5aa166),\\nthe disk cache\\n(or more specifically,\\nthe combined cache)\\ncan be used with remote execution.\\nPrior to Bazel 5.0,\\nif you also wanted to cache things locally,\\nyou would have to setup a remote cache proxy sidecar.\\n\\n### Dynamic execution\\n\\nBazel supports a mode of remote execution called [\\"dynamic execution\\"][dynamic-execution],\\nin which local and remote execution of the same action are started in parallel,\\nusing the output from the first branch that finishes,\\nand cancelling the other branch.\\n\\nI wanted to mention it for completeness,\\nbecause when tuned properly it can result in faster builds than using either local execution or remote execution alone.\\nHowever,\\nit might not play well with [Remote Build without the Bytes](#remote-build-without-the-bytes),\\nas the local execution branches might need to download the outputs of previous remotely completed actions,\\nand if tuned improperly,\\nit can result in slower builds.\\n\\n### Flags\\n\\n#### `--remote_executor` {#remote_executor-flag}\\n\\nSetting the [`--remote_executor`][remote_executor] flag causes Bazel to connect via gRPC(S) or UNIX sockets to a remote executor.\\nIf `--remote_cache` isn\'t set,\\nit defaults to the value set for `--remote_executor`.\\nMost remote execution setups will have the remote cache and remote executor at the same endpoint.\\n\\nIn addition to how it [affects the remote cache](#flags),\\nthe [`--remote_instance_name`][remote_instance_name] flag might determine which remote execution cluster a build runs on.\\nSome actions might need to target a specific subset of executors,\\npossibly because they need certain hardware or software,\\nand they can do that with [platform properties][platform-properties].\\n\\n#### `--remote_default_exec_properties` {#remote_default_exec_properties-flag}\\n\\nPlatform properties can be set globally with the [`--remote_default_exec_properties`][remote_default_exec_properties] flag,\\nbut only if they aren\'t set at the [platform][platform-exec_properties] or [target][target-exec_properties] level.\\nThe action result that is stored in an action cache includes the platform properties.\\nThis is important to note, as it can affect action cache hit rates.\\nIf you conditionally use remote execution,\\nand you use set platform properties,\\nyou might want to have them set non-conditionally,\\nin order to be able to reuse the cached action results.\\nSome remote execution implementations allow setting global platform properties with [`--remote_exec_header`](#remote_exec_header-flag) flags,\\nas a way to prevent these cache misses.\\n\\n#### `--remote_timeout` {#remote_timeout-flag}\\n\\nThe [`--remote_timeout`][remote_timeout] flag controls how long Bazel will wait for a remote cache operation to complete.\\nWhile the timeout doesn\'t apply to the `Execution.Execute` call[^7],\\nusing remote execution might involve uploading or downloading artifacts that a local build doesn\'t,\\nand the default value for this flag\\n(60 seconds)\\nmight not be long enough.\\n\\n#### `--remote_retries` {#remote_retries-flag}\\n\\nThe [`--remote_retries`][remote_retries] flag controls how many times Bazel will retry a remote operation on a transient error,\\nsuch as a timeout.\\nThe flag defaults to `5`,\\nand depending on how you plan to use remote execution,\\nyou might want to increase it to a much larger value.\\nBazel uses an exponential backoff for retries,\\nbut currently caps the delay at 5 seconds between calls.\\n\\n#### `--remote_exec_header` {#remote_exec_header-flag}\\n\\nThe [`--remote_exec_header`][remote_exec_header] flag causes Bazel to send extra headers in requests to the remote executor.\\nMultiple headers can be passed by specifying the flag multiple times.\\nMultiple values for the same name will be converted to a comma-separated list.\\nThe [`--remote_header`][remote_header] flag can be used instead of setting both `--remote_cache_header` and `--remote_exec_header` to the same value.\\n\\n[^7]:\\n    If the [`--experimental_remote_execution_keepalive`][experimental_remote_execution_keepalive] flag is set,\\n    the `Execution.Execute` and `Execution.WaitExecute` calls take into account the values of `--remote_timeout` and `--remote_retries`,\\n    but in a [more complicated way](https://docs.google.com/document/d/1NgDPsCIwprDdqC1zj0qQrh5KGK2hQTSTux1DAvi4rSc).\\n    Even with that flag, the goal is for execution time to be unbounded,\\n    as it can vary greatly depending on the action being executed.\\n\\n## Remote Build without the Bytes\\n\\nFor both remote caching and remote execution,\\nBazel supports a feature called [\\"Remote Build without the Bytes\\"][remote-build-without-the-bytes] (BwtB).\\nIf enabled,\\nBazel will only download the direct outputs of the targets specified\\n([`--remote_download_toplevel`][remote_download_toplevel]),\\nor the minimum needed to complete the build\\n([`--remote_download_minimal`][remote_download_minimal]).\\nThis can result in greatly reduced network traffic,\\nwhich can also result in faster builds.\\n\\nThe feature isn\'t without its flaws though.\\nCurrently,\\nBwtB requires remote caches to [never evict outputs](https://github.com/bazelbuild/bazel/issues/8250),\\ncan result in slower builds due to clumping of downloads,\\ndoesn\'t allow specifying that other outputs should be downloaded,\\netc.\\nThough,\\nsimilar to [dynamic execution](#dynamic-execution),\\nif used properly BwtB can result in faster builds.\\nJust don\'t apply it blindly.\\n\\n## Bonus topic: Build Event Service\\n\\nBazel can stream build results,\\nspecifically the [build event protocol][bep] (BEP),\\nto a [build event service][bes] (BES).\\nDepending on the capabilities of the service,\\nthis can have numerous benefits.\\n\\nHere is a list of some benefits that various BES products (including BuildBuddy!) offer:\\n\\n- Easily share build logs\\n- See historical build data, including aggregations and trends\\n- See details not exposed via the terminal\\n  (e.g. all command-line flags used without having to use [`--announce_rc`][announce_rc],\\n  or all environment variables set)\\n- View action timing data (same as [`--experimental_generate_json_trace_profile`][experimental_generate_json_trace_profile])\\n- Visualize queries\\n- View error and test logs\\n- Download action outputs\\n- View remote cache stats\\n- View related remote execution data\\n  - List of actions executed\\n  - Individual action details\\n    (e.g. command-line arguments,\\n    environment variables,\\n    platform properties,\\n    timing data,\\n    and downloading inputs and outputs)\\n\\n### Flags\\n\\n<a id=\\"bes_backend-flag\\"></a>\\n\\nSetting the [`--bes_backend`][bes_backend] flag causes Bazel to connect via gRPC(S) to a BES backend and stream build results to it.\\nSetting the [`--bes_results_url`][bes_results_url] flag causes Bazel to output to the terminal a URL to the BES UI for the build underway.\\n\\nWhen using BES,\\nBazel will upload all files referenced in the BEP,\\nunless [`--experimental_build_event_upload_strategy=local`][experimental_build_event_upload_strategy][^8] is set.\\nAlternatively,\\nif you set [`--incompatible_remote_build_event_upload_respect_no_cache`][incompatible_remote_build_event_upload_respect_no_cache][^9],\\nand have actions that are tagged with [`no-cache`/`no-remote-cache-upload`/`no-remote-cache`/`no-remote`][common-tags],\\nthen the output of those actions will still be excluded from upload.\\n\\n<a id=\\"bes_timeout-flag\\"></a>\\n\\nThe [`--bes_timeout`][bes_timeout] flag controls how long Bazel will wait to finish uploading to BES after the build and tests have finished.\\nBy default there is no timeout,\\nwhich might not be what you want.\\nIf you leave the default,\\nyou should consider changing the [`--bes_upload_mode`][bes_upload_mode] flag,\\nwhich controls if Bazel should block the build for BES uploads\\n(the default),\\nor if it should finish the uploads in the background.\\n\\n<a id=\\"bes_header-flag\\"></a>\\n\\nThe [`--bes_header`][bes_header][^10] flag causes Bazel to send extra headers in requests to the BES backend.\\nIt behaves the same way as [`--remote_header`][remote_header].\\n\\n[^8]:\\n    A warning though:\\n    setting `--experimental_build_event_upload_strategy=local` will prevent the uploading of some nice things,\\n    such as the timing profile,\\n    or test logs.\\n\\n[^9]: Available in [Bazel 5.0](https://github.com/bazelbuild/bazel/commit/bfc24139d93f8643686d91596ba347df2e01966a).\\n\\n[^10]: Available in [Bazel 5.0](https://github.com/bazelbuild/bazel/commit/ef42d1365d0f508d3d817997b5049639a72100ab).\\n\\n## That\'s it, for now\\n\\nHopefully with this information at hand,\\nBazel\'s remote caching and remote execution capabilities are less of a mystery.\\n\\n[action]: https://docs.bazel.build/versions/5.0.0/glossary.html#action\\n[action-cache]: https://docs.bazel.build/versions/5.0.0/glossary.html#action-cache\\n[action-graph]: https://docs.bazel.build/versions/5.0.0/glossary.html#action-graph\\n[analysis-phase]: https://docs.bazel.build/versions/5.0.0/glossary.html#analysis-phase\\n[build-graph]: https://docs.bazel.build/versions/5.0.0/glossary.html#build-graph\\n[disk-cache]: https://docs.bazel.build/versions/5.0.0/glossary.html#disk-cache\\n[execution-phase]: https://docs.bazel.build/versions/5.0.0/glossary.html#execution-phase\\n[output-base]: https://docs.bazel.build/versions/5.0.0/glossary.html#output-base\\n[rule]: https://docs.bazel.build/versions/5.0.0/glossary.html#rule\\n[bep]: https://docs.bazel.build/versions/5.0.0/build-event-protocol.html\\n[bes]: https://docs.bazel.build/versions/5.0.0/build-event-protocol.html#build-event-service\\n[dynamic-execution]: https://docs.bazel.build/versions/5.0.0/dynamic-execution.html\\n[platform-properties]: https://docs.bazel.build/versions/5.0.0/platforms-intro.html#common-platform-properties\\n[remote-caching]: https://docs.bazel.build/versions/5.0.0/remote-caching.html\\n[remote-execution]: https://docs.bazel.build/versions/5.0.0/remote-execution.html\\n[common-tags]: https://docs.bazel.build/versions/5.0.0/be/common-definitions.html#common.tags\\n[platform-exec_properties]: https://docs.bazel.build/versions/5.0.0/be/platform.html#platform.exec_properties\\n[target-exec_properties]: https://docs.bazel.build/versions/5.0.0/be/common-definitions.html#common.exec_properties\\n[announce_rc]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--announce_rc\\n[bes_backend]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--bes_backend\\n[bes_header]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--bes_header\\n[bes_results_url]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--bes_results_url\\n[bes_timeout]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--bes_timeout\\n[disk_cache]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--disk_cache\\n[experimental_build_event_upload_strategy]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--experimental_build_event_upload_strategy\\n[experimental_generate_json_trace_profile]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--experimental_generate_json_trace_profile\\n[experimental_guard_against_concurrent_changes]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--experimental_guard_against_concurrent_changes\\n[experimental_remote_cache_async]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--experimental_remote_cache_async\\n[experimental_remote_execution_keepalive]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--experimental_remote_execution_keepalive\\n[incompatible_remote_build_event_upload_respect_no_cache]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--incompatible_remote_build_event_upload_respect_no_cache\\n[incompatible_remote_results_ignore_disk]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--incompatible_remote_results_ignore_disk\\n[jobs]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--jobs\\n[local_cpu_resources]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--local_cpu_resources\\n[remote_accept_cached]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_accept_cached\\n[remote_cache]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_cache\\n[remote_cache_header]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_cache_header\\n[remote_default_exec_properties]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_default_exec_properties\\n[remote_download_minimal]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_download_minimal\\n[remote_download_toplevel]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_download_toplevel\\n[remote_executor]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_executor\\n[remote_exec_header]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_exec_header\\n[remote_header]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_header\\n[remote_instance_name]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_instance_name\\n[remote_retries]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_retries\\n[remote_timeout]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_timeout\\n[remote_upload_local_results]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_upload_local_results\\n[action-result]: https://github.com/bazelbuild/bazel/blob/5.0.0/src/main/java/com/google/devtools/build/lib/actions/ActionResult.java#L26-L28\\n[bes_upload_mode]: https://github.com/bazelbuild/bazel/blob/5.0.0/src/main/java/com/google/devtools/build/lib/buildeventservice/BuildEventServiceOptions.java#L145-L154\\n[spawn]: https://github.com/bazelbuild/bazel/blob/5.0.0/src/main/java/com/google/devtools/build/lib/actions/Spawn.java#L25-L30\\n[spawn-strategy]: https://github.com/bazelbuild/bazel/blob/5.0.0/src/main/java/com/google/devtools/build/lib/actions/SpawnStrategy.java#L18-L28\\n[bytestream-read]: https://github.com/googleapis/googleapis/blob/885183fcec1a9b3a812055c209fa61f391c9042c/google/bytestream/bytestream.proto#L50-L53\\n[bytestream-write]: https://github.com/googleapis/googleapis/blob/885183fcec1a9b3a812055c209fa61f391c9042c/google/bytestream/bytestream.proto#L55-L77\\n[reapi-execute]: https://github.com/bazelbuild/remote-apis/blob/3e816456ee28f01ab2e0abf72306c1f340c7b229/build/bazel/remote/execution/v2/remote_execution.proto#L45-L115\\n[reapi-findmissingblobs]: https://github.com/bazelbuild/remote-apis/blob/3e816456ee28f01ab2e0abf72306c1f340c7b229/build/bazel/remote/execution/v2/remote_execution.proto#L318-L329\\n[reapi-getactionresult]: https://github.com/bazelbuild/remote-apis/blob/3e816456ee28f01ab2e0abf72306c1f340c7b229/build/bazel/remote/execution/v2/remote_execution.proto#L145-L159\\n[reapi-updateactionresult]: https://github.com/bazelbuild/remote-apis/blob/3e816456ee28f01ab2e0abf72306c1f340c7b229/build/bazel/remote/execution/v2/remote_execution.proto#L161-L182\\n[remote-build-without-the-bytes]: https://github.com/bazelbuild/bazel/issues/6862"},{"id":"how-bazel-5-0-makes-your-builds-faster","metadata":{"permalink":"/blog/how-bazel-5-0-makes-your-builds-faster","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/how-bazel-5-0-makes-your-builds-faster.md","source":"@site/blog/how-bazel-5-0-makes-your-builds-faster.md","title":"How Bazel 5.0 Makes Your Builds Faster","description":"Highlighting changes in Bazel 5.0 that help BuildBuddy users build even faster!","date":"2022-01-25T12:00:00.000Z","tags":[{"inline":true,"label":"bazel","permalink":"/blog/tags/bazel"}],"readingTime":4.03,"hasTruncateMarker":true,"authors":[{"name":"Brentley Jones","title":"Developer Evangelist @ BuildBuddy","url":"https://brentleyjones.com","imageURL":"https://avatars.githubusercontent.com/u/158658?v=4","key":"brentley","page":null}],"frontMatter":{"slug":"how-bazel-5-0-makes-your-builds-faster","title":"How Bazel 5.0 Makes Your Builds Faster","description":"Highlighting changes in Bazel 5.0 that help BuildBuddy users build even faster!","authors":"brentley","date":"2022-01-25:12:00:00","image":"/img/bazel_5_0_faster.png","tags":["bazel"]},"unlisted":false,"prevItem":{"title":"Bazel\'s Remote Caching and Remote Execution Explained","permalink":"/blog/bazels-remote-caching-and-remote-execution-explained"},"nextItem":{"title":"What\'s New in Bazel 5.0","permalink":"/blog/whats-new-in-bazel-5-0"}},"content":"In our [last post][bazel_5_0],\\nwe summarized the changes that were in the Bazel 5.0 release.\\nThere were a lot of changes though,\\nso it can be hard to determine which ones are impactful to you and why.\\n\\nDon\'t worry, we\'ve got your back.\\nIn this post we highlight the changes that help BuildBuddy users build even faster!\\n\\n[bazel_5_0]: whats-new-in-bazel-5-0.md\\n\\n\x3c!-- truncate --\x3e\\n\\n## Build Event Service (BES) improvements\\n\\nBazel 5.0 includes many changes that make uploading BES events and artifacts to the BuildBuddy UI more reliable and performant.\\n\\nBefore Bazel 5.0,\\nif you wanted to upload a timing profile to BuildBuddy,\\nyou had to be fine with Bazel uploading all outputs referenced in the BEP,\\neven if they were set to not be cached\\n(e.g. the `--noremote_upload_local_results` flag or the `no-remote-cache` tag).\\nNow you can set the `--incompatible_remote_build_event_upload_respect_no_cache` flag,\\nwhich causes Bazel to respect your wishes in regards to output caching.\\n\\nAlso,\\nif you\'ve had [warnings][bes_upload_mode_warnings] or [crashes][bes_upload_mode_crashes] when using `--bes_upload_mode=fully_async` in the past,\\nthose should now be fixed as well.\\n\\n[bes_upload_mode_crashes]: https://github.com/bazelbuild/bazel/issues/11408\\n[bes_upload_mode_warnings]: https://github.com/bazelbuild/bazel/issues/11392\\n\\n## Deduplicated cache calls and uploads\\n\\nBefore Bazel 5.0,\\nwhen using Remote Build Execution (RBE),\\nBazel would ask the cache which blobs it needed to upload for every input to an action that was going to be executed remotely.[^1]\\nIt did this even if it had previously uploaded a specific input for a previous action.\\nSimilarly,\\nif two actions with similar inputs were executed concurrently,\\nthen Bazel didn\'t deduplicate the input existence checking or uploading.\\n\\nFor projects with a large number of shared inputs,\\nwhich is common in C-family programming languages and Node.js,\\nthis can cause a significant amount of network traffic,\\nresulting in long build times on low-bandwidth, high-latency connections.\\n\\nOn the output side of things,\\nif multiple actions produced the same output,\\nthen Bazel would upload the output multiple times.\\nIf these outputs were large,\\nthen this caused significant network overhead.\\n\\nBazel 5.0 addresses these issues.\\nIf you have a project that shares a lot of inputs between actions\\n(e.g. C, C++, Objective-C, and Node.js),\\nand you use BuildBuddy\'s Remote Execution,\\nthen Bazel 5.0 should improve your build times.\\n\\n[^1]:\\n    Specifically,\\n    Bazel would make a `FindMissingBlobs` that contained every input for an action,\\n    every time.\\n    Now Bazel will only include the unique inputs it hasn\'t already uploaded before.\\n\\n## Faster action cache checking\\n\\nIn a similar vein as the above mentioned issues,\\nBazel can be unnecessarily slow when checking if an action with a large number of inputs is cached.\\nThis is because Bazel needs to build a [Merkle tree][merkle_tree] from an action\'s inputs,\\nwhich can be expensive if there are many.\\n\\nStarting in Bazel 5.0,\\nyou can use the `--experimental_remote_merkle_tree_cache` and `--experimental_remote_merkle_tree_cache_size` flags to cache the nodes of these merkle trees.\\nIf you have a project that shares a lot of it\'s inputs between actions\\n(e.g. C, C++, Objective-C, and Node.js),\\nand you use BuildBuddy\'s Remote Cache or Remote Execution,\\nthen these flags should improve your build times.\\n\\n[merkle_tree]: https://en.wikipedia.org/wiki/Merkle_tree\\n\\n## Asynchronous cache uploading\\n\\nWhen an action is run locally,\\nand Bazel uploads the action\'s outputs to a remote build cache,\\nit waits for that upload to complete before it executes dependent actions.\\nThis is needed for dependent actions that are executed remotely,\\nbut it\'s unnecessary if they are executed locally.\\nThese delays can cause builds that use BuildBuddy\'s Remote Cache to sometimes be slower than if they didn\'t use the cache.\\n\\nStarting in Bazel 5.0,\\nyou can use the `--experimental_remote_cache_async` flag to have Bazel perform these uploads asynchronously.\\nUploads still need to complete before a build finishes,\\nbut now Bazel can speed ahead with local execution regardless of upload speed.\\nNetwork utilization is also improved,\\nas uploads can queue up quicker.\\nIf you have a project that uploads to BuildBuddy\'s Remote Cache,\\nthen this flag should improve your build times.\\n\\n## Compressed uploads and downloads\\n\\nBazel 5.0 added the `--experimental_remote_cache_compression` flag,\\nwhich causes Bazel to compresses and decompress artifact uploads and downloads with the [zstd algorithm][zstd].\\nIn our testing this reduces the average number of bytes transferred by 60-70%.\\n\\nThere is some overhead involved in this,\\nboth on the Bazel side and the cache side,\\nso it won\'t make every build for every project faster.[^2]\\nThat said,\\nif network bandwidth is a bottleneck in your build times,\\nthis flag could make those builds significantly faster.\\n\\n[zstd]: https://en.wikipedia.org/wiki/Zstandard\\n\\n[^2]:\\n    Eventually we might store artifacts in their compressed state,\\n    removing most overhead on the cache side.\\n\\n## And more...\\n\\nBazel 5.0 includes many additional changes that improve its reliability and performance.\\nTo dig a little deeper,\\nbe sure to check out our [What\'s New in Bazel 5.0][bazel_5_0] post."},{"id":"whats-new-in-bazel-5-0","metadata":{"permalink":"/blog/whats-new-in-bazel-5-0","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/whats-new-in-bazel-5-0.md","source":"@site/blog/whats-new-in-bazel-5-0.md","title":"What\'s New in Bazel 5.0","description":"We reviewed nearly 3,000 commits and summarized them, so you don\u2019t have to!","date":"2022-01-19T12:00:00.000Z","tags":[{"inline":true,"label":"bazel","permalink":"/blog/tags/bazel"}],"readingTime":26.76,"hasTruncateMarker":true,"authors":[{"name":"Brentley Jones","title":"Developer Evangelist @ BuildBuddy","url":"https://brentleyjones.com","imageURL":"https://avatars.githubusercontent.com/u/158658?v=4","key":"brentley","page":null}],"frontMatter":{"slug":"whats-new-in-bazel-5-0","title":"What\'s New in Bazel 5.0","description":"We reviewed nearly 3,000 commits and summarized them, so you don\u2019t have to!","authors":"brentley","date":"2022-01-19:12:00:00","image":"/img/bazel_5_0.png","tags":["bazel"]},"unlisted":false,"prevItem":{"title":"How Bazel 5.0 Makes Your Builds Faster","permalink":"/blog/how-bazel-5-0-makes-your-builds-faster"},"nextItem":{"title":"Welcoming Brentley Jones","permalink":"/blog/welcoming-brentley-jones"}},"content":"[Bazel 5.0][bazel-5-0] includes [nearly 3,000 changes][diff] since 4.2.2.\\nIt\'s the first major release since 4.0 was release in January of last year,\\nand it\'s Bazel\'s [second LTS release][lts-releases].\\nSince there were so many changes,\\nmany of them quite impactful,\\nI felt I needed to review them all and provide a nice summary for y\'all.\\nSo that\'s what I did \ud83d\ude04.\\n\\n[bazel-5-0]: https://blog.bazel.build/2022/01/19/bazel-5.0.html\\n[diff]: https://github.com/bazelbuild/bazel/compare/4.2.2...5.0.0\\n[lts-releases]: https://docs.bazel.build/versions/5.0.0/versioning.html#lts-releases\\n\\n\x3c!-- truncate --\x3e\\n\\nThe end result was quite big though,\\nso I\'ve included a table of contents to allow easy navigation to the changes that interest you the most:\\n\\n<nav className=\\"toc\\">\\n\\n- [Command-line flag changes](#command-line-flag-changes)\\n  - [Renamed](#renamed)\\n  - [Default values changed](#default-values-changed)\\n  - [Deprecated](#deprecated)\\n  - [No-op](#no-op)\\n  - [Removed](#removed)\\n- [Remote](#remote)\\n  - [gRPC](#grpc)\\n  - [Remote caching (RBC)](#remote-caching-rbc)\\n  - [Remote execution (RBE)](#remote-execution-rbe)\\n  - [Build Event Service (BES)](#build-event-service-bes)\\n- [Logging](#logging)\\n  - [Build Event Protocol (BEP)](#build-event-protocol-bep)\\n  - [Timing profile](#timing-profile)\\n  - [Execution log](#execution-log)\\n- [Query](#query)\\n- [Dependency management](#dependency-management)\\n- [Platforms and toolchains](#platforms-and-toolchains)\\n- [Execution platforms](#execution-platforms)\\n  - [Linux](#linux)\\n  - [macOS](#macos)\\n- [Target Platforms](#target-platforms)\\n  - [Android](#android)\\n  - [Apple](#apple)\\n- [Languages](#languages)\\n  - [C and C++](#c-and-c)\\n  - [Java](#java)\\n  - [Objective-C](#objective-c)\\n- [Rules Authoring](#rules-authoring)\\n  - [Aspects](#aspects)\\n  - [Persistent workers](#persistent-workers)\\n  - [Starlark](#starlark)\\n- [Misc](#misc)\\n\\n</nav>\\n\\n## Command-line flag changes\\n\\nBazel\'s [LTS strategy][lts-releases] allows for breaking changes between major versions.\\nIn particular,\\nit allows for command-line flags to be removed,\\nrenamed,\\nmade to do nothing,\\nor have their default values changed.\\nIn the following sections I collected all such flag changes I could find.\\n\\n### Renamed\\n\\n- `--incompatible_use_lexicographical_unordered_output` is now `--incompatible_lexicographical_output`. ([2ee3c2b](https://github.com/bazelbuild/bazel/commit/2ee3c2b3b60462b81a56fa396d5935ce02052f6d))\\n- `--experimental_run_validations` is now `--run_validations`. ([374cb1f](https://github.com/bazelbuild/bazel/commit/374cb1f925430c5c75c690ba225f135a6095eb89))\\n- `--experimental_existing_rules_immutable_view` is now `--incompatible_existing_rules_immutable_view`. ([3518200](https://github.com/bazelbuild/bazel/commit/35182000bfc5303254008896481b1350c91c3256))\\n- `--project_id` is now `--bes_instance_name`. ([2b48c6b](https://github.com/bazelbuild/bazel/commit/2b48c6b9a447756fcb3295b8a75899b96efa7fd4))\\n\\n### Default values changed\\n\\n- `--analysis_testing_deps_limit=800` ([de3b3ca](https://github.com/bazelbuild/bazel/commit/de3b3caed60d47da7e6464478ec9eb814bc794db))\\n- `--experimental_enable_aggregating_middleman=false` ([64d5bae](https://github.com/bazelbuild/bazel/commit/64d5bae3b805fad68e9f80512595702472f086f1))\\n- `--experimental_exec_groups=true` ([fa4e14b](https://github.com/bazelbuild/bazel/commit/fa4e14b2aef03b93eef4de3239c57adcfdc7db99))\\n- `--experimental_forward_instrumented_files_info_by_default=true` ([5b216b2](https://github.com/bazelbuild/bazel/commit/5b216b27435aeb9eb9c3bd3c552d6498e1050cc7))\\n- `--experimental_jlpl_enforce_strict_deps=true` ([0c1257e](https://github.com/bazelbuild/bazel/commit/0c1257ed4e1b83f8d0f6c79d641f6bfcf4d1cfc4))\\n- `--experimental_no_product_name_out_symlink=true` ([06bd3e8](https://github.com/bazelbuild/bazel/commit/06bd3e8c0cd390f077303be682e9dec7baf17af2))\\n- `--experimental_profile_cpu_usage=true` ([f56b134](https://github.com/bazelbuild/bazel/commit/f56b1349c84ea691b04e0fd40f28ef2373e2c855))\\n- `--experimental_skyframe_cpu_heavy_skykeys_thread_pool_size=HOST_CPUS` ([38dd8aa](https://github.com/bazelbuild/bazel/commit/38dd8aaa50fb2e4767c9388446a723c4ba231d86))\\n- `--include_aspect=true` ([44e46b8](https://github.com/bazelbuild/bazel/commit/44e46b836a580c2fe3e96f39f4c6e02516ca4a0b))\\n- `--incompatible_disable_depset_items=true` ([ef967be](https://github.com/bazelbuild/bazel/commit/ef967be1718dd7662ed83ea7ef2899fc09576a8e))\\n- `--incompatible_disallow_resource_jars=true` ([fec2fdb](https://github.com/bazelbuild/bazel/commit/fec2fdb1a4c39d1ac313a3b9d1286d9ff3db9e8e))\\n- `--incompatible_disallow_strict_deps_for_jlpl=true` ([10b3479](https://github.com/bazelbuild/bazel/commit/10b3479eacb692e5561cf6175fdf6138731178e3))\\n- `--incompatible_display_source_file_location=true` ([32721fb](https://github.com/bazelbuild/bazel/commit/32721fb6a1bba90e2d164e79dcec92f2a90d5cc0))\\n- `--incompatible_java_common_parameters=true` ([cfaa88b](https://github.com/bazelbuild/bazel/commit/cfaa88b520a6a14b9d6fd5c1cb06ec8c2ce608db))\\n- `--incompatible_override_toolchain_transition` ([4b47d6f](https://github.com/bazelbuild/bazel/commit/4b47d6f849bb2eca669f48cfdb5d1796100920f3))\\n- `--incompatible_require_javaplugininfo_in_javacommon=true` ([1c062e2](https://github.com/bazelbuild/bazel/commit/1c062e26226d71c8e4d1fa9a72369880e867d5df))\\n- `--incompatible_top_level_aspects_dependency=true` ([9a765c8](https://github.com/bazelbuild/bazel/commit/9a765c8b498a72e20af6c391bef01e794913c317))\\n- `--incompatible_use_toolchain_resolution_for_java_rules=true` ([c2485f6](https://github.com/bazelbuild/bazel/commit/c2485f67601cf7c79c5a49b29fb23194f7a7e9ab))\\n- `--trim_test_configuration=true` ([ebac27e](https://github.com/bazelbuild/bazel/commit/ebac27ec5a6063556482841da98d63d1abcf1e44))\\n\\n### Deprecated\\n\\n- `--bep_publish_used_heap_size_post_build` ([a512791](https://github.com/bazelbuild/bazel/commit/a5127917b3aa0a4f64214d2203d5f0f396facb38))\\n- `--experimental_force_gc_after_build` ([ae2a6a2](https://github.com/bazelbuild/bazel/commit/ae2a6a2dc909e468a284913c410fde995cf51095))\\n- `--experimental_required_aspects` ([88a02cd](https://github.com/bazelbuild/bazel/commit/88a02cdda6f854913ba01e5b2666eb27da828cd6))\\n- `--{,no}experimental_send_archived_tree_artifact_inputs` ([37115a5](https://github.com/bazelbuild/bazel/commit/37115a5312fec952c4051e036ed1d1d08b053f09))\\n- `--experimental_spawn_scheduler` ([b41576b](https://github.com/bazelbuild/bazel/commit/b41576b2f5bb87f3817dfb1ee09493b8220a9634))\\n- `--watchfs` ([03bd0eb](https://github.com/bazelbuild/bazel/commit/03bd0eb6ecd80f824ee8d5b028db96c43721a3b6))\\n\\n### No-op\\n\\nThese flags now do nothing, but still exist to allow for migration off of them:\\n\\n- `--all_incompatible_changes` ([7300231](https://github.com/bazelbuild/bazel/commit/7300231553b04828174f14e5840ed4e2d11dea72))\\n- `--bep_publish_used_heap_size_post_build` ([d9a523e](https://github.com/bazelbuild/bazel/commit/d9a523ef5bc704c1aaf7e692f1f8ba9c449a8d86))\\n- `--check_constraint` ([d623892](https://github.com/bazelbuild/bazel/commit/d623892380fdfd43f42bbbfce6b338624cbb3de4))\\n- `--experimental_cc_skylark_api_enabled_packages` ([ba258e8](https://github.com/bazelbuild/bazel/commit/ba258e8296ff7a110b32586a83ef9534f8e83d0e))\\n- `--experimental_force_gc_after_build` ([cdeb49f](https://github.com/bazelbuild/bazel/commit/cdeb49fd6a12b0d8e2ac1cbb228eaabbf2114554))\\n- `--{experimental_,}json_trace_compression` ([8d39164](https://github.com/bazelbuild/bazel/commit/8d391642f2607e55931c4ec9abbd27376a07653b))\\n- `--experimental_shadowed_action` ([3e8cda1](https://github.com/bazelbuild/bazel/commit/3e8cda19b7b82290d0e339731121279a41b393ea))\\n- `--experimental_skyframe_eval_with_ordered_list` ([35ef799](https://github.com/bazelbuild/bazel/commit/35ef799700e354231d7f589d19d0b5b5e4767fa9))\\n- `--experimental_starlark_config_transitions` ([6619d77](https://github.com/bazelbuild/bazel/commit/6619d77d10415b3a65c434dfd16698634cdf5108))\\n- `--experimental_multi_threaded_digest` ([6ac6954](https://github.com/bazelbuild/bazel/commit/6ac6954224b2b74c18d3218dfa299424cbc944fb))\\n- `--experimental_profile_cpu_usage` ([3c5e531](https://github.com/bazelbuild/bazel/commit/3c5e531a30127b43a63e6bfa202de5e027def84a))\\n- `--incompatible_applicable_licenses` ([af3add8](https://github.com/bazelbuild/bazel/commit/af3add80ac6f243b6653dea093d9d083a9e575f9))\\n- `--incompatible_dont_collect_so_artifacts` ([144a62a](https://github.com/bazelbuild/bazel/commit/144a62a16e9dee54391d3ed8bb1a5597651d3223))\\n- `--incompatible_load_python_rules` ([253933f](https://github.com/bazelbuild/bazel/commit/253933f3adda134494a4f55838b3e16e54652f23))\\n- `--incompatible_use_toolchain_resolution_for_java_rules` ([5b8f054](https://github.com/bazelbuild/bazel/commit/5b8f054dd20f506e2526ae3b7f89066a5aaca47e))\\n- `--legacy_dynamic_scheduler` ([5b04895](https://github.com/bazelbuild/bazel/commit/5b04895ec224b00f7924e15ad6a1b4f3a6e89539))\\n- `--use_singlejar_apkbuilder` ([b213637](https://github.com/bazelbuild/bazel/commit/b213637d406acfcef8f8ed926bff3ad15ba8c15f))\\n\\n### Removed\\n\\n- `--apple_sdk` ([166771e](https://github.com/bazelbuild/bazel/commit/166771ed928a6688d954a968c9343994fc83419d))\\n- `--bep_publish_used_heap_size_post_build` ([6555d95](https://github.com/bazelbuild/bazel/commit/6555d957c68b0b9437217b5665e996ebc0f98e3b))\\n- `--enable_apple_binary_native_protos` ([3135f49](https://github.com/bazelbuild/bazel/commit/3135f49fbb7584b9487161401493edd98473f544))\\n- `--enable_runfiles` ([5a91c25](https://github.com/bazelbuild/bazel/commit/5a91c25ca43547870bcf73cf4b427277c7f62d8d))\\n- `--experimental_dynamic_configs` ([e68a7d0](https://github.com/bazelbuild/bazel/commit/e68a7d01c7ed77ac1a8400216468eddf899a4af3))\\n- `--experimental_enable_aggregating_middleman` ([e956469](https://github.com/bazelbuild/bazel/commit/e95646972603d9f630ff69cca0b6cf75cd3373ee))\\n- `--experimental_exec_groups` ([3973b5f](https://github.com/bazelbuild/bazel/commit/3973b5f3573e223f259556938aa4adc8a9fd21cf))\\n- `--experimental_forward_instrumented_files_info_by_default` ([c411d9a](https://github.com/bazelbuild/bazel/commit/c411d9ac0714a669f8970b19a6086185fc2a1290))\\n- `--experimental_interleave_loading_and_analysis` ([544b51d](https://github.com/bazelbuild/bazel/commit/544b51da6d15f7446b4855a422b1d1924420f1ab))\\n- `--experimental_nested_set_as_skykey_threshold` ([359ceb4](https://github.com/bazelbuild/bazel/commit/359ceb4135ac69e7f861d16b8658c5768d720a2c))\\n- `--experimental_no_product_name_out_symlink` ([b621b1b](https://github.com/bazelbuild/bazel/commit/b621b1b1866868a1dcb060fe7b6833df0c729761))\\n- `--experimental_objc_enable_module_maps` ([427b4dd](https://github.com/bazelbuild/bazel/commit/427b4dd6b065b9b9c62add633413af897c01e612))\\n- `--experimental_query_failure_exit_code_behavior` ([c1695ef](https://github.com/bazelbuild/bazel/commit/c1695ef7ecd5ca26721a97463d2f159234711da9))\\n- `--experimental_starlark_config_transitions` ([28a1e6e](https://github.com/bazelbuild/bazel/commit/28a1e6e5fdc5567fa23ab2c7bf87eec5b9b78766))\\n- `--experimental_ui_mode` ([5752762](https://github.com/bazelbuild/bazel/commit/5752762930d69a57ec1c734b83e5d56ab9006704))\\n- `--incompatible_enable_execution_transition` ([f0c6eab](https://github.com/bazelbuild/bazel/commit/f0c6eab2582cefdb37b363c7f37c0b1b12bed76a))\\n- `--incompatible_ignore_duplicate_top_level_aspects` ([ed25118](https://github.com/bazelbuild/bazel/commit/ed251187b078c4262bbbc1da72015ce12f9964f4))\\n- `--incompatible_objc_compile_info_migration` ([bcdd55d](https://github.com/bazelbuild/bazel/commit/bcdd55d8956e22758fe3d866427e2dc3ebc4e31b))\\n- `--incompatible_objc_provider_remove_compile_info` ([952c0d7](https://github.com/bazelbuild/bazel/commit/952c0d7615d931bd912ebf2c6ab5d3f43462891a))\\n- `--incompatible_prefer_unordered_output` ([e7202e3](https://github.com/bazelbuild/bazel/commit/e7202e3eef51f2dea5cd93f504c89060de6c9bb3))\\n- `--incompatible_prohibit_aapt1` ([aefd107](https://github.com/bazelbuild/bazel/commit/aefd107e163087d7dbc822b3342455d91669a58e))\\n- `--incompatible_require_java_toolchain_header_compiler_direct` ([f9db4fb](https://github.com/bazelbuild/bazel/commit/f9db4fb91bf62a831e73bf09431619a361f0fcc5))\\n- `--is_stderr_atty` ([4d9c6f9](https://github.com/bazelbuild/bazel/commit/4d9c6f9eed87aa19798a445f37a270c571766c96))\\n- `--javabase` and `--java_toolchain` ([e1c404e](https://github.com/bazelbuild/bazel/commit/e1c404e1c87c4a5dec227b160c8c4e81686a3f9f))\\n\\n## Remote\\n\\nOne of Bazel\'s most powerful features is its ability to use [remote caching and remote execution][remote-explained].\\nNumerous improvements and fixes to Bazel\'s remote capabilities are included in Bazel 5.0.\\n\\n[remote-explained]: bazels-remote-caching-and-remote-execution-explained.md\\n\\n### gRPC\\n\\nBazel uses gRPC as a protocol for most of its remote capabilities.\\nThere were a couple changes that applied at this foundational level:\\n\\n- Added mnemonic and label to remote cache and remote execution requests. ([a750a56](https://github.com/bazelbuild/bazel/commit/a750a56f8f4061516ec3056ae8a8295ea8279903))\\n- Bazel no longer crashes on errors returned while creating a gRPC connection. ([b0ae0af](https://github.com/bazelbuild/bazel/commit/b0ae0afd451bbe374be24c905579cece793b90c7))\\n\\n### Remote caching (RBC)\\n\\nUsing a remote cache is one of the most popular ways of speeding up a Bazel build.\\nThankfully these changes make using a remote cache both more performant and more reliable:\\n\\n- Added the `--experimental_remote_cache_compression` flag, which compresses gRPC uploads/downloads. ([50274a9](https://github.com/bazelbuild/bazel/commit/50274a9f714616d4735a560db7f617e53fb8d01b))\\n- Added the `--experimental_remote_cache_async` flag, which makes uploads happen in the background. ([7f08b78](https://github.com/bazelbuild/bazel/commit/7f08b7841fcf4c7d7d09b69f9ec1f24969aba8a1))\\n- Added the `--experimental_remote_merkle_tree_cache` flag, which can speed up action cache hit checking. ([3947c83](https://github.com/bazelbuild/bazel/commit/3947c836cf0c966882a1524e40fa8c3721ac5b07))\\n- Added the `--experimental_action_cache_store_output_metadata` flag, which can speed up Remote Build without the Bytes after a Bazel server restart. ([4e29042](https://github.com/bazelbuild/bazel/commit/4e29042fd77eae565a711655df6150500cb6e915))\\n- Added the `no-remote-cache-upload` tag, which allows downloading, but not uploading, outputs from the remote cache. ([bfc2413](https://github.com/bazelbuild/bazel/commit/bfc24139d93f8643686d91596ba347df2e01966a))\\n- Reduced `FindMissingBlobs` calls when using a combined cache. ([dc32f0b](https://github.com/bazelbuild/bazel/commit/dc32f0b6a5d93e4c4426815cecddbc26c1f5d7ac))\\n- `FindMissingBlobs` calls and file uploads are now deduplicated. ([db15e47](https://github.com/bazelbuild/bazel/commit/db15e47d0391d904c29e6e5c632089e2479e62c2))\\n- Fixed \\"file not found\\" errors when remote cache is changed from enabled to disabled. ([f948989](https://github.com/bazelbuild/bazel/commit/f94898915268be5670fb1e93a16c03e9b14d2a58))\\n- `chmod 0555` is now consistently set on outputs. ([11066c7](https://github.com/bazelbuild/bazel/commit/11066c7731b5a16f2f11db93f6716a1595650aad))\\n\\n### Remote execution (RBE)\\n\\nFor some projects,\\nusing remote execution is the ultimate performance unlock for their Bazel builds.\\nIn addition to the remote caching changes covered above,\\nwhich also apply to remote execution,\\nthe following changes improve the remote execution experience:\\n\\n- Added the `--experimental_dynamic_skip_first_build` flag, which skips dynamic execution until there has been a successful build. ([1e42b94](https://github.com/bazelbuild/bazel/commit/1e42b94b1c35eca37f45c58c048b38e20bd812bc))\\n- Improved debug output when using the `--experimental_debug_spawn_scheduler` flag. ([060d596](https://github.com/bazelbuild/bazel/commit/060d5966adf2c8035276cd1159601567bea57757))\\n- Improved performance of workers when using dynamic execution. ([6080c1e](https://github.com/bazelbuild/bazel/commit/6080c1e07f4229ea72eacd04faa9302e44955a84))\\n- Improved dynamic execution\'s local execution delay logic. ([04754ef](https://github.com/bazelbuild/bazel/commit/04754efc1868df499b63cba341f7c90ad18aa425))\\n- The disk cache can now be used with remote execution. ([cf57d03](https://github.com/bazelbuild/bazel/commit/cf57d036c2e1b608ca902267fbbdfeb7ee5aa166))\\n- Target-level `exec_properties` now merge with values from `--remote_default_exec_properties`. ([713abde](https://github.com/bazelbuild/bazel/commit/713abde2576d7e3c3b584eed80097cd53c9cf082))\\n- Failure messages from remote execution are now propagated. ([399a5be](https://github.com/bazelbuild/bazel/commit/399a5beb37a2620c9494f7eef774b99dc7ccab6d))\\n\\n### Build Event Service (BES)\\n\\nUsing a build event service can give you unparalleled insight into your Bazel builds at scale.\\nThere were some nice changes to BES support,\\nthough I think the improvements to how it interacts with the remote cache are especially noteworthy.\\n\\n- Added the `--incompatible_remote_build_event_upload_respect_no_cache` flag, which prevents the BES uploader from uploading the outputs of actions that shouldn\'t be cached remotely. ([bfc2413](https://github.com/bazelbuild/bazel/commit/bfc24139d93f8643686d91596ba347df2e01966a))\\n- Added the `--bes_header` flag, which allows passing extra headers to the BES server. ([ef42d13](https://github.com/bazelbuild/bazel/commit/ef42d1365d0f508d3d817997b5049639a72100ab))\\n- Added logging when a blob upload isn\'t uploaded in time. ([71b50f6](https://github.com/bazelbuild/bazel/commit/71b50f6b4c6e462863c8433a163c9eb23b0c5730))\\n- The `--build_event_binary_file` flag now implies `--bes_upload_mode=wait_for_upload_complete`. ([62060ba](https://github.com/bazelbuild/bazel/commit/62060babcc26f3cac3db020e423daec8755fd426))\\n- BES referenced blobs are no longer stored in the disk cache. ([dc59d9e](https://github.com/bazelbuild/bazel/commit/dc59d9e8f7937f2e317c042e8da8f97ba6b1237e))\\n- The BES uploader now uses the same code as the remote cache uploader and is now more robust to errors. ([e855a26](https://github.com/bazelbuild/bazel/commit/e855a26691daeac81c1e823ad65c7707062e0bd2))\\n- Fixed the BES uploader to handle errors in more edge cases. ([c51eb57](https://github.com/bazelbuild/bazel/commit/c51eb5730745017d008af9a49dcfcc975d7c0283))\\n\\n## Logging\\n\\nBazel offers various ways to gain insight into your build.\\nIt\'s not too surprising then that there were over 30 changes to these capabilities in Bazel 5.0.\\n\\n### Build Event Protocol (BEP)\\n\\nThe build event protocol is used by [build event services](#build-event-service-bes),\\nso all of these changes could have also been listed in that section as well.\\nThe BEP can also be collected locally with [`--build_event_json_file`][build_event_json_file] and [`--build_event_binary_file`][build_event_binary_file].\\n\\nThe vast majority of changes added additional information to the BEP,\\nthough some are fixes and improvements:\\n\\n- Added `cumulative_metrics` field to `BuildMetrics`. ([77a980f](https://github.com/bazelbuild/bazel/commit/77a980f3ec2496d3f952987e3eaf9df8560a114d))\\n- Added `worker_metrics` field to `BuildMetrics`. ([c674101](https://github.com/bazelbuild/bazel/commit/c674101d004eccd795a06e19674e317b04b1b36a))\\n- Added `action_data` field to `BuildMetrics.ActionSummary`. ([f572d3b](https://github.com/bazelbuild/bazel/commit/f572d3ba1e6c977bace5c638da1628724f7b3e1f))\\n- Added `source_artifact_bytes_read` field to `BuildMetrics.ActionSummary`. ([0a23a5e](https://github.com/bazelbuild/bazel/commit/0a23a5e7867101f8c16fc4778802ed433ef107d3))\\n- Added `analysis_phase_time_in_ms` field to `BuildMetrics.TimingMetrics`. ([34b2947](https://github.com/bazelbuild/bazel/commit/34b2947415eab54382921f917c8ffad5feedccb7))\\n- Added `garbage_metrics` field to `BuildMetrics.MemoryMetrics`. ([8965d25](https://github.com/bazelbuild/bazel/commit/8965d25af90ba975cd207c84fa461b499d8d51c9))\\n- Added count and size of output files and top-level files seen during a build to `BuildMetrics.ArtifactMetrics`. ([dd8afa0](https://github.com/bazelbuild/bazel/commit/dd8afa0fc79a7ff0fc0633eed6d592e0efd3bbfc))\\n- Added `incomplete` field to `TargetComplete.OutputGroup`. ([3e1ba0c](https://github.com/bazelbuild/bazel/commit/3e1ba0c3b8ef8588b0424291b498a555fe510d44))\\n- Added the `--experimental_bep_target_summary` flag, which adds the `TargetSummary event`, which is intended to summarize all `TargetComplete` (including for aspects) and `TestSummary` messages for a given configured target. ([8d48154](https://github.com/bazelbuild/bazel/commit/8d481542111cff64ec28034bd71c83e54f2da28d))\\n- Added `attempt_count` field to `TestSummary`. ([766cd0e](https://github.com/bazelbuild/bazel/commit/766cd0ed2906546b3d2c75771d65b15aeb07bb4e))\\n- Added test suite expansions. ([7fb0c16](https://github.com/bazelbuild/bazel/commit/7fb0c168f79658a5422607c67f31bcabb66158c6))\\n- Added conflicting action output reporting. ([2487920](https://github.com/bazelbuild/bazel/commit/248792062f283866d9b93bf47b135309fd65c8c3))\\n- Replaced `remote_cache_hits` field with a more detailed `runner_count`. ([f880948](https://github.com/bazelbuild/bazel/commit/f880948ec24efd08b2fde8213304192561c9ad61))\\n- Timestamps and durations now use Well Known Types. ([e5c832a](https://github.com/bazelbuild/bazel/commit/e5c832a16e475f636c845b0247731f65df5e258c))\\n- Improved reporting of Starlark build settings. ([bf31feb](https://github.com/bazelbuild/bazel/commit/bf31feb7b8a1428c2ad0e3a4e73c655e7582aa08))\\n- The `used_heap_size_post_build` field is now populated when the `--memory_profile` flag is set. ([3d58523](https://github.com/bazelbuild/bazel/commit/3d585234f6b1861d174b21242cdfa48022464e82))\\n- Made `--bep_publish_used_heap_size_post_build` work for `query` and other non-`build` commands. ([1c3bc90](https://github.com/bazelbuild/bazel/commit/1c3bc902c5c93568f8f86125fe57580ba8186d04))\\n- You can now assume the `named_set_of_files` event will appear before any event referencing that `named_set` by ID; this allows consumers to process the files for such events (eg. `TargetCompleted`) immediately. ([fcf9dd5](https://github.com/bazelbuild/bazel/commit/fcf9dd50e27a1f77e1c30dfedaabc6118319e5e1))\\n- The BEP now includes all files from successful actions in requested output groups; previously, an output group\'s files were excluded if any file in the output group was not produced due to a failing action. ([d2f93fd](https://github.com/bazelbuild/bazel/commit/d2f93fd969f5eca042d029a1b8016d83ce8ce165))\\n\\n[build_event_binary_file]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--build_event_binary_file\\n[build_event_json_file]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--build_event_json_file\\n\\n### Timing profile\\n\\nThe action timing profile,\\nwhich is enabled by default with [`--profile`][profile],\\nis viewable both [locally in Chrome][performance-profiling] and on [build event services](#build-event-service-bes).\\nThese changes add more detail and clarity to the profile:\\n\\n- Added server heap usage. ([f4fbbd6](https://github.com/bazelbuild/bazel/commit/f4fbbd653822ef7306f60144515e7ef551b2d39b))\\n- Added system CPU and memory metrics. ([ec2eda1](https://github.com/bazelbuild/bazel/commit/ec2eda1b56a5197ee2d019f58d89a68b17974b13))\\n- Added file system traversal tracing. ([45d82ca](https://github.com/bazelbuild/bazel/commit/45d82cadb52f9fa0ee23cf2c45eb1cd149587852))\\n- Added `mobile-install` tracing. ([559db4e](https://github.com/bazelbuild/bazel/commit/559db4e9c35e5c0f840a26a80b171129044329c8))\\n- Added worker execution tracing. ([786b418](https://github.com/bazelbuild/bazel/commit/786b418d1fcd1ad1df66237be45682624007ed2e))\\n- Renamed action count field from `cpu` to `action`. ([c5f87ea](https://github.com/bazelbuild/bazel/commit/c5f87ea56a8b1f90525b8a6407dba8778524ca60))\\n- Renamed \\"grpc-command\\" and \\"Service Thread\\" threads to \\"Main Thread\\" and \\"Garbage Collector\\". ([a03674e](https://github.com/bazelbuild/bazel/commit/a03674e6297ed5f6f740889cba8780d7c4ffe05c))\\n- The profile now mentions when an action is acquiring resources. ([fa9fabb](https://github.com/bazelbuild/bazel/commit/fa9fabb3f699f1e8e8ebbe22228fc4acbc9df2ba))\\n\\n[performance-profiling]: https://docs.bazel.build/versions/5.0.0/skylark/performance.html#performance-profiling\\n[profile]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--profile\\n\\n### Execution log\\n\\nBazel logs all of the [spawns][spawns] it executes in the execution log,\\nwhich is enabled with the [`--execution_log_json_file`][execution_log_json_file] or [`--execution_log_binary_file`][execution_log_binary_file] flags.\\nThis feature is relatively stable,\\nwith just a single noticeable change:\\n\\n- Added wall time duration. ([f92d80c](https://github.com/bazelbuild/bazel/commit/f92d80ce649a9abcb3e674a6e7c7eaf3b4f08ecd))\\n\\n[execution_log_binary_file]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--execution_log_binary_file\\n[execution_log_json_file]: https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--execution_log_json_file\\n[spawns]: bazels-remote-caching-and-remote-execution-explained.md#spawns\\n\\n## Query\\n\\n`bazel build` wasn\'t the only command to get improvements in this release.\\nHere are some changes that were made to the `query` family of commands:\\n\\n- Added the `--incompatible_lexicographical_output` flag (on by default), which lexicographically sorts the output of `query --order_output=auto`. ([acbcedd](https://github.com/bazelbuild/bazel/commit/acbceddd97fb86dca96d0cd1ec45807335d7f7fc))\\n- Added the `--deduplicate_depsets` flag (on by default) to `aquery`, which removes duplicate subsets in `dep_set_of_files`. ([28ffaa2](https://github.com/bazelbuild/bazel/commit/28ffaa259e1df63b64940344bb3b72999a8a1de6))\\n- Added `--keep_going` functionality to graphless `query`. ([a01371a](https://github.com/bazelbuild/bazel/commit/a01371abaae4b2329877e25ff13d1a99e35034f1))\\n- Added execution platform information to `aquery` output. ([11c09c5](https://github.com/bazelbuild/bazel/commit/11c09c5254e6dc5e17016a17c345fe374b3d799d))\\n- Fixed output of `config_setting` visibility. ([5dfffef](https://github.com/bazelbuild/bazel/commit/5dfffefef58da0c426cfa0b3d70132dde77950b0))\\n\\n## Dependency management\\n\\nA new\\n(currently experimental)\\nexternal dependency system,\\ncodenamed [Bzlmod][bzlmod],\\nwas added in Bazel 5.0.\\nBesides for all of the changes needed to support Bzlmod,\\nthere was one more notable dependency management related change:\\n\\n- Added the `--experimental_repository_downloader_retries` flag, which allows Bazel to retry certain repository download errors. ([a1137ec](https://github.com/bazelbuild/bazel/commit/a1137ec1338d9549fd34a9a74502ffa58c286a8e))\\n\\n[bzlmod]: https://docs.bazel.build/versions/5.0.0/bzlmod.html\\n\\n## Platforms and toolchains\\n\\nThe C++, Android, and Apple rules are being migrated to support [building with Platforms][building-with-platforms].\\nWhile [progress has been made][platforms-progress],\\nthey don\'t fully support it yet in Bazel 5.0.\\nFor C++ projects,\\nit\'s recommended that the `--incompatible_enable_cc_toolchain_resolution` flag is used,\\nto help the Bazel team discover any issues in the wide variety of projects that exist.\\n\\nHere are some of the platforms and toolchains related changes which weren\'t tied to any of those migrations:\\n\\n- Added the `--experimental_platform_in_output_dir` flag, which causes the output dir name to use a non-default platform name instead of the CPU. ([daecf42](https://github.com/bazelbuild/bazel/commit/daecf427ec0bf0e963c324783062c4f5b61ff679))\\n- `target_compatible_with` can now be used with all non-workspace rules. ([d052ece](https://github.com/bazelbuild/bazel/commit/d052ececddf54587c576f876ce13d4b8f4aacb0b))\\n- The `--toolchain_resolution_debug` flag now accepts regexes matching targets, as well as toolchain types, when choosing what debug messages to print. ([545befb](https://github.com/bazelbuild/bazel/commit/545befb13a64468377e3792a8f56c67cac245fa1))\\n- The toolchain transition is now enabled for all toolchains. ([4b47d6f](https://github.com/bazelbuild/bazel/commit/4b47d6f849bb2eca669f48cfdb5d1796100920f3))\\n- Progress is being made on changing all `host` configurations to `exec`. ([8d66a41](https://github.com/bazelbuild/bazel/commit/8d66a4171baddcbe1569972f019e54130111202c))\\n\\n[building-with-platforms]: https://docs.bazel.build/versions/5.0.0/platforms-intro.html\\n[platforms-progress]: https://github.com/bazelbuild/bazel/issues/6431#issuecomment-978329014\\n\\n## Execution platforms\\n\\nExecution platforms are [platforms][platforms] which build tools execute on.\\nThese include the host platform on which Bazel runs.\\n\\nIn the following sections I collected notable changes for Linux and macOS.\\nI\'m sure there were some for Windows as well,\\nbut since I don\'t use Bazel on Windows,\\nnone of the changes stood out to me as pertaining only to it.\\n\\n[platforms]: https://docs.bazel.build/versions/5.0.0/platforms.html\\n\\n### Linux\\n\\nI only noticed a single change that was directly related to Linux execution:\\n\\n- Added the `--experimental_use_hermetic_linux_sandbox` flag, which configures `linux-sandbox` to use a `chroot` environment. ([11f7d80](https://github.com/bazelbuild/bazel/commit/11f7d8040fadc595589ee264561606dc2a83685d))\\n\\n### macOS\\n\\nOn the other hand,\\nmacOS had a lot of changes related to it:\\n\\n- Added the `xcode_version_flag.precision` attribute to allow matching a subset of the version components. ([7484c98](https://github.com/bazelbuild/bazel/commit/7484c98e871ab3fa3408be53873b8848861d26be))\\n- Added progress reporting in `xcode_configure`. ([762f9e2](https://github.com/bazelbuild/bazel/commit/762f9e28f90b863064d81bdf61d3ad0e31084bc4))\\n- Toolchain tools now compile as universal binaries if possible. ([de5fc19](https://github.com/bazelbuild/bazel/commit/de5fc19b0956c900f2648b68a881fd3456c10e7e))\\n- `xcode-locator` is now built as a universal binary. ([6916fc1](https://github.com/bazelbuild/bazel/commit/6916fc1c4c49134ee76b9a725deddd1e6bcab24a))\\n- Sandboxed actions can now run `/bin/ps`. ([652d1cc](https://github.com/bazelbuild/bazel/commit/652d1cc233a49593767c01725974eb17b90dca4b))\\n- If `--experimental_prefer_mutual_xcode` is passed, Bazel chooses the local default (instead of the newest mutually available version) if it\'s available both locally and remotely. ([4bef502](https://github.com/bazelbuild/bazel/commit/4bef502e027238b56e30b787013a525dba0cde3d))\\n- Generated `xcode_version` targets now include product version aliases. ([f52e218](https://github.com/bazelbuild/bazel/commit/f52e218d99e26298b69c838793bd80f9ae7a226d))\\n- `osx_archs.bzl` is now explicitly exported from the crosstool. ([aeec9a8](https://github.com/bazelbuild/bazel/commit/aeec9a876b9c4f7cb54548f8855a2e938387b91e))\\n- Fixed typo in the cache directory name. ([b5bbe28](https://github.com/bazelbuild/bazel/commit/b5bbe28ce207375009babc142fd3e8ce915d3dc9))\\n- Fixed `libtool` with params files. ([48dd159](https://github.com/bazelbuild/bazel/commit/48dd159808c5a874c4aabcd27d6e66610d41bb5a))\\n- Fixed the `--experimental_prefer_mutual_xcode` flag not being used correctly for all parts of the build. ([bb41ebc](https://github.com/bazelbuild/bazel/commit/bb41ebc210989ca6aeaf4f776f4175c4b952e9fe))\\n- Fixed a crash when a custom crosstool specifies a `DEVELOPER_DIR` environment variable. ([1811e82](https://github.com/bazelbuild/bazel/commit/1811e82ca4e68c2dd52eed7907c3d1926237e18a))\\n- Fixed JSON output for `xcode-locator`. ([1bae172](https://github.com/bazelbuild/bazel/commit/1bae172b8af8cd60dafada4be45e1cdffe9a763d))\\n\\n## Target platforms\\n\\nTarget platforms are [platforms][platforms] which you are ultimately building for.\\nI cover the Android and Apple platforms in the following sections,\\nas they still have some functionality provided by Bazel core,\\ninstead of being fully supported by standalone Starlark rules.\\n\\n### Android\\n\\n- Added the `--experimental_run_android_lint_on_java_rules` flag, which causes Java rules to invoke Android Lint. ([909bec5](https://github.com/bazelbuild/bazel/commit/909bec5afeec111a38d49d331ae24e7b8f041b5b))\\n- Added the `android_sdk.legacy_main_dex_list_generator` attribute. ([0ccbbde](https://github.com/bazelbuild/bazel/commit/0ccbbde12e62773a69249372b9bcaa30ab223317))\\n- Added support for location expansion in the `java_toolchain.android_lint_opts` attribute. ([1c0194c](https://github.com/bazelbuild/bazel/commit/1c0194cc994d29b938d638e8625deaa19ffaf636))\\n- Added support for symlinks in Android SDK repositories. ([e41440e](https://github.com/bazelbuild/bazel/commit/e41440e97c46a7f76a92e4b147eff02f1343451b))\\n- The minimum Android build tools version for the Android rules is now 30.0.0. ([0e65273](https://github.com/bazelbuild/bazel/commit/0e652737988e3c115e98e1552f6fada52bc2b9a2))\\n- `--apk_signing_method` now accepts the value `v4`. ([f9df9d7](https://github.com/bazelbuild/bazel/commit/f9df9d7318f51c1998c76bc50a5d48deacac5963))\\n- Tags are now propagated to `AndroidBinary` actions. ([8f927d2](https://github.com/bazelbuild/bazel/commit/8f927d2e612263c78f6f4122f634434c29c71c85))\\n- `aapt2 convert` is now used instead of relinking final APK as static lib. ([8465c17](https://github.com/bazelbuild/bazel/commit/8465c173b97370704b277f12c6f827746c4abf4e))\\n- The `--no-proguard-location-reference` flag is now passed to `aapt2` when linking and generating proguard configurations. ([705b419](https://github.com/bazelbuild/bazel/commit/705b419f95060305de93e7861544bd73bb663f19))\\n- Made Android Lint worker compatible. ([65dc407](https://github.com/bazelbuild/bazel/commit/65dc407929eeb2372da65d3d4043dac9881f3235))\\n- Made `AarGeneratorAction` worker compatible. ([64ffc09](https://github.com/bazelbuild/bazel/commit/64ffc098a23a4d72726e2efbf590cb8002abeec2))\\n- Android Lint validations are now correctly propagated through `android_binary`\'s split transition. ([c6c6389](https://github.com/bazelbuild/bazel/commit/c6c63890460546c2d605812ad7e7baef19eb7100))\\n- `android_binary` now always uses the bytecode optimizer\'s mnemonic. ([c381a27](https://github.com/bazelbuild/bazel/commit/c381a2745107a444c2b99888b7e91beee3c50993))\\n- Fixed Android API level support in NDK crosstools. ([b4c637c](https://github.com/bazelbuild/bazel/commit/b4c637c5e3af145295ad3f4ca732c228ab6a88cf))\\n- Fixed `AarResourcesExtractor` action to produce consistent zips. ([85ab374](https://github.com/bazelbuild/bazel/commit/85ab374bafbf4f8f4dff1700e477b5dc4e20ccc5))\\n- Fixed `--fat_apk_hwasan` when using `--{,android_}cpu` instead of `--fat_apk_cpu`. ([a38eb75](https://github.com/bazelbuild/bazel/commit/a38eb75865a0cb90b50fbcab65436be4fe830483))\\n\\n### Apple\\n\\n- Added support for the Apple Silicon iOS simulator. ([c1ea2d4](https://github.com/bazelbuild/bazel/commit/c1ea2d4b9cb6afa33eabba285f7c962c2f954e23))\\n- Added support for the Apple Silicon watchOS simulator. ([9c1c622](https://github.com/bazelbuild/bazel/commit/9c1c622fed219cb6b9c0656ebe4a4f3c117029b9))\\n- Added the `--host_macos_minimum_os` flag. ([6345c80](https://github.com/bazelbuild/bazel/commit/6345c806ad81f29b390d67ce6e1510b47bf82ddd))\\n- Added support for LLVM BC files. ([f53c389](https://github.com/bazelbuild/bazel/commit/f53c389dbd4b0ae66307e9bd4a72b36b3d284ec3))\\n- Added the `--incompatible_disable_native_apple_binary_rule` flag, which disables the native `apple_binary` rule. ([65e9732](https://github.com/bazelbuild/bazel/commit/65e9732c7d2a791ed2d6f9e90c8279acdbf1096f))\\n- When building an iOS target it now defaults to the Apple Silicon iOS simulator when building on an Apple Silicon host. ([ca5f67f](https://github.com/bazelbuild/bazel/commit/ca5f67f9a73d3be20539c923a655997680328fc3))\\n- Made `-c opt` strip dead code by default. ([3114e80](https://github.com/bazelbuild/bazel/commit/3114e806c33df3f1a9555f463dd17f028eef80c6))\\n- Timestamps are now disabled in linking actions. ([073ae81](https://github.com/bazelbuild/bazel/commit/073ae810e4f61f56f68a31d5ee95f18633d176cc))\\n- `--apple_bitcode=embedded` now applies to `cc_library` targets. ([3439a52](https://github.com/bazelbuild/bazel/commit/3439a52cd6cc92420fa8f21c5910e750b01c18c7))\\n- Removed support for \\"nodeps\\" dynamic libraries. ([ec55533](https://github.com/bazelbuild/bazel/commit/ec5553352f2f661d39ac4cf665dd9b3c779e614c))\\n- Lipo operations are now conditional with the `linkMultiArchBinary` Apple binary Starlark API. ([066fba3](https://github.com/bazelbuild/bazel/commit/066fba3486d8d395cb67720888bd8258a5ffc83a))\\n- `--apple_crostool_top` is now preserved in host/exec transitions. ([3ece10a](https://github.com/bazelbuild/bazel/commit/3ece10a9d6ea2236d8780f5ffe623d6374d4dc4a))\\n\\n## Languages\\n\\nWhile there are lots of programming languages that are supported through standalone Starlark rules,\\nsome are still written as \\"native\\" rules in Bazel core,\\nor are bundled Starlark rules while [Starlarkification](#starlark) is in progress.\\nIn the following sections I summarize the notable changes in support of these languages.\\n\\n### C and C++\\n\\n- Added support for CUDA header file type (.cuh). ([c750c52](https://github.com/bazelbuild/bazel/commit/c750c529ab0646e40c60f645f51d468155418269))\\n- Added `.rlib` as an allowed extension for static libraries. ([ad03823](https://github.com/bazelbuild/bazel/commit/ad0382340ab4ffb4832c11cb92ec68755ef0eec2))\\n- Added support for location expansion in `cc_*.defines` attributes. ([28fc8a1](https://github.com/bazelbuild/bazel/commit/28fc8a1f7f7524d1b730da2a41341ce4aa1fea35))\\n- Added the `cc_toolchain.target_transition_for_inputs` attribute. ([26abd97](https://github.com/bazelbuild/bazel/commit/26abd97974554887e9a4d140bf9f4800e23f1da8))\\n- Added native options for `cc_shared_library`. ([96afa0f](https://github.com/bazelbuild/bazel/commit/96afa0f01b49f8dfb4db02c1b2a6a60f3a846a01))\\n- Added `-g` in `per_object_debug_info` for Clang 12 and GCC 11. ([fa69b78](https://github.com/bazelbuild/bazel/commit/fa69b78ff2ab4138b5ec3fcdeb23ba406f7f8227))\\n- Added support for clang\'s `libc++` to the Unix toolchain. ([f1531dc](https://github.com/bazelbuild/bazel/commit/f1531dc2ebfb2db721a94f6f19081fa89af536da))\\n- Added support for LLD to the Unix toolchain. ([00e30ca](https://github.com/bazelbuild/bazel/commit/00e30ca5968d42b4a1e42327fa683debc1063b89))\\n- Added the `external_include_paths` feature, which disables warnings from external headers. ([08936ae](https://github.com/bazelbuild/bazel/commit/08936aecb96f2937c61bdedfebcf1c5a41a0786d))\\n- Added the `--incompatible_enable_cc_test_feature` flag, which switches from the use of build variables to the feature of the same name. ([c74ae11](https://github.com/bazelbuild/bazel/commit/c74ae11562c44a49accc33dfae85e74036344f38))\\n- Added the `--experimental_cpp_compile_resource_estimation` flag, which estimates precise resource usage for local execution of `CppCompileAction`. ([f5196e2](https://github.com/bazelbuild/bazel/commit/f5196e2ce4e8e45ca49c271053dad8dd32be5080))\\n- Added the `--experimental_use_cpp_compile_action_args_params_file` flag, which causes `CppCompileAction` to write exposed `action.args` to a parameters file. ([dc914c6](https://github.com/bazelbuild/bazel/commit/dc914c6822a785ce139e8fc8bdf12594835f5674))\\n- Added support for Starlark transitions on `--incompatible_enable_cc_toolchain_resolution`. ([c4357cf](https://github.com/bazelbuild/bazel/commit/c4357cf248612b2451b4337e44757c934de22d5c))\\n- Added the `dynamic_mode` attribute to the `cpp` fragment. ([e2915a8](https://github.com/bazelbuild/bazel/commit/e2915a8fe56b1917510a922b71238c1b51a8972f))\\n- C++ modules are no longer created if there are no modular headers. ([09cba3b](https://github.com/bazelbuild/bazel/commit/09cba3b5c80b28ac1fe2a5a312f8d3b41bf3eecd))\\n- Made the `abi_version` and `abi_glibc_version` attributes optional for cc toolchains. ([9a5bef9](https://github.com/bazelbuild/bazel/commit/9a5bef9983848535c8a48f783700b580ec44df3f))\\n- Made `gcov` optional in cc toolchains. ([e8a95ca](https://github.com/bazelbuild/bazel/commit/e8a95ca927fb49b81787df77ffd775340fe715f2))\\n- Renamed `target_transition_for_inputs` to `exec_transition_for_inputs` to better reflect the mechanism at play. ([5448c7c](https://github.com/bazelbuild/bazel/commit/5448c7c5460d7928013a438bd2b88bb811362df9))\\n- The `oso_prefix_is_pwd` feature now applies to C++ link actions. ([9b4844a](https://github.com/bazelbuild/bazel/commit/9b4844a0ca3ee031c8b930c23d551da6a9050a85))\\n- Fixed `CppCompileActionTemplate`\'s handling of PIC. ([0349360](https://github.com/bazelbuild/bazel/commit/03493609e8559aa3aab28d55b521a5bdb6e30b68))\\n- Fixed build failures when the same shared lib is depended on multiple times. ([b571f2c](https://github.com/bazelbuild/bazel/commit/b571f2c1b9272a14710e15f719dff8af86b79f06))\\n- Fixed C++ code coverage when using remote execution. ([ab1da7b](https://github.com/bazelbuild/bazel/commit/ab1da7beb367147d7d2df17f53bbf0ed78118b69))\\n- Fixed a performance issue when `cc_binary` depended on `cc_shared_library` targets. ([503d56e](https://github.com/bazelbuild/bazel/commit/503d56eda25b7e2a12431411bfb7ff286d028405))\\n- Fixed a crash when feature configuration or cc toolchain were `None`. ([d3b3425](https://github.com/bazelbuild/bazel/commit/d3b3425be23917e5b126d54a2e224be3c3af55e9))\\n\\n### Java\\n\\n- Upgraded JDK11. ([698c17a](https://github.com/bazelbuild/bazel/commit/698c17ab7ea6f4617f1f35a6b3e3085e88c1693a))\\n- Removed JDK14. ([06f7340](https://github.com/bazelbuild/bazel/commit/06f7340819f9eaf643d13400a1e279650caf6c56))\\n- Added JDK16. ([e2ed2fd](https://github.com/bazelbuild/bazel/commit/e2ed2fd5cad34f0e97f117df391e255b59d96b63))\\n- Added JDK17. ([eb7bf8c](https://github.com/bazelbuild/bazel/commit/eb7bf8cd9b6e0eccc7eddcfd2f5d1fb10242c30f))\\n- Added support for Java versions with a single component. ([2a3e194](https://github.com/bazelbuild/bazel/commit/2a3e194ff5efa4b73b59bcb87ce894f46d95b882))\\n- Added support for worker cancellation. ([05d0446](https://github.com/bazelbuild/bazel/commit/05d04464b1ceca115ceba4410195b0a967e39aeb))\\n- Added support for record attributes to `ijar`. ([26229fe](https://github.com/bazelbuild/bazel/commit/26229fe7a04791a512cc1320ce84130e97afe565))\\n- Added support for sealed class attributes to `ijar`. ([70ae390](https://github.com/bazelbuild/bazel/commit/70ae39015e25acec226835201b6dd70f55716280))\\n- Added the `--host_jvmopt` flag. ([570f019](https://github.com/bazelbuild/bazel/commit/570f01968093d943b1f878f2cf57da4c20ba5355))\\n- Added the `javabuilder_data` and `turbine_data` attributes to `java_toolchain`. ([a1b19df](https://github.com/bazelbuild/bazel/commit/a1b19dfa09abe6d7d3b62f2253e4bfa718aec089))\\n- Added the `http_jar.downloaded_file_path` attribute. ([15b1840](https://github.com/bazelbuild/bazel/commit/15b1840a5f45584bab82eaf141dae082cc3ce780))\\n- Added mnenomic tags for java toolchain actions. ([120ea6c](https://github.com/bazelbuild/bazel/commit/120ea6cbd8da0865a1d8fc7c251c9072a346baab))\\n- Added `java_outputs` to `JavaPluginInfo`. ([f73e28c](https://github.com/bazelbuild/bazel/commit/f73e28cd44d439e6bcecd73f45813ca13c352a93))\\n- Java rules now use toolchain resolution. ([Issue #7849](https://github.com/bazelbuild/bazel/issues/7849))\\n- Java branch coverage now applies Jacoco\u2019s coverage filters. ([065e2e8](https://github.com/bazelbuild/bazel/commit/065e2e8e76c5bf21bd797f3c8baebe909e85a6cf))\\n- The local JDK is now attached to `JVM8_TOOLCHAIN_CONFIGURATION`. ([7e48642](https://github.com/bazelbuild/bazel/commit/7e48642db90977d37531053775be5ac9083078b7))\\n- Only JDK repositories that are needed are downloaded now. ([903c272](https://github.com/bazelbuild/bazel/commit/903c2720792574321d3e3591ca14a9d287819cb7))\\n- `java_test` now has the `requires-darwin` execution requirement on macOS. ([ca39c05](https://github.com/bazelbuild/bazel/commit/ca39c05b05527f83480852d26cd08be9bf0cba09))\\n- Removed `ABSOLUTE_JAVABASE`. ([2a07fed](https://github.com/bazelbuild/bazel/commit/2a07fedf87eae77ce53bc6f0807cc41d1ac743ab))\\n- Removed the `jarFiles`, `resources` and `sourceJarsForJarFiles` attributes from `JavaSourceInfoProvider`. ([34cfab5](https://github.com/bazelbuild/bazel/commit/34cfab54485de9b1fc424bbc2dee19ed46942f2c))\\n- Removed the `JavaInfo.add_compile_time_jdeps` and `compile_time_jdeps` attributes. ([4d54234](https://github.com/bazelbuild/bazel/commit/4d54234df2711d52a80be053808a18852f6ff4ef))\\n\\n### Objective-C\\n\\n- Added support for location expansion in the `objc_library.copts` attribute. ([d966a0d](https://github.com/bazelbuild/bazel/commit/d966a0d6eaab557065cf06b5a7b23299f01142a8))\\n- Swift module maps are no longer generated in `objc_library` and `objc_import` targets. ([31bec27](https://github.com/bazelbuild/bazel/commit/31bec271b148a826f6d1a527e6c087e5b2d9333f))\\n- Removed the `generate_dsym` method from the `objc` fragment. ([1bf5843](https://github.com/bazelbuild/bazel/commit/1bf58436a8fca8c704c8738520cc6d33d4f73da0))\\n\\n## Rules authoring\\n\\nBazel\'s extensibility is powered by the ability to write custom [rules][rules].\\nMost rules used in a project will be provided by open source rule sets,\\nbut projects may also define rules themselves.\\nBazel 5.0 includes numerous changes that make custom rules more performant,\\neasier to write,\\nor even expand what is possible to do with them.\\n\\n[rules]: https://docs.bazel.build/versions/5.0.0/skylark/rules.html\\n\\n### Aspects\\n\\n[Aspects][aspects] allow augmenting build dependency graphs with additional information and actions.\\nThese changes expanded their capabilities:\\n\\n- Added the `--experimental_enable_aspect_hints` flag,](https://github.com/bazelbuild/bazel/commit/60ebb105dbf34f0b267ea7573157246b4c9bfcaf) [which adds the `aspect_hints` attribute to rules. ([a2856bf](https://github.com/bazelbuild/bazel/commit/a2856bf66f4b4c519861a994c6e09bd263f2a31e))\\n- Added the `--experimental_required_aspects` flag, which allows aspects to depend on other aspects. ([f8c3408](https://github.com/bazelbuild/bazel/commit/f8c34080de1f9b935e3f6abf23b2a319e62c9052))\\n- Added the `--incompatible_top_level_aspects_dependency` flag, which allows top-level aspect dependencies. ([ed25118](https://github.com/bazelbuild/bazel/commit/ed251187b078c4262bbbc1da72015ce12f9964f4))\\n- When using the `--allow_analysis_failures` flag (for example, via `bazel-skylib`\'s `analysistest` with `expect_failure = True`), analysis-time failures in aspect implementation functions will now be propagated and saved in `AnalysisFailureInfo`, just like analysis-time failures in rules. ([020dd5f](https://github.com/bazelbuild/bazel/commit/020dd5f1ee9c2c388644dbcd45cda4ebf6b42876))\\n\\n[aspects]: https://docs.bazel.build/versions/5.0.0/skylark/aspects.html\\n\\n### Persistent workers\\n\\n[Persistent workers][workers] improve build performance by sending multiple requests to long-running processes.\\nHere are some notable changes to persistent worker support:\\n\\n- Added support for worker cancellation. ([e0d6f8b](https://github.com/bazelbuild/bazel/commit/e0d6f8b00490a5e7973e74680e9e0ca3f19dc6e1))\\n- Added the `verbosity` field to the worker protocol, primarily controlled by the `--worker_verbose` flag. ([40d3363](https://github.com/bazelbuild/bazel/commit/40d33638c4abd0860006253b922e362bae05a238))\\n- JSON based workers now have their requests formatted according to the ndjson spec. ([299e50a](https://github.com/bazelbuild/bazel/commit/299e50aae9d8c0b7f0d47aa2ce3d2658a3a80a94))\\n\\n[workers]: https://docs.bazel.build/versions/5.0.0/persistent-workers.html\\n\\n### Starlark\\n\\n[As mentioned at Bazelcon][starlarkification],\\nprogress is being made on migrating natives rules out of Bazel and into standalone Starlark rules.\\nIn the Bazel 5.0 release progress was made on the Android, C++, Java, and Objective-C rules.\\n\\nIn addition to changes directly needed for Starlarkification,\\nfor which there were many and I\'m not going to list them here,\\nthe Starlark language itself received performance and feature improvements:\\n\\n- Added support for nested `def` statements. ([5ca2064](https://github.com/bazelbuild/bazel/commit/5ca20643e54e5cff1eb2939d044f86f96861176a))\\n- Added support for lambda expressions. ([50ce3f9](https://github.com/bazelbuild/bazel/commit/50ce3f973cbc96a0326560a31b736a4f0ca8dc62))\\n- Added support for `allow_closure` in the `args.add_all` and `args.add_joined` methods. ([6e0050d](https://github.com/bazelbuild/bazel/commit/6e0050d81444cc09fca091cad4b105341c9e0e37))\\n- Added support for augmented field assignment (`y.f += x`). ([fbbac6b](https://github.com/bazelbuild/bazel/commit/fbbac6b295b9ef0ea1999dc3ae9df29eceffbe88))\\n- Added support for `%x`, `%X`, and `%o` conversions in `string % number`. ([99b7226](https://github.com/bazelbuild/bazel/commit/99b72266903d409c4eb9ebc852a4941cce7b0995))\\n- Added 64-bit integer support to `StarlarkInt.{floordiv,mod}`. ([3e45967](https://github.com/bazelbuild/bazel/commit/3e459679f158afca39286d8a37179e4e5030ca43))\\n- Added support for some subsitutions in action progress messages. ([bfa3643](https://github.com/bazelbuild/bazel/commit/bfa364346890eb7950edb002877d569695544d48))\\n- Added support for string build settings which accept multiple values. ([a13f590](https://github.com/bazelbuild/bazel/commit/a13f590b69bcbcaa10b1a49bfd9a4607dfbd8f47))\\n- Starlark rules can now use native transitions in the `cfg` parameter. ([d1619b7](https://github.com/bazelbuild/bazel/commit/d1619b7833461b3e4faf1a9585c0ab6950432a35))\\n- Optimized `str(int)`. ([8f97db1](https://github.com/bazelbuild/bazel/commit/8f97db114c7a60cc53db0d5bf1555bc580d554a0))\\n- Optimized `() + tuple` and `tuple + ()`. ([0ebb269](https://github.com/bazelbuild/bazel/commit/0ebb269454722f715dbdaba9ef14c21c11c6fd5f))\\n- Optimized long integer multiplication. ([9d3f225](https://github.com/bazelbuild/bazel/commit/9d3f2257ba5a97a21c9b3cc0680494c0816c793f))\\n- Optimized `&`, `|`, `^`, and `~` for 64-bit integers. ([fa421b8](https://github.com/bazelbuild/bazel/commit/fa421b82ceccc54004efd31071dc8c4350245be7))\\n- Optimized `list(list)`. ([d7d7f82](https://github.com/bazelbuild/bazel/commit/d7d7f82729dd62c5c39154140bf1c6a54abdfe84))\\n- Optimized Starlark transitions. ([5b4fb02](https://github.com/bazelbuild/bazel/commit/5b4fb0219b289eb3bbd423748f5400aaab2ec1cb))\\n- Optimized `--experimental_existing_rules_immutable_view`. ([dec8b5a](https://github.com/bazelbuild/bazel/commit/dec8b5a8a0235fe726a4324ff5d02e3abe75a185))\\n- Fixed `Label()` behavior when called with `@repo` parts. ([463e8c8](https://github.com/bazelbuild/bazel/commit/463e8c80cd11d36777ddf80543aea7c53293f298))\\n- Propagated `DefaultInfo` no longer loses runfiles. ([62582bd](https://github.com/bazelbuild/bazel/commit/62582bd74d2a154e94a9e1e64fcbeeae22fbf88c))\\n\\n[starlarkification]: https://youtu.be/7M9c6x3WgIQ?t=282\\n\\n## Misc\\n\\nThere were a handful of changes that I couldn\'t find a nice home for in the sections above,\\nbut I still felt were important or interesting enough to call attention to:\\n\\n- Added the the `--incompatible_enforce_config_setting_visibility` flag, which makes `config_setting` honor the `visibility` attribute (defaulting to `//visibility:public`). ([79989f9](https://github.com/bazelbuild/bazel/commit/79989f9becc2edefe8b35f7db687bf8de03e3580))\\n- Added the `--remove_all_convenience_symlinks` flag to the `clean` command, which deletes all symlinks in the workspace that have the `symlink_prefix` prefix and point into the output directory. ([f3513c1](https://github.com/bazelbuild/bazel/commit/f3513c16018be07255ee51c88bfdf2f77efa920f))\\n- Added the `--no-log-init` flag to docker sandbox. ([d4390f8](https://github.com/bazelbuild/bazel/commit/d4390f81b306f3ae0b2f85c722965142e14dd356))\\n- Added the `--experimental_keep_config_nodes_on_analysis_discard` flag (default on), which reduces long-running memory usage. ([2f4ed67](https://github.com/bazelbuild/bazel/commit/2f4ed67b2539762a36c4e0a28018d62ef8811477))\\n- Added the `--experimental_reuse_sandbox_directories` flag, which causes reuse of already-created non-worker sandboxes with cleanup. ([1adb512](https://github.com/bazelbuild/bazel/commit/1adb51287f5826ac1a8b469c417780c84ea4b467))\\n- Added the `--experimental_skyframe_cpu_heavy_skykeys_thread_pool_size` flag, which causes the loading/analysis phase of Skyframe to use 2 independent thread pools. ([16c0408](https://github.com/bazelbuild/bazel/commit/16c040854db04fed900a1d3abb5ff6a4337a2028))\\n- Added the `--experimental_oom_sensitive_skyfunctions_semaphore_size` flag, which configures the semaphore in `ConfiguredTagetFunction`. ([b5bfcc1](https://github.com/bazelbuild/bazel/commit/b5bfcc1ed0388fb5f0e3924d8fd33ea1bb3db0e1))\\n- Added the `--experimental_retain_test_configuration_across_testonly` flag, which skips configuration trimming when when `testonly` is `true` on non-test targets. ([309f4e1](https://github.com/bazelbuild/bazel/commit/309f4e1475efc08b20e406038d10eb30090fca82))\\n- Test configurations are no longer trimmed when `--nodistinct_host_configuration` is on. ([0b51d43](https://github.com/bazelbuild/bazel/commit/0b51d431bd43010ed4dc56f30b83da20fdb21bc6))\\n- The `canonicalize-flags` command now inherits from the `build` command in order to pick up build-specified `--flag_alias` settings from rc files. ([3e6e975](https://github.com/bazelbuild/bazel/commit/3e6e97585dd41e31b6ca3bfe3bed10abc3614fe4))\\n- Bazel will no longer create a `bazel-out` symlink if `--symlink_prefix` is specified: the directory pointed to via the `bazel-out` symlink is accessible via `${symlink_prefix}-out`. ([06bd3e8](https://github.com/bazelbuild/bazel/commit/06bd3e8c0cd390f077303be682e9dec7baf17af2))\\n- Set `TEST_RUN_NUMBER` when the test runs multiple times. ([9e4216e](https://github.com/bazelbuild/bazel/commit/9e4216e0c8c6974f79c9fbea71bd9129b9439066))\\n- All (instead of just C++) source files are now filtered for coverage output according to `--instrumentation_filter` and `--instrument_test_targets`. ([f38e293](https://github.com/bazelbuild/bazel/commit/f38e293317088396163115cec07099026d63533e))\\n- `genrule.srcs` is now considered a source attribute for coverage. ([fa118ae](https://github.com/bazelbuild/bazel/commit/fa118ae4b5d58648db574a08a60d5595d6b645dd))\\n- `label_keyed_string_dict` attributes are now considered when gathering instrumented files for coverage. ([9015f38](https://github.com/bazelbuild/bazel/commit/9015f383220892b638d47257ddbd407b2ea07055))\\n- Changed `DEFAULT_STUB_SHEBANG` to use python3 instead of python. ([2945ef5](https://github.com/bazelbuild/bazel/commit/2945ef5072f659878dfd88b421c7b80aa4fb6c80))\\n- Added the default `solib` dir to the `rpath` for shared libs with transitions. ([20061f8](https://github.com/bazelbuild/bazel/commit/20061f8fb7ed95924c6cdbaaaf3d06a64edf974e))\\n- Removed `//visibility:legacy_public`. ([0803ce4](https://github.com/bazelbuild/bazel/commit/0803ce4cbeb209689bb97f1b5107383ca201e2b6))\\n- Removed `--action_graph` from the dump command. ([7cf0c34](https://github.com/bazelbuild/bazel/commit/7cf0c349b2e1675deea9519be4a805d8daff732e))\\n- Added some fixes for the Starlark transition hash computation. ([557a7e7](https://github.com/bazelbuild/bazel/commit/557a7e71eeb5396f2c87c909ddc025fde2678780))\\n\\n## Summary\\n\\nAs you can see,\\nBazel 5.0 was a _massive_ release.\\nThankfully,\\nthrough the [rolling releases][rolling-releases] process,\\npeople were able to test,\\nor even actively depend on,\\nthese changes well before the first 5.0 release candidate was cut.\\n\\nI expect Bazel 5.1 to be a fast follow with some changes that missed the final release candidate.\\nWork on Bazel 6.0 is well underway as well,\\nand I look forward to summarizing its changes later this year.\\n\\n[rolling-releases]: https://docs.bazel.build/versions/5.0.0/versioning.html#rolling-releases"},{"id":"welcoming-brentley-jones","metadata":{"permalink":"/blog/welcoming-brentley-jones","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/welcoming-brentley-jones.md","source":"@site/blog/welcoming-brentley-jones.md","title":"Welcoming Brentley Jones","description":"At BuildBuddy, our mission is to bring the world\'s best developer tools to every company. A big part of that mission involves connecting engineers across different companies, sharing knowledge, and keeping an open dialog on best practices.","date":"2021-12-13T12:00:00.000Z","tags":[{"inline":true,"label":"company","permalink":"/blog/tags/company"},{"inline":true,"label":"team","permalink":"/blog/tags/team"}],"readingTime":0.91,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"welcoming-brentley-jones","title":"Welcoming Brentley Jones","authors":"siggi","date":"2021-12-13:12:00:00","image":"/img/welcome_brentley.png","tags":["company","team"]},"unlisted":false,"prevItem":{"title":"What\'s New in Bazel 5.0","permalink":"/blog/whats-new-in-bazel-5-0"},"nextItem":{"title":"Welcoming Lulu Zhang","permalink":"/blog/welcoming-lulu-zhang"}},"content":"At BuildBuddy, our mission is to bring the world\'s best developer tools to every company. A big part of that mission involves connecting engineers across different companies, sharing knowledge, and keeping an open dialog on best practices.\\n\\nThat\'s why we\'re so excited to share that [**Brentley Jones**](https://brentleyjones.com) has joined BuildBuddy as a Staff Developer Evangelist. His deep experience with Bazel at scale will directly benefit BuildBuddy users and customers.\\n\\nBrentley is a maintainer of Bazel\'s [rules_apple](https://github.com/bazelbuild/rules_apple/blob/master/MAINTENANCE.md#maintainers) and [rules_swift](https://github.com/bazelbuild/rules_swift/) which contain Bazel\'s support for iOS, macOS, Swift, and more. He\'s also a regular contributor to the [Bazel Slack](https://slack.bazel.build/), and the [Bazel GitHub repo](https://github.com/bazelbuild/bazel/issues?q=author%3Abrentleyjones).\\n\\nBrentley joins us from Lyft, where he was a Staff Software Engineer on their Client Tooling team. Prior to Lyft, Brentley was an engineer at Target, where he led their migration to Bazel.\\n\\n![](../static/img/blog/welcome_brentley.png)\\n\\nWe look forward to working alongside Brentley to build the future of developer tools.\\n\\nWelcome to BuildBuddy, Brentley!\\n\\n\x3c!--truncate--\x3e"},{"id":"welcoming-lulu-zhang","metadata":{"permalink":"/blog/welcoming-lulu-zhang","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/welcoming-lulu-zhang.md","source":"@site/blog/welcoming-lulu-zhang.md","title":"Welcoming Lulu Zhang","description":"To fulfill our mission of bringing the world\'s best developer tools to every company, we\'re continually expanding our team to keep up with demand we\'re seeing from customers. That\'s why we\'re excited to share today that Lulu Zhang is joining BuildBuddy\'s engineering team.","date":"2021-12-01T01:12:00.000Z","tags":[{"inline":true,"label":"company","permalink":"/blog/tags/company"},{"inline":true,"label":"team","permalink":"/blog/tags/team"}],"readingTime":0.48,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"welcoming-lulu-zhang","title":"Welcoming Lulu Zhang","authors":"siggi","date":"2021-12-1:12:00:00","image":"/img/welcome_lulu.png","tags":["company","team"]},"unlisted":false,"prevItem":{"title":"Welcoming Brentley Jones","permalink":"/blog/welcoming-brentley-jones"},"nextItem":{"title":"BuildBuddy v2.7.0 Release Notes","permalink":"/blog/buildbuddy-v2-7-0-release-notes"}},"content":"To fulfill our mission of bringing the world\'s best developer tools to every company, we\'re continually expanding our team to keep up with demand we\'re seeing from customers. That\'s why we\'re excited to share today that [**Lulu Zhang**](https://www.linkedin.com/in/luluzhang66/) is joining BuildBuddy\'s engineering team.\\n\\nLulu joins us from Thumbtack. Prior to Thumbtack, Lulu spent 5 years at Google where she worked on Google Play, Project Fi, and Area 120.\\n\\n![](../static/img/blog/welcome_lulu.png)\\n\\nWe look forward to working alongside Lulu to build the future of developer tools.\\n\\nWelcome to BuildBuddy, Lulu!\\n\\n\x3c!--truncate--\x3e"},{"id":"buildbuddy-v2-7-0-release-notes","metadata":{"permalink":"/blog/buildbuddy-v2-7-0-release-notes","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/buildbuddy-v2-7-0-release-notes.md","source":"@site/blog/buildbuddy-v2-7-0-release-notes.md","title":"BuildBuddy v2.7.0 Release Notes","description":"To celebrate Bazelcon 2021 (and our Bazelcon talk), we\'ve got a lot in store for you in this release! We\'re excited to share that v2.7.0 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open-source via Github, Docker, and our Helm Charts!","date":"2021-11-18T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"release-notes","permalink":"/blog/tags/release-notes"}],"readingTime":4.22,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"buildbuddy-v2-7-0-release-notes","title":"BuildBuddy v2.7.0 Release Notes","authors":"siggi","date":"2021-11-18:12:00:00","image":"/img/cache_misses.png","tags":["product","release-notes"]},"unlisted":false,"prevItem":{"title":"Welcoming Lulu Zhang","permalink":"/blog/welcoming-lulu-zhang"},"nextItem":{"title":"BuildBuddy v2.5.0 Release Notes","permalink":"/blog/buildbuddy-v2-5-0-release-notes"}},"content":"To celebrate Bazelcon 2021 (and [our Bazelcon talk](https://opensourcelive.withgoogle.com/events/bazelcon2021?talk=bazel-in-the-cloud)), we\'ve got a lot in store for you in this release! We\'re excited to share that **v2.7.0** of BuildBuddy is live on both [Cloud Hosted BuildBuddy](https://app.buildbuddy.io/) and open-source via [Github](https://github.com/buildbuddy-io/buildbuddy), [Docker](https://github.com/buildbuddy-io/buildbuddy/blob/master/docs/on-prem.md#docker-image), and [our Helm Charts](https://github.com/buildbuddy-io/buildbuddy-helm)!\\n\\nWe\'ve also updated [the list of open source repositories that use BuildBuddy](https://www.buildbuddy.io/open-source-repos). If you have an open source repo that\'s using BuildBuddy, and would like to be included on the list - please fill out the quick form at the bottom of that page!\\n\\nThanks to everyone using open source, cloud-hosted, and enterprise BuildBuddy. We\'ve made lots of improvements in this release based on your feedback.\\n\\n\x3c!-- truncate --\x3e\\n\\n## New in v2.7.0\\n\\n- **M1 Mac support** - we now [publish](https://github.com/buildbuddy-io/buildbuddy/releases/tag/v2.7.0) BuildBuddy executor binaries built for M1 Macs. These can be used with BuildBuddy Cloud\'s **Bring Your Own Executors** feature, BuildBuddy managed Mac executors, or in a self-hosted RBE cluster.\\n\\n- **Build log improvements** - the build log viewer is core to the BuildBuddy experience. We\'ve made a ton of improvements in this release to make this log viewing experience even better. Build logs are now **live** and update much more frequently. You can also now **search** build logs with a built-in search bar, **download** the raw build log text, and even **wrap** long lines.\\n\\n![](../static/img/blog/build_logs.png)\\n\\n- **Cache miss debugging UI** - one of the requests we get most frequently is for help debugging remote cache misses. There\'s a [guide](https://docs.bazel.build/versions/main/remote-execution-caching-debug.html) in the Bazel documentation, but it can be cumbersome to follow. We\'ve made this process easier by surfacing individual action cache misses directly on the BuildBuddy cache tab. This allows you to quickly dive into which targets and actions missed cache and compare them against previous builds. You can click on any of these action hashes to explore the action\'s input files, environment variables, and command arguments. This is just the first step in making cache misses easier to debug - we\'re working on making this process even easier.\\n\\n![](../static/img/blog/cache_misses.png)\\n\\n- **Member management & roles** - we\'ve heard from many of the large organizations that we work with that they\'d like to be able to limit which members of their organization are able to access certain BuildBuddy functionality - like editing organization settings. In order to support this, we\'ve added a new member management UI on the BuildBuddy organization settings page. Here you can assign either `Admin` or `Developer` roles to members of your BuildBuddy organization.\\n\\n![](../static/img/blog/members.png)\\n\\n- **Usage page** - while our Trends page gives users great insight into how their build metrics are trending over time, it\'s less useful for getting a sense of your total BuildBuddy usage for the current month (and previous months). We\'ve introduced a new Usage page that allows you to get a quick glance of the metrics that are important for billing.\\n  ![](../static/img/blog/usage.png)\\n\\n- **And much much more** - Every release comes packed with so many new features, performance improvements and bug fixes that we can\'t get to them all. Here are some more highlights:\\n  - Mac support for remote persistent workers\\n  - API improvements, including a build log download endpoint and target filtering by tag\\n  - Fixes for issues that can cause unnecessary BEP disconnects\\n  - Improvements to autoscaling scale-downs\\n  - Reduced memory footprint\\n  - New BEP live data export functionality\\n  - Flag overrides for platform properties for switching between pools without invalidating the cache\\n  - SAML quality of life improvements\\n  - Configurable executor docker image warm up\\n  - Support for Azure Storage as a storage backend\\n  - AWS WebIdentity authentication support\\n  - Private container registry support\\n  - A built-in Xcode locator in executors for discovering available Xcode versions\\n\\n## Coming soon!\\n\\nIn addition to all of these great new features, we\'ve also been laying the groundwork for some big new features that we\'re working on:\\n\\n- A new caching infrastructure that will enable far more flexibility in where and how cache artifacts are stored.\\n- Mac support for [BuildBuddy Workflows](https://blog.buildbuddy.io/blog/meet-buildbuddy-workflows/).\\n- A managed cloud Bazel service that uses [Firecracker microVMs](https://firecracker-microvm.github.io/) to give you warm, incremental Bazel instances in the cloud (right next to your RBE cluster) that spin up in milliseconds.\\n- A web-based code editor built on top of VSCode (similar to [vscode.dev](https://vscode.dev/)) built entirely for Bazel that can kick off fully incremental RBE-enabled cloud Bazel builds & tests. If you\'re an ex-Googler who misses Cider &mdash; get excited!\\n\\nIf you\'re interested in any of these upcoming features and would like to try them out &mdash; [sign up here for early access](https://buildbuddy.typeform.com/to/BZikT3Eu)!\\n\\nThat\'s it for this release. Stay tuned for more updates!\\n\\nAs always, we love your feedback - join our [Slack channel](https://community.buildbuddy.io) or email us at [hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts."},{"id":"buildbuddy-v2-5-0-release-notes","metadata":{"permalink":"/blog/buildbuddy-v2-5-0-release-notes","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/buildbuddy-v2-5-0-release-notes.md","source":"@site/blog/buildbuddy-v2-5-0-release-notes.md","title":"BuildBuddy v2.5.0 Release Notes","description":"We\'re excited to share that v2.5.0 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open-source via Github, Docker, and our Helm Charts!","date":"2021-08-30T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"release-notes","permalink":"/blog/tags/release-notes"}],"readingTime":3.35,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"buildbuddy-v2-5-0-release-notes","title":"BuildBuddy v2.5.0 Release Notes","authors":"siggi","date":"2021-08-30:12:00:00","image":"/img/global_filter.png","tags":["product","release-notes"]},"unlisted":false,"prevItem":{"title":"BuildBuddy v2.7.0 Release Notes","permalink":"/blog/buildbuddy-v2-7-0-release-notes"},"nextItem":{"title":"Meet BuildBuddy Workflows","permalink":"/blog/meet-buildbuddy-workflows"}},"content":"We\'re excited to share that v2.5.0 of BuildBuddy is live on both [Cloud Hosted BuildBuddy](https://app.buildbuddy.io/) and open-source via [Github](https://github.com/buildbuddy-io/buildbuddy), [Docker](https://github.com/buildbuddy-io/buildbuddy/blob/master/docs/on-prem.md#docker-image), and [our Helm Charts](https://github.com/buildbuddy-io/buildbuddy-helm)!\\n\\nThanks to everyone using open source, cloud-hosted, and enterprise BuildBuddy. We\'ve made lots of improvements in this release based on your feedback.\\n\\n\x3c!-- truncate --\x3e\\n\\n## New in v2.5.0\\n\\n- **The new global filter** - BuildBuddy collects lots of build information across CI and local builds. In order to make navigating these builds easier, we\'ve introduced a new global filter. The global filter allows you to filter by status and role on any page - with more options including user, repo, and branch coming soon.\\n\\n![](../static/img/blog/global_filter.png)\\n\\n- **Date picker** - To complement the new global filter, we\'ve also added a date picker. The date picker allows you to select a time range and see builds, trends, etc. for exactly the time period you\'re interested in.\\n\\n![](../static/img/blog/date_picker.png)\\n\\n- **Clickable trends** - Now that you can filter any view by date, we\'ve added a feature to the Trends page that allows you to click on a data point and be taken to a filtered view of builds from just that time period. As part of this change, the trends page now also respects your local time zone.\\n\\n![](../static/img/blog/trends.png)\\n\\n- **Branch information** - BuildBuddy now collects information about a build\'s git branch in addition to the repo and commit info already collected. This makes it even easier to navigate your builds.\\n\\n![](../static/img/blog/branch.png)\\n\\n- **Light terminal theme** - For those of you who suffer from eye strain when reading light text on dark backgrounds: we\'ve heard your feedback. We\'ve added a new light terminal theme that can be enabled in your personal settings.\\n\\n![](../static/img/blog/light_terminal.png)\\n\\n- **Improved flaky test support** - Flaky tests can destroy developer productivity. To make them easier to deal with, we\'ve added a new feature that calls out flaky tests & timeouts more explicitly. We\'ve also improved the behavior of our RBE to reduce flakes due to timeouts when caused by external factors like Docker image pulls.\\n\\n![](../static/img/blog/flaky_test.png)\\n\\n- **Remote executions tab** - We\'ve had a hidden feature for a while that allowed you to click on the `Remote execution on` label to see an overview of remotely executed actions for RBE builds. We\'ve now promoted this feature to its own `Executions` tab. With this change come new features like search and filtering.\\n\\n![](../static/img/blog/executions_tab.png)\\n\\n- **Action input & output files** - When clicking on an individual remotely executed actions, we now have a new file viewer that allows you to navigate the input files of the action. You can click on any of these files (as well as any output files the action has) to download them from the remote cache.\\n\\n![](../static/img/blog/file_tree.png)\\n\\n- **Action timing** - The timing tab gives you a breakdown of execution timing from Bazel\'s point of view, but there\'s another story to tell from the remote executor\'s point of view. Action pages now show a visual breakdown of time spent in queue, downloading inputs, executing, and uploading outputs for each remotely executed action.\\n\\n![](../static/img/blog/action_timeline.png)\\n\\n- **Revamped settings page** - We\'ve revamped the settings page to make it easier to manage your BuildBuddy account.\\n\\n![](../static/img/blog/settings.png)\\n\\n- **And much much more** - Every release comes packed with so many new features, performance improvements and bug fixes that we can\'t get to them all. Here are some more highlights:\\n  - Support for serving static files from a CDN\\n  - Support for MinIO as a storage backend\\n  - Buildkite links now link to the specific Buildkite job that spawned the invocation\\n  - Support for distributed tracing backends like Jaeger, Google Cloud Trace, and others\\n\\nThat\'s it for this release. Stay tuned for more updates coming soon!\\n\\nAs always, we love your feedback - join our [Slack channel](https://community.buildbuddy.io) or email us at [hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts."},{"id":"meet-buildbuddy-workflows","metadata":{"permalink":"/blog/meet-buildbuddy-workflows","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/meet-buildbuddy-workflows.md","source":"@site/blog/meet-buildbuddy-workflows.md","title":"Meet BuildBuddy Workflows","description":"In today\'s BuildBuddy v2.3 release, which is now live on BuildBuddy Cloud, we\'re launching BuildBuddy Workflows. BuildBuddy Workflows is a Continuous Integration (CI) solution for Bazel repositories hosted on GitHub (with support for other providers coming soon).","date":"2021-06-30T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"}],"readingTime":5.04,"hasTruncateMarker":true,"authors":[{"name":"Brandon Duffany","title":"Engineer @ BuildBuddy","url":"https://www.linkedin.com/in/brandon-duffany-39b7217a","imageURL":"https://avatars.githubusercontent.com/u/2414826?v=4","key":"brandon","page":null}],"frontMatter":{"slug":"meet-buildbuddy-workflows","title":"Meet BuildBuddy Workflows","authors":"brandon","date":"2021-06-30:12:00:00","image":"/img/workflows.png","tags":["product"]},"unlisted":false,"prevItem":{"title":"BuildBuddy v2.5.0 Release Notes","permalink":"/blog/buildbuddy-v2-5-0-release-notes"},"nextItem":{"title":"Introducing BuildBuddy v2","permalink":"/blog/introducing-buildbuddy-v2"}},"content":"In today\'s [BuildBuddy v2.3 release](https://github.com/buildbuddy-io/buildbuddy/releases/tag/v2.3.0), which is now live on BuildBuddy Cloud, we\'re launching **BuildBuddy Workflows**. BuildBuddy Workflows is a Continuous Integration (CI) solution for Bazel repositories hosted on GitHub (with support for other providers coming soon).\\n\\nLike other CI solutions, Workflows give you the confidence that your code\\nbuilds successfully and passes all tests before you merge pull requests or\\ndeploy a new release.\\n\\nBut because BuildBuddy Workflows were built for Bazel repos and tightly\\nintegrated with BuildBuddy RBE and Remote Caching, they are **_really fast_**.\\n\\n\x3c!-- truncate --\x3e\\n\\n# Why a Bazel-focused CI solution?\\n\\nTraditional [CI systems](https://en.wikipedia.org/wiki/Continuous_integration), like Jenkins, Travis, CircleCI, and BuildKite, are built around the concept of a pipeline. Pipelines allow you to specify a list of build/test steps to run for each commit or pull request to your repo. Pipelines are great because you can run many in parallel across multiple machines. Unfortunately, there are often dependencies between these pipelines, for example a build step that must be completed before a test step can begin.\\n\\nSome tools, like [GitLab Pipelines](https://docs.gitlab.com/ee/ci/pipelines/), attempt to solve this problem by allowing you to specify dependencies between pipelines. This approach is better, but forces you to manually maintain the relationships between pipelines in a pile of YAML configuration files. As the number of dependencies grow, any sufficiently complex CI system [starts to resemble a build system](https://gregoryszorc.com/blog/2021/04/07/modern-ci-is-too-complex-and-misdirected/).\\n\\nNone of these pipeline-based approaches are well suited for Bazel\'s approach to dependency management and remote build execution, which involves generating a [Directed Acyclic Graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph) of all build and test actions. Bazel\'s approach allows for optimal parallelization and caching of these actions. It also enables rebuilding and retesting only affected targets, saving both engineering time and compute resources.\\n\\n## How fast are BuildBuddy Workflows?\\n\\nWe\'ve used BuildBuddy Workflows on our own repos for the past few\\nmonths, comparing them side-by-side with our existing CI solution built on GitHub Actions with BuildBuddy RBE and Remote Caching enabled.\\n\\nBy leveraging warm, hosted, Bazel processes, as well as BuildBuddy\'s\\nremote caching and execution, Workflows dramatically sped up our CI runs.\\nCompared to our previous solution (which used BuildBuddy RBE and Remote Caching on GitHub Runners), we reduced the median duration by nearly **8X** &mdash; with most CI runs completing in just a few seconds.\\n\\nThis overlapping histogram chart shows the complete picture. Note that\\nthe majority of BuildBuddy workflow runs took 30 seconds or less, while\\nnearly all runs on GitHub Actions took at least 2 minutes and 15 seconds:\\n\\n![overlapping histogram comparing BuildBuddy and GitHub actions](../static/img/blog/workflows.png)\\n\\n## How did we make BuildBuddy Workflows so fast?\\n\\nIn addition to convenience and security, one of our main goals for Workflows\\nwas to maximize performance, even for very large source repositories.\\n\\nWe did this in two main ways:\\n\\n1. Ensuring a **fast network connection between Bazel and BuildBuddy\'s RBE & caching servers**.\\n2. Running workflows against **hosted, warm, Bazel instances**.\\n\\n### Fast connection to BuildBuddy RBE\\n\\nIn our experience, network latency is often the biggest bottleneck in many Bazel Remote Build Execution and Remote Caching setups.\\n\\nThe solution here was simple: run Workflows on executors in the same datacenters where BuildBuddy RBE and Cache nodes are deployed.\\n\\nWith GitHub actions or other CI solutions, the network connection might\\nbe fast (particularly after the recent network optimizations we made in\\n[BuildBuddy v2](/blog/introducing-buildbuddy-v2)) &mdash; but not nearly as fast\\nas having workflow runners on the same local network as BuildBuddy\\nitself.\\n\\n### Hosted, Warm, Bazel instances\\n\\nOnce you have a sufficiently fast RBE and Remote Caching setup, and have removed network bottlenecks &mdash; the CI bottleneck often becomes Bazel\'s [analysis phase](https://docs.bazel.build/versions/main/glossary.html#analysis-phase).\\n\\nBy re-using warm Bazel processes when possible, we\'re able to re-use Bazel\'s analysis cache across CI runs of the same repo. This can save several minutes per build, depending on the size of your repository and the number of external dependencies being pulled in.\\n\\nThis is similar to how [Google\'s Build Dequeuing Service](https://dl.acm.org/doi/pdf/10.1145/3395363.3397371) performs workspace selection:\\n\\n> A well-chosen workspace can increase the build speed by an\\n> order of magnitude by reusing the various cached results from the\\n> previous execution. [...] We have observed that builds that execute the same targets as a previous\\n> build are effectively no-ops using this technique\\n\\n## How do I use BuildBuddy Workflows?\\n\\nBuildBuddy Workflows are launching today, in Beta, for all GitHub users. You can get started with BuildBuddy Workflows by checking out our [setup guide](https://docs.buildbuddy.io/docs/workflows-setup/).\\nIf you\'ve already linked your GitHub account to BuildBuddy, it\'ll only take\\nabout 30 seconds to enable Workflows for your repo &mdash; just select a repo\\nto link, and we\'ll take care of the rest!\\n\\n## Other changes in BuildBuddy v2.3\\n\\nWhile the main focus of BuildBuddy v2.3 has been on launching BuildBuddy Workflows, the release also contains several other features, in addition to lots of bug fixes and performance improvements.\\n\\n### Dependency graph visualization\\n\\nWe added dependency graph visualizations for `bazel query` commands that use the `--output graph` parameter. This visualization is zoom-able and pan-able, and can render graphs with thousands of edges.\\n\\nHere\'s an example of a command you can run to generate a graph:\\n\\n```shell\\nbazel query \'//...\' --output graph --bes_backend=remote.buildbuddy.io --bes_results_url=https://app.buildbuddy.io/invocation/\\n```\\n\\nAnd the resulting output:\\n\\n![Bazel query dependency graph visualization](../static/img/blog/query_graph.png)\\n\\n### Clickable RBE Actions\\n\\nFor actions executed with BuildBuddy Remote Build Execution, you can now click on individual actions to get the full set of command arguments, environment variables, execution metadata, output files, and more:\\n\\n![RBE actions view](../static/img/blog/clickable_rbe_actions.png)\\n\\nThat\'s it for this release! As always, message us on [Slack](https://buildbuddy.slack.com) or\\n[file an issue](https://github.com/buildbuddy-io/buildbuddy/issues/new)\\nif you need help, run into any issues, or have feature requests!"},{"id":"introducing-buildbuddy-v2","metadata":{"permalink":"/blog/introducing-buildbuddy-v2","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/introducing-buildbuddy-v2.md","source":"@site/blog/introducing-buildbuddy-v2.md","title":"Introducing BuildBuddy v2","description":"Our mission at BuildBuddy is to make developers more productive. When we released the first version of BuildBuddy a little over a year ago, we were blown away by the demand for tools and techniques for speeding up common developer workflows like building, testing, and debugging code. We\'ve been working hard ever since - using our own tools to build the next generation of developer tooling for all.","date":"2021-05-27T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"release-notes","permalink":"/blog/tags/release-notes"}],"readingTime":4.86,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"introducing-buildbuddy-v2","title":"Introducing BuildBuddy v2","authors":"siggi","date":"2021-05-27:12:00:00","image":"/img/tensorflow.png","tags":["product","release-notes"]},"unlisted":false,"prevItem":{"title":"Meet BuildBuddy Workflows","permalink":"/blog/meet-buildbuddy-workflows"},"nextItem":{"title":"BuildBuddy Achieves SOC 2 Certification","permalink":"/blog/buildbuddy-achieves-soc-2-certification"}},"content":"Our mission at BuildBuddy is to make developers more productive. When we released the [first version](https://blog.buildbuddy.io/blog/meet-buildbuddy) of BuildBuddy a little over a year ago, we were blown away by the demand for tools and techniques for speeding up common developer workflows like building, testing, and debugging code. We\'ve been working hard ever since - using our own tools to build the next generation of developer tooling for all.\\n\\nToday we\'re excited to announce v2 of BuildBuddy! We\'ve completely revamped our caching and remote build execution infrastructure to give our users and customers the one thing they care about above all else: **speed**.\\n\\n\x3c!-- truncate --\x3e\\n\\n![](../static/img/blog/tensorflow.svg)\\n\\nWhen optimizing the performance of a remote build execution system, there are 3 critical bottlenecks: Caching, Sandboxing, and Execution. We\'ve made order of magnitude improvements in each of these areas, bringing clean, uncached build times for [TensorFlow](https://github.com/tensorflow/tensorflow) (7,000+ actions) on BuildBuddy RBE down from 28 minutes last August to just **3.47 minutes** with BuildBuddy v2. This build takes over **4 hours** (250 min) on a 3.3GHz i7 Macbook Pro.\\n\\n## Caching\\n\\nThe biggest remote build execution bottleneck is right in the name: **remote**. This means we have to ship source files, tools, and other inputs needed to execute the build from the host machine to a remote cluster of build servers over the network.\\n\\nIn BuildBuddy v2, some of the many improvements in this area include:\\n\\n- Completely revamped caching infrastructure for microsecond read/write latencies\\n- Improved batch performance for quickly moving 100k+ small files\\n- Load balancer optimizations to improve large file throughput\\n\\nFor a more in-depth look at optimizing for high throughput and low latency, we highly recommend [this great article from the Dropbox Engineering team](https://dropbox.tech/infrastructure/optimizing-web-servers-for-high-throughput-and-low-latency) which was incredibly helpful in identifying and fixing bottlenecks.\\n\\nAll of these improvements, when taken together, have driven a colossal improvement in both upload and download throughput across file sizes. We have more work to do in this area, but we\'re really pleased with the results in this release.\\n\\n![](../static/img/blog/upload_throughput.svg)\\n\\n## Sandboxing\\n\\nOnce we\'ve got all of the inputs we need to execute an action on a remote executor, the next step is to set up the execution root. One of Bazel\'s core features is the ability to perform [hermetic builds](https://georgi.hristozov.net/2020/11/01/the-power-of-hermetic-builds). In order to achieve this, we spin up a clean Docker container for each action to execute in. This is similar to Bazel\'s `docker` [spawn strategy](https://docs.bazel.build/versions/master/remote-execution-sandbox.html).\\n\\nWhile this helps ensure that remotely executed actions are hermetic, there is often a trade-off between hermeticity and performance. You can make this trade-off locally using Bazel\'s different spawn strategies: `sandboxed`, `local`, and `worker`.\\n\\nWhen using remote build execution, you typically don\'t have the ability to make these trade-offs. That\'s why we\'ve introduced 3 new features that give users back some of that control. By default, actions will still be executed in clean Docker images - but if you specify one of the following execution properties, you can alter that behavior:\\n\\n- `recycle-runner`: actions will still be executed in a clean execution root - but the executor will re-use an existing docker image from a pool of re-usable containers. This is similar in behavior to Bazel\'s `sandboxed` execution strategy.\\n- `preserve-workspace`: actions will re-use an execution root from a pool of re-usable workspaces and only download inputs that have been added or changed since the previously executed action, while cleaning up any outputs. This is similar in behavior to Bazel\'s `local` execution strategy.\\n- `persistent-workers`: the executor will use the [persistent-worker](https://docs.bazel.build/versions/master/persistent-workers.html) protocol to communicate with actions that support them. This can help speed up certain build actions that support persist workers (like Java, Scala, Typescript, and others) by 2-4x. This execution property can be applied at the [target level](https://docs.buildbuddy.io/docs/rbe-pools#target-level) for actions that support them. We\'ve also added support for the proposed `persistentWorkerKey` execution property which removes the need for target-level specification. This is similar in behavior to Bazel\'s `worker` execution strategy.\\n\\n## Execution\\n\\nNow that we\'ve got our inputs on the executor, and our execution root set up, our final step is the actual execution.\\n\\nWe\'ve made significant improvements here as well:\\n\\n- We\'ve upgraded our default executor cluster to run on compute-optimized Intel Cascade Lake machines with up to 3.8 GHz sustained all-core turbo.\\n- Our Mac executors now run on bare-metal Mac minis, which show huge improvements over the previous [Orka](https://www.macstadium.com/orka) machines we used for I/O intensive workloads.\\n- Our new caching and auto-scaling infrastructure supports scaling up and down from just a few executors to hundreds of machines depending on load while still supporting the `--remote_download_minimal` flag.\\n- The groundwork has been laid for what we call **Bring Your Own Executors**. This will allow users to take advantage of BuildBuddy\'s UI and global caching infrastructure while running their own executor pools.\\n\\n![](../static/img/blog/autoscaling.png)\\n\\n## Other improvements\\n\\nWhile our focus for v2 has been on RBE performance, we\'ve made plenty of other improvements in this release:\\n\\n- Improved query performance for large customers with 1 million+ invocations\\n- Added hinted handoff for write failures\\n- Fetches are now displayed in the results UI\\n- Timing tab improvements\\n- Right click to copy downloadable artifact URLs\\n- Lots and lots of reliability improvements\\n- Default Xcode version configuration options\\n\\nWe have several big announcements coming in the next few weeks, so stay tuned for more!\\n\\nAs always, we love your feedback - join our [Slack channel](https://community.buildbuddy.io) or email us at [hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts.\\n\\nHappy Building!"},{"id":"buildbuddy-achieves-soc-2-certification","metadata":{"permalink":"/blog/buildbuddy-achieves-soc-2-certification","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/buildBuddy-achieves-soc-2-certification.md","source":"@site/blog/buildBuddy-achieves-soc-2-certification.md","title":"BuildBuddy Achieves SOC 2 Certification","description":"Our mission at BuildBuddy is to help developers be more productive. It\'s our highest priority to make sure that your data is safe so that you can focus on what matters: building your product.","date":"2021-04-28T12:00:00.000Z","tags":[{"inline":true,"label":"company","permalink":"/blog/tags/company"},{"inline":true,"label":"security","permalink":"/blog/tags/security"}],"readingTime":0.99,"hasTruncateMarker":true,"authors":[{"name":"George Li","title":"Head of Sales @ BuildBuddy","url":"https://www.linkedin.com/in/gli/","imageURL":"https://avatars.githubusercontent.com/u/27219306?v=4","key":"george","page":null}],"frontMatter":{"slug":"buildbuddy-achieves-soc-2-certification","title":"BuildBuddy Achieves SOC 2 Certification","authors":"george","date":"2021-04-28:12:00:00","image":"/img/soc2.jpg","tags":["company","security"]},"unlisted":false,"prevItem":{"title":"Introducing BuildBuddy v2","permalink":"/blog/introducing-buildbuddy-v2"},"nextItem":{"title":"BuildBuddy v1.8.0 Release Notes","permalink":"/blog/buildbuddy-v1-8-0-release-notes"}},"content":"Our mission at BuildBuddy is to help developers be more productive. It\'s our highest priority to make sure that your data is safe so that you can focus on what matters: building your product.\\n\\nToday, we\u2019re excited to share that BuildBuddy has achieved SOC 2 certification.\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/soc2.jpg\\" />\\n</p>\\n\\nThe audit was conducted by [The Cadence Group](https://thecadencegroup.com/), compliance specialists who have performed SOC reporting examinations for some of the largest software companies in the world. Our certification means that we adhere to the highest standards of security, processing integrity, and risk management.\\n\\nOur SOC 2 Report outlines how we encrypt our customer\u2019s data, control access to our systems, scan for vulnerabilities, respond to incidents, and more.\\n\\nIn addition to completing our SOC 2 audit, we\'ve partnered with [Vanta](https://www.vanta.com/products/soc-2) to continuously monitor our SOC 2 compliance and ensure that the security practices we\'ve put in place are being followed.\\n\\nWe\u2019re happy to discuss our security policies in more detail or send over a copy of our SOC 2 report. Please feel free to reach out to us at [security@buildbuddy.io](mailto:security@buildbuddy.io) for more information!\\n\\n\x3c!-- truncate --\x3e"},{"id":"buildbuddy-v1-8-0-release-notes","metadata":{"permalink":"/blog/buildbuddy-v1-8-0-release-notes","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/buildbuddy-v1-8-0-release-notes.md","source":"@site/blog/buildbuddy-v1-8-0-release-notes.md","title":"BuildBuddy v1.8.0 Release Notes","description":"We\'re excited to share that v1.8.0 of BuildBuddy is live on Cloud Hosted BuildBuddy, Enterprise, and Open Source via GitHub, Docker, and our Helm Charts!","date":"2021-03-18T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"release-notes","permalink":"/blog/tags/release-notes"},{"inline":true,"label":"team","permalink":"/blog/tags/team"}],"readingTime":3.35,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"buildbuddy-v1-8-0-release-notes","title":"BuildBuddy v1.8.0 Release Notes","authors":"siggi","date":"2021-03-18:12:00:00","tags":["product","release-notes","team"]},"unlisted":false,"prevItem":{"title":"BuildBuddy Achieves SOC 2 Certification","permalink":"/blog/buildbuddy-achieves-soc-2-certification"},"nextItem":{"title":"BuildBuddy v1.5.0 Release Notes","permalink":"/blog/buildbuddy-v1-5-0-release-notes"}},"content":"We\'re excited to share that v1.8.0 of BuildBuddy is live on [Cloud Hosted BuildBuddy](https://app.buildbuddy.io/), Enterprise, and Open Source via [GitHub](https://github.com/buildbuddy-io/buildbuddy), [Docker](https://github.com/buildbuddy-io/buildbuddy/blob/master/docs/on-prem.md#docker-image), and [our Helm Charts](https://github.com/buildbuddy-io/buildbuddy-helm)!\\n\\nThanks to everyone using open source, cloud-hosted, and enterprise BuildBuddy. We\'ve made lots of improvements in this release based on your feedback.\\n\\n**A special thank you to our new open-source contributor:**\\n\\n- [**Ashley Davies**](https://github.com/ashleydavies) who contributed several pull requests to our [Helm charts](https://github.com/buildbuddy-io/buildbuddy-helm/) in order to make them easier to use in clusters that already have an Nginx controller deployed.\\n\\n**And a warm welcome to our three new team members!**\\n\\n- [**Pari Parajuli**](https://www.linkedin.com/in/pari-parajuli/) who joins our engineering team as an intern who\'s currently studying at University of California, Berkeley.\\n- [**Vadim Berezniker**](https://www.linkedin.com/in/vadimberezniker/) who joins our engineering team after 7 years at Google on the Google Cloud team.\\n- [**Zoey Greer**](https://www.linkedin.com/in/zoey-greer/) who joins us as a software engineer from the Google Search team.\\n\\nWe\'re excited to continue growing BuildBuddy and fulfill our mission of making developers more productive!\\n\\nOur focus for this release was on reliability, performance, improved documentation, and making BuildBuddy easier to release and monitor.\\n\\n\x3c!-- truncate --\x3e\\n\\n## New in v1.8.0\\n\\n- **Read-only API keys** - when using Bazel remote caching, teams often need to configure which machines have write access to the cache. While Bazel has some flags to control cache writes, using these can be error prone and insecure. BuildBuddy now makes this easy by introducing the ability to create both read-only and read+write api keys on your organization settings page. You can create as many API keys (and certificates) as you\'d like and distribute them to your CI machines, workstations, and other endpoints.\\n\\n![](../static/img/blog/read-only.png)\\n\\n- **Improved docs** - we\'ve completely revamped [our documentation](https://docs.buildbuddy.io/) and added support for tables of contents, syntax highlighting, better navigation, dark mode (!!), interactive widgets, and an \\"Edit this page\\" button that links directly to the correct file in our [GitHub docs directory](https://github.com/buildbuddy-io/buildbuddy/tree/master/docs) for submitting pull requests. With these great new features, we\'ll be ramping up documentation on both new and existing BuildBuddy features to make the lives of BuildBuddy users easier.\\n\\n![](../static/img/blog/docsv2.png)\\n\\n- **Testing improvements** - we\'ve invested heavily in our testing infrastructure, adding new integration tests and test fixtures that make testing BuildBuddy\'s interactions with Bazel easier. This will lead to more stable releases and faster iteration cycles going forward.\\n\\n- **Remote execution improvements** - we\'ve made more speed and reliability improvements to our remote build execution platform, including faster cache hit checking, faster auth checks, and better support for iOS builds.\\n\\n- **Buildkite integration -** invocations that are kicked off from Buildkite now link back to the Buildkite job that triggered them.\\n\\n![](../static/img/blog/buildkite.png)\\n\\n- **Grafana** - our [Helm charts](https://github.com/buildbuddy-io/buildbuddy-helm) make deploying BuildBuddy to Kubernetess cluster a breeze. One thing that\'s been tricky for many users has been accessing the Prometheus data that BuildBuddy exports in an easily digestible format. To fix this, we made it easy to [deploy Grafana and Prometheus](https://github.com/buildbuddy-io/buildbuddy-helm/tree/master/charts/buildbuddy-enterprise#example-with-prometheus--grafana) via our Helm charts with just a couple lines of configuration. It comes out of the box with a default dashboard that shows popular BuildBuddy metrics and can be easily extended to add more graphs.\\n\\n![](../static/img/blog/grafana.png)\\n\\n- **More to come** - we\'ve been laying the groundwork for two major projects that will go live in the coming weeks to make building and testing your Bazel projects even faster.\\n\\nThat\'s it for this release. Stay tuned for more updates coming soon!\\n\\nAs always, we love your feedback - join our [Slack channel](https://community.buildbuddy.io) or email us at [hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts."},{"id":"buildbuddy-v1-5-0-release-notes","metadata":{"permalink":"/blog/buildbuddy-v1-5-0-release-notes","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/buildbuddy-v1-5-0-release-notes.md","source":"@site/blog/buildbuddy-v1-5-0-release-notes.md","title":"BuildBuddy v1.5.0 Release Notes","description":"We\'re excited to share that v1.5.0 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open-source via Github, Docker, and our Helm Charts!","date":"2021-01-08T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"release-notes","permalink":"/blog/tags/release-notes"}],"readingTime":3.01,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"buildbuddy-v1-5-0-release-notes","title":"BuildBuddy v1.5.0 Release Notes","authors":"siggi","date":"2021-01-08:12:00:00","tags":["product","release-notes"]},"unlisted":false,"prevItem":{"title":"BuildBuddy v1.8.0 Release Notes","permalink":"/blog/buildbuddy-v1-8-0-release-notes"},"nextItem":{"title":"BuildBuddy v1.4.0 Release Notes","permalink":"/blog/buildbuddy-v1-4-0-release-notes"}},"content":"We\'re excited to share that v1.5.0 of BuildBuddy is live on both [Cloud Hosted BuildBuddy](https://app.buildbuddy.io/) and open-source via [Github](https://github.com/buildbuddy-io/buildbuddy), [Docker](https://github.com/buildbuddy-io/buildbuddy/blob/master/docs/on-prem.md#docker-image), and [our Helm Charts](https://github.com/buildbuddy-io/buildbuddy-helm)!\\n\\nThanks to everyone using open source, cloud-hosted, and enterprise BuildBuddy. We\'ve made lots of improvements in this release based on your feedback.\\n\\nA special thank you to our new open-source contributor:\\n\\n- [**Corbin McNeely-Smith**](https://github.com/restingbull) who contributed to making our auth flow more resilient to error cases, and made our health-check handlers more flexible to support different load-balancers.\\n\\nOur focus for this release was on giving users more visibility into test flakiness, monitoring & scaling improvements, and security hardening.\\n\\n\x3c!-- truncate --\x3e\\n\\n## New in v1.5.0\\n\\n- **Test flakiness dashboard** - one of the feature requests we get most frequently from BuildBuddy users is the ability to collect target-level data and analyze it across invocations. Today we\'re taking the first step in the direction with our new test dashboard. The test dashboard allows you to monitor per-target test statuses by commit - so you can quickly identify and fix flaky test targets that slow down developer velocity. It also has a timing view that gives you a heat-map to quickly identify slow targets. This is just the first step we\'re taking in exposing more target-level data and are excited to build additional features based on your feedback!\\n\\n![](../static/img/blog/test-grid.png)\\n\\n- **Prometheus metrics** - we\'ve added a ton of new Prometheus metrics to BuildBuddy that allow open-source and Enterprise users to monitor not only BuildBuddy\'s performance, but the overall health of their developer productivity efforts. This allows you to hook into existing monitoring and alerting tools like Grafana to analyze and get notified when your developers are experiencing issues. Metrics include build duration, cache hit & miss rates, remote execution queue length, and more. For a full list of the new metrics we now expose, see our [Prometheus metric documentation](https://www.buildbuddy.io/docs/prometheus-metrics). Interested in some metrics that aren\'t on this list? Let us know!\\n\\n![](../static/img/blog/prometheus.png)\\n\\n- **Auto-scaling** - with the addition of our new Prometheus metrics, we\'ve also made improvements to the autoscaling capabilities of BuildBuddy executors. Now in addition to scaling off of raw compute metrics like CPU\xa0and RAM, BuildBuddy executors can also be configured to scale based on executor queue length and other custom metrics. This allows you to achieve better performance under heavy load while also managing your compute resources more efficiently and cost-effectively.\\n\\n![](../static/img/blog/autoscaling-prometheus.png)\\n\\n- **Security hardening** - as part of our SOC 2 compliance controls, BuildBuddy undergoes regularly scheduled penetration tests by paid security professionals. This release contains fixes for all three non-critical findings from our January 2021 pen-test.\\n\\n- **Memory leak fixes** - we found and fixed 2 memory leaks in our BuildBuddy app (using our new Prometheus metrics!) that would occasionally cause BuildBuddy app servers to restart due to memory pressure.\\n\\n- **Mac executor bug fix** - we fixed a tricky bug caused by quirks in the way macOS handles hard-linking that significantly improves the reliability of our Mac RBE executors.\\n\\n- **More bug fixes** - there are lots of other bug fixes in this release including improved deadline and timeout handling, executor task scheduling improvements, and more!\\n\\nThat\'s it for this release. Stay tuned for more updates coming soon!\\n\\nAs always, we love your feedback - join our [Slack channel](https://community.buildbuddy.io) or email us at [hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts."},{"id":"buildbuddy-v1-4-0-release-notes","metadata":{"permalink":"/blog/buildbuddy-v1-4-0-release-notes","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/buildbuddy-v1-4-0-release-notes.md","source":"@site/blog/buildbuddy-v1-4-0-release-notes.md","title":"BuildBuddy v1.4.0 Release Notes","description":"We\'re excited to share that v1.4.0 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open-source via Github and Docker!","date":"2020-11-12T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"release-notes","permalink":"/blog/tags/release-notes"}],"readingTime":4,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"buildbuddy-v1-4-0-release-notes","title":"BuildBuddy v1.4.0 Release Notes","authors":"siggi","date":"2020-11-12:12:00:00","tags":["product","release-notes"]},"unlisted":false,"prevItem":{"title":"BuildBuddy v1.5.0 Release Notes","permalink":"/blog/buildbuddy-v1-5-0-release-notes"},"nextItem":{"title":"Welcoming George Li, Head of Sales","permalink":"/blog/welcoming-george-li-head-of-sales"}},"content":"We\'re excited to share that v1.4.0 of BuildBuddy is live on both [Cloud Hosted BuildBuddy](https://app.buildbuddy.io/) and open-source via [Github](https://github.com/buildbuddy-io/buildbuddy) and [Docker](https://github.com/buildbuddy-io/buildbuddy/blob/master/docs/on-prem.md#docker-image)!\\n\\nThanks to everyone using open source, cloud-hosted, and enterprise BuildBuddy. We\'ve made lots of improvements in this release based on your feedback.\\n\\nA special thank you to our new contributors who we\'ll soon be sending BuildBuddy t-shirts and holographic BuildBuddy stickers:\\n\\n- [**Daniel Purkh\xfas**](https://github.com/purkhusid) who enabled environment variable expansion in BuildBuddy config files & more\\n\\n- [**Joshua Katz**](https://github.com/gravypod) who added support for auto-populating build metadata from GitLab CI invocations\\n\\nOur focus for this release was on giving users new tools to share, compare, analyze, and manage BuildBuddy invocations - as well as major performance and reliability improvements to our remote build execution service.\\n\\nWe\'re also excited to share that over the coming weeks and months, we\'ll be open sourcing much more of BuildBuddy - including our remote build execution platform. At BuildBuddy we\'re firmly committed to open source and believe that a transparent and open model is the only way to build truly great developer infrastructure for all.\\n\\n\x3c!-- truncate --\x3e\\n\\n## New to Open Source BuildBuddy\\n\\n- **Invocation sharing & visibility controls** - while you\'ve always been able to share BuildBuddy links with members of your organization, it\'s been difficult to share invocations more broadly (in GitHub issues or on StackOverflow). Now that working from home is the new norm, sharing links to your build logs or invocations details and artifacts has become more important than ever. To support this, we\'ve added a **Share** button on the invocation page that allows you to control visibility of your invocations (this can be disabled at the organization level). We\'ve also disabled the expiration of invocations and build logs for everyone on BuildBuddy Cloud - so you can share BuildBuddy links with confidence.\\n\\n![](../static/img/blog/share.png)\\n\\n- **Invocation diffing** - we\'ve all run into the problem where a build works on your machine, but not on your coworker\'s machine. To support debugging these kinds of issues, we\'ve added the ability to diff builds straight from the invocations page. This allows you to quickly find any flags or invocation details that may have changed between builds. Stay tuned for more diffing features here, including cache hit debugging and more.\\n\\n![](../static/img/blog/compare.png)\\n\\n- **Suggested fixes** - as software engineers, we often find ourselves bumping into errors and issues that many others have bumped into before. A tool like BuildBuddy provides the perfect way to quickly surface these suggested fixes to developers quickly, without even so much as a Google search. We\'ve started by adding suggestions for common issues that BuildBuddy users run into, but stay tuned for the ability to add your own custom fix suggestions and share them with your organization and beyond!\\n\\n![](../static/img/blog/suggested-fixes.png)\\n\\n- **Easy invocation deletion** - you can now delete your BuildBuddy invocations directly from the invocation page \\"three dot\\" menu in case you want to share an invocation and delete it when you\'re done.\\n\\n![](../static/img/blog/deletion.png)\\n\\n## New to Cloud & Enterprise BuildBuddy\\n\\n- **Cache stats & filters** - our trends page now allows you to see trends in caching performance broken down by the Action Cache (AC) and the Content Addressable Store (CAS). The trends page is now also filterable by CI vs non-CI builds, and by user, repo, commit, or host.\\n\\n![](../static/img/blog/filtered-trends.png)\\n\\n- **Simplified API key header auth** - previously if you wanted to authenticate your BuildBuddy invocations using an API key (instead of using certificated based mTLS), you had to place your API key in each BuildBuddy flag that connected to BuildBuddy with `YOUR_API_KEY@cloud.buildbuddy.io`. This has been greatly simplified in this release with the support for the `--remote_header` flag, which allows you to more easily separate auth credentials into a separate `.bazelrc` file.\\n\\n![](../static/img/blog/api-header.png)\\n\\n- **Organization creation and invitations** - you can now create organizations and send invitation links to others.\\n\\n![](../static/img/blog/org-invites.png)\\n\\n- **Remote build execution performance and reliability improvements** - we\'ve made a whole host of changes to our remote build execution executors and schedulers to make them more fault tolerant, easier to scale, and faster. We\'ve also exposed support for executor pools on BuildBuddy Enterprise which allow you to route remote execution traffic based on OS, CPU architecture, GPU requirements, CPU/memory requirements, and more. Routing can be configured at both the platform and individual target level. Finally, we\'ve added improved documentation to help get up and running with RBE more quickly.\\n\\nThat\'s it for this release. Stay tuned for more updates coming soon!\\n\\nAs always, we love your feedback - join our [Slack channel](https://community.buildbuddy.io) or email us at [hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts."},{"id":"welcoming-george-li-head-of-sales","metadata":{"permalink":"/blog/welcoming-george-li-head-of-sales","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/welcoming-george-li-head-of-sales.md","source":"@site/blog/welcoming-george-li-head-of-sales.md","title":"Welcoming George Li, Head of Sales","description":"To fulfill our mission of bringing the world\'s best developer tools to every company, we\'re building a team that\'s ready to work with the world\'s best enterprises. That\'s why we\'re excited to share today that George Li is joining BuildBuddy to lead our enterprise sales efforts as our Head of Sales.","date":"2020-11-12T12:00:00.000Z","tags":[{"inline":true,"label":"company","permalink":"/blog/tags/company"},{"inline":true,"label":"team","permalink":"/blog/tags/team"}],"readingTime":0.62,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"welcoming-george-li-head-of-sales","title":"Welcoming George Li, Head of Sales","authors":"siggi","date":"2020-11-12:12:00:00","tags":["company","team"]},"unlisted":false,"prevItem":{"title":"BuildBuddy v1.4.0 Release Notes","permalink":"/blog/buildbuddy-v1-4-0-release-notes"},"nextItem":{"title":"BuildBuddy v1.3.0 Release Notes","permalink":"/blog/buildbuddy-v1-3-0-release-notes"}},"content":"To fulfill our mission of bringing the world\'s best developer tools to every company, we\'re building a team that\'s ready to work with the world\'s best enterprises. That\'s why we\'re excited to share today that [**George Li**](https://www.linkedin.com/in/gli/) is joining BuildBuddy to lead our enterprise sales efforts as our Head of Sales.\\n\\nGeorge joins us from Looker where he served as Head of APAC Sales Engineering. He joined Google Cloud through their [acquisition](https://techcrunch.com/2020/02/13/google-closes-2-6b-looker-acquisition/) of Looker in February, having helped the company grow to a $2.6B valuation.\\n\\n![](../static/img/blog/welcome-george.png)\\n\\nWe look forward to working alongside George to build the future of developer tools.\\n\\nWelcome to BuildBuddy, George!\\n\\n\x3c!-- truncate --\x3e"},{"id":"buildbuddy-v1-3-0-release-notes","metadata":{"permalink":"/blog/buildbuddy-v1-3-0-release-notes","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/buildbuddy-v1-3-0-release-notes.md","source":"@site/blog/buildbuddy-v1-3-0-release-notes.md","title":"BuildBuddy v1.3.0 Release Notes","description":"We\'re excited to share that v1.3.0 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open-source via Github and Docker!","date":"2020-09-30T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"release-notes","permalink":"/blog/tags/release-notes"}],"readingTime":3.31,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"buildbuddy-v1-3-0-release-notes","title":"BuildBuddy v1.3.0 Release Notes","authors":"siggi","date":"2020-09-30:12:00:00","tags":["product","release-notes"]},"unlisted":false,"prevItem":{"title":"Welcoming George Li, Head of Sales","permalink":"/blog/welcoming-george-li-head-of-sales"},"nextItem":{"title":"BuildBuddy v1.2.1 Release Notes","permalink":"/blog/buildbuddy-v1-2-1-release-notes"}},"content":"We\'re excited to share that v1.3.0 of BuildBuddy is live on both[ Cloud Hosted BuildBuddy](https://app.buildbuddy.io/) and open-source via[ Github](https://github.com/buildbuddy-io/buildbuddy) and[ Docker](https://github.com/buildbuddy-io/buildbuddy/blob/master/docs/on-prem.md#docker-image)!\\n\\nThanks to everyone using open source and cloud-hosted BuildBuddy. We\u2019ve made lots of improvements in this release based on your feedback.\\n\\nOur focus for this release was on giving users new tools to improve build performance, debug cache hits, and a completely redesigned Cloud & Enterprise experience.\\n\\n\x3c!-- truncate --\x3e\\n\\n## New to Open Source BuildBuddy\\n\\n- **Timing profile explorer **- Bazel\'s timing profile is the best way to get detailed insights into where to spend your time optimizing your build. Unfortunately, extracting useful information out of the thousands of events can be challenging without using something like Chrome\'s profiling tools. Now we\'ve built these tools right into the BuildBuddy timing tab so you can explore this info for any build. See which actions dominate your build\'s critical path or find out how much time is spent downloading outputs - now with a single click.\\n\\n![](../static/img/blog/timing-profile.png)\\n\\nDive into the timing for every action, critical path information, and more.\\n\\n- **Cache stats **- one of the feature requests we get most frequently is for more information on cache hits and misses. This data can be tricky to get a hold of because it\'s not made easily available by Bazel\'s build event protocol. That\'s why we\'ve introduced BuildBuddy\'s new cache tab. It gives you a view into cache hits, misses, and writes for every invocation that uses BuildBuddy\'s gRPC cache. It breaks these numbers down by action cache (AC) and content addressable store (CAS). BuildBuddy also tracks the volume and throughput of cache requests so you can see how much data is moving in and out of the cache - and at what speed.\\n\\n![](../static/img/blog/cache-stats.png)\\n\\nGet a view into cache performance for every invocation.\\n\\n- **Environment variable redaction controls** - when debugging cache hits, it can be useful to get a full picture of the inputs that are affecting a particular build - like the PATH environment variable. By default, BuildBuddy redacts nearly all environment variables passed into Bazel. We\'ve added controls per invocation that allow you to optionally allow environment variables of your choice to skip redaction. Information on configuring this can be found in our[ build metadata docs](https://www.buildbuddy.io/docs/guide-metadata#environment-variable-redacting).\\n\\n## New to Cloud & Enterprise BuildBuddy\\n\\n- **Redesigned navigation **- as BuildBuddy has grown from a debugging tool to a fully-featured platform to debug, analyze, monitor, and share builds across your organization, we\'ve outgrown the minimal navigation setup that has gotten us this far. In Cloud and Enterprise BuildBuddy, we\'ve replaced the top menu bar with a more fully-featured left-nav. This gives us room to add new features like Trends and provides easier access to critical pages like Setup & Docs.\\n\\n![](../static/img/blog/navigation.png)\\n\\nThe new navigation makes room for new features.\\n\\n- **Trends **- BuildBuddy has lots of information about every invocation that it collects. Now with Trends, you can follow how your builds are changing over time. Have all of the cache improvements you\'ve been working on decreased average build time over the last month? Has the addition of a new external dependency significantly increased the length of your slowest builds? Answering these questions is easy with BuildBuddy Trends.\\n\\n![](../static/img/blog/trends-v0.png)\\n\\n- **Redis Pub/Sub support **- we\'ve added support for Redis Pub/Sub to significantly improve remote build execution performance. It\'s completely optional for on-prem deployments, but in our testing it\'s improved performance for builds with lots of small actions by a factor of 2x. No change is required for Cloud users - just enjoy the faster builds!\\n\\nThat\u2019s it for this release. Stay tuned for more updates coming soon!\\n\\nAs always, we love your feedback - join our[ Slack channel](https://community.buildbuddy.io) or email us at [hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts."},{"id":"buildbuddy-v1-2-1-release-notes","metadata":{"permalink":"/blog/buildbuddy-v1-2-1-release-notes","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/buildbuddy-v1-2-1-release-notes.md","source":"@site/blog/buildbuddy-v1-2-1-release-notes.md","title":"BuildBuddy v1.2.1 Release Notes","description":"Excited to share that v1.2.1 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open source via Github and Docker!","date":"2020-09-03T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"release-notes","permalink":"/blog/tags/release-notes"},{"inline":true,"label":"team","permalink":"/blog/tags/team"}],"readingTime":5.13,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"buildbuddy-v1-2-1-release-notes","title":"BuildBuddy v1.2.1 Release Notes","authors":"siggi","date":"2020-09-03:12:00:00","tags":["product","release-notes","team"]},"unlisted":false,"prevItem":{"title":"BuildBuddy v1.3.0 Release Notes","permalink":"/blog/buildbuddy-v1-3-0-release-notes"},"nextItem":{"title":"BuildBuddy v1.1.0 Release Notes","permalink":"/blog/buildbuddy-v1-1-0-release-notes"}},"content":"Excited to share that v1.2.1 of BuildBuddy is live on both [Cloud Hosted BuildBuddy](https://app.buildbuddy.io/) and open source via [Github](https://github.com/buildbuddy-io/buildbuddy) and [Docker](https://github.com/buildbuddy-io/buildbuddy/blob/master/docs/on-prem.md#docker-image)!\\n\\nThanks to everyone that has tested open source and cloud-hosted BuildBuddy. We\'ve made lots of improvements in this release based on your feedback.\\n\\nA special welcome to our newest contributor and **team member**:\\n\\n- [Brandon Duffany](https://github.com/bduffany) - Brandon is an ex-Googler and Cornell alumn who\'s worked as a software engineer on Google Assistant and Google Ads. He\'ll start off focused on surfacing better profiling and timing information to help users track down and fix slow builds!\\n\\nOur focus for this release was on expanding access to BuildBuddy as well as improving scalability and performance.\\n\\nWe\'re also excited to announce that we\'re expanding the BuildBuddy Cloud free tier. BuildBuddy Cloud is now **free for teams of up to 3 engineers** in addition to being free for individuals open source projects of any size.\\n\\n\x3c!-- truncate --\x3e\\n\\n## New to Open Source BuildBuddy\\n\\n- **Official BuildBuddy Helm charts** - thanks to a [request](https://github.com/buildbuddy-io/buildbuddy/issues/35) from [Nathan Leung](https://github.com/nathanhleung) we\'ve created official [BuildBuddy Helm Charts](https://github.com/buildbuddy-io/buildbuddy-helm) that are available for both [Open Source](https://github.com/buildbuddy-io/buildbuddy-helm/tree/master/charts/buildbuddy) and [Enterprise](https://github.com/buildbuddy-io/buildbuddy-helm/tree/master/charts/buildbuddy-enterprise) deployments. [Helm](https://helm.sh/) enables you to deploy BuildBuddy to a Kubernetes cluster with a single command, and makes configuration a breeze. The charts can optionally take care of provisioning a MySQL instance, an Nginx ingress, and even Memcached.\\n\\n![](../static/img/blog/helm.png)\\n\\n- **Build metadata** - a frequent request from users is the ability to associate a BuildBuddy invocation with a particular git commit and repo. To support this, we\'ve added optional build metadata including repo URL, commit SHA, and CI role that can be passed up with your build. This metadata can be passed up using the `--build_metadata` flag, using a `--workspace_status_command` script, or using environment variables commonly set by CI providers like CircleCI, BuildKite, GitHub Actions, and others. More information on how to configure your metadata can be found in our [build metadata guide.](https://www.buildbuddy.io/docs/guide-metadata)\\n\\n- **GitHub commit status publishing** - now that you can configure build metadata to associate invocations with a GitHub repo and commit, we\'ve added the ability to publish commit statuses straight to GitHub when you\'ve set your metadata role to **CI**. To enable this feature, simply click **Link GitHub Account** in your BuildBuddy profile dropdown (if you\'re using self hosted BuildBuddy, you\'ll need to [create a Github OAuth app](https://www.buildbuddy.io/docs/config-github) and add it to your config.yaml file).\\n\\n![](../static/img/blog/commit-status.png)\\n\\nBuildBuddy links directly on GitHub\\n\\n- **Improved cache hit rate** - we\'ve made improvement to our Action Cache validation logic that should result in higher cache hit rates.\\n\\n- **New guides** - we\'ve added new guides to our documentation, including our [Authentication Guide](https://www.buildbuddy.io/docs/guide-auth), [Build Metadata Guide](https://www.buildbuddy.io/docs/guide-metadata), [Remote Build Execution with Github Actions Guide](https://www.buildbuddy.io/docs/rbe-github-actions), with more coming soon. We\'ve also started collecting troubleshooting documentation for common errors including [RBE\xa0Failures](https://www.buildbuddy.io/docs/troubleshooting-rbe), and [Slow Uploads](https://www.buildbuddy.io/docs/troubleshooting-slow-upload). Contributions [welcome](https://github.com/buildbuddy-io/buildbuddy/tree/master/docs)!\\n\\n- **Target information in timing tab** - in Bazel 3.4.0, the experimental [flag](https://docs.bazel.build/versions/master/command-line-reference.html#flag--experimental_profile_include_target_label) `--experimental_profile_include_target_label` was introduced which adds target information to profiling events. When this flag is enabled, this target information is now displayed in the BuildBuddy Timing tab.\\n\\n## New to Cloud & Enterprise BuildBuddy\\n\\n- **BuildBuddy Cloud is now free for teams of up to 3** - we want to make BuildBuddy available to every team - regardless of size. BuildBuddy has always been free for individuals and open source projects and today we\'re expanding this to teams of up to 3 engineers. As your team continues to grow, we have reasonably priced plans that scale from startups to the largest enterprises.\\n\\n![](../static/img/blog/pricing.png)\\n\\n- **Distributed scheduler** - the scheduler is a core component of any remote execution platform. In many cases, it is a single point of failure that turns an otherwise robust system into a fragile, stateful service that\'s hard to scale. In BuildBuddy 1.2.1, we rewrote our **distributed** Remote Build Execution scheduler from the ground up based on many learnings and best practices from state-of-the-art systems like Apache Spark. This enables BuildBuddy to scale to handle the largest workloads with no single point of failure, single digit millisecond queue wait times, and fault tolerance that enables execution on preemptible nodes. This allows for more cost effective high availability configurations, and allows you to deploy new BuildBuddy releases without a blip in ongoing executions.\\n\\n- **Remote asset API** - in Bazel 3.0.0 the Remote Asset API was introduced along with the `--experimental_remote_downloader` [flag](https://docs.bazel.build/versions/master/command-line-reference.html#flag--experimental_remote_downloader). In this release, we\'ve added basic support for this experimental API.\\n\\n- **Organization configuration** - we\'ve added configuration options for on-prem installs that allow you to configure an organization\'s name and limit signups to emails from a specific domain. More information in the [org config documentation](https://www.buildbuddy.io/docs/config-org).\\n\\n- **Configurable anonymous access** - we\'ve added a configuration option that allows organizations with authentication configured to choose whether or not anonymous access should be enabled. Anonymous access is off by default when auth is configured. More information in the [auth config documentation](https://www.buildbuddy.io/docs/config-auth).\\n\\n- **S3 cache support** - BuildBuddy [previously](https://github.com/buildbuddy-io/buildbuddy/pull/12) had support for using Amazon S3 as a backing store for build events. In this release, we\'ve added Amazon S3 support for as a backing store for caching as well, with support for streaming, ContainsMulti, and more.\\n\\nThat\'s it for this release. Stay tuned for more updates coming soon!\\n\\nAs always, we love your feedback - join our [Slack channel](https://community.buildbuddy.io) or email us at [hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts."},{"id":"buildbuddy-v1-1-0-release-notes","metadata":{"permalink":"/blog/buildbuddy-v1-1-0-release-notes","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/buildbuddy-v1-1-0-release-notes.md","source":"@site/blog/buildbuddy-v1-1-0-release-notes.md","title":"BuildBuddy v1.1.0 Release Notes","description":"Excited to share that v1.1.0 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open source via Github and Docker!","date":"2020-07-15T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"release-notes","permalink":"/blog/tags/release-notes"}],"readingTime":4.02,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"buildbuddy-v1-1-0-release-notes","title":"BuildBuddy v1.1.0 Release Notes","authors":"siggi","date":"2020-07-15:12:00:00","tags":["product","release-notes"]},"unlisted":false,"prevItem":{"title":"BuildBuddy v1.2.1 Release Notes","permalink":"/blog/buildbuddy-v1-2-1-release-notes"},"nextItem":{"title":"BuildBuddy v1.0.6 Release Notes","permalink":"/blog/buildbuddy-v1-0-6-release-notes"}},"content":"Excited to share that v1.1.0 of BuildBuddy is live on both [Cloud Hosted BuildBuddy](https://app.buildbuddy.io/) and open source via [Github](https://github.com/buildbuddy-io/buildbuddy) and [Docker](https://github.com/buildbuddy-io/buildbuddy/blob/master/SETUP.md#docker-image)!\\n\\nThanks to everyone that has tested open source and cloud-hosted BuildBuddy. We\'ve made lots of improvements in this release based on your feedback.\\n\\nA special thank you to our new contributors:\\n\\n- [Sergio Rodriguez Orellana](https://github.com/SrodriguezO) who contributed support for making dense mode the default view mode.\\n- [Tim Glaser](https://twitter.com/timgl?lang=en) who made some major improvements to our documentation.\\n\\nOur focus for this release was on our new Remote Build Execution platform. This release marks a huge step in fulfilling our mission of making developers more productive by supporting the Bazel ecosystem.\\n\\nBuildBuddy\'s Remote Build Execution platform supports executing your Bazel build and tests in parallel across thousands of machines with automatic scaling, support for custom Docker images, and more.\xa0We\'ve been iterating on and testing BuildBuddy RBE\xa0for months with companies of different sizes, and are excited to now make it available to everyone.\\n\\n\x3c!-- truncate --\x3e\\n\\nWhile BuildBuddy RBE is not yet fully open source, we\'re offering Cloud RBE for free to individuals and open source projects to show our appreciation to the open source community.\\n\\nWe\'ll be adding more documentation on getting started with BuildBuddy RBE\xa0in the coming weeks, but in the meantime feel free to email us at [rbe@buildbuddy.io](mailto:rbe@buildbuddy.io) or ping us in the [BuildBuddy Slack](https://join.slack.com/t/buildbuddy/shared_invite/zt-e0cugoo1-GiHaFuzzOYBPQzl9rkUR_g) and we\'ll be happy to help you get started.\\n\\n## **New to Open Source BuildBuddy**\\n\\n- **Cache & remote execution badges -\xa0**BuildBuddy invocations pages now show badges that indicate whether or not caching and remote execution are enabled. Clicking on these badges takes you to instructions on how to configure these if they\'re enabled for your BuildBuddy instance.\\n\\n![](../static/img/blog/cache-badge.png)\\n\\n- **Remote build execution configuration options** - the BuildBuddy configuration widget has now been updated to enable configuring of remote build execution if it\'s enabled for your BuildBuddy instance.\\n\\n![](../static/img/blog/config-options.png)\\n\\n- **Better build status support** - BuildBuddy now better distinguishes between in-progress, failed, passed, and cancelled builds with new colorful status indicators, favicons, and more.\\n\\n![](../static/img/blog/favicon.png)\\n\\n- **Improved documentation and new website** - we\'ve completely revamped the BuildBuddy documentation, and it\'s now sync\'d between GitHub and [buildbuddy.io/docs/](https://buildbuddy.io/docs/), so your docs will be fresh regardless of where you\'re reading them.\xa0We\'ll be adding new sections on configuring RBE\xa0in the coming weeks. We\'ve also completely revamped the BuildBuddy website to make it easier to navigate and perform actions like requesting a quote.\\n\\n![](../static/img/blog/docs.png)\\n\\n- **Test run grid** - BuildBuddy will now automatically display test runs as a grid when a single test target is run more than 10 times. This supports the use case of finding and fixing flaky tests by running them with **--runs_per_test=100**.\\n\\n![](../static/img/blog/test-runs.png)\\n\\n- **Performance and reliability improvements** - we put a lot of work into improving performance and reliability in this release. This includes changes like better event flushing (no more getting stuck on 15 build events), better shutdown behavior, speed improvements and optimizations in build artifact uploading and downloading, and more.\\n\\n## New to Cloud & Enterprise BuildBuddy\\n\\n- **Remote Build Execution** - BuildBuddy Cloud and enterprise on-prem now support Remote Build Execution. Features include custom Docker image support, automatic scaling, multiple caching layers, and more. Additional features like Mac support, viewing of remote build actions in BuildBuddy, and more are coming soon.\\n\\n![](../static/img/blog/rbe.png)\\n\\n- **Invocation grouping** - BuildBuddy invocations can now be grouped by commit and by repo.\xa0These can be populated in one of three ways:\\n\\n1.  automatically by common CI\xa0environments like CircleCI and GitHub actions\\n2.  manually by using build flags **--build_metadata=REPO_URL=** and **--build_metadata=COMMIT_SHA=**\u200d\\n3.  by using a **--workspace_status_command** script like [this one](https://github.com/buildbuddy-io/buildbuddy/blob/master/workspace_status.sh)\\n\\n![](../static/img/blog/commits.png)\\n\\n- **New cloud endpoint** - BuildBuddy now exposes a L7 load balanced gRPCS cloud endpoint at **cloud.buildbuddy.io** which can be used for BES, cache, and remote execution (see our [.bazelrc](https://github.com/buildbuddy-io/buildbuddy/blob/master/.bazelrc#L25) for an example).\xa0We\'ll gradually be migrating users to this from the old events.buildbuddy.io, and cache.buildbuddy.io endpoints with port numbers.\\n\\n- **Easier enterprise deployment** - deploying enterprise BuildBuddy is now just as easy as deploying open source BuildBuddy, with a one line install script that deploys to your Kubernetes cluster.\xa0It takes your [BuildBuddy configuration file](https://www.buildbuddy.io/docs/config) as a parameter so you can easily configure things to your needs.\\n\\nThat\'s it for this release. Stay tuned for more updates coming soon!\\n\\nAs always, we love your feedback - email us at [hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts."},{"id":"buildbuddy-v1-0-6-release-notes","metadata":{"permalink":"/blog/buildbuddy-v1-0-6-release-notes","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/buildbuddy-v1-0-6-release-notes.md","source":"@site/blog/buildbuddy-v1-0-6-release-notes.md","title":"BuildBuddy v1.0.6 Release Notes","description":"Excited to share that v1.0.6 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open source via Github and Docker!","date":"2020-05-20T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"release-notes","permalink":"/blog/tags/release-notes"}],"readingTime":2.82,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"buildbuddy-v1-0-6-release-notes","title":"BuildBuddy v1.0.6 Release Notes","authors":"siggi","date":"2020-05-20:12:00:00","tags":["product","release-notes"]},"unlisted":false,"prevItem":{"title":"BuildBuddy v1.1.0 Release Notes","permalink":"/blog/buildbuddy-v1-1-0-release-notes"},"nextItem":{"title":"Introducing BuildBuddy Version 1.0","permalink":"/blog/introducing-buildbuddy-v1"}},"content":"Excited to share that v1.0.6 of BuildBuddy is live on both [Cloud Hosted BuildBuddy](https://app.buildbuddy.io/) and open source via [Github](https://github.com/buildbuddy-io/buildbuddy) and [Docker](https://github.com/buildbuddy-io/buildbuddy/blob/master/SETUP.md#docker-image)!\\n\\nThanks to all of you that have been using open source and cloud-hosted BuildBuddy. We\'ve made lots of improvements in this release based on your feedback.\\n\\nA special thank you to our new contributors:\\n\\n- [Roger Hu](https://github.com/rogerhu) who contributed [Amazon S3 storage support](https://github.com/buildbuddy-io/buildbuddy/commit/8ba12398e448b457cdbd1e0c8913e9aba46323cb).\\n- [Andrew Allen](https://github.com/achew22) who [updated BuildBuddy\'s open source repo](https://github.com/buildbuddy-io/buildbuddy/commit/59bee5228c7c3da9d0cdaba934fce2118e7e9adc) to conform to open source golang expectations.\\n\\nOur three major focuses for this release were on a better test results view, certificate based authentication, and our new results-store API.\\n\\nWe also laid a lot of groundwork for remote build execution in this release, which will be available in the coming weeks.\\n\\n\x3c!-- truncate --\x3e\\n\\n## New to Open Source BuildBuddy\\n\\n- **Test results view** - we\'ve added support for parsing test.xml files that are uploaded to a BuildBuddy remote cache. This allows us to show information about individual test cases and quickly surface information on which test cases failed and why.\\n\\n- **Large log file support** - we\'ve improved BuildBuddy\'s log viewer to enable the rendering of 100MB+ log files with full ANSI color support in milliseconds using incremental rendering.\\n\\n- **Timing controls** - BuildBuddy\'s timing tab now has improved controls that enable users to choose grouping and page size options. This allows you to easily see the slowest build phases across threads.\\n\\n- **gRPCS support** - BuildBuddy now supports and defaults to encrypted gRPCS connections to Bazel using TLS. Support includes automatic obtaining of server-side TLS certificates using [ACME](https://en.wikipedia.org/wiki/Automated_Certificate_Management_Environment) and [Let\'s Encrypt](https://letsencrypt.org/). This also includes the ability to connect to remote caches over gRPCS via the bytestream API.\\n- **URL secret redaction** - we\'ve updated our log scrubbing logic to redact any URLs that might contain secrets from uploaded build events.\\n\\nOur open source BuildBuddy distribution is targeted at individuals viewing and debugging their Bazel builds. For teams and organizations, we provide an enterprise version of BuildBuddy that adds support for team-specific features.\\n\\nMany of these Enterprise features are also available for free to individuals via [Cloud Hosted BuildBuddy](https://app.buildbuddy.io/).\\n\\n## New to Cloud & Enterprise BuildBuddy\\n\\n- **Certificate based auth** - authentication between Bazel and BuildBuddy can now be authenticated and encrypted using certificate-based [mTLS](https://en.wikipedia.org/wiki/Mutual_authentication).\\n- **Auth configuration widget** - using BuildBuddy\'s new configuration widget, it\'s easy to setup an auth configuration that makes sense for your team. This includes options to pull credentials into user-specific `.bazelrc` files and download generated auth certificates.\\n\\n- **Build Results API** - many teams want to do more with their build results. With BuildBuddy\'s [Build Results API](https://github.com/buildbuddy-io/buildbuddy/blob/master/proto/api/v1/service.proto) - users have programmatic access to an invocation\'s targets, actions, and build artifacts. This allows teams to build out custom integrations with their existing tooling. If you\'d like access to the API, or have more information you\'d like exposed, email [developers@buildbuddy.io](https://buildbuddy.io/blog/buildbuddy-v1-0-6-release-notes/developers@buildbuddy.io).\\n\\nThat\'s it for this release. Stay tuned for more updates coming soon!\\n\\nAs always, we love your feedback - email us at [hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts."},{"id":"introducing-buildbuddy-v1","metadata":{"permalink":"/blog/introducing-buildbuddy-v1","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/introducing-buildbuddy-v1.md","source":"@site/blog/introducing-buildbuddy-v1.md","title":"Introducing BuildBuddy Version 1.0","description":"We released our initial open source version of BuildBuddy to the Bazel community last month and have received a ton of interest, support, and feedback. We really appreciate everyone who\'s taken the time to kick the tires and try it out!","date":"2020-04-24T12:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/blog/tags/product"},{"inline":true,"label":"release-notes","permalink":"/blog/tags/release-notes"}],"readingTime":3.9,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"introducing-buildbuddy-v1","title":"Introducing BuildBuddy Version 1.0","authors":"siggi","date":"2020-04-24:12:00:00","tags":["product","release-notes"]},"unlisted":false,"prevItem":{"title":"BuildBuddy v1.0.6 Release Notes","permalink":"/blog/buildbuddy-v1-0-6-release-notes"},"nextItem":{"title":"BuildBuddy joins Y Combinator","permalink":"/blog/buildbuddy-joins-y-combinator"}},"content":"We released our initial open source version of BuildBuddy to the Bazel community last month and have received a ton of interest, support, and feedback. We really appreciate everyone who\'s taken the time to kick the tires and try it out!\\n\\nWe\'re excited to share that BuildBuddy has been run on-prem at over 20 companies, and hundreds more developers have tried our cloud-hosted version.\\n\\nPeople have found the shareable invocation links particularly useful when debugging builds remotely with co-workers while working from home. No more pasting console outputs into Pastebin!\\n\\nWe\'ve taken all of the feedback we\'ve gotten and made lots of improvements to both the open source and enterprise versions of BuildBuddy.\\n\\nOur three major focuses for this release were on better build artifact handling, better test support, and enterprise authentication. We hope these changes help you continue to build and debug software faster. Keep the feedback coming!\\n\\n\x3c!-- truncate --\x3e\\n\\n## New to Open Source BuildBuddy\\n\\n- **Remote cache support** - we\'ve added a built-in Bazel remote cache to BuildBuddy, implementing the gRPC remote caching APIs. This allows BuildBuddy to optionally collect build artifacts, timing profile information, test logs, and more.\\n\\n- **Clickable build artifacts** - this was our most requested feature. Clicking on build artifacts in the BuildBuddy UI now downloads the artifact when using either the built-in BuildBuddy cache, or a third-party cache running in gRPC mode that supports the Byte Stream API - like [bazel-remote](https://github.com/buchgr/bazel-remote).\\n\\n- **Detailed timing information** - getting detailed timing information on your Bazel builds can be a hassle. Now BuildBuddy invocations include a new \\"Timing\\" tab - which pulls the Bazel profile logs from your build cache and displays them in a human-readable format. Stay tuned for flame charts!\\n\\n- **Viewable test logs** - digging into test logs for your Bazel runs can be a pain. Now BuildBuddy surfaces test logs directly in the UI when you click on a test target (gRPC remote cache required).\\n\\n- **Multiple test-run support** - one of our favorite features of Bazel is that it will rerun flaky tests for you. BuildBuddy now supports viewing information about multiple attempts of a single test run.\\n\\n- **Client environment variable redaction** - client environment variables are now redacted from BuildBuddy\'s invocation details to avoid over-sharing.\\n\\n- **Dense UI mode** - based on feedback on information density of the default BuildBuddy UI, we added a \\"Dense mode\\" that packs more information into every square inch.\\n\\n- **BES backend multiplexing** - we heard from some of you that you\'d like to try BuildBuddy, but were already pointing your bes_backend flag at another service. We\'ve added the build_event_proxy configuration option that allows you to specify other backends that your build events should be forwarded to. See the [configuration docs](https://github.com/buildbuddy-io/buildbuddy/blob/master/CONFIG.md#buildeventproxy) for more information.\\n\\n- **Slack webhook support** - we\'ve added a configuration option that allows you to message a Slack channel when builds finish. This is a nice way of getting a quick notification when a long running build completes, or a CI build fails. See the [configuration docs](https://github.com/buildbuddy-io/buildbuddy/blob/master/CONFIG.md#integrations) for more information.\\n\\nOur open source BuildBuddy distribution is targeted at individuals viewing and debugging their Bazel builds. For teams and organizations, we provide an enterprise version of BuildBuddy that adds support for team-specific features.\\n\\n## New to Enterprise BuildBuddy\\n\\n- **OpenID Connect auth support** - organizations can now specify an OpenID Connect provider to handle authentication for their BuildBuddy instance. This allows for the flexibility to use Google login if you use GSuite, auth services like Okta, or an in-house solution that supports OpenID Connect.\\n\\n- **Authenticated build log & cache uploads** - BuildBuddy now supports generating authenticated upload URLs for both the build event and remote cache backends. Events uploaded with authentication will be associated with your organization and will not be viewable by unauthorized clients.\\n\\n- **Organization support** - BuildBuddy now supports creating organizations that allow builds to be viewed and aggregated across your team/company.\\n\\n- **Organization build history** - with organization support comes a new view that allows you to see recent builds across your organization.\\n\\n- **User & host overviews** - you can now see all of the users and hosts that have uploaded builds to your organization. This allows you to drill into all of the builds uploaded from a CI machine for example.\\n\\n- **Build grid** - the new build grid gives you a visual overview of the build history for an organization, host, or user. This allows you to quickly find and fix failing builds.\\n\\nThat\'s it for this release. Stay tuned for more updates coming soon!\\n\\nAs always, we love your feedback - email us at [hello@buildbuddy.io](mailto:hello@buildbuddy.io) with any questions, comments, or thoughts."},{"id":"buildbuddy-joins-y-combinator","metadata":{"permalink":"/blog/buildbuddy-joins-y-combinator","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/buildbuddy-joins-y-combinator.md","source":"@site/blog/buildbuddy-joins-y-combinator.md","title":"BuildBuddy joins Y Combinator","description":"If you\'ve hung out around developers for any extended period --- you\'ve probably heard \\"my code is compiling\\" as an excuse from them when they\'re slacking off and browsing Hacker News.","date":"2020-03-16T12:00:00.000Z","tags":[{"inline":true,"label":"company","permalink":"/blog/tags/company"}],"readingTime":1.03,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"buildbuddy-joins-y-combinator","title":"BuildBuddy joins Y Combinator","authors":"siggi","date":"2020-03-16:12:00:00","tags":["company"],"image":"/img/xkcd.png"},"unlisted":false,"prevItem":{"title":"Introducing BuildBuddy Version 1.0","permalink":"/blog/introducing-buildbuddy-v1"},"nextItem":{"title":"Meet BuildBuddy","permalink":"/blog/meet-buildbuddy"}},"content":"If you\'ve hung out around developers for any extended period --- you\'ve probably heard \\"my code is compiling\\" as an excuse from them when they\'re slacking off and browsing Hacker News.\\n\\n<figure className=\\"image\\">\\n  <img src=\\"/img/xkcd.png\\" />\\n  <figcaption>\\"Compiling\\" via <a href=\\"https://xkcd.com/303/\\">XKCD</a></figcaption>\\n</figure>\\n\\nSlow, flaky builds waste hours of developer time --- leading to slow dev refresh cycles and unhappy, unproductive engineers. This is the problem we\'re solving at BuildBuddy.\\n\\n[BuildBuddy](http://buildbuddy.io/) is a managed [Bazel](https://bazel.build/) build system. It brings a Google-style development environment and 10x faster builds to any company.\\n\\nWe\'re excited to share that we\'ve been accepted into [Y Combinator](https://www.ycombinator.com/) and have been participating in their Winter 2020 batch. Here\'s a photo from our first batch dinner where the founders of Airbnb (YC Winter 2009) told us stories about their YC experience:\\n\\n<figure className=\\"image\\">\\n  <img src=\\"/img/yc-dinner.jpg\\" />\\n  <figcaption>Airbnb founders speak at our first batch dinner via <a href=\\"https://twitter.com/gustaf/status/1215039947356270594\\">Gustaf Alstromer</a></figcaption>\\n</figure>\\n\\nWe\'re excited to share more about BuildBuddy in the coming months. If you intrigued and want to learn more - feel free to shoot us an email at [hello@buildbuddy.io](mailto:hello@buildbuddy.io).\\n\\n\x3c!-- truncate --\x3e"},{"id":"meet-buildbuddy","metadata":{"permalink":"/blog/meet-buildbuddy","editUrl":"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/meet-buildbuddy.md","source":"@site/blog/meet-buildbuddy.md","title":"Meet BuildBuddy","description":"BuildBuddy is a managed Bazel build system --- it brings a Google-style development environment to any company in minutes.","date":"2020-03-04T12:00:00.000Z","tags":[{"inline":true,"label":"company","permalink":"/blog/tags/company"},{"inline":true,"label":"product","permalink":"/blog/tags/product"}],"readingTime":1.3,"hasTruncateMarker":true,"authors":[{"name":"Siggi Simonarson","title":"Co-founder @ BuildBuddy","url":"https://www.linkedin.com/in/siggisim/","imageURL":"https://avatars.githubusercontent.com/u/1704556?v=4","key":"siggi","page":null}],"frontMatter":{"slug":"meet-buildbuddy","title":"Meet BuildBuddy","authors":"siggi","date":"2020-03-04:12:00:00","tags":["company","product"]},"unlisted":false,"prevItem":{"title":"BuildBuddy joins Y Combinator","permalink":"/blog/buildbuddy-joins-y-combinator"}},"content":"BuildBuddy is a managed [Bazel](https://bazel.build/) build system --- it brings a Google-style development environment to any company in minutes.\\n\\nThe first product we\'ve built is an [open-core](https://en.wikipedia.org/wiki/Open-core_model) Bazel build log viewer. It consumes the Bazel [build event protocol](https://docs.bazel.build/versions/master/build-event-protocol.html) and makes logs accessible through a user-friendly web UI. If you\'re familiar with [Google\'s Sponge tool](https://mike-bland.com/2012/10/01/tools.html#tap-and-sponge) - it\'s basically an open source version of that. It\'s available in 3 forms:\\n\\n- **Open source** - You can find the core product open source and free to use with an MIT license on [GitHub](https://github.com/buildbuddy-io/buildbuddy).\\n- **Cloud hosted** - We also offer a cloud hosted version of the product at [buildbuddy.io](https://buildbuddy.io/). Plans range from a free version for personal use to an enterprise version suited for companies with complex needs.\\n- **On-prem** - We offer an enterprise version of the product that you can run on-premises or in your own cloud. This version comes with all the bells and whistles - like dashboards, user accounts, and dedicated support.\\n\\nThe Bazel build log viewer is just the start. We\'re working on a [shared build cache](https://docs.bazel.build/versions/master/remote-caching.html), [remote build execution](https://docs.bazel.build/versions/master/remote-execution.html), and more.\\n\\nOur end goal is to take the pain out of managing Bazel, so you can focus on building your product.\\n\\nReach out to us at [hello@buildbuddy.io](mailto:hello@buildbuddy.io) if you\'re interested, we\'d love to chat!\\n\\n\x3c!-- truncate --\x3e"}]}}')}}]);