go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

# Non-Go repos referenced by Go repos
inject_repo(
    go_deps,
    "googleapis",
    "zlib",
)

# Go repos with patches
go_deps.module_override(
    patch_strip = 1,
    patches = [
        "@io_bazel_rules_go//third_party:com_github_gogo_protobuf-gazelle.patch",
    ],
    path = "github.com/gogo/protobuf",
)
go_deps.gazelle_override(
    build_file_generation = "off",
    path = "github.com/gogo/protobuf",
)
go_deps.module_override(
    patch_strip = 1,
    patches = [
        "@buildbuddy//buildpatches:cloudflare_circl.patch",
    ],
    path = "github.com/cloudflare/circl",
)
go_deps.module_override(
    patch_strip = 1,
    patches = [
        "@buildbuddy//buildpatches:vtprotobuf.patch",
    ],
    path = "github.com/planetscale/vtprotobuf",
)
go_deps.module_override(
    patch_strip = 1,
    patches = [
        "@buildbuddy//buildpatches:bzlmod_com_github_awslabs_soci_snapshotter.patch",
    ],
    path = "github.com/awslabs/soci-snapshotter",
)
go_deps.module_override(
    patch_strip = 1,
    patches = ["@@//buildpatches:buildifier.patch"],
    path = "github.com/bazelbuild/buildtools",
)
go_deps.module_override(
    patch_strip = 1,
    patches = ["@@//buildpatches:com_github_bojand_ghz.patch"],
    path = "github.com/bojand/ghz",
)
go_deps.module_override(
    patch_strip = 1,
    patches = [
        "@@//buildpatches:com_github_firecracker_microvm_firecracker_go_sdk_jailer.patch",
        "@@//buildpatches:com_github_firecracker_microvm_firecracker_go_sdk_cgroup.patch",
    ],
    path = "github.com/firecracker-microvm/firecracker-go-sdk",
)
go_deps.module_override(
    patch_strip = 1,
    patches = ["@@//buildpatches:com_github_mattn_go_sqlite3.patch"],
    path = "github.com/mattn/go-sqlite3",
)
go_deps.module_override(
    patch_strip = 1,
    patches = [
        # Remove panic() from serverHandlerTransport.Drain
        # gRPC GracefulStop stops accepting new requests and lets any existing
        # requests finish. For "grpc-over-http" requests, gRPC does not control
        # the connection lifetime so they choose to panic in Drain if there are
        # inflight "grpc-over-http" requests. Since we also shutdown the HTTP
        # server gracefully, it's safe for us to allow gRPC to wait for all
        # ongoing requests to finish.
        "@@//buildpatches:org_golang_google_grpc_remove_drain_panic.patch",
    ],
    path = "google.golang.org/grpc",
)
go_deps.module_override(
    patch_strip = 1,
    patches = [
        "@@//buildpatches:io_kythe.patch",
    ],
    path = "kythe.io",
)
go_deps.module_override(
    patches = [
        "@@//buildpatches:com_github_containerd_containerd_api.patch",
    ],
    path = "github.com/containerd/containerd/api",
)
go_deps.module_override(
    patches = [
        "@@//buildpatches:com_github_containerd_ttrpc.patch",
    ],
    path = "github.com/containerd/ttrpc",
)

# Go repos with custom directives
go_deps.gazelle_override(
    directives = ["gazelle:proto disable"],
    path = "k8s.io/kubelet",
)
go_deps.gazelle_override(
    directives = ["gazelle:proto disable"],
    path = "google.golang.org/protobuf",
)
go_deps.gazelle_override(
    directives = ["gazelle:go_grpc_compilers @io_bazel_rules_go//proto:go_proto,@io_bazel_rules_go//proto:go_grpc_v2"],
    path = "github.com/awslabs/soci-snapshotter",
)
go_deps.gazelle_override(
    directives = ["gazelle:proto disable"],
    path = "github.com/cockroachdb/errors",
)
go_deps.gazelle_override(
    directives = [
        "gazelle:resolve go github.com/jhump/protoreflect/internal/testprotos @com_github_jhump_protoreflect//internal/testprotos",
        "gazelle:proto disable",
    ],
    path = "github.com/jhump/protoreflect",
)
go_deps.gazelle_override(
    directives = ["gazelle:resolve go cel.dev/expr @dev_cel_expr//proto/cel/expr:expr_go_proto"],
    path = "github.com/cncf/xds/go",
)
go_deps.gazelle_override(
    directives = [
        "gazelle:proto file",
        "gazelle:proto_import_prefix github.com/containerd/containerd/api",
        "gazelle:resolve proto go github.com/containerd/containerd/api/types //types:types",
        "gazelle:resolve go github.com/containerd/containerd/api/types/descriptor //types:types",
        "gazelle:resolve go github.com/containerd/containerd/api/types/fieldpath //types:types",
        "gazelle:resolve go github.com/containerd/containerd/api/types/metrics //types:types",
        "gazelle:resolve go github.com/containerd/containerd/api/types/mount //types:types",
        "gazelle:resolve go github.com/containerd/containerd/api/types/platform //types:types",
        "gazelle:resolve go github.com/containerd/containerd/api/types/sandbox //types:types",
        "gazelle:resolve go github.com/containerd/containerd/api/types/task //types/task:task",
        "gazelle:resolve proto google/rpc/status.proto @googleapis//google/rpc:status_proto",
        "gazelle:resolve proto go google/rpc/status.proto @org_golang_google_genproto_googleapis_rpc//status",
    ],
    path = "github.com/containerd/containerd/api",
)
go_deps.gazelle_override(
    directives = [
        "gazelle:proto file",
        "gazelle:resolve proto proto/status.proto @googleapis//google/rpc:status_proto",
        "gazelle:resolve proto go proto/status.proto @org_golang_google_genproto_googleapis_rpc//status",
    ],
    path = "github.com/containerd/ttrpc",
)
go_deps.gazelle_override(
    # Force a Gazelle run to ensure build targets in Bazelisk follow
    # Gazelle naming conventions.
    build_file_generation = "on",
    path = "github.com/bazelbuild/bazelisk",
)
go_deps.gazelle_override(
    # Force Gazelle to wipe out the existing build files before regenerate them.
    build_file_generation = "clean",
    directives = [
        "gazelle:proto file",
        "gazelle:proto_strip_import_prefix /proto/cel/expr",
        "gazelle:proto_import_prefix cel/expr",
        "gazelle:resolve proto google/rpc/status.proto @googleapis//google/rpc:status_proto",
        "gazelle:resolve proto go google/rpc/status.proto @org_golang_google_genproto_googleapis_rpc//status",
    ],
    path = "cel.dev/expr",
)
go_deps.gazelle_override(
    directives = [
        "gazelle:resolve go github.com/prometheus/client_model/go @@//proto:prometheus_client_go_proto",
    ],
    path = "github.com/prometheus/client_golang",
)
go_deps.gazelle_override(
    directives = [
        "gazelle:resolve go github.com/prometheus/client_model/go @@//proto:prometheus_client_go_proto",
    ],
    path = "github.com/prometheus/common",
)
use_repo(
    go_deps,
    "co_honnef_go_tools",
    "com_github_alecaivazis_survey_v2",
    "com_github_armon_circbuf",
    "com_github_aws_aws_sdk_go",
    "com_github_aws_aws_sdk_go_v2",
    "com_github_aws_aws_sdk_go_v2_config",
    "com_github_aws_aws_sdk_go_v2_credentials",
    "com_github_aws_aws_sdk_go_v2_feature_rds_auth",
    "com_github_aws_aws_sdk_go_v2_feature_s3_manager",
    "com_github_aws_aws_sdk_go_v2_service_s3",
    "com_github_aws_aws_sdk_go_v2_service_sts",
    "com_github_aws_smithy_go",
    "com_github_awslabs_soci_snapshotter",
    "com_github_azure_azure_storage_blob_go",
    "com_github_bazelbuild_bazelisk",
    "com_github_bazelbuild_buildtools",
    "com_github_bduffany_godemon",
    "com_github_bits_and_blooms_bloom_v3",
    "com_github_bojand_ghz",
    "com_github_bradfitz_gomemcache",
    "com_github_buildbuddy_io_tensorflow_proto",
    "com_github_buildkite_terminal_to_html_v3",
    "com_github_cavaliergopher_cpio",
    "com_github_cespare_xxhash_v2",
    "com_github_clickhouse_clickhouse_go_v2",
    "com_github_cockroachdb_pebble",
    "com_github_containerd_containerd",
    "com_github_coreos_go_oidc_v3",
    "com_github_creack_pty",
    "com_github_crewjam_saml",
    "com_github_docker_distribution",
    "com_github_docker_docker",
    "com_github_docker_go_units",
    "com_github_dop251_goja",
    "com_github_elastic_gosigar",
    "com_github_firecracker_microvm_firecracker_go_sdk",
    "com_github_gabriel_vasile_mimetype",
    "com_github_go_enry_go_enry_v2",
    "com_github_go_faker_faker_v4",
    "com_github_go_git_go_git_v5",
    "com_github_go_redis_redis_extra_redisotel_v8",
    "com_github_go_redis_redis_v8",
    "com_github_go_sql_driver_mysql",
    "com_github_gobwas_glob",
    "com_github_golang_jwt_jwt_v4",
    "com_github_google_go_cmp",
    "com_github_google_go_containerregistry",
    "com_github_google_go_github_v59",
    "com_github_google_shlex",
    "com_github_google_uuid",
    "com_github_googlecloudplatform_cloudsql_proxy",
    "com_github_gorilla_mux",
    "com_github_groob_plist",
    "com_github_grpc_ecosystem_go_grpc_middleware_providers_prometheus",
    "com_github_hanwen_go_fuse_v2",
    "com_github_hashicorp_golang_lru",
    "com_github_hashicorp_memberlist",
    "com_github_hashicorp_serf",
    "com_github_jackc_pgerrcode",
    "com_github_jackc_pgx_v5",
    "com_github_jhump_protoreflect",
    "com_github_jonboulle_clockwork",
    "com_github_jotfs_fastcdc_go",
    "com_github_jsimonetti_rtnetlink",
    "com_github_klauspost_compress",
    "com_github_klauspost_cpuid_v2",
    "com_github_lestrrat_go_jwx",
    "com_github_lni_dragonboat_v4",
    "com_github_lni_goutils",
    "com_github_logrusorgru_aurora",
    "com_github_manifoldco_promptui",
    "com_github_masterminds_semver_v3",
    "com_github_mattn_go_isatty",
    "com_github_mattn_go_shellwords",
    "com_github_mattn_go_sqlite3",
    "com_github_mdlayher_vsock",
    "com_github_mitchellh_go_ps",
    "com_github_mwitkow_grpc_proxy",
    "com_github_nishanths_exhaustive",
    "com_github_open_feature_go_sdk",
    "com_github_open_feature_go_sdk_contrib_providers_flagd",
    "com_github_opencontainers_go_digest",
    "com_github_opencontainers_image_spec",
    "com_github_opencontainers_runtime_spec",
    "com_github_otiai10_copy",
    "com_github_pkg_errors",
    "com_github_planetscale_vtprotobuf",
    "com_github_pmezard_go_difflib",
    "com_github_prometheus_client_golang",
    "com_github_prometheus_client_model",
    "com_github_prometheus_common",
    "com_github_prometheus_procfs",
    "com_github_rantav_go_grpc_channelz",
    "com_github_roaringbitmap_roaring",
    "com_github_rs_zerolog",
    "com_github_shirou_gopsutil_v3",
    "com_github_shurcool_githubv4",
    "com_github_sirupsen_logrus",
    "com_github_smacker_go_tree_sitter",
    "com_github_stretchr_testify",
    "com_github_tebeka_selenium",
    "com_github_throttled_throttled_v2",
    "com_github_tink_crypto_tink_go_awskms_v2",
    "com_github_tink_crypto_tink_go_gcpkms_v2",
    "com_github_tink_crypto_tink_go_v2",
    "com_github_tklauser_go_sysconf",
    "com_github_victoriametrics_metrics",
    "com_github_vishvananda_netlink",
    "com_github_xiam_s_expr",
    "com_github_zeebo_blake3",
    "com_gitlab_arm_research_smarter_smarter_device_manager",
    "com_google_cloud_go_compute",
    "com_google_cloud_go_compute_metadata",
    "com_google_cloud_go_logging",
    "com_google_cloud_go_longrunning",
    "com_google_cloud_go_secretmanager",
    "com_google_cloud_go_storage",
    "in_gopkg_yaml_v2",
    "in_gopkg_yaml_v3",
    "io_gorm_driver_clickhouse",
    "io_gorm_driver_mysql",
    "io_gorm_driver_postgres",
    "io_gorm_driver_sqlite",
    "io_gorm_gorm",
    "io_kythe",
    "io_opentelemetry_go_contrib_detectors_gcp",
    "io_opentelemetry_go_contrib_instrumentation_google_golang_org_grpc_otelgrpc",
    "io_opentelemetry_go_contrib_instrumentation_net_http_otelhttp",
    "io_opentelemetry_go_otel",
    "io_opentelemetry_go_otel_exporters_jaeger",
    "io_opentelemetry_go_otel_metric",
    "io_opentelemetry_go_otel_sdk",
    "io_opentelemetry_go_otel_trace",
    "org_golang_google_api",
    "org_golang_google_genproto",
    "org_golang_google_genproto_googleapis_api",
    "org_golang_google_genproto_googleapis_bytestream",
    "org_golang_google_genproto_googleapis_rpc",
    "org_golang_google_grpc",
    "org_golang_google_protobuf",
    "org_golang_x_crypto",
    "org_golang_x_exp",
    "org_golang_x_mod",
    "org_golang_x_net",
    "org_golang_x_oauth2",
    "org_golang_x_sync",
    "org_golang_x_sys",
    "org_golang_x_text",
    "org_golang_x_time",
    "org_golang_x_tools",
    "org_uber_go_atomic",
)

inject_repo(
    go_deps,
    # Bazelisk depends on aspect_rules_js
    "aspect_rules_js",
)
